                //*                       ***                          Brasil Play Online          ****************************************************
                //*                       ***                          Brasil Play Online          *                        JXM                       *
                //*                       ***                          Brasil Play Online          ****************************************************

#include	< a_samp >
#include	<a_http>

#if	defined	MAX_PLAYERS
#undef		MAX_PLAYERS
#define 	MAX_PLAYERS 101
#endif

#include 	< streamer >
#include 	< foreach >
#include 	< dini >
#include 	< mSelection >

#define 	GivePlayerCash(%0,%1) SetPVarInt(%0,"Money",GetPlayerCash(%0)+%1),GivePlayerMoney(%0,%1)
#define 	ResetPlayerCash(%0) SetPVarInt(%0,"Money",0),ResetPlayerMoney(%0)
#define 	GetPlayerCash(%0) GetPVarInt(%0,"Money")

#define 	SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define 	StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define 	IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)

#define 	MensagemFormatada(%1,%2,%3,%4) do{format(gstring,sizeof(gstring),%3,%4 );SendClientMessage(%1,%2,gstring );}while(IsPlayerConnected(-1))
#define 	MensagemFormatadaAll(%1,%2,%3) do{format(gstring,sizeof(gstring),%2,%3 );SendClientMessageToAll(%1,gstring );}while(IsPlayerConnected(-1))

#define Kick(%0) SetTimerEx("Kicka", 100, false, "i", %0)
#define Ban(%0) SetTimerEx("Bana", 100, false, "i", %0)

#define 	MES_LIMITE (12)
#define 	ANO_LIMITE (2022)

#define 	PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define 	RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define 	ARMEDBODY_USE_HEAVY_WEAPON	(false)

#define		ACTION			( 2 )	/*	0 = BANIR | 1 = KICKAR | 2 = RETIRAR ARMA	*/
#define 	RC_BANDIT    	441
#define 	RC_BARON  		464
#define 	RC_GOBLIN  		501
#define 	RC_RAIDER  		465
#define 	D_TRAM   		449
#define 	RC_MINITANK   	564
#define 	RC_CAM   		594
//	   |_-»			Dialogs		«-_|
#define     D_LOGIN			0
#define     D_REGISTRO		1
#define     D_SEXO          2
#define     D_SPAWN         3
#define     D_CARGA         4
#define		D_iCASA         5
#define     D_vINDEX        6
#define		D_vCARROS       7
#define		D_vMOTOS        8
#define		D_vLISTA1   	9 	// A - B
#define 	D_vLISTA2   	10 	// B
#define 	D_vLISTA3   	11 	// C -
#define 	D_vLISTA4   	12 	// F - H
#define 	D_vLISTA5   	13 	// I - M
#define 	D_vLISTA6   	14 	// N - P
#define 	D_vLISTA7   	15 	// R - S
#define 	D_vLISTA8   	16 	// S
#define 	D_vLISTA9   	17 	// T - Z
//#define          18
#define		D_CONTABANCO    19
#define 	D_LOGINBANCO    20
#define 	D_SENHABANCO    21
#define 	D_SENHABANCO2   22
#define 	D_iBANCO        23
#define 	D_TRANSACAO     24
#define 	D_DEPOSITO      25
#define 	D_SAQUE         26
#define     D_SALDO         27
#define     D_DEPOSITOU     28
#define     D_SACOU		    29
#define 	D_EMPRINFO      30
#define     D_TUTO          31
#define     D_TUTO1         32
#define     D_TUTO2         33
#define     D_TUTO3         34
#define     D_TUTO4         35
#define     D_TUTO5         36
#define     D_TUTO6         37
#define     D_TUTO7         38
#define     D_TUTO8         39
#define     D_TUTO9         40
#define     D_TUTO10      	41
#define     D_TUTO11        42
#define     D_TUTO12        43
#define     D_TUTO13        44
#define     D_TUTO14        45
#define     D_TUTO15        46
/*#define     D_LJSKIN        47
#define     D_EPSKIN        48
#define     D_CPSKIN        49
#define     D_VOSKIN        50*/
#define     D_PROFS   		51
#define     D_TRANS         52
#define     D_TRANP         53
#define     D_PARTI         54
#define     D_POLIC         55
#define     D_GOVER         56
#define     D_CRIME         57
#define     D_OUTRA         58
#define     D_OUTR2         59
#define     D_ISPAW         60
#define     D_LUTAS         61
#define		D_AUTOE         62
#define		D_UTILI         63
#define		D_GPSL1         64
#define		D_HOSPI         65
#define		D_TEMPO         66
#define		D_FAVEL         67
#define		D_HTDOG         68
#define		D_SORVE         69
//#define		D_ALGOD         70
#define		D_NEON_         71
#define		D_ITEN1         72
#define		D_ITEN2         73
#define		D_ITEN3         74
#define		D_ITEN4         75
#define		D_DROGA         76
#define		D_SPORG         78
#define		D_BALAO         79
#define		D_BALA2         80
#define		D_BALA3         81
#define		D_BALA4         82
#define		D_SUSPE         83
#define		D_NITRO         84
#define		D_RODAS         85
#define		D_PAINT         86
#define		D_TUNIN         87
#define		D_GASOL         887
#define		D_PCHAVE        89
#define     D_PCHAVL        90
#define     D_PESCAD        92
#define     D_JIMCAR        93
#define     D_PARMA         324
#define		D_GPSLS         454
#define		D_GPSSF         455
#define		D_GPSLV         456
#define		D_CELLL         1201
#define     D_AJUDA         9854
//	   |_-»			Cores		«-_|  // http://gtasaobjects.blogspot.com/p/gta-samp-rgb-colors-list.html
#define     COLOR_CEU 				0x0065FDFF
#define		COLOR_ERRO				0xFF0000AA
#define     COLOR_AZULESCURO		0x000099AA
#define     COLOR_AZUL				0x0000FFAA
#define     COLOR_AZULCLARO     	0x0099FFAA
#define     COLOR_AZULBEBE      	0x00CCFFAA
#define     COLOR_AZULAGUA      	0x00FFFFAA
#define     COLOR_VERDEESCURO   	0x006633AA
#define     COLOR_VERDE             0x009933AA
#define     COLOR_VERDECLARO        0x00FF66AA
#define     COLOR_VERDELIMAO        0x00FF33AA
#define     COLOR_VERDEAGUA         0x00FF99AA
#define     COLOR_ROXOESCURO        0x330033AA
#define     COLOR_ROXO              0x330066AA
#define     COLOR_ROXOCLARO         0x333366AA
#define     COLOR_ROXOAGUA          0x6600CCAA
#define     COLOR_ROXOFRACO         0x6666CCAA
#define     COLOR_VERMELHOESCURO    0xCC0000AA
#define     COLOR_VERMELHOCLARO     0xFF0033AA
#define     COLOR_VERMELHOAGUA      0xFF3333AA
#define     COLOR_LARANJAESCURO     0xFF3300AA
#define     COLOR_LARANJA           0xFF6600AA
#define     COLOR_LARANJAAGUA       0xFF6633AA
#define     COLOR_ROSAESCURO        0xFF0066AA
#define     COLOR_ROSA              0xFF0099AA
#define     COLOR_ROSACLARO         0xFF33FFAA
#define     COLOR_ROSAAGUA          0xFF66FFAA
#define     COLOR_AMARELOESCURO     0xFFCC00AA
#define     COLOR_AMARELO           0xFFFF00AA
#define     COLOR_AMARELOCLARO      0xFAF65DFF
#define     COLOR_AMARELOAGUA       0xFFFF99AA
#define     COLOR_BRANCO            0xFFFFFFFF
#define     COLOR_CINZAESCURO       0x333333AA
#define     COLOR_CINZA             0x6E6E6EFF
#define     COLOR_CINZACLARO        0xB4B4B4FF
#define     COLOR_SISTEMA           0xA9C4E4FF
#define     COLOR_MUSGO             0x698B22AA
#define     COLOR_MARROMCLARO 		0xBDB76BAA
#define     COLOR_VERDEFRACO        0xC1FFC1FF
#define     COLOR_TUNING            0x22C579FF
//	   |_-»			Cores das Profs		«-_|
#define     COLOR_DESEMPREGADO      0xFFE2C2FF
#define     COLOR_MOTORISTABUS      0xFC4C47FF
#define     COLOR_TAXISTA           0xD5D500AA
#define     COLOR_TAXIAEREO         0x00B3B3AA
#define     COLOR_MOTOTAXI          0x009B00AA
#define     COLOR_CAMINHONEIRO      0xFFFFFFAA
#define     COLOR_MAQUINISTA        0x00EA75AA
#define     COLOR_PILOTO            0xFF6633AA
#define     COLOR_MOTOBOY           0xDAE8CEFF
#define     COLOR_PEDREIRO          0x0080FFFF
#define     COLOR_SEGPART           0x81C4FFFF
#define     COLOR_MOTPART           0x444CF4FF
#define     COLOR_GUARDTRANS        0xF4680EFF
#define     COLOR_POLCIVIL          0xAFED30FF
#define     COLOR_POLMILITAR        0x006AD5AA
#define     COLOR_MARINHA           0x00CCFFAA
#define     COLOR_DELEGADO          0x8080FFAA
#define     COLOR_BOPE              0x6600CCAA
#define     COLOR_POLRODOVIARIA     0x6E6E6EFF
#define     COLOR_JUIZ              0x584674FF
#define     COLOR_TRAFDROGAS        0xD8A100FF
#define     COLOR_TRAFARMAS         0xBA3500FF
#define     COLOR_ASSASSINO         0xEE6421FF
#define     COLOR_ATIRADOR       	0x600A17FF
#define     COLOR_TERRORISTA        0xFF0000FF
#define     COLOR_CHEFEMAFIA        0x01DFA2FF
#define     COLOR_SEGILHA           0x80FF00AA
#define     COLOR_PORILHA           0x53A600AA
#define     COLOR_PIZZABOY          0x99FFCCAA
#define     COLOR_HOTDOG            0x330066AA
#define     COLOR_SORVETEIRO        0x03F2FFFF
#define     COLOR_FOTOGRAFO         0xA68082FF
#define     COLOR_REPORTER          0x972C82FF
#define		COLOR_DRIFTER			0x4B766EFF
#define     COLOR_DEPUTADO          0xD688A5FF
#define     COLOR_PREFEITO          0x5959ACAA
#define     COLOR_PRESIDENTE        0x00FF40AA
#define     COLOR_EXERCITO          0x008080FF
#define     COLOR_INSTRUTOR         0x313131AA
#define 	COLOR_MECANICO			0x657DDFFF
#define     COLOR_PESCADOR          0x336699AA
#define     COLOR_CACADOR           0x627A00FF
#define     COLOR_MEDICO            0xDF0070AA
#define     COLOR_ADVOGADO          0x182C66FF
#define     COLOR_VENDEDORSKINS     0xB9B973AA
#define     COLOR_FRENTISTA         0xC9A000FF
#define     COLOR_PADRE             0xB64B7FFF
#define     COLOR_PROSTITUTA        0xFF6AFFAA
#define     COLOR_SEGVILA           0x808080AA
#define     COLOR_PORVILA           0x97B7A6AA
#define     COLOR_AVIAOZINHO		0xE7B8F2AA
#define     COLOR_BOMBEIRO			0xFA8072AA
#define     COLOR_LIXEIRO			0x804040FF
#define     COLOR_MCF				0x0000FFFF
//	   |_-»			Profissoes		«-_|
#define     DESEMPREGADO            0 // 		 	- SP Feito
#define     MOTORISTA_ONIBUS        1 //	 		- SP Feito
#define     TAXISTA                 2 // 	  		- SP Feito
#define     MOTO_TAXISTA            3 // 		 	- SP Feito
#define     TAXI_AEREO              4 // 		 	- SP Feito
#define     CAMINHONEIRO            5 //			- SP Feito
#define     MAQUINISTA              6 //  			- SP Feito
#define     MOTOBOY                 7 //  			- SP Feito
#define     SEGURANCA_PART          8 //  			- SP Feito
#define     MOTORISTA_PART          9 //  			- SP Feito
#define     GUARDA_TRANSITO         10 //  			- SP Feito
#define     POL_CIVIL               11 //  			- SP Feito
#define     POL_MILITAR             12 //  			- SP Feito
#define     DELEGADO                13 //  			- SP Feito
#define     BOPE                    14 //  			- SP Feito
#define     JUIZ                    15 //  			- SP Feito
#define     TRAF_DROGAS             16 // 		 	- SP Feito
#define     TRAF_ARMAS              17 // 		 	- SP Feito
#define     ASSASSINO               18 // 		 	- SP Feito
#define     ATIRADOR                19 // 		 	- SP Feito
#define     TERRORISTA				20 // 		 	- SP Feito
#define     CHEFE_MAFIA             21 // 		 	- SP Feito
#define     SEG_ILHA                22 // 		 	- SP Feito
#define     PORT_ILHA               23 // 		 	- SP Feito
#define     PIZZABOY                24 // 		 	- SP Feito
#define     FOTOGRAFO               25 // 		 	- SP Feito
#define     REPORTER                26 // 		 	- SP Feito
#define     DRIFTER					27 //			- SP Feito
#define     DEPUTADO				28 //  			- SP Feito
#define     PREFEITO                29 //  			- SP Feito
#define     PRESIDENTE              30 //  			- SP Feito
#define     EXERCITO		        31 // 		 	- SP Feito
#define     INSTRUTOR             	32 // 		 	- SP Feito
#define     MECANICO                33 // 		 	- SP Feito
#define     PESCADOR             	34 //  			- SP Feito
#define     CACADOR					35 //  			- SP Feito
#define     MEDICO     				36 // 		 	- SP Feito
#define     ADVOGADO                37 // 		 	- SP Feito
#define     VENDEDOR_SKINS          38 //  			- SP Feito
#define     FRENTISTA               39 // 		 	- SP Feito
#define     PADRE                   40 // 		 	- SP Feito
#define     PROSTITUTA              41 //  			- SP Feito
#define     SEG_VILA                42 //  			- SP Feito
#define     PORT_VILA               43 //  			- SP Feito
#define     AVIAOZINHO        		44 //  			- SP Feito
#define     BOMBEIRO        		45 //  			- SP Feito
#define     LIXEIRO        			46 //  			- SP Feito
#define     M_CARRO_FORTE       	47 //  			- SP Feito
#define   	ENTREGADOR_SEDEX	   	48 //  			- SP Feito
#define     PEDREIRO                49 //           - SP Feito
#define     POL_RODOVIARIA          50 //           - SP Feito
#define     HOTDOG                  51 // 		 	- SP Feito
#define     SORVETEIRO              52 // 		 	- SP Feito
#define     PILOTO                  53 // 		 	- SP Feito
#define     MARINHA                 54 // 		 	- SP Feito
//	   |_-»	   ESPIAR 		«-_|
#define 	ADMIN_SPEC_TYPE_NONE 	0
#define 	ADMIN_SPEC_TYPE_PLAYER	1
//	   |_-»	   Preço veículos 		«-_|
#define 	PRECO_ADMIRAL 			30000
#define 	PRECO_ALPHA 			40000
#define 	PRECO_BANSHEE 			60000
#define 	PRECO_BANDITO 			50000
#define 	PRECO_BF_INJECTION 		15000
#define 	PRECO_BLADE 			60000
#define 	PRECO_BLISTA_COMPACT 	15000
#define 	PRECO_BLOODRING_BANGER 	45000
#define 	PRECO_BOBCAT 			32000
#define 	PRECO_BOXVILLE 			26000
#define 	PRECO_BRAVURA 			33000
#define 	PRECO_BROADWAY 			44000
#define 	PRECO_BUCCANEER 		40000
#define 	PRECO_BUFFALO 			75000
#define 	PRECO_PERENNIEL         19000
#define 	PRECO_BULLET	 		80000
#define 	PRECO_BURRITO 			48000
#define 	PRECO_CAMPER 			28000
#define 	PRECO_CHEETAH 			95000
#define 	PRECO_CLOVER 			25000
#define 	PRECO_CLUB 				47000
#define 	PRECO_COMET 			18000
#define 	PRECO_ELEGANT 			49000
#define 	PRECO_ELEGY 			78000
#define 	PRECO_EMPEROR 			55000
#define 	PRECO_ESPERANTO 		22000
#define 	PRECO_EUROS 			64000
#define 	PRECO_FELTZER 			23000
#define 	PRECO_FLASH 			62000
#define 	PRECO_GLENDALE 			26000
#define 	PRECO_GREENWOOD 		20000
#define 	PRECO_HERMES 			41000
#define 	PRECO_HOTKNIFE 			66000
#define 	PRECO_HOTRING 			90000
#define 	PRECO_HUNTLEY 			65000
#define 	PRECO_HUSTLER 			59000
#define 	PRECO_INFERNUS 			90000
#define 	PRECO_JESTER 			72000
#define 	PRECO_KART 				14000
#define 	PRECO_LANDSTALKER 		65000
#define 	PRECO_MAJESTIC 			17000
#define 	PRECO_MESA 				56000
#define 	PRECO_MOONBEAM 			51000
#define 	PRECO_PERENNIEL 		19000
#define 	PRECO_PHOENIX 			83000
#define 	PRECO_PICADOR 			21000
#define 	PRECO_RANCHER 			84000
#define 	PRECO_REMINGTON 		57000
#define 	PRECO_SABRE 			22000
#define 	PRECO_SADLER 			14000
#define 	PRECO_SANDKING 			80000
#define 	PRECO_SAVANNA 			19000
#define 	PRECO_SLAMVAM 			25000
#define 	PRECO_STAFFORD 			45000
#define 	PRECO_STRATUM 			56000
#define 	PRECO_STRETCH 			70000
#define 	PRECO_SULTAN 			64000
#define 	PRECO_SUNRISE 			51000
#define 	PRECO_SUPER_GT 			80000
#define 	PRECO_TORNADO 			33000
#define 	PRECO_TURISMO 			95000
#define 	PRECO_URANOS 			57000
#define 	PRECO_VINCENT 			42000
#define 	PRECO_VIRGO 			22000
#define 	PRECO_VOODOO 			23000
#define 	PRECO_WALTON 			10000
#define 	PRECO_WASHINGTON 		29000
#define 	PRECO_WILLARD 			37000
#define 	PRECO_YOSEMITE 			77000
#define 	PRECO_ZR_350 			85000
#define 	PRECO_BF_400 			20000
#define 	PRECO_BIKE 				1000
#define 	PRECO_BMX 				1000
#define 	PRECO_FAGGIO 			5000
#define 	PRECO_FCR_900 			40000
#define 	PRECO_FREEWAY 			60000
#define 	PRECO_NRG_500 			45000
#define 	PRECO_PCJ_600 			30000
#define 	PRECO_QUAD 				15000
#define 	PRECO_SANCHEZ 			10000
#define 	PRECO_WAYFARER 			15000
#define 	PRECO_URANUS 			57000

// Lojas de Roupas
new
	skins_binco = mS_INVALID_LISTID,
	skins_didiersachs = mS_INVALID_LISTID,
	skins_prolaps = mS_INVALID_LISTID,
	skins_suburban = mS_INVALID_LISTID,
	skins_victim = mS_INVALID_LISTID,
	skins_zip = mS_INVALID_LISTID,
	skins_vip = mS_INVALID_LISTID;

// Gangue Zones // GZ
#define TEMPO_DOMINAR   120
#define MINIMO_D_MEMBROS    3

new	gstring[ 256 ];

new Consertou[MAX_PLAYERS];

new d_o_n_o, a_d_m, m_d_r, a_j_d;

new
	PlayerText:TGangueZone[ MAX_PLAYERS ],
	in_z[ MAX_PLAYERS ],
	gzfo[ 128 ]
;

enum eZone
{
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY,
    zCor[ 2 ],
    zClan[ 64 ],
    aClan[ 64 ]
}

new
	ZoneInfo[ ][ eZone ] =
{
	{ 1879.867431, -1253.028564, 2047.867431, -1157.028564 },
    { 357.356719, -2088.112060, 397.356719, -2024.112060 },
    { 889.789489, -1127.255615, 953.789489, -1063.255615 },
    { 679.580200, -958.528198, 727.580200, -894.528198 }

};

new
	ZoneNome[ 4 ][ 64 ] =
{
	{ "Glen Park" },
    { "Parque de Diversoes" },
    { "Cemiterio" },
    { "Morro de Vinewood" }
};

new
	ZoneID[ sizeof( ZoneInfo ) ],
	ZonaAtacada[ sizeof( ZoneInfo ) ] = { -1, ... },
	ZoneAttackTempo[ sizeof( ZoneInfo ) ];
// Fim vars GZ

new viewMM[ MAX_PLAYERS ];

new PlayerText:_ACEITAR[ MAX_PLAYERS ];
new PlayerText:_ICONE[ MAX_PLAYERS ];
new PlayerText:_INFO[ MAX_PLAYERS ];
new PlayerText:_MSGFORM[ MAX_PLAYERS ];
new PlayerText:_RECUSAR[ MAX_PLAYERS ];
new PlayerText:_MSGTEMPO[ MAX_PLAYERS ];

new bool:give[ MAX_PLAYERS ];
new timerarms[ MAX_PLAYERS ] = -1;
new temptemp_[ MAX_PLAYERS ] = -1;
new preccArma[ MAX_PLAYERS ] = -1;
new trafcArma[ MAX_PLAYERS ] = -1;
new armaEscol[ MAX_PLAYERS ] = -1;
new compraArm[ MAX_PLAYERS ] = -1;

new pHospital[ MAX_PLAYERS ];
new PlayerText:CityPlayer[ MAX_PLAYERS ];
new PlayerText:LocalPlayer[ MAX_PLAYERS ];
new TextLocal[ MAX_PLAYERS ][ 4 ];

enum CidadesSanAndreas
{
	cidadeNome[ 28 ],
	Float:cidadeArea[ 6 ]
};

static const SanAndreasCidades[ ][ CidadesSanAndreas ] =
{
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

stock GetPlayerCidade( playerid, zone[], len )
{
	new
	    Float:plx, Float:ply, Float:plz
	;
	GetPlayerPos( playerid, plx, ply, plz );
 	for( new i = 0; i != sizeof( SanAndreasCidades ); i++ )
	{
		if( plx >= SanAndreasCidades[ i ][ cidadeArea ][0] && plx <= SanAndreasCidades[ i ][ cidadeArea ][3] && ply >= SanAndreasCidades[ i ][ cidadeArea ][ 1 ] && ply <= SanAndreasCidades[ i ][ cidadeArea ][ 4 ] )
		{
			return format( zone, len, SanAndreasCidades[ i ][ cidadeNome ], 0 );
		}
	}
	return 0;
}

new Text:statsShop;
new stats_Shop;

#define Labels
#define LoseHealth

#define Holding_Segurando(%0) \
	((newkeys & (%0)) == (%0))

#define MaxFire 350

new
    FireObj[MaxFire],
    Float:FirePos[MaxFire][3],
	FireHealth[MaxFire],
	FireHealthMax[MaxFire],
	FireCreated[MaxFire],
	FirePlayer[ MaxFire ][ 24 ],
	FireAtual[ MAX_PLAYERS ],
	FireTimerP[ MAX_PLAYERS ],
	FireBaixa[ MAX_PLAYERS ],
	estCamB[ MAX_VEHICLES ];

#if defined Labels
new Text3D:FireText[MaxFire];
#endif

forward OnFireKill(ID, killerid);
forward HealthDown();

#define EFFECT_RANDOM           20
#define EFFECT_FIX_DEFAULT      10
#define EFFECT_FIX_Z            0.008
#define EFFECT_MULTIPLIER 		0.05
#define EFFECT_HELI_VEL   		0.1
#define EFFECT_EXPLOSIONTYPE    1
#define EFFECT_EXPLOSIONOFFSET  -1.2
#define EFFECT_EXPLOSIONRADIUS  2.5

//Model IDs for Vehicles
#define PLANES 460,476,511,512,513,519,520,553,577,592,593
#define HELIS 417,425,447,469,488,497,548,563

//
#define 	SLOT_ARMAS 				600
#define 	MAX_RACECHECKPOINTS 	1000
#define 	MAX_VEH_EVENTO 			100
#define		MAX_ZONE_NAME       	28
//
#define 	DIALOGID 		19000 // change if needed
#define 	MAX_COMP 		40  // maximum number of available components for a vehicle model; I think 40 is enough

// Definição de valor máximo e mínimo de prêmio
#define     EVENT_MAXPRE            100000
#define     EVENT_MINPRE            1
// Definição de valor máximo e mínimo de tempo
#define     EVENT_MAXTEM            30
#define     EVENT_MINTEM            1

#define     EVENT_MAXTEC            60
#define     EVENT_MINTEC            5

#define		D_DMEVENT			    93
#define     EVENT_MINUT             60

new
	Text:dm_text_Top5[ 2 ],
	Text:dmColoText[ 5 ],
	Text:dmiTimer[ 2 ]
;

enum dm_rankingEnum
{
    dm_player_Score,
    dm_player_ID
}

// Dados evento players
enum evDMp
{
	dmParticipando,
	dm_Matou,
	dm_Morreu,
	dm_Colocado,
}
new epDM[ MAX_PLAYERS ][ evDMp ];

// Dados evento server
enum evDMs
{
	evdmCriado,
	evdmCarregado,
 	evdmLiberado,
	evdmArenaID,
	evdmArenaIDDF,
	evdmArmaID[ 3 ],
	evdmArmaIDDF[ 3 ],
	evdmListarm,
	evdmArmaPK,
	evdmArmaPKDF,
	evdmTempo,
	evdmTempoAM,
	evdmTempoDF,
	evdmColete,
	evdmColeteDF,
	evdmPremio,
	evdmPremioDF,
	evdmTop,
	evdmTopDF,
	evdmGodMod,
	evdmTimer,
	evdmAnt_B,
	evdmCount,
	evdmCol[ 5 ]
 };
 
new esDM[ evDMs ];
new Float:dmePos[ 3 ];
new Float:saeArena1[][ 4 ] =
{
    // Arena 1
    { -727.0291,520.6599,1371.9718,353.2555 }, // 1 1
    { -736.3893,483.2274,1371.8391,165.5252 }, // 1 2
    { -772.8566,463.2648,1365.4996,125.4391 }, // 1 3
    { -803.3965,454.2905,1359.3158,104.0069 }, // 1 4
    { -750.8290,488.7738,1371.5392,351.2893 }, // 1 5
    { -718.3323,528.2249,1371.9766,306.2893 }
};
new Float:saeArena2[][ 4 ] =
{
    // Arena 2
    { 1377.1782,-0.4214,1000.9191,82.0449 }, // 2 7
    { 1361.7836,5.7896,1008.1563,89.1890 }, // 2 8
    { 1381.6050,-29.2953,1000.9241,166.6015 }, // 2 9
    { 1410.0237,-32.3423,1000.9231,267.8091 }, // 2 10
    { 1360.8828,-25.2580,1000.9219,26.0831 }, // 2 11
    { 1413.1459,-17.5508,1000.9246,282.0972 }
};
new Float:saeArena3[][ 4 ] =
{
    // Arena 3
    { 1306.1029,-43.2980,1001.0369,190.0365 }, // 3 13
    { 1278.1573,-27.2230,1001.0211,30.4857 }, // 3 14
    { 1253.0864,2.0625,1001.0329,39.6142 }, // 3 15
    { 1249.9265,-43.2485,1001.0331,168.2074 }, // 3 16
    { 1280.6672,-7.8055,1001.0156,288.4842 }, // 3 17
    { 1250.1813,5.7682,1008.2578,90.8317 }
};
new Float:saeArena4[][ 4 ] =
{
    // Arena 4
    { -2854.8704,-974.6747,-12.3047,54.7145 }, // 4 19
    { -2781.6680,-975.2460,-10.6534,272.2301 }, // 4 20
    { -2747.2595,-1026.0131,-8.8233,196.0267 }, // 4 21
    { -2738.9063,-981.7145,-10.0983,300.0309 }, // 4 22
    { -2836.7607,-945.7419,-4.9118,84.4998 }, // 4 23
    { -2861.3567,-987.4069,-13.3715,130.1425 }
};
new Float:saeArena5[][ 4 ] =
{
    // Arena 5
    { -2084.7603,-124.6616,35.3274,347.6581 }, // 5 25
    { -2017.7175,-126.7433,35.2537,267.8827 }, // 5 26
    { -2020.6228,-255.9410,35.3203,177.7880 }, // 5 27
    { -2052.0698,-246.4458,35.3274,70.3812 }, // 5 28
    { -2089.2534,-273.7407,35.3203,132.9391 }, // 5 29
    { -2092.0554,-197.2523,35.3203,358.7894 }
};

new intArena[][ 1 ] =
{
	( 0 ),
	{ 1 }, // Liberty city
	{ 1 }, // Warehouse 1
	{ 18 }, // Warehouse 2
	{ 0 }, // Água
	{ 0 } // Árena SF(AutoEscola)
};

//

#define 	MAX_PLAYER_CARS 		20
#define 	DIALOG_SET_LIST 		120

forward PCar_PlayerConnect( playerid );
forward PCar_PlayerDisconnect( playerid );
forward PCar_DialogResponse( playerid, dialogid, response, listitem );
forward PCar_VehicleDeath( vehicleid );

enum Player_Car_Info
{
	Float:CposX,
	Float:CposY,
	Float:CposZ,
	Float:CposA,
	Color1,
	Color2,
	CarID
}
new
    PlayerCarCreated[ MAX_PLAYERS ] = -1,
    PlayerCar[ MAX_PLAYERS ][ MAX_PLAYER_CARS ][ Player_Car_Info ],
	PlayerCarModelo[ MAX_PLAYERS ][ MAX_PLAYER_CARS ][ Player_Car_Info ],
	PlayerCarConectado[ MAX_PLAYERS ][ MAX_PLAYER_CARS ][ Player_Car_Info ]
;

enum carsetD
{
	car_DonoID,
	car_ValidS
}
new PCar_oInfo[ MAX_VEHICLES ][ carsetD ];

//

new
 	aClima;
new
	bool:gelarSpawn[ MAX_PLAYERS ];

new
	icon_casa = 98,
	icon_empr = 97
;
new
	Tempo[ MAX_PLAYERS ]
;
new
	ccount[ MAX_PLAYERS ], componentsid[ MAX_PLAYERS ][ MAX_COMP ]
;

#define	convertN( %1 ) \
		(( ( %1 ) < 0 ) ? ( -( %1 )) : (( %1 )) )
//

new Text:InfoSite, Text:InfoPlayer[ MAX_PLAYERS ];

new death[ MAX_PLAYERS ];
new pdeaths[ MAX_PLAYERS ];

new
	modoP;
new
	openGate[ 3 ];
new
	Text:BPO_Games; // Text:Viva_Vida;
new
	playerClan[ MAX_PLAYERS ][ 256 ];
new
	clanColor[ MAX_PLAYERS ];
new
	P_S,
	P_USC,
	P_ELITE,
	C_MILITO,
	pMad[ 2 ],
	pcasa289,
	pcasa274,
	pElite[ 3 ],
	pdody,
	pcasa31,
	pcasa30,
	pVilinha,
	pUSAp,
	pUSAb,
	pUSAe,
	pFury,
 	pVito[ 2 ],
 	pilhaCSI[ 4 ],
 	pCSIcave,
	statusCSI = 0,
	pCasaGolf,
	pCasa2,
	pcasa352,
	pcasa35,
	pbasea,
	pcasa137,
//	pcasa354,  // Festa - Praia
	pcasa22,
	pcasa32,
	pcasa49,
	pcasa29[ 2 ],
	pcasa331,
	pcasa334,
	pcasa338,
	pcasa285,
	pcasa185,
	pcasa21
;
new
	floodCMD[ MAX_PLAYERS ][ 2 ], Help[ MAX_PLAYERS ]/*, Chat[ MAX_PLAYERS ]*/;

new Text:Entrada_T1[ MAX_PLAYERS ];

new
	Teleporte[ MAX_PLAYERS ];

new
	viwerAN[ MAX_PLAYERS ];

new
	tempoCarga[ MAX_PLAYERS ], cargaTempo[ MAX_PLAYERS ], saiuCaminhao[ MAX_PLAYERS ];

new
	tempoForte[ MAX_PLAYERS ], ForteTempo[ MAX_PLAYERS ], saiuForte[ MAX_PLAYERS ];

new
	saiuSedex[ MAX_PLAYERS ];

enum Organizacoes
{
	ORG_ID,
	Lider,
	SubLider,
	Membro
}
new oInfo[ MAX_PLAYERS ][ Organizacoes ];

new
	useOculos[ MAX_PLAYERS ] = -1,
	useMascara[ MAX_PLAYERS ] = -1,
	useBandana[ MAX_PLAYERS ] = -1,
	useChapeu[ MAX_PLAYERS ] = -1,
	useTipo[ MAX_PLAYERS ];

new Toca[MAX_PLAYERS];

new
	estacionouSET[ MAX_PLAYERS ];

stock
    bool:   bIllegalPlayer  [ MAX_PLAYERS ] = false,
            szTmpKickName   [ MAX_PLAYER_NAME ];

new bool:validArmas[ MAX_PLAYERS ];
new LiberadoEmpresa[ MAX_PLAYERS ];
new Float:oPosx[ MAX_PLAYERS ], Float:oPosy[ MAX_PLAYERS ], Float:oPosz[ MAX_PLAYERS ], Float:oPosa[ MAX_PLAYERS ];
new Crioutapete[ MAX_PLAYERS ];
new Estacionou[ MAX_PLAYERS ];
new cAdvogadop[ MAX_PLAYERS ];

new Finalizou[ MAX_PLAYERS ];
new Float:Posicao[ MAX_VEHICLES ][ 4 ];
new vEvento[ MAX_VEHICLES ];
new ivEvento[ MAX_VEHICLES ];
new Float:CheckPoint[ MAX_RACECHECKPOINTS ][ 4 ];
new SetPlayerCheckPoint[ MAX_PLAYERS ];
new ParticipandoEvento[ MAX_PLAYERS ];
new ClickMause[ MAX_PLAYERS ];
new vOcupou[ MAX_PLAYERS ];
new VeiculosEvento;
new ContagemRegressiva;
new vOcupados = 0;
new Text:TextNumero;
new Text: text_Top5[ 2 ];
new TipoCheckPoint;
new T_Rank;
new T_AntBug;
new CheckID;
new UltimoCP;
new AlguemVenceu;
new AlguemVenceu2;
new AlguemVenceu3;
new EventoCriado;
new MaxCheck = -1;
new EventoCarregado;
new Volta[ MAX_PLAYERS ];
new Tempo_Volta[ MAX_PLAYERS ] = 50;
new
	VencedorNome1[ 64 ] = "Ninguém",
	VencedorNome2[ 64 ] = "Ninguém",
	VencedorNome3[ 64 ] = "Ninguém"
;
enum rankingEnum
{
    player_Score,
    player_ID
}

new Text:LevelEXP[ MAX_PLAYERS ];
new Text:p_TextPreso[ MAX_PLAYERS ];

new	digitouChat[ MAX_PLAYERS ];
new floodChat[ MAX_PLAYERS ];

new RotaBus[ MAX_PLAYERS ];
new tempoBus[ MAX_PLAYERS ];
new timerBus[ MAX_PLAYERS ];

new RotaMFort[ MAX_PLAYERS ];
new RotaMFort1[ MAX_PLAYERS ];

new RotaSedex[ MAX_PLAYERS ];
new RotaSedex1[ MAX_PLAYERS ];

new RotaLixo[ MAX_PLAYERS ];
new tempoLixo[ MAX_PLAYERS ];
new timerLixo[ MAX_PLAYERS ];

new Float:LifeDuelo[ MAX_PLAYERS ];

new Text:Server_Areas[ MAX_PLAYERS ];

new bool:CaminhaoCarga[ MAX_PLAYERS ];
new bool:CaminhaoDesCargaLV[ MAX_PLAYERS ];
new bool:Areaobra[ MAX_PLAYERS ];
new bool:Areacv[ MAX_PLAYERS ];
new bool:CaminhaoDesCargaSF[ MAX_PLAYERS ];
new bool:AreadePesca[ MAX_PLAYERS ];
new bool:AreadeCasca[ MAX_PLAYERS ];
new bool:AreaFazendaDrogas[ MAX_PLAYERS ];
new bool:AreaFazendaArmas[ MAX_PLAYERS ];
new bool:AreaMotoboyGirl[ MAX_PLAYERS ];


new AreasGZServer[ 10 ];
//
new vHouse[ MAX_VEHICLES ];
new vHouseRespawn[ MAX_VEHICLES ];

/* Pizza */
new Pizza_ID[ MAX_PLAYERS ];
new Pizza_PID[ MAX_PLAYERS ];
new Pizza_IID[ MAX_PLAYERS ];
new Pizza_SID[ MAX_PLAYERS ];
new Pizza_VALOR[ MAX_PLAYERS ];
new Pizza_Timer[ MAX_PLAYERS ];
new Pizza_Mensagem[ MAX_PLAYERS ];
new Pizza_Oferecido[ MAX_PLAYERS ];
new Pizza_Recebido[ MAX_PLAYERS ];
/* Hotdog */
new Hotdog_ID[ MAX_PLAYERS ];
new Hotdog_PID[ MAX_PLAYERS ];
new Hotdog_IID[ MAX_PLAYERS ];
new Hotdog_SID[ MAX_PLAYERS ];
new Hotdog_VALOR[ MAX_PLAYERS ];
new Hotdog_Timer[ MAX_PLAYERS ];
new Hotdog_Mensagem[ MAX_PLAYERS ];
new Hotdog_Oferecido[ MAX_PLAYERS ];
new Hotdog_Recebido[ MAX_PLAYERS ];
/* Sorvete */
new Sorvete_ID[ MAX_PLAYERS ];
new Sorvete_PID[ MAX_PLAYERS ];
new Sorvete_IID[ MAX_PLAYERS ];
new Sorvete_SID[ MAX_PLAYERS ];
new Sorvete_VALOR[ MAX_PLAYERS ];
new Sorvete_Timer[ MAX_PLAYERS ];
new Sorvete_Mensagem[ MAX_PLAYERS ];
new Sorvete_Oferecido[ MAX_PLAYERS ];
new Sorvete_Recebido[ MAX_PLAYERS ];
/* Cura */
new Cura_ID[ MAX_PLAYERS ];
new Cura_PID[ MAX_PLAYERS ];
new Cura_IID[ MAX_PLAYERS ];
new Cura_VALOR[ MAX_PLAYERS ];
new Cura_Timer[ MAX_PLAYERS ];
new Cura_Mensagem[ MAX_PLAYERS ];
new Cura_Oferecido[ MAX_PLAYERS ];
new Cura_Recebido[ MAX_PLAYERS ];
/* Skin */
new _SKIN_ID[ MAX_PLAYERS ];
new _SKIN_PID[ MAX_PLAYERS ];
new _SKIN_IID[ MAX_PLAYERS ];
new _SKIN_SID[ MAX_PLAYERS ];
new _SKIN_VALOR[ MAX_PLAYERS ];
new _SKIN_Timer[ MAX_PLAYERS ];
new _SKIN_Mensagem[ MAX_PLAYERS ];
new _SKIN_Oferecido[ MAX_PLAYERS ];
new _SKIN_Recebido[ MAX_PLAYERS ];
/* Maconha */
new Maconha_ID[ MAX_PLAYERS ];
new Maconha_PID[ MAX_PLAYERS ];
new Maconha_IID[ MAX_PLAYERS ];
new Maconha_QTD[ MAX_PLAYERS ];
new Maconha_VALOR[ MAX_PLAYERS ];
new Maconha_Timer[ MAX_PLAYERS ];
new Maconha_Mensagem[ MAX_PLAYERS ];
new Maconha_Oferecido[ MAX_PLAYERS ];
new Maconha_Recebido[ MAX_PLAYERS ];
/* Cocaína */
new Farinha_ID[ MAX_PLAYERS ];
new Farinha_PID[ MAX_PLAYERS ];
new Farinha_IID[ MAX_PLAYERS ];
new Farinha_QTD[ MAX_PLAYERS ];
new Farinha_VALOR[ MAX_PLAYERS ];
new Farinha_Timer[ MAX_PLAYERS ];
new Farinha_Mensagem[ MAX_PLAYERS ];
new Farinha_Oferecido[ MAX_PLAYERS ];
new Farinha_Recebido[ MAX_PLAYERS ];
/* Crack */
new Crack_ID[ MAX_PLAYERS ];
new Crack_PID[ MAX_PLAYERS ];
new Crack_IID[ MAX_PLAYERS ];
new Crack_QTD[ MAX_PLAYERS ];
new Crack_VALOR[ MAX_PLAYERS ];
new Crack_Timer[ MAX_PLAYERS ];
new Crack_Mensagem[ MAX_PLAYERS ];
new Crack_Oferecido[ MAX_PLAYERS ];
new Crack_Recebido[ MAX_PLAYERS ];

/*    Anti Chester    */

new
	ArmasProibidas[ ] =
{
	16, 	// Rocket Launcher
	35, 	// Rocket Launcher
	36, 	// HS Rocket Launcher
	37, 	// Flamethrower
	38, 	// Minigun
};

new vPreco[ MAX_PLAYERS ];

new
	LIMITE_PING = 2500
;
new
	Taxi_Bandeira = 1
;

new N_Liberado[ MAX_PLAYERS ];

new
	Text:TextAnuncio[ 4 ], T_Tipo[ MAX_PLAYERS ]
;
new TextCor[ MAX_PLAYERS ];
new CountHospital[ MAX_PLAYERS ];
new CountTimerHospital[ MAX_PLAYERS ];

new Text:MSG_Matou[ MAX_PLAYERS ];

new RandomMSG[ ][ ] =
{
    "{0EC286}» {CCFF33}A equipe [ BPO ] Brasil Play Online agradece pela sua presença no servidor !",
    "{FF0F39}» {CCFF33}Compre Relógio UP, Celular etc, indo em uma loja de utilitários.",
    "{0EC286}» {CCFF33}Não perca tempo, aposte na loteria e concorra a prêmios em dinheiro !",
    "{FF0F39}» {CCFF33}Procurado pela policia por falta de habilitações? Procure uma auto escola e tire suas licenças.",
    "{0EC286}» {CCFF33}Caso você seja novo no servidor e está perdido não entre em pânico, digite '/GPS'.",
    "{FF0F39}» {CCFF33}Para fazer uma denúncia poara os policiais online, digite '/190 [ Denúncia ]'. ",
	"{0EC299}» {CCFF33}Visite a nossa loja através do Discord: Malboro#5173",
    "{0EC286}» {CCFF33}Viu cheater? Reporte para os admins online. Não acuse no chat! Digite '/Reportar [ ID ] [ Motivo ]'.",
    "{FF0F39}» {CCFF33}Colabore com um jogo organizado e divertido, respeite as regras, para visualiza-las digite '/Regras'.",
    "{FF0F29}» {CCFF33}Entre agora mesmo no nosso grupo no facebook, e fique por dentro das novidades: facebook.com/groups/brasilplayonline",
    "{0EC286}» {CCFF33}Participe do fórum e mantenha-se atualizado com o servidor ! Acesse o site no rodapé da tela e vá em fórum.",
    "{FF0F39}» {CCFF33}Caso esteja com emegência perda de sangue algo do tipo, chame os médicos de plantão digite '/192 [ Local ]'.",
    "{0EC286}» {CCFF33}Não fique desempregado, procure uma agência de empregos e escolha um emprego de acordo com seu level.",
    "{FF0F39}» {CCFF33}Mude sua skin ( roupa ) indo até uma das lojas de roupas que há espalhadas por San Andreas.",
	"{0EC287}» {CCFF33}Caso você seja novo(a) no servidor e deseja ver alguns comandos úteis digite '/Comandos'.",
	"{0EC290}» {CCFF33}Visite a nossa loja, e adquira itens, assim estára ajudando a manter o nosso servidor sempre online.",
	"{0EC286}» {CCFF33}Comando úteis: /sos /ajuda /comandos /radios /gps /meulevel /meustatus",
	"{FF0F39}» {CCFF33}Caso esteja sem combustível, procure um dos postos que há espalhados por San Andreas.",
	"{FF0F39}» {CCFF33}Acesse Nosso Discord: Malboro#5173",
	"{FF0F39}» {CCFF33}Caso queira fazer um anúncio digite: /An [ Mensagem ]",
	"{0EC286}» {FD7901}Para evitar perda de dados em quedas inesperadas, tire print screen de seus pertences."
};

enum PlayerInfo // Opções das contas de cada player
{
	bool:Logado,
	ErrouRcon,
	bool:EntrouL,
	EntrouAgencia,
	EntrouBanco,
	bool:AFK,
	Hosp,
	ContaBanco,
	Prof,
	Sexo,
	Exp,
	Level,
	SegUP,
	MinUP,
//	AdminL,
	Dono,
	Administrador,
	Moderador,
	Ajudante,
	Gas,
	HabT,
	HabN,
	HabA,
	HabP,
	Spawn,
	Luta,
	Preso,
	Casa[ 128 ],
	Morando[ 128 ],
	Cocaina,
	Pego_QtaCoca,
	Pego_QtaMaco,
	Pego_QtaCrac,
	PT_Cocaina,
	PT_Maconha,
	PT_Crack,
	KiloD,
	Tem_GPS,
	Tem_RelogioUP,
	RelogioCor,
 	R_UP_ON_OFF,
 	Tem_Velocimetro,
 	Tem_Capacete,
	StatusCapacete,
	ModeloCapacete,
 	VelocimetroO_F,
 	Tem_Cura,
 	Tem_Kit,
	bool:Continuar,
	Float:ContX,
	Float:ContY,
	Float:ContZ,
	Float:ContW,
	ContI,
	JetPack,
	fMatou,
	fMorreu,
	PLAYER_VIP,
	Convenio,
	Seguro,
	Abuser,
	MsgSpawn,
	bool:pLogin,
	psErrou,
	chat,
	vchat,
	vchat2,
	fardado,
	ccolete,
	plocalizando,
	plocalizname[ 24 ],
	bool:pproc,
	bool:procMorto,
	entroupref,
	entrouHAB,
	entrouDEL,
	Celular,
	Celular_c
};
new pInfo[ MAX_PLAYERS ][ PlayerInfo ];

enum MainZone
{
	Zone_Name[ 28 ],
	Float:Zone_Area[ 6 ]
};

//	   	|_-»			Relogio		«-_|
#define 	FUSORARIO		0

new Text:Relogio;
new Text:Data;

//	   |_-»			Empresas		«-_|
#define 	MAX_EMPRESAS  	110

new DonoEmpresa[ MAX_PLAYERS ];
new ContratoMsg[ MAX_PLAYERS ];
new T_Contratado[ MAX_PLAYERS ];
new AceitarContrato[ MAX_PLAYERS ];

enum EmpInfo
{
	Venda,
	Preco,
	NomeEmp[ 64 ],
	EmpresaNome[ 64 ],
	NomeEmpresa[ 64 ],
	Proprietario[ 64 ],
	Funcionario1[ 64 ],
	Funcionario2[ 64 ],
	Funcionario3[ 64 ],
	Mensagem[ 64 ],
	Login[ 80 ],
	Horario[ 64 ],
	Numero,
	Identidade[ 64 ],
	Float:PickupX,
	Float:PickupY,
	Float:PickupZ,
	Float:InteriorX,
	Float:InteriorY,
	Float:InteriorZ,
	Text3D:TxTt,
	InteriorID,
	Aberta,
	VirtualWorld,
	ID_VEICULOE
};
new EmpresaInfo[ MAX_EMPRESAS ][ EmpInfo ];
new EmpresaPickup[ MAX_EMPRESAS ];
new CompanyPickup[ MAX_PLAYERS ];
new InCompanyPickup[ MAX_PLAYERS ];
new EntrouEmpresa[ MAX_PLAYERS ];
new bateu_ponto[ MAX_PLAYERS ];
new bateu_ponto1[ MAX_PLAYERS ];
//	   |_-»			Casas		«-_|
#define		MAX_CASAS		362 // Máximo de casas disponíveis.

enum Info
{
	Venda,
	Preco,
	Morador[ 64 ],
	Morador2[ 64 ],
	Morador3[ 64 ],
	Proprietario[ 64 ],
	Mensagem[ 64 ],
	Login[ 80 ],
	Horario[ 64 ],
	Numero,
	Float:PickupX,
	Float:PickupY,
	Float:PickupZ,
	Float:InteriorX,
	Float:InteriorY,
	Float:InteriorZ,
	InteriorID,
	Status,
	VirtualWorld,
    MapIcon,
    vLiberado,
	vM1,
	vM2,
	vM3
};

new
	CasaInfo[ MAX_CASAS ][ Info ],
	CasaPickup[ MAX_CASAS ],
	Text3D:CasaLabel[ MAX_CASAS ],
	InHouse[ MAX_PLAYERS ] = -1,
	HousePickup[ MAX_PLAYERS ],
	InHousePickup[ MAX_PLAYERS ],
	EntrouCasa[ MAX_PLAYERS ] = 0
;

new LiberadoCasa[ MAX_PLAYERS ];

new
	MoradorCasaID[ MAX_PLAYERS ] = -1,
	AceitarMorador[ MAX_PLAYERS ],
	MoradorCount[ MAX_PLAYERS ],
	T_Morador[ MAX_PLAYERS ],
	T_Preso[ MAX_PLAYERS ]
;
new MensagemHouse[ MAX_PLAYERS ];

enum HouseCarInfo
{
	CarModel,
	Float:CarX,
	Float:CarY,
	Float:CarZ,
	Float:CarAng,
	Cor1,
	Cor2,
	Respawn,
	HouseCar,
	NewCar,
	Text3D:Label,
	t_Cor_1,
	t_Cor_2,
	t_PaintJob,
	t_Nitro,
	t_Roda,
	t_Spoiler,
	t_Hydraulico,
	t_ParachoqueDianteiro,
	t_ParachoqueTraseiro,
	t_Escapamento,
	t_Bventr,
	t_Bventl,
	t_Bscoop,
	t_Rscoop,
	t_Lskirt,
	t_Rskirt,
	t_Base,
	t_Rbbars,
	t_Fbbars,
	t_Lights
};
new cInfo[ MAX_CASAS ][ HouseCarInfo ];

//     |_-»         AFK         «-_|
new
	Float:GetPosPlayer[ 3 ],
	TempoAFK[ MAX_PLAYERS ],
	Text:AFK1,
	Text:AFK2
;

enum pPos
{
	Float:LastX,
	Float:LastY,
	Float:LastZ,
};
new PlayerLastPos[ MAX_PLAYERS ][ pPos ];

//	   |_-»			Text's Drawns		«-_|
new
	Text:Zones[ MAX_PLAYERS ]
;

new
	Text:Velocidade[ MAX_PLAYERS ],
	Text:Gasolina[ MAX_PLAYERS ],
	Text:Modelo[ MAX_PLAYERS ]
;

//	   |_-»			Areas		«-_|

new
	ContinTimer[ MAX_PLAYERS ]
;

new
    GZ_Favela,
	Text:Favela_1,
	Text:Favela_2,
	Text:IMG_Matou,
	Text:IMG_Morreu,
	bool:TextFavela[ MAX_PLAYERS ]
;

new
	bool:AreaPosto[ MAX_PLAYERS ]
;

//	   |_-»			Arrays		«-_|
new
	gStr[ 128 ],
	gFile[ 128 ],
	hFile[ 128 ],
	pFile[ 128 ]
;

new
	ePick[ 45 ], // Picks de entrada
	sPick[ 15 ] // Pick de saida
;

new CP_0;
new CP_1;
new CP_2;
new CP_3;
new CP_4;
new CP_5;
new CP_6;
new CP_7;
new CP_8;
new CP_9;
new CP_10;
new CP_11;
new CP_12;
new CP_13;
new CP_14;
new CP_15;
new CP_16;
new CP_17;
new CP_18;
new CP_19;
new CP_20;
new CP_21;
new CP_22;
new CP_23;
new CP_24;
new CP_25;
//new CP_28; // ALGODÃO - AGÊNCIA
new CP_29;
new CP_30;
new CP_31;
new CP_32;
new CP_33;
new CP_34;
new CP_35;
new CP_36;
new CP_37;
new CP_38;
new CP_39;
new CP_40;
new CP_41;
new CP_42;
new CP_43;
new CP_44;
new CP_45;
new CP_46;
new CP_47;
new CP_48;
new CP_49;
new CP_50;
new CP_51;
new CP_52;
new CP_53;
new CP_54;
new CP_55;
new CP_56;
new CP_57;
new CP_58; // CP DP PRF

new
	cCaixas[ 27 ], ServerICON[ 100 ]/*, iCasaPlayer[ MAX_PLAYERS ]*/
;

new
	vercmds[ MAX_PLAYERS ]
;

new
	Taximetro[ MAX_PLAYERS ][ 4 ],
	PrecoTaximetro[ MAX_PLAYERS ],
	T_Taximetro[ MAX_PLAYERS ],
	Taxista_P[ MAX_PLAYERS ]
;

new T_Drogas[ MAX_PLAYERS ];

new
	bool:OfereceuCoca[ MAX_PLAYERS ],
	RecebeuCoca[ MAX_PLAYERS ],
	ValorCoca[ MAX_PLAYERS ],
	QuantiaCoca[ MAX_PLAYERS ],
	AceitarCoca[ MAX_PLAYERS ]
;

new
	Text:TextLevelUP[ MAX_PLAYERS ]
;

new
	bool:InAreaCarga[ MAX_PLAYERS ],
	bool:InDescargaSF[ MAX_PLAYERS ],
	bool:InDescargaLV[ MAX_PLAYERS ],
	Carga[ MAX_PLAYERS ],
	Carregou[ MAX_PLAYERS ]
;

new
	BancoLogin[ MAX_PLAYERS ] = 0
;

//	   |_-»			Area Funções Pescador		«-_|
new
	Pescando[ MAX_PLAYERS ],
	JaPescando[ MAX_PLAYERS ],
	Cascando[ MAX_PLAYERS ],
	JaCascando[ MAX_PLAYERS ],
	bpopCount[ MAX_PLAYERS ],
	PlayerText:gtPlayer
;

//	   |_-»			Veiculos		«-_| // Quantidade de veículos de cada profissão
new
	vMotoBoys[ 15 ],
	vPedreiro[ 10 ],
	vSegurancas[ 3 ],
	vPescadores[ 4 ],
	vSedex[ 6 ],
	vPiloto[ 4 ],
	vMCarroForte[ 6 ],
	vMotoristap[ 2 ],
	vCacadores[ 4 ],
	vMotoTaxista[ 3 ],
	vMotoAereo[ 2 ],
	vTraficDrogas[ 6 ],
	vTraficArmas[ 4 ],
	vAssasino[ 1 ],
	vTerrorista[ 4 ],
	vChefeMafia[ 3 ],
	vPortIlha[ 2 ],
	vSegIlha[ 3 ],
	vFotografo[ 2 ],
	vReporter[ 4 ],
	vInstrutor[ 2 ],
	vMecanico[ 3 ],
	vPadre[ 1 ],
	vPizzaBoy[ 5 ],
	vHOTDOG[ 3 ],
	vSorveteiro[ 4 ],
	vDrifter[ 6 ],
	vAdvogado[ 2 ],
	vAmbulancias[ 8 ],
	vBombeiros[ 8 ],
	vPrefeito[ 1 ],
	vNovatos[ 10 ],
	vLixeiro [ 8 ],
	vRodoviaria [ 8 ],
	vBOPE [ 9 ],
	vExercito [ 15 ],
	vMarinha [ 22 ]
;

new
	CargaEstacaoLS[ MAX_PLAYERS ],
	CargaEstacaoLV[ MAX_PLAYERS ],
	CargaEstacaoSF[ MAX_PLAYERS ],
	CargaAeroLS[ MAX_PLAYERS ],
	CargaAeroLV[ MAX_PLAYERS ],
	CargaAeroSF[ MAX_PLAYERS ],
	CargaAeroAB[ MAX_PLAYERS ],
	CargaAeroLS2[ MAX_PLAYERS ],
	Mercadoria1[ MAX_PLAYERS ],
	Mercadoria2[ MAX_PLAYERS ],
	Mercadoria3[ MAX_PLAYERS ],
	Mercadoria4[ MAX_PLAYERS ],
	Mercadoria5[ MAX_PLAYERS ],
	Mercadoria[ MAX_PLAYERS ],
	Material1[ MAX_PLAYERS ],
	Material2[ MAX_PLAYERS ],
	Material3[ MAX_PLAYERS ],
    Material[ MAX_PLAYERS ]
;

new
	Algemou[ MAX_PLAYERS ],
	Algemado[ MAX_PLAYERS ],
	P_Liberado[ MAX_PLAYERS ]
;

new Prendeu[ MAX_PLAYERS ];
new Soltou[ MAX_PLAYERS ];
new Procurou[ MAX_PLAYERS ];

new
    PortaoPrincipalIlha,
    PortaoPrincipalIlha2,
    PortaoCentralIlha,
    PortaoCentralIlha2,
    /*PortaoCentralIlha3,
    PortaoCentralIlha4,*/
    PortaoEsquerdolIlha,
    PortaoDireitolIlha
;

new
	PortaoVilaCSI
;

new PortaoVila1;
new PortaoVila2;
new Elevador, pd1, pd2;
new pp1, pp2;

new
	T_GPS[ MAX_PLAYERS ]
;

new
	bool:GPS[ MAX_PLAYERS ]
;

new
	PassouRadar[ MAX_PLAYERS ]
;

new
 	Tirou_F[ MAX_PLAYERS ]
;

enum GPSInfo
{
	zone_name[ 30 ],
    Float:zone_minx,
    Float:zone_miny,
    Float:zone_minz,
    Float:zone_maxx,
    Float:zone_maxy,
    Float:zone_maxz
}

#define 			MAX_SPIKESTRIPS 			200

enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[ MAX_SPIKESTRIPS ][ sInfo ];

new
	PlantouBomba[ MAX_PLAYERS ]
;

new
	T_Noiado[ MAX_PLAYERS ]
;

new
	Text:Flash
;

new
	CaminhaoGuincho = 0
;

new
	Eguicho[ MAX_PLAYERS ]
;

new
    Anunciou[ MAX_PLAYERS ]
;

new
	GPS_Ligado[ MAX_PLAYERS ]
;

new
	aviso[ MAX_PLAYERS ] = 0,
	SpectateID[ MAX_PLAYERS ],
	SpectateType[ MAX_PLAYERS ],
	bool:Calado[ MAX_PLAYERS ],
	vehid
;

forward AtualizarChatBubble( );
forward BanLog( string[ ] );

enum AdminInfo
{
 	Dono,
 	Admin,
	Moderador,
	Ajudante,
	bool:Oculto
}
new aInfo[ MAX_PLAYERS ][ AdminInfo ];

new
	setoukit[ MAX_PLAYERS ]
;

new
	bool:aEventoCriado,
	bool:EventoApe,
	bool:EventoVei,
	bool:EventoDM
;

new
	Float:p1,
	Float:p2,
	Float:p3,
	Float:p4
;

new
	bool:ArenaDuelo[ MAX_PLAYERS ],
	TempoCounTD[ MAX_PLAYERS ],
	TimerDuelo[ MAX_PLAYERS ],
	DentroDuelo,
	IDX1,
	p1_,
	p2_
;

new Vendedor[ MAX_PLAYERS ], bool:CasaOferecida[ MAX_PLAYERS ], HouseIP, MoneyHouse[ MAX_PLAYERS ], RecebeuCasa[ MAX_PLAYERS ];

new bool:UseLoop[ MAX_PLAYERS ];

new Estacionado[ MAX_VEHICLES ];
new PMBLOQUEADO[ MAX_PLAYERS ];
new NumeroCount;
new ChatStatus;
new ComandosStatus;
new Text:TextLoteria;

new convidou[ MAX_PLAYERS ];
new msgcount[ MAX_PLAYERS ];
new timercou[ MAX_PLAYERS ];
new msgconvi[ MAX_PLAYERS ];

forward MesagemClanConvite( playerid );
new LiberadoGG[ MAX_PLAYERS ];

new Loop[ MAX_PLAYERS ] = 0;

new Text:Enquete, Text:ContagemEnquete, VotacaoIniciada, vSim, vNao, vTempo, Votou[ MAX_PLAYERS ];
new
	s5Doze[ 512 ], enquetep[ 512 ]
;
new ChatTuto[ MAX_PLAYERS ];
new bool:NoTuto[ MAX_PLAYERS ];

//	   |_-»			Spawn das Profs		«-_|

new Float:SpawnMotoBus[ ][ 4 ] =
{
	{2279.9578, -2310.9778, 13.5469, 210.9006},
	{2281.5708, -2364.8191, 13.5469, 314.8655}
};

new Float:SpawnTaxistas[ ][ 4 ] =
{
	{1742.9362, -1863.6234, 13.5748, 1.8459},
	{1737.0242, -1849.1654, 13.5810, 176.8719}
};

new Float:SpawnCaminhoneiros[ ][ 4 ] =
{
	{2743.6677, -2453.8220, 13.8623, 273.4891},
	{2729.6687, -2451.4290, 17.5937, 265.7418}
};

new Float:SpawnDrifters[ ][ 4 ] =
{
	{-368.7172, 1510.7330, 76.3117, 271.9109},
	{-329.8397, 1536.4266, 76.6117, 273.07815}
};

new Float:SpawnTraficDorgas[ ][ 4 ] =
{
	{-1076.1073, -1156.9496, 129.2188, 269.4111},
	{-1025.8821, -1180.7336, 129.2188, 89.8695},
	{-1181.3829, -1143.4540, 129.2188, 1.1954}
};

new Float:SpawnTraficArmas[ ][ 4 ] =
{
	{-1109.5930, -1677.4019, 76.3739, 1.8666},
	{-1113.7642, -1639.1772, 76.3672, 273.5291}
};

new Float:SpawnChefeMafia[ ][ 4 ] =
{
	{2482.5615, 1526.3602, 11.4740, 316.4882},
	{2560.2283, 1562.1108, 10.8203, 90.2594},
	{2533.8401, 1507.5089, 11.5767, 262.8843}
};

/*new Float:SpawnExerxito[ ][ 4 ] =
{
	{153.7647,1845.2401,17.6406,2.4933},
	{137.5357,1880.5796,17.8359,0.6133},
	{223.6900,1866.4016,13.1406,89.2640},
	{233.4717,1841.2284,17.6406,0.2532}
}; */

new Float:SpawnMedico[ ][ 4 ] =
{
	{1173.7308,-1323.5417,15.1953,270.3608},
	{2035.7902,-1404.7637,17.2511,89.5892}
};

static ModName[ ][ 64 ] =
{ // by BigETI
	{"Pro Spoiler"},{"Win Spoiler"},{"Drag Spoiler"},{"Alpha Spoiler"},{"Champ Scoop Hood"},
	{"Fury Scoop Hood"},{"Roof Scoop"},{"Right Sideskirt"},{"5x Nitro"},{"2x Nitro"},{"10x Nitro"},
	{"Race Scoop Hood"},{"Worx Scoop Hood"},{"Round Fog Lamps"},{"Champ Spoiler"},{"Race Spoiler"},
	{"Worx Spoiler"},{"Left Sideskirt"},{"Upswept Exhaust"},{"Twin Exhaust"},{"Large Exhaust"},
	{"Medium Exhaust"},{"Small Exhaust"},{"Fury Spoiler"},{"Square Fog Lamps"},{"Offroad Wheels"},
	{"Right Alien Sideskirt 'Sultan'"},{"Left Alien Sideskirt 'Sultan'"},{"Alien Exhaust 'Sultan'"},
	{"X-Flow Exhaust 'Sultan'"},{"Left X-Flow Sideskirt 'Sultan'"},{"Right X-Flow Sideskirt 'Sultan'"},
	{"Alien Roof Vent 'Sultan'"},{"X-Flow Roof Vent 'Sultan'"},{"Alien Exhaust 'Elegy'"},{"X-Flow Roof Vent 'Elegy'"},
	{"Right Alien Sideskirt 'Elegy'"},{"X-Flow Exhaust 'Elegy'"},{"Alien Roof Vent 'Elegy'"},{"Right X-Flow Sideskirt 'Elegy'"},
	{"Left Alien Sideskirt 'Elegy'"},{"Right X-Flow Sideskirt 'Elegy'"},{"Right Chrome Sideskirt 'Broadway'"},
	{"Slamin Exhaust 'Broadway'"},{"Chrome Exhaust 'Broadway'"},{"X-Flow Exhaust 'Flash'"},{"Alien Exhaust 'Flash'"},
	{"Right Alien Sideskirt 'Flash'"},{"Right X-Flow Sideskirt 'Flash'"},{"Alien Spoiler 'Flash'"},{"X-Flow Spoiler 'Flash'"},
	{"Left Alien Sideskirt 'Flash'"},{"Left X-Flow Sideskirt 'Flash'"},{"X-Flow Roof 'Flash'"},{"Alien Roof 'Flash'"},
	{"Alien Roof 'Stratum'"},{"Right Alien Sideskirt 'Stratum'"},{"Right X-Flow Sideskirt 'Stratum'"},{"Alien Spoiler 'Stratum'"},
	{"X-Flow Exhaust 'Stratum'"},{"X-Flow Spoiler 'Stratum'"},{"X-Flow Roof 'Stratum'"},{"Left Alien Sideskirt 'Stratum'"},
	{"Left X-Flow Sideskirt 'Stratum'"},{"Alien Exhaust 'Stratum'"},{"Alien Exhaust 'Jester'"},{"X-Flow Exhaust 'Jester'"},
	{"Alien Roof 'Jester'"},{"X-Flow Roof 'Jester'"},{"Right Alien Sideskirt 'Jester'"},{"Right X-Flow Sideskirt 'Jester'"},
	{"Left Alien Sideskirt 'Jester'"},{"Left X-Flow Sideskirt 'Jester'"},{"Shadow Wheels"},{"Mega Wheels"},{"Rimshine Wheels"},
	{"Wires Wheels"},{"Classic Wheels"},{"Twist Wheels"},{"Cutter Wheels"},{"Switch Wheels"},{"Grove Wheels"},{"Import Wheels"},
	{"Dollar Wheels"},{"Trance Wheels"},{"Atomic Wheels"},{"Stereo Sound"},{"Hydraulics"},{"Alien Roof 'Uranus'"},{"X-Flow Exhaust 'Uranus'"},
	{"Right Alien Sideskirt 'Uranus'"},{"X-Flow Roof 'Uranus'"},{"Alien Exhaust 'Uranus'"},{"Right X-Flow Sideskirt 'Uranus'"},
	{"Left Alien Sideskirt 'Uranus'"},{"Right X-Flow Sideskirt 'Uranus'"},{"Ahab Wheels"},{"Virtual Wheels"},{"Access Wheels"},
	{"Left Chrome Sideskirt 'Broadway'"},{"Chrome Grill Bullbar 'Remington'"},{"Left 'Chrome Flames' Sideskirt 'Remington'"},
	{"Left 'Chrome Strip' Sideskirt 'Savanna'"},{"Corvetible Roof 'Blade'"},{"Chrome Exhaust 'Blade'"},{"Slamin Exhaust 'Blade'"},
	{"Right 'Chrome Arches' Sideskirt 'Remington'"},{"Left 'Chrome Strip' Sideskirt 'Blade'"},{"Right 'Chrome Strip' Sideskirt 'Blade'"},
	{"Chrome Rear Bullbars 'Slamvan'"},{"Slamin Rear Bullbars 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},
	{"Chrome Exhaust 'Slamvan'"},{"Slamin Exhaust 'Slamvan'"},{"Chrome Front Bullbars 'Slamvan'"},{"Slamin Front Bullbars 'Slamvan'"},
	{"Chrome Front Bumper 'Slamvan'"},{"Right 'Chrome Trim' Sideskirt 'Slamvan'"},{"Right 'Wheelcovers' Sideskirt 'Slamvan'"},
	{"Left 'Chrome Trim' Sideskirt 'Slamvan'"},{"Left 'Wheelcovers' Sideskirt 'Slamvan'"},{"Right 'Chrome Flames' Sideskirt 'Remington'"},
	{"Bullbar Chrome Bars 'Remington'"},{"Left 'Chrome Arches' Sideskirt 'Remington'"},{"Bullbar Chrome Lights 'Remongton'"},
	{"Chrome Exhaust 'Remington'"},{"Slamin Exhaust 'Remington'"},{"Vinyl Hardtop 'Blade'"},{"Chrome Exhaust 'Savanna'"},
	{"Hardtop Roof 'Savanna'"},{"Softtop Roof 'Savanna'"},{"Slamin Exhaust 'Savanna'"},{"Right 'Chrome Strip' Sideskirt 'Savanna'"},
	{"Right 'Chrome Strip' Sideskirt 'Tornado'"},{"Slamin Exhaust 'Tornado'"},{"Chrome Exhaust 'Tornado'"},{"Left 'Chrome Strip' Sideskirt 'Tornado'"},
	{"Alien Spoiler 'Sultan'"},{"X-Flow Spoiler 'Sultan'"},{"X-Flow Rear Bumper 'Sultan'"},{"Alien Rear Bumper 'Sultan'"},
	{"Left Oval Vents"},{"Right Oval Vents"},{"Left Square Vents"},{"Right Square Vents"},{"X-Flow Spoiler 'Elegy'"},
	{"Alien Spoiler 'Elegy'"},{"X-Flow Rear Bumper 'Elegy'"},{"Alien Rear Bumper 'Elegy'"},{"Alien Rear Bumper 'Flash'"},
	{"X-Flow Rear Bumper 'Flash'"},{"X-Flow Front Bumper 'Flash'"},{"Alien Front Bumper 'Flash'"},{"Alien Rear Bumper 'Stratum'"},
	{"Alien Front Bumper 'Stratum'"},{"X-Flow Rear Bumper 'Stratum'"},{"X-Flow Front Bumper 'Stratum'"},{"X-Flow Spoiler 'Jester'"},
	{"Alien Rear Bumper 'Jester'"},{"Alien Front Bumper 'Jester'"},{"X-Flow Rear Bumper 'Jester'"},{"Alien Spoiler 'Jester'"},
	{"X-Flow Spoiler 'Uranus'"},{"Alien Spoiler 'Uranus'"},{"X-Flow Front Bumper 'Uranus'"},{"Alien Front Bumper 'Uranus'"},
	{"X-Flow Rear Bumper 'Uranus'"},{"Alien Rear Bumper 'Uranus'"},{"Alien Front Bumper 'Sultan'"},{"X-Flow Front Bumper 'Sultan'"},
	{"Alien Front Bumper 'Elegy'"},{"X-Flow Front Bumper 'Elegy'"},{"X-Flow Front Bumper 'Jester'"},{"Chrome Front Bumper 'Broadway'"},
	{"Slamin Front Bumper 'Broadway'"},{"Chrome Rear Bumper 'Broadway'"},{"Slamin Rear Bumper 'Broadway'"},{"Slamin Rear Bumper 'Remington'"},
	{"Chrome Front Bumper 'Remington'"},{"Chrome Rear Bumper 'Remington'"},{"Slamin Front Bumper 'Blade'"},{"Chrome Front Bumper 'Blade'"},
	{"Slamin Rear Bumper 'Blade'"},{"Chrome Rear Bumper 'Blade'"},{"Slamin Front Bumper 'Remington'"},{"Slamin Rear Bumper 'Savanna'"},
	{"Chrome Rear Bumper 'Savanna'"},{"Slamin Front Bumper 'Savanna'"},{"Chrome Front Bumper 'Savanna'"},{"Slamin Front Bumper 'Tornado'"},
	{"Chrome Front Bumper 'Tornado'"},{"Chrome Rear Bumper 'Tornado'"},{"Slamin Rear Bumper 'Tornado'"}
};

static vNome[ 212 ][ ] =
{
	{"Landstalker"},    {"Bravura"},            {"Buffalo"},            {"Linerunner"},     {"Perrenial"},      {"Sentinel"},       {"Dumper"},
	{"Firetruck"},      {"Trashmaster"},        {"Stretch"},            {"Manana"},         {"Infernus"},       {"Voodoo"},         {"Pony"},           {"Mule"},
	{"Cheetah"},        {"Ambulance"},          {"Leviathan"},          {"Moonbeam"},       {"Esperanto"},      {"Taxi"},           {"Washington"},
	{"Bobcat"},         {"Mr Whoopee"},         {"BF Injection"},       {"Hunter"},         {"Premier"},        {"Enforcer"},       {"Securicar"},
	{"Banshee"},        {"Predator"},           {"Bus"},{"Rhino"},      {"Barracks"},       {"Hotknife"},       {"Trailer 1"},      {"Previon"},
	{"Coach"},          {"Cabbie"},             {"Stallion"},           {"Rumpo"},          {"RC Bandit"},      {"Romero"},         {"Packer"},         {"Monster"},
	{"Admiral"},        {"Squalo"},             {"Seasparrow"},         {"Pizzaboy"},       {"Tram"},           {"Trailer 2"},      {"Turismo"},
	{"Speeder"},        {"Reefer"},             {"Tropic"},             {"Flatbed"},        {"Yankee"},         {"Caddy"},          {"Solair"},         {"Berkley's RC Van"},
	{"Skimmer"},        {"PCJ-6_0_0"},          {"Faggio"},             {"Freeway"},        {"RC Baron"},       {"RC Raider"},      {"Glendale"},       {"Oceanic"},
	{"Sanchez"},        {"Sparrow"},            {"Patriot"},            {"Quad"},           {"Coastguard"},     {"Dinghy"},         {"Hermes"},         {"Sabre"},
	{"Rustler"},        {"ZR-3_5_0"},           {"Walton"},             {"Regina"},         {"Comet"},{"BMX"},  {"Burrito"},        {"Camper"},         {"Marquis"},
	{"Baggage"},        {"Dozer"},              {"Maverick"},           {"News Chopper"},   {"Rancher"},        {"FBI Rancher"},    {"Virgo"},          {"Greenwood"},
	{"Jetmax"},         {"Hotring"},            {"Sandking"},           {"Blista Compact"}, {"Police Maverick"},{"Boxville"},       {"Benson"},
	{"Mesa"},           {"RC Goblin"},          {"Hotring Racer A"},    {"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
	{"Super GT"},       {"Elegant"},            {"Journey"},            {"Bike"},           {"Mountain Bike"},  {"Beagle"},         {"Cropdust"},       {"Stunt"},
	{"Tanker"},         {"Roadtrain"},          {"Nebula"},             {"Majestic"},       {"Buccaneer"},      {"Shamal"},         {"Hydra"},          {"FCR-900"},
	{"NRG-500"},        {"HPV1000"},            {"Cement Truck"},       {"Tow Truck"},      {"Fortune"},        {"Cadrona"},        {"FBI Truck"},
	{"Willard"},        {"Forklift"},           {"Tractor"},            {"Combine"},        {"Feltzer"},        {"Remington"},      {"Slamvan"},
	{"Blade"},          {"Freight"},            {"Streak"},             {"Vortex"},         {"Vincent"},        {"Bullet"},         {"Clover"},         {"Sadler"},
	{"Firetruck LA"},   {"Hustler"},            {"Intruder"},           {"Primo"},          {"Cargobob"},       {"Tampa"},          {"Sunrise"},        {"Merit"},
	{"Utility"},        {"Nevada"},             {"Yosemite"},           {"Windsor"},        {"Monster A"},      {"Monster B"},      {"Uranus"},         {"Jester"},
	{"Sultan"},         {"Stratum"},            {"Elegy"},              {"Raindance"},      {"RC Tiger"},       {"Flash"},          {"Tahoma"},         {"Savanna"},
	{"Bandito"},        {"Freight Flat"},       {"Streak Carriage"},    {"Kart"},           {"Mower"},          {"Duneride"},       {"Sweeper"},
	{"Broadway"},       {"Tornado"},            {"AT-400"},             {"DFT-30"},         {"Huntley"},        {"Stafford"},       {"BF-400"},         {"Newsvan"},
	{"Tug"},            {"Trailer 3"},          {"Emperor"},            {"Wayfarer"},       {"Euros"},          {"Hotdog"},         {"Club"},           {"Freight Carriage"},
	{"Trailer 3"},      {"Andromada"},          {"Dodo"},               {"RC Cam"},         {"Launch"},         {"Police Car LSPD"},{"Police Car SFPD"},
	{"Police _LVPD"},   {"Police Ranger"},      {"Picador"},            {"BOPE. Van"},      {"Alpha"},          {"Phoenix"},        {"Glendale"},
	{"Sadler"},         {"Luggage Trailer A"},  {"Luggage Trailer B"},  {"Stair Trailer"},{"Boxville"},         {"Farm Plow"},
	{"Utility Trailer"}
};

static const SanAndreasZones[ ][ MainZone ] =
{
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial",         {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Citys Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

AntiMongoloideDeAMX( )
{
    new a[ ][ ] =
    {
        "Unarmed ( Fist )",
        "Brass K"
    };
    #pragma unused a
}

main( )
{
	print( "» Brasil Play Online" );
	print( "» IP: " );
	print( "» GameMode Versão: 2.0" );
	print( "» SA-MP Versão: 0.3.7\n" );
}


// Anti teleporte
stock Float:GetDistanceBetweenPoints(Float:rx1,Float:ry1,Float:rz1,Float:rx2,Float:ry2,Float:rz2)
{
    return floatadd(floatadd(floatsqroot(floatpower(floatsub(rx1,rx2),2)),floatsqroot(floatpower(floatsub(ry1,ry2),2))),floatsqroot(floatpower(floatsub(rz1,rz2),2)));
}

public OnGameModeInit( )
{
	AntiMongoloideDeAMX();
	// Rcon 0
	SendRconCommand("rcon 0");
    // Remoção de funções do ( GTA OFF )
	UsePlayerPedAnims( );
	DisableInteriorEnterExits( );
    EnableStuntBonusForAll( false );
    ShowPlayerMarkers( true );
    LimitPlayerMarkerRadius( 15.0 );
	// Nome do servidor
	SetGameModeText( "RolePlayGaming - RPG" );
	SendRconCommand( "hostname Brasil Play Online" );
	SendRconCommand( "language Português / Brasil" );
	SendRconCommand( "mapname Brasil" );
	// Variáveis Globais
	aEventoCriado = false, EventoApe = false , EventoVei = false, EventoDM = false, ChatStatus = 0;
    AddPlayerClass( 0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, -1, 0, 0 );
	//	   |_-»			Pickups			«-_| // entradas
	ePick[ 1 ] = CreatePickup( 1247, 23, 1555.1055, -1675.6426, 16.1953 ); // Delegacia LS
    ePick[ 2 ] = CreatePickup( 1247, 23, 627.5673, -571.7941, 17.6481 ); // Delegacia PRF // Dillimore
 	ePick[ 3 ] = CreatePickup( 1239, 23, 53.4001, -1530.7544, 5.2698 ); // Posto PRF
    ePick[ 4 ] = CreatePickup( 1247, 23, -1605.5868, 711.1006, 13.8672 ); // Delegacia SF
   	ePick[ 5 ] = CreatePickup( 1210, 23, 1219.1569, -1812.4558, 16.5938 ); // Agencia de Los Santos
	ePick[ 6 ] = CreatePickup( 1210, 23, -2054.8433, 456.0135, 35.1719 ); // Agência San Fierro
	ePick[ 7 ] = CreatePickup( 1210, 23, 1989.1378, 959.3508, 10.8203 ); // Agência Las Venturat
	ePick[ 8 ] = CreatePickup( 1210, 23, -177.7854, 1110.6555, 19.7422 ); // Agência de Fort Carson
	ePick[ 9 ] = CreatePickup( 1210, 23, 207.8856, -62.8081, 1.5781 ); // Agência de Blueberry
	ePick[ 10 ] = CreatePickup( 1210, 23, -2165.2070, -2417.1287, 30.8203 ); // Agência de Angel Pine
	ePick[ 11 ] = CreatePickup( 1239, 23, 1481.1034, -1770.4825, 18.7958 ); // Prefeitura LS
	ePick[ 12 ] = CreatePickup( 1239, 23, -2765.3511, 375.5041, 6.3359 ); // Prefeitura SF
	ePick[ 13 ] = CreatePickup( 1274, 23, 1778.8096, -1662.7579, 14.4375 ); // Banco LS
	ePick[ 14 ] = CreatePickup( 1274, 23, -2650.2886, 376.0364, 6.1563 ); // Banco SF
	ePick[ 15 ] = CreatePickup( 1274, 23, 1958.3718, 951.9951, 10.8203 ); // Banco LV
	ePick[ 16 ] = CreatePickup( 1239, 23, 1631.8516, -1172.9270, 24.0843 ); // Loterica
	ePick[ 17 ] = CreatePickup( 2710, 23, 1833.7720, -1842.4988, 13.5781 ); // 24/7
	ePick[ 18 ] = CreatePickup( 1581, 23, 1310.2739, -1367.0903, 13.5192 ); // Auto Escola
	ePick[ 19 ] = CreatePickup( 1239, 23, -2026.6133, -100.9539, 35.1641 ); // Auto Escola SF
	ePick[ 20 ] = CreatePickup( 1276, 23, 1836.5631, -1682.5184, 13.3427 ); // Alhambra
    ePick[ 21 ] = CreatePickup( 1314, 23, 2188.9343, -1081.6875, 43.8327 ); // Duelo
    ePick[ 22 ] = CreatePickup( 1242, 23, 220.7647, 71.5451, 1005.0391, -1 ); // Colete Civil
    ePick[ 23 ] = CreatePickup( 1314, 23, 217.9510, 71.7017, 1005.0391, -1 ); // Troca de Farda
	ePick[ 24 ] = CreatePickup( 1242, 23, 257.9767, 79.7221, 1003.6406, -1 ); // Colete Militar
	ePick[ 25 ] = CreatePickup( 1314, 23, 253.8083, 76.3055, 1003.6406, -1 ); // Farda Militar
	ePick[ 26 ] = CreatePickup( 1242, 23, 2247.4604, 2445.2827, 10.8203, -1 ); // Colete BOPE
	ePick[ 27 ] = CreatePickup( 1314, 23, 2244.5125, 2442.8975, 10.8203, -1 ); // Farda BOPE
	ePick[ 28 ] = CreatePickup( 1242, 23, 218.1883, 80.8657, 1005.039, -1 ); // Colete Gurda
	ePick[ 29 ] = CreatePickup( 1314, 23, 215.2691, 78.3579, 1005.0391, -1 ); // farda guarda
	ePick[ 30 ] = CreatePickup( 1242, 23, 239.0744, 73.6162, 1005.0391, -1 ); // Colete Delegado
	ePick[ 31 ] = CreatePickup( 1314, 23, 239.2931, 77.8610, 1005.0391, -1 ); // Farda delegado
	ePick[ 32 ] = CreatePickup( 1242, 23, 239.1999, 1858.4000, 14.1000, -1 ); // Colete Exercito
	ePick[ 33 ] = CreatePickup( 1314, 23, 239.3000, 1861.4000, 14.1000, -1 ); // Farda Exercito
	ePick[ 34 ] = CreatePickup( 1242, 23, 248.5144, 120.7719, 1003.2188, -1 ); // Colete Rodoviaria
	ePick[ 35 ] = CreatePickup( 1314, 23, 244.4147, 120.5334, 1003.3084, -1 ); // Farda Rodoviaria
	ePick[ 36 ] = CreatePickup( 1242, 23, -1346.1531, 492.4623, 11.2027, -1 ); // Colete Marinha
	ePick[ 37 ] = CreatePickup( 1314, 23, -1348.4652, 492.5126, 11.1953, -1 ); // Farda Marinha
	ePick[ 38 ] = CreatePickup( 1242, 23, 298.6661, 183.1014, 1007.1719, -1 ); // Colete Geral - DP SF
	ePick[ 39 ] = CreatePickup( 1314, 23, 294.8674, 183.7677, 1007.1719, -1 ); // Farda Geral - DP SF
	ePick[ 40 ] = CreatePickup( 1239, 23, 293.1075, 179.6270, 1007.1719, -1 ); // Informação - DP SF
                      // Saidas
	sPick[ 1 ] = CreatePickup( 1318, 23, 246.8718, 62.3202, 1003.6406 ); // Saida Delegacia
    sPick[ 2 ] = CreatePickup( 1318, 23, 288.7510, 167.7465, 1007.1719, -1 ); // Saida Delegacia SF
	sPick[ 3 ] = CreatePickup( 1318, 23, 246.3897, 107.8811, 1003.2188 ); // Saida Delegacia Dillimore
	sPick[ 4 ] = CreatePickup( 1318, 23, 51.7680, -1530.5012, 5.2866 ); // Saida Posto PRF
	sPick[ 5 ] = CreatePickup( 1318, 23, 2304.6934, -16.0919, 26.7422 ); // Saida Agencia
	sPick[ 6 ] = CreatePickup( 1318, 23, 390.0609, 173.7708, 1008.3828 ); // Saida prefeitura
	sPick[ 7 ] = CreatePickup( 1318, 23, 834.6674, 7.4959, 1004.1870 ); // Saida Banco
	sPick[ 8 ] = CreatePickup( 1318, 23, -2026.8789, -103.6022, 1035.1833 ); // Saída Auto Escola
	sPick[ 9 ] = CreatePickup( 1318, 23, -25.8498, -188.2523, 1003.5469, 24 ); // Saida Mercado
	sPick[ 10 ] = CreatePickup( 1318, 23, -2158.6572, 643.1335, 1052.3750 ); // Saida Loterica
	sPick[ 11 ] = CreatePickup( 1318, 23, 493.4367, -24.9197, 1000.6719 ); // Saida Alhambra
    //	   |_-»			Checkpoints			«-_|
    CP_0 = CreateDynamicCP( 2309.1978, -8.3964, 26.7422, 1.4, -1, -1, -1, 100.0 ); // Agência
    CP_1 = CreateDynamicCP( 822.0108, 1.9151, 1004.1797, 1.5, -1, -1, -1, 100.0 ); // Banco
    CP_2 = CreateDynamicCP( -2033.4333, -117.4128, 1035.1719, 1.1, -1, -1, -1, 100.0 ); // Auto Escola
    CP_3 = CreateDynamicCP( -28.1784, -185.1464, 1003.5469, 1.1, -1, -1, -1, 100.0 ); // 24/7 ¹ e ²
    CP_4 = CreateDynamicCP( -2159.0813, 640.3607, 1052.3817, 1.0, -1, -1, -1, 100.0 ); // Loterica
    //CP_5 = CreateDynamicCP( 203.7959, -43.5501, 1001.8047, 1.3, -1, -1, -1, 100.0 ); // Binco
    CP_5 = CreateDynamicCP( 207.2894, -100.9030, 1005.2578, 1.3, -1, -1, -1, 100.0 ); // Binco
    CP_41 = CreateDynamicCP( 161.4124, -84.3725, 1001.8047, 1.3, -1, -1, -1, 100.0 ); // ZIP
    CP_42 = CreateDynamicCP( 210.2872, -8.2153, 1005.2109, 1.3, -1, -1, -1, 100.0 ); // VICTIM
    CP_43 = CreateDynamicCP( 206.9874, -129.6057, 1003.5078, 1.3, -1, -1, -1, 100.0 ); // TRAINHARD
    CP_44 = CreateDynamicCP( 204.2473, -159.9653, 1000.5234, 1.3, -1, -1, -1, 100.0 ); // DS
    CP_45 = CreateDynamicCP( 203.7959, -43.5501, 1001.8047, 1.3, -1, -1, -1, 100.0 ); // SUBURBAN

    CP_6 = CreateDynamicCP( 775.2586, -59.2147, 1000.7184, 1.5, -1, -1, -1, 100.0 ); // Academia
    CP_7 = CreateDynamicCP( 446.9114, -1875.3275, 4.3723, 1.5, -1, -1, -1, 100.0 ); // Cooperativa de Pesca
	CP_8 = CreateDynamicCP( 23.0700, -2646.6870, 40.4645, 1.5, -1, -1, -1, 100.0 ); // Cooperativa de Caça
	CP_9 = CreateDynamicCP( 1749.9469, -1953.7769, 13.5469, 5.0, -1, -1, -1, 100.0 ); // Maquinista Saída LS
	CP_10 = CreateDynamicCP( 1405.4850, 2632.4202, 10.8203, 5.0, -1, -1, -1, 100.0 ); // Maquinista Saída LV
	CP_11 = CreateDynamicCP( -1944.2952, 109.4343, 25.7186, 5.0, -1, -1, -1, 100.0 ); // Maquinista Saída SF
    CP_12 = CreateDynamicCP( -1067.3206, -1189.6003, 129.2188, 1.5, -1, -1, -1, 100.0 ); // Fazenda das Drogas
    CP_13 = CreateDynamicCP( 2337.7983, 1723.8367, 10.8203, 1.5, -1, -1, -1, 100.0 ); // Fotógrafo
    CP_14 = CreateDynamicCP( 1172.6395, -1328.1166, 15.4027, 1.1, -1, -1, -1, 100.0 ); // Hospital Agência
    CP_15 = CreateDynamicCP( 2034.8190, -1406.5873, 17.2047, 1.1, -1, -1, -1, 100.0 ); // Hospital Grove
	CP_16 = CreateDynamicCP( 2201.8445,-1152.3496,25.8772, 1.1, -1, -1, -1, 100.0 ); // Kit Favela
	CP_17 = CreateDynamicCP( -2194.0046,2408.4163,4.5277, 5.0, -1, -1, -1, 100.0 ); // CP MotoBoy
	CP_18 = CreateDynamicCP( -1940.3506, 2380.0898, 49.6953, 1.1, -1, -1, -1, 100.0 ); // CP MotoBoy
	CP_19 = CreateDynamicCP( 2158.3745, 943.2244, 10.8203, 1.1, -1, -1, -1, 100.0 ); // CP MotoBoy
	CP_20 = CreateDynamicCP( 2387.9214, 2466.0737, 10.8203, 1.1, -1, -1, -1, 100.0 ); // CP MotoBoy
	CP_21 = CreateDynamicCP( 2781.6829, -1813.9617, 11.8438, 1.1, -1, -1, -1, 100.0 ); // CP MotoBoy
	CP_22 = CreateDynamicCP( 1083.9559, -1226.6875, 15.8203, 1.1, -1, -1, -1, 100.0 ); // CP MotoBoy
	CP_23 = CreateDynamicCP( 359.0632,178.6568, 1008.3828, 1.1, -1, -1, -1, 100.0 ); // Impostos Prefeitura
	CP_24 = CreateDynamicCP( 249.5481, 67.6516, 1003.6406, 1.1, -1, -1, -1, 100.0 ); // Porte de Armas Delegacia
	CP_25 = CreateDynamicCP( 295.9448, -80.4257, 1001.5156, 1.1, -1, -1, -1, 100.0 ); // Armas Ammu-Nation
//	CP_28 = CreateDynamicCP( 1250.6077, -1806.6815, 13.4216, 1.1, -1, -1, -1, 100.0 ); // Algodão Doce  // ALGODÃO - AGÊNCIA
	CP_29 = CreateDynamicCP( 358.9193, 166.1699, 1008.3828, 1.3, -1, -1, -1, 100.0 ); // Prefeitura
	CP_30 = CreateDynamicCP( 2278.4102, -2329.2820, 13.5469, 5.0, -1, -1, -1, 100.0 ); // Àrea de Ônibus
	CP_31 = CreateDynamicCP( -543.7710, -498.8596, 25.2147, 10.0, -1, -1, -1, 100.0 ); // Mercadoria 1
	CP_32 = CreateDynamicCP( -1957.4265, 1497.2184, 6.7608, 10.0, -1, -1, -1, 100.0 ); // Mercadoria 2 San Fierro
	CP_33 = CreateDynamicCP( -2391.7888, 2215.7163, 4.5573, 10.0, -1, -1, -1, 100.0 ); // Mercadoria Bayside
	CP_34 = CreateDynamicCP( 400.8645, 2533.2083, 16.2743, 10.0, -1, -1, -1, 100.0 ); // Mercadoria Aéro Abandonado
	CP_35 = CreateDynamicCP( 830.7095, -0.1333, 1004.1797, 1.0, -1, -1, -1, 100.0 ); // Impostos Banco
	CP_36 = CreateDynamicCP( -2161.2563, 640.5176, 1052.3817, 1.0, -1, -1, -1, 100.0 ); // Impostos Loteria
	CP_37 = CreateDynamicCP( 362.3257,173.7074,1008.3828, 1.0, -1, -1, -1, 100.0 ); // Impostos Loteria
	CP_38 = CreateDynamicCP( 2205.2078, -989.1382, 63.9297, 1.5, -1, -1, -1, 100.0 ); // Biqueira Favela
	CP_39 = CreateDynamicCP( 2770.6172, -1627.9358, 12.1775, 1.5, -1, -1, -1, 100.0 ); // Corpo de Bombeiros
	CP_40 = CreateDynamicCP( 2846.7603, 983.6639, 10.7500, 1.5, -1, -1, -1, 100.0 ); // Mercadoria Empresas(àrea de descarga)
	CP_46 = CreateDynamicCP( 2211.0000,-2237.8000,13.5000, 5, -1, -1, -1, 100.0 ); // Area de Lixeiro
	CP_47 = CreateDynamicCP( 1759.5000,-1666.0000,13.6000, 5, -1, -1, -1, 100.0 ); // Area de Motorista de Carro Forte
	CP_48 = CreateDynamicCP( 2449.8999,-1548.8000,22.9209, 5, -1, -1, -1, 100.0 ); // Area do Sedex
	CP_49 = CreateDynamicCP( 605.4854,884.5767,-43.3004, 5, -1, -1, -1, 100.0 ); // IniciarObra
	CP_50 = CreateDynamicCP( 2624.1807,834.7396,5.3158, 5, -1, -1, -1, 100.0 ); // Obra1
	CP_51 = CreateDynamicCP( 1248.4409,-1258.4224,13.1609, 5, -1, -1, -1, 100.0 ); // Obra2
	CP_52 = CreateDynamicCP( -2115.0127,242.0457,35.5022, 5, -1, -1, -1, 100.0 ); // Obra3
	CP_53 = CreateDynamicCP( 1664.3494, -2459.5642, 14.8894, 5.0, -1, -1, -1, 100.0 ); // PILOTO Saída LS
	CP_54 = CreateDynamicCP( 1539.5107, 1668.8561, 12.1522, 5.0, -1, -1, -1, 100.0 ); // PILOTO Saída LV
	CP_55 = CreateDynamicCP( -1479.0670, -196.2580, 15.4729, 5.0, -1, -1, -1, 100.0 ); // PILOTO Saída SF
	CP_56 = CreateDynamicCP( 364.7593, 2539.1553, 17.9467, 5.0, -1, -1, -1, 100.0 ); // PILOTO Saída Aero Abandonado
	CP_57 = CreateDynamicCP( 1895.0381, -2626.3516, 14.8857, 5.0, -1, -1, -1, 100.0 ); // PILOTO Chegada LS
	CP_58 = CreateDynamicCP( 251.9699, 117.4014, 1003.2188, 1.1, -1, -1, -1, 100.0 ); // CP DP PRF

	// Check dos caixas eletronicos
    cCaixas[ 0 ]  = CreateDynamicCP( 1729.5397, -1754.4424, 13.5005, 1.0, -1, -1, -1, 100.0 ); // Caixa Eletronico Comerce
    cCaixas[ 1 ] = CreateDynamicCP( 458.8765, -1494.3386, 31.1031, 1.0, -1, -1, -1, 100.0 ); // Caixa Eletronico Victim
    cCaixas[ 2 ] = CreateDynamicCP( 2241.7102, -1664.0626, 15.4766, 1.0, -1, -1, -1, 100.0 ); // Caixa Eletronico Binco
    cCaixas[ 3 ] = CreateDynamicCP( 1366.5623, -1282.4214, 13.5469, 1.0, -1, -1, -1, 100.0 ); // Caixa Eletronico Ammu
    cCaixas[ 4 ] = CreateDynamicCP( 1228.3754, -1742.5920, 13.5982, 1.0, -1, -1, -1, 100.0 ); // Caixa Eletronico Agencia
    cCaixas[ 5 ] = CreateDynamicCP( 1000.5516, -925.0084, 42.3281, 1.0, -1, -1, -1, 100.0 ); // Caixa Eletronico Posto Norte
    cCaixas[ 6 ] = CreateDynamicCP( 1929.2378, -1785.8347, 13.5469, 1.0, -1, -1, -1, 100.0 ); // Caixa Eletronico Posto Sul
	cCaixas[ 7 ] = CreateDynamicCP( 1985.3488, 1075.9269, 10.8127, 1.0, -1, -1, -1, 100.0 ); // Caixa 1 LV
	cCaixas[ 8 ] = CreateDynamicCP( 2086.7527, 1471.3977, 10.8203, 1.0, -1, -1, -1, 100.0 ); // Caixa 2 LV
	cCaixas[ 9 ] = CreateDynamicCP( 1673.8544, 1444.8619, 10.7920, 1.0, -1, -1, -1, 100.0 ); // Caixa 3 LV
	cCaixas[ 10 ] = CreateDynamicCP( 2172.4304, 1402.2052, 11.0625, 1.0, -1, -1, -1, 100.0 ); // Caixa 4 LV
	cCaixas[ 11 ] = CreateDynamicCP( 2803.6138, 892.6180, 10.7500, 1.0, -1, -1, -1, 100.0 ); // Caixa 5 LV
	cCaixas[ 12 ] = CreateDynamicCP( -2702.8171, 372.6496, 4.9781, 1.0, -1, -1, -1, 100.0 ); // Caixa 1 SF
	cCaixas[ 13 ] = CreateDynamicCP( -2446.7327, 751.8239, 35.1719, 1.0, -1, -1, -1, 100.0 ); // Caixa 2 SF
	cCaixas[ 14 ] = CreateDynamicCP( -2629.7937, 1401.6936, 7.0994, 1.0, -1, -1, -1, 100.0 ); // Caixa 3 SF
	cCaixas[ 15 ] = CreateDynamicCP( -1694.3392, 412.6917, 7.1797, 1.0, -1, -1, -1, 100.0 ); // Caixa 4 SF
	cCaixas[ 16 ] = CreateDynamicCP( -1968.2924, 278.5286, 35.1794, 1.0, -1, -1, -1, 100.0 ); // Caixa 5 SF
	cCaixas[ 17 ] = CreateDynamicCP( -2234.2275, 2350.0652, 4.9855, 1.0, -1, -1, -1, 100.0 ); // Caixa Bayside
	cCaixas[ 18 ] = CreateDynamicCP( -1453.6864, 2593.2837, 55.8359, 1.0, -1, -1, -1, 100.0 ); // Caixa Deserto
	cCaixas[ 19 ] = CreateDynamicCP( -230.0132, 2709.8633, 62.9843, 1.0, -1, -1, -1, 100.0 ); // Caixa Deserto
	cCaixas[ 20 ] = CreateDynamicCP( -828.2064, 1503.2640, 19.6672, 1.0, -1, -1, -1, 100.0 ); // Caixa Deserto
	cCaixas[ 21 ] = CreateDynamicCP( -189.9725, 1209.8292, 19.7422, 1.0, -1, -1, -1, 100.0 ); // Caixa Fort Carson
	cCaixas[ 22 ] = CreateDynamicCP( 241.5081, -167.8019, 1.5781, 1.0, -1, -1, -1, 100.0 ); // Caixa Cidadezinha
	cCaixas[ 23 ] = CreateDynamicCP( 673.0540, -506.8918, 16.3359, 1.0, -1, -1, -1, 100.0 ); // Caixa Cidadezinha
	cCaixas[ 24 ] = CreateDynamicCP( -2162.7546, -2341.4189, 30.6250, 1.0, -1, -1, -1, 100.0 ); // Caixa Cidadezinha
	cCaixas[ 25 ] = CreateDynamicCP( 2303.1123, -16.1575, 26.4844, 1.0, -1, -1, -1, 100.0 ); // Caixa Cidadezinha
	cCaixas[ 26 ] = CreateDynamicCP( 1306.2826, 232.1539, 19.5547, 1.0, -1, -1, -1, 100.0 ); // Caixa Cidadezinha
	//	   |_-»			MapIcons			«-_|          // Icones do mapa
 	ServerICON[ 0 ] = CreateDynamicMapIcon( 1555.1055, -1675.6426, 16.1953, 61, 0, -1, -1, -1, 150.0 ); // Delegacia  // https://sampwiki.blast.hk/wiki/MapIcons
    ServerICON[ 1 ] = CreateDynamicMapIcon( 1836.5631, -1682.5184, 13.3427, 48, 0, -1, -1, -1, 150.0 ); // Alhambra
    ServerICON[ 2 ] = CreateDynamicMapIcon( 1219.1569, -1812.4558, 16.5938, 56, 0, -1, -1, -1, 150.0 ); // Agência LS
    //ServerICON[ 3 ] = CreateDynamicMapIcon( -2650.2886, 376.0364, 6.1563, 56, 0, -1, -1, -1, 150.0 ); // Agência SF
    ServerICON[ 3 ] = CreateDynamicMapIcon( -2054.8433, 456.0135, 35.1719, 56, 0, -1, -1, -1, 150.0 ); // Agência SF
    ServerICON[ 4 ] = CreateDynamicMapIcon( 1989.1378, 959.3508, 10.8203, 56, 0, -1, -1, -1, 150.0 ); // Agência LV
    ServerICON[ 5 ] = CreateDynamicMapIcon( -177.7854, 1110.6555, 19.7422, 56, 0, -1, -1, -1, 150.0 ); // Agência Fort Carson
    ServerICON[ 6 ] = CreateDynamicMapIcon( 207.8856, -62.8081, 1.5781, 56, 0, -1, -1, -1, 150.0 ); // Agência BlueBerry
    ServerICON[ 7 ] = CreateDynamicMapIcon( -2165.2070, -2417.1287, 30.8203, 56, 0, -1, -1, -1, 150.0 ); // Agência Angeç Pine
    ServerICON[ 8 ] = CreateDynamicMapIcon( 1778.8096, -1662.7579, 14.4375, 23, 0, -1, -1, -1, 150.0 ); // Banco Los Santos
    ServerICON[ 9 ] = CreateDynamicMapIcon( 1958.3718, 951.9951, 10.8203, 23, 0, -1, -1, -1, 150.0 ); // Banco Las Ventura
    //ServerICON[ 10 ] = CreateDynamicMapIcon( -2765.3723, 375.5843, 6.3359, 23, 0, -1, -1, -1, 150.0 ); // Banco San Fierro
    ServerICON[ 10 ] = CreateDynamicMapIcon( -2650.2886, 376.0364, 6.1563, 23, 0, -1, -1, -1, 150.0 ); // Banco San Fierro
    ServerICON[ 11 ] = CreateDynamicMapIcon( 1310.2739, -1367.0903, 13.5192, 16, 0, -1, -1, -1, 150.0 ); // Auto Escola
    ServerICON[ 12 ] = CreateDynamicMapIcon( 1352.4087, -1759.2499, 13.5078, 17, 0, -1, -1, -1, 150.0 ); // 24/7
    ServerICON[ 13 ] = CreateDynamicMapIcon( 1631.8516, -1172.9270, 24.0843, 25, 0, -1, -1, -1, 150.0 ); // Loterica
   	ServerICON[ 14 ] = CreateDynamicMapIcon( 1749.9469, -1953.7769, 13.5469, 53, 0, -1, -1, -1, 150.0 ); // Estação LS
    ServerICON[ 15 ] = CreateDynamicMapIcon( 1405.4850, 2632.4202, 10.8203, 53, 0, -1, -1, -1, 150.0 ); // Estação LV
    ServerICON[ 16 ] = CreateDynamicMapIcon( -1944.2952, 109.4343, 25.7186, 53, 0, -1, -1, -1, 150.0 ); // Estação SF
    ServerICON[ 17 ] = CreateDynamicMapIcon( 1481.0216, -1767.4899, 18.7958, 2, 0, -1, -1, -1, 150.0 ); // Prefeitura LS
    ServerICON[ 96 ] = CreateDynamicMapIcon( -2765.3511, 375.5041, 6.3359, 2, 0, -1, -1, -1, 150.0 ); // Prefeitura SF

    ServerICON[ 18 ] = CreateDynamicMapIcon( -1605.4912, 711.4242, 13.8672, 61, 0, -1, -1, -1, 150.0 ); // Delegacia SF
    ServerICON[ 19 ] = CreateDynamicMapIcon( 445.1704, -1896.1055, 1.6778, 9, 0, -1, -1, -1, 150.0 ); // Pesca Saida
    ServerICON[ 20 ] = CreateDynamicMapIcon( 455.8510, -2441.9895, -0.1633, 9, 0, -1, -1, -1, 150.0 ); // Area Pesca
	ServerICON[ 21 ] = CreateDynamicMapIcon( 1661.0956, -1717.3345, 20.4844, 27, 0, -1, -1, -1, 150.0 ); // Officina de tuning
	ServerICON[ 22 ] = CreateDynamicMapIcon( -616.8596, -1996.0758, 49.6114, 12, 0, -1, -1, -1, 150.0 ); // Area de Caça
	ServerICON[ 23 ] = CreateDynamicMapIcon( 22.5946, -2646.7556, 40.4648, 12, 0, -1, -1, -1, 150.0 ); // Coop de Caça
	ServerICON[ 24 ] = CreateDynamicMapIcon( 1675.1864, -2287.8503, 49.9596, 5, 0, -1, -1, -1, 150.0 ); // Aero Los Santos
	ServerICON[ 25 ] = CreateDynamicMapIcon( 2729.4973, -2461.6406, 26.6747, 51, 0, -1, -1, -1, 150.0 ); // Area de Carregamento
	ServerICON[ 26 ] = CreateDynamicMapIcon( 2826.9810,933.8503,10.9766, 51, 0, -1, -1, -1, 150.0 ); // Area de Descarregamento LV
	ServerICON[ 27 ] = CreateDynamicMapIcon( -1068.3540,-642.2197,32.0078, 51, 0, -1, -1, -1, 150.0 ); // Area de Descarregamento SF
	ServerICON[ 28 ] = CreateDynamicMapIcon( -1116.3617, -1134.3395, 129.2259, 22, 0, -1, -1, -1, 150.0 ); // Fazenda das Drogas
	ServerICON[ 29 ] = CreateDynamicMapIcon( -1116.3617, -1134.3395, 129.2259, 6, 0, -1, -1, -1, 150.0 ); // Fazenda das Armas
	ServerICON[ 30 ] = CreateDynamicMapIcon( 1173.1145, -1323.7125, 15.3962, 21, 0, -1, -1, -1, 150.0 ); // Hospital LS Ammu-Nation
	ServerICON[ 31 ] = CreateDynamicMapIcon( 2036.5521, -1412.5513, 16.9922, 21, 0, -1, -1, -1, 150.0 ); // Hostpital LS Favela
	ServerICON[ 32 ] = CreateDynamicMapIcon( 1607.4396, 1819.1462, 10.8280, 21, 0, -1, -1, -1, 150.0 ); // Hospital LV
	ServerICON[ 33 ] = CreateDynamicMapIcon( -2665.0503, 636.5155, 14.4531, 21, 0, -1, -1, -1, 150.0 ); // Hospital SF
	ServerICON[ 34 ] = CreateDynamicMapIcon( -315.0838, 1050.7095, 20.3403, 21, 0, -1, -1, -1, 150.0 ); // Hospital FC
	ServerICON[ 35 ] = CreateDynamicMapIcon( -1514.6455, 2523.4263, 55.8138, 21, 0, -1, -1, -1, 150.0 ); // Hospital EQ
	ServerICON[ 36 ] = CreateDynamicMapIcon( -2208.2485, -2286.8516, 30.6250, 21, 0, -1, -1, -1, 150.0 ); // Hospital AP
	ServerICON[ 37 ] = CreateDynamicMapIcon( 2188.9343, -1081.6875, 43.8327, 24, 0, -1, -1, -1, 150.0 ); // Duelo
	ServerICON[ 38 ] = CreateDynamicMapIcon( 1103.4783, -1247.8691, 15.8203, 26, 0, -1, -1, -1, 150.0 ); // MotoBoy
	ServerICON[ 39 ] = CreateDynamicMapIcon( 2278.4102, -2329.2820, 13.5469, 8, 0, -1, -1, -1, 150.0 ); // Area de Ônibus
	ServerICON[ 97 ] = CreateDynamicMapIcon( 2211.0000,-2237.8000,13.5000, 24, 0, -1, -1, -1, 150.0 ); // Area de Lixeiro
	// Cifão $
    ServerICON[ 40 ] = CreateDynamicMapIcon( 1729.5397, -1754.4424, 13.5005, 52, 0, -1, -1, -1, 150.0 ); // Caixa Eletronico Comerce
    ServerICON[ 41 ] = CreateDynamicMapIcon( 458.8765, -1494.3386, 31.1031, 52, 0, -1, -1, -1, 150.0 ); // Caixa Eletronico Victim
    ServerICON[ 42 ] = CreateDynamicMapIcon( 2241.7102, -1664.0626, 15.4766, 52, 0, -1, -1, -1, 150.0 ); // Caixa Eletronico Binco
    ServerICON[ 43 ] = CreateDynamicMapIcon( 1366.5623, -1282.4214, 13.5469, 52, 0, -1, -1, -1, 150.0 ); // Caixa Eletronico Ammu
    ServerICON[ 44 ] = CreateDynamicMapIcon( 1228.3754, -1742.5920, 13.5982, 52, 0, -1, -1, -1, 150.0 ); // Caixa Eletronico Agencia
    ServerICON[ 45 ] = CreateDynamicMapIcon( 1000.5516, -925.0084, 42.3281, 52, 0, -1, -1, -1, 150.0 ); // Caixa Eletronico Posto Norte
    ServerICON[ 46 ] = CreateDynamicMapIcon( 1929.2378, -1785.8347, 13.5469, 52, 0, -1, -1, -1, 150.0 ); // Caixa Eletronico Posto Sul
	ServerICON[ 47 ] = CreateDynamicMapIcon( 1985.3488, 1075.9269, 10.8127, 52, 0, -1, -1, -1, 150.0 ); // Caixa 1 LV
	ServerICON[ 48 ] = CreateDynamicMapIcon( 2086.7527, 1471.3977, 10.8203, 52, 0, -1, -1, -1, 150.0 ); // Caixa 2 LV
	ServerICON[ 49 ] = CreateDynamicMapIcon( 1673.8544, 1444.8619, 10.7920, 52, 0, -1, -1, -1, 150.0 ); // Caixa 3 LV
	ServerICON[ 50 ] = CreateDynamicMapIcon( 2172.4304, 1402.2052, 11.0625, 52, 0, -1, -1, -1, 150.0 ); // Caixa 4 LV
	ServerICON[ 51 ] = CreateDynamicMapIcon( 2803.6138, 892.6180, 10.7500, 52, 0, -1, -1, -1, 150.0 ); // Caixa 5 LV
	ServerICON[ 52 ] = CreateDynamicMapIcon( -2702.8171, 372.6496, 4.9781, 52, 0, -1, -1, -1, 150.0 ); // Caixa 1 SF
	ServerICON[ 53 ] = CreateDynamicMapIcon( -2446.7327, 751.8239, 35.1719, 52, 0, -1, -1, -1, 150.0 ); // Caixa 2 SF
	ServerICON[ 54 ] = CreateDynamicMapIcon( -2629.7937, 1401.6936, 7.0994, 52, 0, -1, -1, -1, 150.0 ); // Caixa 3 SF
	ServerICON[ 55 ] = CreateDynamicMapIcon( -1694.3392, 412.6917, 7.1797, 52, 0, -1, -1, -1, 150.0 ); // Caixa 4 SF
	ServerICON[ 56 ] = CreateDynamicMapIcon( -1968.2924, 278.5286, 35.1794, 52, 0, -1, -1, -1, 150.0 ); // Caixa 5 SF
	ServerICON[ 57 ] = CreateDynamicMapIcon( -2234.2275, 2350.0652, 4.9855, 52, 0, -1, -1, -1, 150.0 ); // Caixa Bayside
	ServerICON[ 58 ] = CreateDynamicMapIcon( -1453.6864, 2593.2837, 55.8359, 52, 0, -1, -1, -1, 150.0 ); // Caixa Deserto
	ServerICON[ 59 ] = CreateDynamicMapIcon( -230.0132, 2709.8633, 62.9843, 52, 0, -1, -1, -1, 150.0 ); // Caixa Deserto
	ServerICON[ 60 ] = CreateDynamicMapIcon( -828.2064, 1503.2640, 19.6672, 52, 0, -1, -1, -1, 150.0 ); // Caixa Deserto
	ServerICON[ 61 ] = CreateDynamicMapIcon( -189.9725, 1209.8292, 19.7422, 52, 0, -1, -1, -1, 150.0 ); // Caixa Fort Carson
	ServerICON[ 62 ] = CreateDynamicMapIcon( 241.5081, -167.8019, 1.5781, 52, 0, -1, -1, -1, 150.0 ); // Caixa Cidadezinha
	ServerICON[ 63 ] = CreateDynamicMapIcon( 673.0540, -506.8918, 16.3359, 52, 0, -1, -1, -1, 150.0 ); // Caixa Cidadezinha
	ServerICON[ 64 ] = CreateDynamicMapIcon( -2162.7546, -2341.4189, 30.6250, 52, 0, -1, -1, -1, 150.0 ); // Caixa Cidadezinha
	ServerICON[ 65 ] = CreateDynamicMapIcon( 2303.1123, -16.1575, 26.4844, 52, 0, -1, -1, -1, 150.0 ); // Caixa Cidadezinha
	ServerICON[ 66 ] = CreateDynamicMapIcon( 1306.2826, 232.1539, 19.5547, 52, 0, -1, -1, -1, 150.0 ); // Caixa Cidadezinha
	// Postos
	ServerICON[ 67 ] = CreateDynamicMapIcon( 1940.6096,-1772.7147,12.9500, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 68 ] = CreateDynamicMapIcon( -90.8525,-1169.3555,1.9823, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 69 ] = CreateDynamicMapIcon( -1607.8698,-2715.5637,48.9453, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 70 ] = CreateDynamicMapIcon( -2244.2200,-2560.6169,31.9219, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 71 ] = CreateDynamicMapIcon( -2026.7922,156.5871,29.0391, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 72 ] = CreateDynamicMapIcon( -2410.0215,976.2697,45.4209, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 73 ] = CreateDynamicMapIcon( -1328.4185,2675.4663,50.0625, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 74 ] = CreateDynamicMapIcon( 1596.2703,2198.8335,10.8203, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 75 ] = CreateDynamicMapIcon( 2639.4871,1106.6412,10.8203, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 76 ] = CreateDynamicMapIcon( 2114.7256,920.3104,10.8203, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 77 ] = CreateDynamicMapIcon( 1004.8821,-937.0840,42.3281, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 78 ] = CreateDynamicMapIcon( 1382.6870,459.7101,20.3452, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 79 ] = CreateDynamicMapIcon( -1676.3906,412.9636,6.9068, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 80 ] = CreateDynamicMapIcon( 70.4693,1218.8176,18.5393, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 81 ] = CreateDynamicMapIcon( 613.1774,1692.8209,7.1875, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 82 ] = CreateDynamicMapIcon( 2147.0969,2747.4377,10.5474, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 83 ] = CreateDynamicMapIcon( 2202.2954,2474.0007,10.5474, 55, 0, -1, -1, -1, 150.0 );
	ServerICON[ 84 ] = CreateDynamicMapIcon( 655.3937,-565.2368,15.9072, 55, 0, -1, -1, -1, 150.0 );
	// Radares
	ServerICON[ 85 ] = CreateDynamicMapIcon( 1529.6328, -1732.3198, 14.9468, 34, 0, -1, -1, -1, 150.0 ); // 0
	ServerICON[ 86 ] = CreateDynamicMapIcon( 1193.4443, -1852.2771, 14.9218, 34, 0, -1, -1, -1, 150.0 ); // 1
	ServerICON[ 87 ] = CreateDynamicMapIcon( -15.1126, -1518.2516, 3.6745, 34, 0, -1, -1, -1, 150.0 ); // 2
	ServerICON[ 88 ] = CreateDynamicMapIcon( 807.8500, -1400.5115, 15.0895, 34, 0, -1, -1, -1, 150.0 ); // 3
	ServerICON[ 89 ] = CreateDynamicMapIcon( 1125.8978, -1144.8754, 25.2703, 34, 0, -1, -1, -1, 150.0 ); // 4
	ServerICON[ 90 ] = CreateDynamicMapIcon( 1194.1735, -943.1405, 44.3574, 34, 0, -1, -1, -1, 150.0 ); // 5
	ServerICON[ 91 ] = CreateDynamicMapIcon( 2749.8408, -149.9315, 34.5190, 34, 0, -1, -1, -1, 150.0 ); // 6
	ServerICON[ 92 ] = CreateDynamicMapIcon( 1796.8328, 843.0880, 12.2468, 34, 0, -1, -1, -1, 150.0 ); // 7
	ServerICON[ 93 ] = CreateDynamicMapIcon( 1698.0563, -735.8344, 52.1640, 34, 0, -1, -1, -1, 150.0 ); // 8
	ServerICON[ 94 ] = CreateDynamicMapIcon( 1350.0825, -1280.4806, 14.9968, 34, 0, -1, -1, -1, 150.0 ); // 9
	// Novos Icons
	ServerICON[ 95 ] = CreateDynamicMapIcon( 2770.6172, -1627.9358, 12.1775, 2, 0, -1, -1, -1, 150.0 ); // 9
    ServerICON[ 96 ] = CreateDynamicMapIcon( 627.5673, -571.7941, 17.6481, 58, 0, -1, -1, -1, 150.0 ); // Delegacia Dillimore
    ServerICON[ 97 ] = CreateDynamicMapIcon( 53.4001, -1530.7544, 5.2698, 30, 0, -1, -1, -1, 150.0 ); // Pedagio // Icone Pedagio // POSTO PRF
	//     |_-»         	Criar Casas           «-_
	CreateHouse( 1, -684.6587, 939.5399, 13.6328, 83.0864, 1324.3145, 1083.8594, 9, 200000, 200000, 1, 101 );
	CreateHouse( 2, 1496.9918,-689.0601,95.1433, 24.0932, 1341.7411, 1084.3750, 10, 220000, 220000, 2, 102 );
	CreateHouse( 3, 1331.7549,-632.3055,109.1349, 2237.4912, -1080.2360, 1049.0234, 2, 200000, 200000, 3, 103 );
	CreateHouse( 4, 2522.3486,-1679.3895,15.4970, -68.5478, 1353.0201, 1080.2109, 6, 70000, 70000, 4, 104 );
	CreateHouse( 5, 2523.7576,-1658.6222,15.4935, 245.2656, 305.0070, 999.1484, 1, 65000, 65000, 5, 105 );
	CreateHouse( 6, 2513.2834,-1650.7628,14.3557, 224.3667, 1240.1123, 1082.1406, 2, 63000, 63000, 6, 106 );
	CreateHouse( 7, 2498.4519,-1643.6329,13.7826, 224.4046, 1239.8674, 1082.1406, 2, 60000, 60000, 7, 107 );
	CreateHouse( 8, 2486.4622,-1645.8593,14.0703, -42.5853, 1406.8448, 1084.4297, 8, 58000, 58000, 8, 108 );
	CreateHouse( 9, 2451.9099,-1642.5935,13.7357, -68.5145, 1353.8485, 1080.2109, 6, 61000, 61000, 9, 109 );
	CreateHouse( 10, 2066.1677,-1703.4937,14.1484, 261.2870, 1284.3062, 1080.2578, 4, 70000, 70000, 10, 110 );
	CreateHouse( 11, 2166.6616,-1671.9874,15.0746, 294.9558, 1472.2637, 1080.2578, 15, 72000, 72000, 11, 111 );
	CreateHouse( 12, 1981.5452,-1718.9211,17.0303, 261.2870, 1284.3062, 1080.2578, 4, 100000, 100000, 12, 112 );
	CreateHouse( 13, 1410.9694,-921.5505,38.4219, 294.9558, 1472.2637, 1080.2578, 15, 130000, 130000, 13, 113 );
	CreateHouse( 14, 1534.4147, -800.1628, 72.8495, -68.5478, 1353.0201, 1080.2109, 6, 110000, 110000, 14, 114 );
	CreateHouse( 15, 1526.9944,-773.4356,80.5474, -42.5196, 1405.5847, 1084.4297, 8, 110000, 110000, 15, 115 );
	CreateHouse( 16, 1442.6061, -629.5621, 95.7186, 221.7965, 1142.2682, 1082.6094, 4, 140000, 140000, 16, 116 );
	CreateHouse( 17, 1093.8215, -806.4712, 107.4194, 82.9644, 1323.7074, 1083.8594, 9, 160000, 160000, 17, 117 );
	CreateHouse( 18, 1111.5037,-742.0931,100.1329, 22.6554, 1405.0906, 1084.4297, 5, 150000, 150000, 18, 118 );
	CreateHouse( 19, 1094.8571,-646.5363,113.6484, 140.3679, 1367.8837, 1083.8621, 5, 200000, 200000, 19, 119 );
	CreateHouse( 20, 1045.0305, -642.0552, 120.1172, 2317.8652, -1025.5160, 1050.2109, 9, 190000, 190000, 20, 120 );
	CreateHouse( 21, 979.8599,-676.2302,121.9763, 234.0908,1065.5974, 1084.2095, 6, 230000, 230000, 21, 121 );
	CreateHouse( 22, 945.7899,-709.7903,122.2109, 260.7421, 1238.2261, 1084.2578, 9, 100000, 100000, 22, 122 );
	CreateHouse( 23, 899.1617,-677.9343,116.8904, 2237.4912, -1080.2360, 1049.0234, 2, 140000, 140000, 23, 123 );
	CreateHouse( 24, 849.1844,-744.4493,94.9693, -262.5375, 1456.7291, 1084.3672, 4, 100000, 100000, 24, 124 );
	CreateHouse( 25, 890.5619,-781.4048,101.2954, 446.9973, 1398.4043, 1084.3120, 2, 115000, 115000, 25, 125 );
	CreateHouse( 26, 497.5117,-1093.6302,82.3592, 2365.0583, -1134.3385, 1050.8750, 8, 140000, 140000, 26, 126 );
	CreateHouse( 27, 299.9188,-1154.8226,81.1709, 228.9857, 1114.1838, 1080.9922, 5, 250000, 250000, 27, 127 );
	CreateHouse( 28, 252.1526,-1221.1609,75.6725, 82.9644, 1323.7074, 1083.8594, 9, 240000, 240000, 28, 128 );
	CreateHouse( 29, 252.7280,-1269.3767,74.0825, 235.3623, 1188.6174, 1080.2578, 3, 230000, 230000, 29, 129 );
	CreateHouse( 30, 255.1223, -1366.6436, 53.1094, 294.9558, 1472.2637, 1080.2578, 15, 150000, 150000, 30, 130 );
	CreateHouse( 31, 298.3224, -1337.7108, 53.4415, 2194.9250, -1204.2581, 1049.0234, 6, 130000, 130000, 31, 131 );
	CreateHouse( 32, 190.2035, -1308.1805, 70.2614, 226.2988, 1114.4376, 1080.9929, 5, 100000, 100000, 32, 132 );
	CreateHouse( 33, 726.9389, -1276.2460, 13.6484, 225.6608, 1021.8754, 1084.0165, 7, 500000, 500000, 33, 133 );
	CreateHouse( 34, 739.0493, -1417.6359, 13.5234, 759.3586, 1442.5961, 1102.7, 6, 100000, 100000, 34, 134 );
	CreateHouse( 35, 2459.4136,-1690.1783,13.5453, 2466.0623, -1698.2185, 1013.5078, 2, 100000, 100000, 35, 135 );
	CreateHouse( 36, 1298.5170,-799.4630,84.1406, 1262.4103, -785.4581, 1091.9063, 5, 1000000, 1000000, 36, 136 );
	CreateHouse( 37, -81.1509, 83.0017, 3.1172, -68.5478, 1353.0201, 1080.2109, 6, 120000, 120000, 37, 137 );
	CreateHouse( 38, -902.7215, 2681.5513, 42.3703, 271.884979, 306.631988, 999.148437, 2, 350000, 350000, 38, 138 );
    CreateHouse( 39, 1854.0656, -1914.9202, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 39, 139 );
    CreateHouse( 40, 1872.2916, -1912.5028, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 40, 140 );
    CreateHouse( 41, 1891.9188, -1915.1726, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 41, 141 );
    CreateHouse( 42, 1938.1080, -1911.3516, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 10000, 10000, 42, 142 );
    CreateHouse( 43, 1913.5016, -1912.3480, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 43, 143 );
    CreateHouse( 44, 1123.9729, -2036.9758, 69.8855, 140.3546, 1365.9296, 1083.8594, 5, 1000000, 1000000, 44, 144 );
    CreateHouse( 45, 1851.8610,-2135.4043,15.3882, -68.5478, 1353.0201, 1080.2109, 6, 30000, 30000, 45, 145 );
    CreateHouse( 46, 1872.4960,-2133.5771,15.4820, -68.5478, 1353.0201, 1080.2109, 6, 30000, 30000, 46, 146 );
    CreateHouse( 47, 1894.2294,-2133.6287,15.4663, -68.5478, 1353.0201, 1080.2109, 6, 30000, 30000, 47, 147 );
    CreateHouse( 48, 693.5538,-1705.8082,3.8195, 83.0864, 1324.3145, 1083.8594, 9, 180000, 180000, 48, 148 );
    CreateHouse( 49, 1804.1057,-2124.2520,13.9424, -42.3619,1406.2201,1084.4297, 8, 40000, 40000, 49, 149 );
    CreateHouse( 50, 2520.3987,-1272.8634,34.8859, 2542.3291,-1303.9052,1025.0703, 2, 1000000, 1000000, 50, 150 );
	CreateHouse( 51, 2824.040771, 2268.726562, 14.661463, 2233.6101, -1114.2667, 1050.8828, 5, 50000, 50000, 51, 151 );
	CreateHouse( 52, 2794.183105, 2229.475341, 14.661463, 2309.0664, -1212.7429, 1049.0234, 6, 60000, 60000, 52, 152 );
	CreateHouse( 53, 2532.322998, 750.092834, 14.739588, 2237.6770,-1080.4869,1049.0234, 2, 65000, 65000, 53, 153 );
	CreateHouse( 54, 2613.505615, 719.506408, 14.739588, 2365.1567, -1134.5105, 1050.8750, 8, 65000, 65000, 54, 154 );
	CreateHouse( 55, 2449.223632, 689.810668, 11.460937, 2365.1567, -1134.5105, 1050.8750, 8, 90000, 90000, 55, 155 );
	CreateHouse( 56, 2346.135009, 656.637695, 11.460479, 225.4087, 1240.1775, 1082.1406, 2, 90000, 90000, 56, 156 );
	CreateHouse( 57, 2206.353271, 656.629699, 11.468292, -42.3936, 1406.0759, 1084.4297, 8, 90000, 90000, 57, 157 );
	CreateHouse( 58, 2369.060302, 735.193542, 11.460937, 376.5438, 1417.5194, 1081.3281, 15, 85000, 85000, 58, 158 );
	CreateHouse( 59, 2205.900146, 736.629394, 11.468292, 387.1854, 1471.9427, 1080.1875, 15, 85000, 85000, 59, 159 );
	CreateHouse( 60, 2123.279541, 651.314392, 11.460937, 260.6836,1238.0439,1084.2578, 9, 90000, 90000, 60, 160 );
	CreateHouse( 61, 2069.005859, 696.627990, 11.468292, 223.0062, 1287.1655, 1082.1406, 1, 75000, 75000, 61, 161 );
	CreateHouse( 62, 2014.135375, 775.196838, 11.460937, -68.63, 1351.83, 1080.21, 6, 80000, 70000, 62, 162 );
	CreateHouse( 63, 2122.531738, 731.265197, 11.460937, 295.7500,1474.5068,1080.2578, 15, 80000, 80000, 63, 163 );
	CreateHouse( 64, 2169.355224, 772.358276, 11.460937, 221.8483, 1140.6533, 1082.6094, 4, 70000, 70000, 64, 164 );
	CreateHouse( 65, 1843.995117, 718.703125, 11.468292, 225.4087, 1240.1775, 1082.1406, 2, 75000, 75000, 65, 165 );
	CreateHouse( 66, 1896.745117, 675.111328, 10.820312, 2309.0664, -1212.7429, 1049.0234, 6, 90000, 90000, 66, 166 );
	CreateHouse( 67, 1896.742187, 736.557556, 10.820312, 2233.6101, -1114.2667, 1050.8828, 5, 90000, 90000, 67, 167 );
	CreateHouse( 68, 1957.045043, 731.335327, 10.820312, 2333.2029,-1076.5475,1049.0234, 6, 90000, 90000, 68, 168 );
	CreateHouse( 69, 1957.041992, 678.000000, 10.820312, 266.8205, 305.0191, 999.1484, 2, 90000, 90000, 69, 169 );
	CreateHouse( 70, 1414.428100, 2003.911376, 14.739588, 2283.3472,-1139.6055,1050.8984, 11, 80000, 80000, 70, 170 );
	CreateHouse( 71, -2383.799316, 1128.145751, 55.726562, 223.0062, 1287.1655, 1082.1406,  1, 90000, 80000, 71, 171 );
	CreateHouse( 72, -2438.332519, 1141.016845, 55.726562, 2283.3472,-1139.6055,1050.8984, 11, 90000, 80000, 72, 172 );
	CreateHouse( 73, -2493.354248, 1141.977539, 55.726562, 2233.6101, -1114.2667, 1050.8828, 5, 90000, 80000, 73, 173 );
	CreateHouse( 74, -2549.073730, 1145.729858, 55.726562, 223.0062, 1287.1655, 1082.1406, 1, 90000, 80000, 74, 174 );
	CreateHouse( 75, -2477.246826, 1244.466430, 33.609375, 266.8205, 305.0191, 999.1484, 2, 50000, 40000, 75, 175 );
	CreateHouse( 76, -2383.140136, 1336.411010, 12.806699, 2309.0664, -1212.7429, 1049.0234, 6, 60000, 50000, 76, 176 );
	CreateHouse( 77, -2905.104980, 1178.854248, 13.664062, 2283.3472,-1139.6055,1050.8984, 11, 65000, 55000, 77, 177 );
	CreateHouse( 78, -2845.313720, 928.400390, 44.054687, 2233.6101, -1114.2667, 1050.8828, 5, 65000, 55000, 78, 178 );
	CreateHouse( 79, -2864.938476, 681.408081, 23.460033, 223.0062, 1287.1655, 1082.1406, 1, 70000, 60000, 79, 179 );
	CreateHouse( 80, -2710.706298, 967.470764, 54.460937, 295.7500,1474.5068,1080.2578, 15, 90000, 80000, 80, 180 );
	CreateHouse( 81, -2655.336669, 985.787780, 64.991287, 2267.3247, -1210.0126, 1048.2891, 10, 90000, 80000, 81, 181 );
	CreateHouse( 82, -2641.083251, 935.720275, 71.953125, 23.6655,1340.8721,1084.3750, 10, 70000, 60000, 82, 182 );
	CreateHouse( 83, -2662.119628, 876.332946, 79.773796, 2195.6973,-1204.0471,1049.0234, 6, 150000, 140000, 83, 183 );
	CreateHouse( 84, -2720.863525, 923.924316, 67.593750, 260.6836,1238.0439,1084.2578, 9, 100000, 90000, 84, 184 );
	CreateHouse( 85, -2706.658203, 864.452758, 70.703125, 295.7500,1474.5068,1080.2578, 15, 80000, 70000, 85, 185 );
	CreateHouse( 86, -2700.344482, 820.864379, 49.984375, 2309.0664, -1212.7429, 1049.0234, 6, 85000, 75000, 86, 186 );
	CreateHouse( 87, -2731.552978, 723.701904, 41.273437, -42.3936, 1406.0759, 1084.4297, 8, 55000, 45000, 87, 188 );
	CreateHouse( 88, -2625.480957, 733.115966, 28.010654, 266.8205, 305.0191, 999.1484, 2, 50000, 40000, 88, 189 );
	CreateHouse( 89, -2621.676025, 802.908203, 49.984375, 2233.6101, -1114.2667, 1050.8828, 5, 45000, 35000, 89, 190 );
	CreateHouse( 90, -2620.233154, 883.202697, 63.250000, 2283.3472,-1139.6055,1050.8984, 11, 45000, 35000, 90, 191 );
	CreateHouse( 91, -2791.599121, 218.618942, 7.859375, 225.4087, 1240.1775, 1082.1406, 2, 60000, 50000, 91, 192 );
	CreateHouse( 92, -2789.188720, 183.693084, 10.062500, 260.6836,1238.0439,1084.2578, 9, 60000, 60000, 92, 193 );
	CreateHouse( 93, -2790.246337, 69.721672, 7.201953, -42.3936, 1406.0759, 1084.4297, 8, 65000, 55000, 93, 194 );
	CreateHouse( 94, -2789.176757, -181.379821, 10.062500, 223.0062, 1287.1655, 1082.1406, 1, 65000, 55000, 94, 195 );
	CreateHouse( 95, -2720.905517, -320.711639, 7.843750, 140.6904,1367.2458,1083.8594, 5, 5000000, 4000000, 95, 196 );
	CreateHouse( 96, 699.6743, -1059.9338, 49.4217, 446.9973, 1398.4043, 1084.3120, 2, 150000, 150000, 96, 197 );
	CreateHouse( 97, -2725.785888, -36.433876, 7.195312, 223.0062, 1287.1655, 1082.1406, 1, 45000, 35000, 97, 198 );
	CreateHouse( 98, -2686.804199, 115.496765, 7.195312, 2283.3472,-1139.6055,1050.8984, 11, 45000, 35000, 98, 199 );
	CreateHouse( 99, -2630.925781, 252.858963, 7.187500, 22.9850, 1404.0869, 1084.4297, 5, 45000, 35000, 100, 100 );
	CreateHouse( 100, -2454.593505, -135.861633, 26.190830, 2267.3247, -1210.0126, 1048.2891, 10, 100000, 90000, 101, 201 );
	CreateHouse( 101, -2213.650634, 720.787231, 49.406250, 2309.0664, -1212.7429, 1049.0234, 6, 60000, 50000, 102, 202 );
	CreateHouse( 102, -2099.626220, 897.367736, 76.710937, 2195.6973,-1204.0471,1049.0234, 6, 150000, 140000, 103, 203 );
	CreateHouse( 103, -2152.507080, 1232.806884, 33.929687, -42.3936, 1406.0759, 1084.4297, 8, 65000, 55000, 104, 204 );
	CreateHouse( 104, -1970.510253, 1272.978759, 7.604368, 260.6836,1238.0439,1084.2578, 9, 85000, 75000, 105, 205 );
	CreateHouse( 105, -1872.068847, 1125.387451, 45.445312, 295.7500,1474.5068,1080.2578, 15, 40000, 30000, 106, 206 );
	CreateHouse( 106, -1872.070678, 1146.665161, 45.445312, 295.7500,1474.5068,1080.2578, 15, 45000, 35000, 107, 207 );
	CreateHouse( 107, 1106.544311, -299.730895, 74.539062, 260.6836,1238.0439,1084.2578, 9, 90000, 80000, 108, 208 );
	CreateHouse( 108, -2048.103271, 786.778564, 64.156250, 2267.3247, -1210.0126, 1048.2891, 10, 70000, 60000, 109, 209 );
	CreateHouse( 109, -2048.256103, 755.408935, 64.156250, 2267.3247, -1210.0126, 1048.2891, 10, 70000, 60000, 110, 210 );
	CreateHouse( 110, 1273.954711, 2522.520263, 10.820312, 2318.0107, -1026.4070, 1050.2178, 9, 200000, 190000, 111, 211 );
	CreateHouse( 111, 1453.953735, 2525.618652, 10.820312, 235.6503,1187.1404,1080.2578, 3, 150000, 140000, 112, 212 );
	CreateHouse( 112, 1500.817871, 2535.346435, 10.820312, 235.6503,1187.1404,1080.2578, 3, 140000, 130000, 113, 213 );
	CreateHouse( 113, 1456.134277, 2773.405029, 10.820312, 234.4912, 1065.4930, 1084.2097, 6, 6000000, 5000000, 114, 214 );
	CreateHouse( 114, 1575.742187, 2844.162353, 10.820312, 23.6655,1340.8721,1084.3750, 10, 150000, 140000, 115, 215 );
	CreateHouse( 115, 1678.483154, 2690.762207, 10.820312, 23.6655,1340.8721,1084.3750, 10, 190000, 180000, 116, 216 );
	CreateHouse( 116, 1929.851318, 2774.273681, 10.820312, 2324.3579, -1148.9768, 1050.7101, 12, 150000, 140000, 117, 217 );
	CreateHouse( 117, 2109.235839, 2652.891357, 10.812969, -42.3936, 1406.0759, 1084.4297, 8, 60000, 50000, 118, 218 );
	CreateHouse( 118, 985.478881, 2314.190185, 11.460937, 2365.1567, -1134.5105, 1050.8750, 8, 100000, 90000, 119, 219 );
	CreateHouse( 119, 986.432678, 2271.251953, 11.460937, 376.5438, 1417.5194, 1081.3281, 15, 100000, 90000, 120, 220 );
	CreateHouse( 120, 1030.807495, 2028.140136, 11.468292, 387.1854, 1471.9427, 1080.1875, 15, 90000, 80000, 122, 222 );
	CreateHouse( 121, 983.971679, 1978.313232, 11.468292, 22.9850, 1404.0869, 1084.4297, 5, 80000, 70000, 123, 223 );
	CreateHouse( 122, 929.063293, 2006.415405, 11.460937, 295.7500,1474.5068,1080.2578, 15, 100000, 90000, 124, 224 );
	CreateHouse( 123, 930.808471, 2027.918579, 11.468292, 2237.6770,-1080.4869,1049.0234, 2, 90000, 80000, 125, 225 );
	CreateHouse( 124, 1029.359375, 1905.890625, 11.460937, -68.63, 1351.83, 1080.21, 6, 95000, 85000, 126, 226 );
	CreateHouse( 125, 1319.304931, 2005.724487, 11.460937, 260.6836,1238.0439,1084.2578, 9, 90000, 80000, 127, 227 );
	CreateHouse( 126, 1309.257690, 1931.248535, 11.460937, -42.3936, 1406.0759, 1084.4297, 8, 90000, 80000, 128, 228 );
	CreateHouse( 127, 1365.413330, 1974.180541, 11.460937, 328.0467, 1478.5269, 1084.4375, 15, 80000, 70000, 129, 229 );
	CreateHouse( 128, 1408.277832, 1897.031738, 11.460937, 2365.1567, -1134.5105, 1050.8750, 8, 110000, 100000, 130, 230 );
	CreateHouse( 129, 1464.494750, 1895.143188, 11.460937, 387.1854, 1471.9427, 1080.1875, 15, 110000, 100000, 131, 231 );
	CreateHouse( 130, 1439.752441, 1951.253173, 11.460937, 225.4087, 1240.1775, 1082.1406, 2, 95000, 85000, 132, 232 );
	CreateHouse( 131, 1542.457641, 1996.354492, 14.739588, 223.0062, 1287.1655, 1082.1406, 1, 80000, 70000, 133, 233 );
	CreateHouse( 132, 263.5550, 2895.4639, 10.5314, 271.884979, 306.631988, 999.148437, 2, 20000, 20000, 134, 234 );
	// Casas da Ilha
	CreateHouse( 132, 592.864807, -2381.099853, 64.290695, 2318.0107, -1026.4070, 1050.2178, 9, 250000, 250000, 134, 234 );
	CreateHouse( 133, 1053.643310, -2483.835205, 17.819782, 140.6904,1367.2458,1083.8594, 5, 200000, 100000, 135, 235 );
	CreateHouse( 134, 1082.750854, -2515.653564, 17.819782, 225.6608, 1021.8754, 1084.0165, 7, 500000, 490000, 136, 236 );
	CreateHouse( 135, 1031.254516, -2523.482666, 17.822254, 234.4912, 1065.4930, 1084.2097, 6, 210000, 210000, 137, 237 );
	CreateHouse( 136, 881.999267, -2502.996826, 27.105165, 23.6655,1340.8721,1084.3750, 10, 100000, 90000, 138, 238 );
	CreateHouse( 137, 790.091247, -2504.546386, 27.230144, 235.6503,1187.1404,1080.2578, 3, 105000, 95000, 139, 239 );
	CreateHouse( 138, 870.475219, -2547.735351, 28.696594, -261.0245,1456.4869,1084.3672, 4, 140000, 130000, 140, 240 );
	CreateHouse( 139, 903.870422, -2534.483886, 28.660320, 23.6655,1340.8721,1084.3750, 10, 105000, 95000, 141, 242 );
	CreateHouse( 140, 904.132080, -2595.479492, 28.921607, -261.0245,1456.4869,1084.3672, 4, 130000, 120000, 142, 243 );
	CreateHouse( 141, 904.447814, -2609.959716, 28.660324, 447.3509,1397.9342,1084.3047, 2, 120000, 110000, 143, 244 );
	CreateHouse( 142, 904.961486, -2645.668212, 28.696594, 235.6503,1187.1404,1080.2578, 3, 140000, 130000, 144, 245 );
	CreateHouse( 143, 859.255493, -2633.546386, 29.429199, 225.6608, 1021.8754, 1084.0165, 7, 230000, 220000, 145, 246 );
	CreateHouse( 144, 860.335205, -2605.521728, 29.379228, 227.2102, 1114.0662, 1080.9976, 5, 200000, 190000, 146, 247 );
	CreateHouse( 145, 807.361389, -2633.802490, 29.429231, 140.6904,1367.2458,1083.8594, 5, 235000, 225000, 147, 248 );
	CreateHouse( 146, 808.222839, -2605.435302, 29.429199, 2324.3579, -1148.9768, 1050.7101, 12, 225000, 215000, 148, 249 );
	CreateHouse( 147, 760.147949, -2653.439453, 28.685325, 235.6503,1187.1404,1080.2578, 3, 110000, 100000, 149, 250 );
	CreateHouse( 148, 760.153991, -2617.550292, 28.646591, 23.6655,1340.8721,1084.3750, 10, 120000, 110000, 150, 251 );
	CreateHouse( 149, 760.037597, -2599.983642, 28.660320, 295.7500,1474.5068,1080.2578, 15, 110000, 100000, 151, 252 );
	CreateHouse( 150, 759.623840, -2572.602050, 28.660324, 376.5438, 1417.5194, 1081.3281, 15, 120000, 110000, 152, 253 );
	// New Casas
	CreateHouse( 151, 398.1205,-1271.3893,50.0198,204.9266,1238.0439,1084.2578, 9, 150000, 140000, 153, 254 );
	CreateHouse( 152, 553.0108,-1200.2533,44.8315,199.1079, 1240.1775, 1082.1406, 2, 130000, 120000, 154, 255 );
	CreateHouse( 153, 850.6680,-1686.4397,14.9384,261.0432, 306.631988, 999.148437, 2, 90000, 90000, 154, 256 );
	CreateHouse( 154, 1421.9442,-885.8036,50.6708,3.8767,1456.4869,1084.3672, 2, 100000, 100000, 156, 462 );
	CreateHouse( 155, 1026.606323, -1771.904907, 13.546875, 234.4912, 1065.4930, 1084.2097, 6, 250000, 250000, 158, 468 );
	CreateHouse( 156, 893.639160, -1637.187622, 14.929687, 2365.1567, -1134.5105, 1050.8750, 8, 110000, 110000, 160, 474 );
	CreateHouse( 157, 865.378417, -1635.407592, 14.929687, 22.9850, 1404.0869, 1084.4297, 5, 100000, 100000, 161, 477 );
	CreateHouse( 158, 847.953674, -1717.377807, 14.929687, 22.9850, 1404.0869, 1084.4297, 5, 100000, 100000, 161, 477 );
	CreateHouse( 159, 768.435852, -1696.560913, 5.155420, 266.8205, 305.0191, 999.1484, 2, 90000, 90000, 161, 477 );
	CreateHouse( 160, 315.850738, -1770.818481, 4.675946, -261.0245,1456.4869,1084.3672, 4, 150000, 150000, 162, 480 );
	CreateHouse( 161, 1326.313720, -1090.653930, 27.976562, 328.0467, 1478.5269, 1084.4375, 15, 110000, 110000, 163, 483 );
	CreateHouse( 162, 280.958984, -1768.304931, 4.527257, 2365.1567, -1134.5105, 1050.8750, 8, 10000, 10000, 164, 486 );
	CreateHouse( 163, 295.316589, -1765.412963, 4.546563, 344.3439, 304.6621, 999.1484, 6, 90000, 90000, 165, 489 );
	CreateHouse( 164, 386.846038, -1870.660522, 7.835937, 387.1854, 1471.9427, 1080.1875, 15, 110000, 110000, 166, 492 );
	CreateHouse( 165, 725.584106, -1450.463134, 17.695312, 295.7500,1474.5068,1080.2578, 15, 200000, 200000, 167, 495 );
	CreateHouse( 166, 766.517456, -1605.870971, 13.803857, -42.3936, 1406.0759, 1084.4297, 8, 100000, 100000, 168, 498 );
	CreateHouse( 167, 1289.109130, -1272.244750, 13.542202, 2283.3472,-1139.6055,1050.8984, 11, 100000, 100000, 170, 504 );
	CreateHouse( 168, 1939.085693, -1114.792846, 27.452295, -42.3936, 1406.0759, 1084.4297, 8, 80000, 80000, 170, 504 );
	CreateHouse( 169, 1999.984741, -1115.033447, 27.131803, -42.3936, 1406.0759, 1084.4297, 8, 80000, 80000, 171, 507 );
	CreateHouse( 170, 2045.425170, -1116.123657, 26.361747, 223.0062, 1287.1655, 1082.1406, 1, 90000, 90000, 172, 510 );
	CreateHouse( 171, 2104.922607, -1056.952880, 27.128387, 422.2346, 2536.7002, 10.0000, 10, 90000, 90000, 173, 513 );
	CreateHouse( 172, 2092.093505, -1067.542358, 27.624706, 266.8205, 305.0191, 999.1484, 2, 80000, 80000, 174, 516 );
	CreateHouse( 173, 2232.280273, -1159.736083, 29.796875, -42.3936, 1406.0759, 1084.4297, 8, 90000, 90000, 175, 519 );
	CreateHouse( 174, 2220.659912, -1083.307373, 41.773437, 223.0062, 1287.1655, 1082.1406, 1, 100000, 100000, 176, 522 );
	CreateHouse( 175, 2186.391845, -997.819946, 66.468750, 2283.3472,-1139.6055,1050.8984, 11, 110000, 110000, 177, 525 );
	CreateHouse( 176, 2260.054931, -1019.681213, 59.292358, 243.7343, 305.1178, 999.1484, 1, 120000, 120000, 178, 528 );
	CreateHouse( 177, 2090.899414, -972.821289, 51.919330, 344.3439, 304.6621, 999.1484, 6, 110000, 110000, 179, 531 );
	CreateHouse( 178, 2050.449462, -954.701293, 48.034595, 2283.3472,-1139.6055,1050.8984, 11, 100000, 100000, 180, 534 );
	CreateHouse( 179, 2140.082519, -1007.612731, 61.738796, 422.2346, 2536.7002, 10.0000, 10, 90000, 90000, 181, 537 );
	CreateHouse( 180, 2219.302734, -1031.028442, 59.928134, 422.2346, 2536.7002, 10.0000, 10, 90000, 90000, 182, 540 );
	CreateHouse( 181, 2283.890136, -1046.567504, 49.887119, 2233.6101, -1114.2667, 1050.8828, 5, 80000, 80000, 183, 543 );
	CreateHouse( 182, 2457.038085, -1101.867431, 43.867187, -42.3936, 1406.0759, 1084.4297, 8, 80000, 80000, 184, 546 );
	CreateHouse( 183, 2519.518310, -1112.960693, 56.592597, 2309.0664, -1212.7429, 1049.0234, 6, 80000, 80000, 185, 549 );
	CreateHouse( 184, 2571.983398, -1091.349121, 67.225723, -68.63, 1351.83, 1080.21, 6, 100000, 100000, 186, 552 );
	CreateHouse( 185, 2756.289062, -1182.147216, 69.398910, 376.5438, 1417.5194, 1081.3281, 15, 120000, 120000, 187, 555 );
	CreateHouse( 186, 2852.919921, -1366.005371, 14.164062, -261.0245,1456.4869,1084.3672, 4, 120000, 120000, 188, 558 );
	CreateHouse( 187, 2842.314697, -1335.614135, 14.742118, 22.9850, 1404.0869, 1084.4297, 5, 100000, 100000, 189, 561 );
	CreateHouse( 188, 2808.119628, -1176.729858, 25.375110, 328.0467, 1478.5269, 1084.4375, 15, 110000, 110000, 190, 564 );
	CreateHouse( 189, 2808.011718, -1190.001342, 25.345382, -42.3936, 1406.0759, 1084.4297, 8, 90000, 90000, 191, 567 );
	CreateHouse( 190, 2801.430908, -1105.274414, 30.719810, -261.0245,1456.4869,1084.3672, 4, 90000, 90000, 192, 570 );
	CreateHouse( 191, 2801.336914, -1070.434692, 30.630123, -261.0245,1456.4869,1084.3672, 4, 90000, 90000, 193, 573 );
	CreateHouse( 192, 2793.777343, -1087.522827, 30.718750, 140.6904,1367.2458,1083.8594, 5, 200000, 200000, 194, 576 );
	CreateHouse( 193, 2637.785156, -1992.366210, 13.993547, 223.0062, 1287.1655, 1082.1406, 1, 80000, 80000, 195, 579 );
	CreateHouse( 194, 2695.256103, -2020.060180, 14.022284, -68.63, 1351.83, 1080.21, 6, 85000, 85000, 196, 582 );
	CreateHouse( 195, 2483.441650, -1996.197631, 13.834323, 223.0062, 1287.1655, 1082.1406, 1, 90000, 90000, 197, 585 );
	CreateHouse( 196, 2523.692626, -1998.932983, 13.782610, 243.7343, 305.1178, 999.1484, 1, 70000, 70000, 198, 588 );
	CreateHouse( 197, 2486.462646, -2020.336059, 13.554044, 422.2346, 2536.7002, 10.0000, 10, 75000, 75000, 199, 591 );
	CreateHouse( 198, 2395.722656, -1796.108520, 13.546875, 295.7500,1474.5068,1080.2578, 15, 100000, 100000, 200, 594 );
	CreateHouse( 199, 2385.490722, -1712.319824, 14.242187, 2333.2029,-1076.5475,1049.0234, 6, 90000, 90000, 201, 597 );
	CreateHouse( 200, 2409.012451, -1673.364013, 13.598647, 223.0062, 1287.1655, 1082.1406, 1, 90000, 90000, 202, 600 );
	CreateHouse( 201, -2027.774780, -41.336177, 38.804687, 2309.0664, -1212.7429, 1049.0234, 6, 55000, 55000, 203, 603 );
	CreateHouse( 202, -2511.479003, 942.798706, 65.289062, 2283.3472,-1139.6055,1050.8984, 11, 50000, 50000, 204, 606 );
	CreateHouse( 203, -2552.041992, 2266.523193, 5.475524, 295.7500,1474.5068,1080.2578, 15, 85000, 85000, 205, 609 );
	CreateHouse( 204, -2059.075927, 890.156127, 61.853214, 22.9850, 1404.0869, 1084.4297, 5, 65000, 65000, 206, 612 );
	CreateHouse( 205, -2689.015380, 198.373107, 7.203125, 223.0062, 1287.1655, 1082.1406, 1, 68000, 68000, 207, 615 );
	CreateHouse( 206, -2687.435546, -188.129776, 7.203125, -68.63, 1351.83, 1080.21, 6, 63000, 63000, 208, 618 );
	CreateHouse( 207, -2622.882812, -99.349082, 7.203125, 223.0062, 1287.1655, 1082.1406, 1, 65000, 65000, 209, 621 );
	CreateHouse( 208, -2386.561279, 2446.765380, 10.169355, 235.6503,1187.1404,1080.2578, 3, 180000, 180000, 210, 624 );
	CreateHouse( 209, -2597.888427, 2357.067871, 9.882995, -261.0245,1456.4869,1084.3672, 4, 175000, 175000, 210, 626 );
	CreateHouse( 210, -2523.596435, 2239.458740, 5.398399, -68.63, 1351.83, 1080.21, 6, 63000, 63000, 212, 630 );
	CreateHouse( 211, -2582.393554, 2300.270996, 7.002885, 2318.0107, -1026.4070, 1050.2178, 9, 190000, 190000, 213, 633 );
	CreateHouse( 212, -2627.063964, 2283.357910, 8.310260, 23.6655,1340.8721,1084.3750, 10, 170000, 170000, 214, 636 );
	CreateHouse( 213, -2636.382324, 2351.317382, 8.506015, 235.6503,1187.1404,1080.2578, 3, 185000, 185000, 215, 639 );
	CreateHouse( 214, -2632.825195, 2410.610595, 14.023668, 23.6655,1340.8721,1084.3750, 10, 155000, 155000, 216, 642 );
	CreateHouse( 215, -2472.274169, 2450.952148, 17.323022, -261.0245,1456.4869,1084.3672, 4, 150000, 150000, 217, 645 );
	CreateHouse( 216, -2424.731201, 2448.580078, 13.155824, 23.6655,1340.8721,1084.3750, 10, 160000, 160000, 218, 648 );
	CreateHouse( 217, -2398.545166, 2409.135986, 8.910329, -261.0245,1456.4869,1084.3672, 4, 170000, 170000, 219, 651 );
	CreateHouse( 218, -2437.392333, 2354.649169, 5.443065, 260.6836,1238.0439,1084.2578, 9, 55000, 55000, 220, 654 );
	CreateHouse( 219, -2058.052490, -2465.255615, 31.179687, 2309.0664, -1212.7429, 1049.0234, 6, 35000, 35000, 221, 657 );
	CreateHouse( 220, -2161.130126, -2535.214843, 31.816270, -42.3936, 1406.0759, 1084.4297, 8, 60000, 60000, 222, 660 );
	CreateHouse( 221, -2192.544677, -2510.078125, 31.816272, 225.4087, 1240.1775, 1082.1406, 2, 60000, 60000, 223, 663 );
	CreateHouse( 222, -2239.034179, -2423.975585, 32.707267, 2333.2029,-1076.5475,1049.0234, 6, 50000, 50000, 224, 666 );
	CreateHouse( 223, -2075.999511, -2312.472900, 31.131250, 2333.2029,-1076.5475,1049.0234, 6, 65000, 65000, 225, 669 );
	CreateHouse( 224, -2174.052978, -2481.820800, 31.816272, 2333.2029,-1076.5475,1049.0234, 6, 53000, 53000, 226, 672 );
	CreateHouse( 225, -2132.262207, -2511.306884, 31.816272, 225.4087, 1240.1775, 1082.1406, 2, 57000, 57000, 227, 675 );
	CreateHouse( 226, -2199.415527, -2243.162841, 33.320312, 2309.0664, -1212.7429, 1049.0234, 6, 40000, 40000, 228, 678 );
	CreateHouse( 227, -2180.134033, -2258.507324, 33.320312, 2309.0664, -1212.7429, 1049.0234, 6, 40000, 40000, 229, 681 );
	CreateHouse( 228, -1533.174438, 2656.643066, 56.281360, 2333.2029,-1076.5475,1049.0234, 6, 54000, 54000, 230, 684 );
	CreateHouse( 229, -1667.326782, 2486.338378, 87.171875, 2309.0664, -1212.7429, 1049.0234, 6, 48000, 48000, 231, 687 );
	CreateHouse( 230, -1500.039184, 1960.520019, 49.023437, 223.0062, 1287.1655, 1082.1406, 1, 55000, 55000, 232, 690 );
	CreateHouse( 231, -1426.852905, 2170.834960, 50.625000, 243.7343, 305.1178, 999.1484, 1, 38000, 38000, 233, 693 );
	CreateHouse( 232, -314.644470, 1774.510131, 43.640625, 2195.6973,-1204.0471,1049.0234, 6, 140000, 140000, 234, 696 );
	CreateHouse( 233, -12.484356, 2350.825927, 24.140625, 2283.3472,-1139.6055,1050.8984, 11, 35000, 35000, 235, 699 );
	CreateHouse( 234, -322.784698, 2675.584228, 63.679687, 260.6836,1238.0439,1084.2578, 9, 60000, 60000, 236, 702 );
	CreateHouse( 235, -102.192985, 1234.479125, 22.440261, 2233.6101, -1114.2667, 1050.8828, 5, 50000, 50000, 237, 705 );
	CreateHouse( 236, -77.451690, 1234.440063, 22.440261, 2233.6101, -1114.2667, 1050.8828, 5, 50000, 50000, 238, 708 );
	CreateHouse( 237, 12.700467, 1113.073730, 20.939867, 387.1854, 1471.9427, 1080.1875, 15, 62000, 62000, 239, 711 );
	CreateHouse( 238, 1.246908, 1076.138305, 20.939865, 376.5438, 1417.5194, 1081.3281, 15, 63000, 63000, 240, 714 );
	CreateHouse( 239, -32.238872, 1038.161499, 20.939867, -42.3936, 1406.0759, 1084.4297, 8, 61500, 61500, 241, 717 );
	CreateHouse( 240, -36.063976, 1115.193237, 20.939863, -68.63, 1351.83, 1080.21, 6, 65000, 65000, 242, 720 );
	CreateHouse( 241, -258.878479, 1151.084472, 20.939865, 223.0062, 1287.1655, 1082.1406, 1, 66000, 66000, 243, 723 );
	CreateHouse( 242, -258.771026, 1083.588012, 20.939867, 2333.2029,-1076.5475,1049.0234, 6, 61000, 61000, 244, 726 );
	CreateHouse( 243, -247.831192, 1001.544250, 20.939865, 2309.0664, -1212.7429, 1049.0234, 6, 60500, 60500, 245, 729 );
	CreateHouse( 244, -298.279846, 1115.115112, 20.939865, 2283.3472,-1139.6055,1050.8984, 11, 62500, 62500, 246, 732 );
	CreateHouse( 245, -362.073028, 1110.587890, 20.939865, 223.0062, 1287.1655, 1082.1406, 1, 65500, 65500, 247, 735 );
	CreateHouse( 246, -369.471771, 1169.205566, 20.271875, 2267.3247, -1210.0126, 1048.2891, 10, 77000, 77000, 248, 738 );
	CreateHouse( 247, 294.986419, -54.950302, 2.777210, 387.1854, 1471.9427, 1080.1875, 15, 75000, 75000, 249, 741 );
	CreateHouse( 248, 313.438262, -92.284751, 3.535393, 295.7500,1474.5068,1080.2578, 15, 79000, 79000, 250, 744 );
	CreateHouse( 249, 313.248474, -121.320854, 3.535394, -42.3936, 1406.0759, 1084.4297, 8, 77500, 77500, 251, 747 );
	CreateHouse( 250, 252.386215, -92.396453, 3.535394, -68.63, 1351.83, 1080.21, 6, 76500, 76500, 252, 750 );
	CreateHouse( 251, 252.484497, -121.196304, 3.535393, 2283.3472,-1139.6055,1050.8984, 11, 74500, 74500, 253, 753 );
	CreateHouse( 252, 2550.897216, 57.234905, 27.675645, 295.7500,1474.5068,1080.2578, 15, 80000, 80000, 254, 756 );
	CreateHouse( 253, 2479.3501, 94.6164, 27.6835, 295.7500,1474.5068,1080.2578, 15, 82000, 82000, 255, 759 );
	CreateHouse( 254, 2443.318847, 61.331012, 28.441642, 387.1854, 1471.9427, 1080.1875, 15, 77000, 77000, 256, 762 );
	CreateHouse( 255, 2484.448486, -28.047594, 28.441642, -68.63, 1351.83, 1080.21, 6, 75000, 75000, 257, 765 );
	CreateHouse( 256, 2548.772216, 25.203191, 27.675647, 295.7500,1474.5068,1080.2578, 15, 81000, 81000, 258, 768 );
	CreateHouse( 257, 2415.537353, -51.621799, 28.153547, 2333.2029,-1076.5475,1049.0234, 6, 74000, 74000, 259, 771 );
	CreateHouse( 258, 2367.343994, -48.657531, 28.153547, -68.63, 1351.83, 1080.21, 6, 76000, 76000, 260, 774 );
	CreateHouse( 259, 2374.631835, 71.126762, 28.441642, 2283.3472,-1139.6055,1050.8984, 11, 75500, 75500, 261, 777 );
	CreateHouse( 260, 2374.504150, -8.704338, 28.441642, 223.0062, 1287.1655, 1082.1406, 1, 76500, 76500, 262, 780 );
	CreateHouse( 261, 2293.746337, -124.591171, 28.153549, 2333.2029,-1076.5475,1049.0234, 6, 69000, 69000, 263, 783 );
	CreateHouse( 262, 2245.462646, -121.566802, 28.153547, -42.3936, 1406.0759, 1084.4297, 8, 70000, 70000, 264, 786 );
	CreateHouse( 263, 2203.519287, -89.292785, 28.153547, 2309.0664, -1212.7429, 1049.0234, 6, 68000, 68000, 265, 789 );
	CreateHouse( 264, 2245.399658, -2.166630, 28.153551, 2309.0664, -1212.7429, 1049.0234, 6, 68100, 68100, 266, 792 );
	CreateHouse( 265, 2324.527832, 191.092453, 28.441642, 2283.3472,-1139.6055,1050.8984, 11, 66500, 66500, 267, 795 );
	CreateHouse( 266, 2363.270751, 116.155487, 28.441644, 223.0062, 1287.1655, 1082.1406, 1, 67500, 67500, 268, 798 );
	CreateHouse( 267, 2236.477294, 167.787551, 28.153549, 2283.3472,-1139.6055,1050.8984, 11, 67000, 67000, 269, 801 );
	CreateHouse( 268, 2285.895751, 161.123901, 28.441642, 2283.3472,-1139.6055,1050.8984, 11, 65000, 65000, 270, 804 );
	CreateHouse( 269, 2204.764648, 62.253032, 28.441644, 2309.0664, -1212.7429, 1049.0234, 6, 64000, 64000, 271, 807 );
	CreateHouse( 270, 818.179626, -509.859497, 18.012922, 2283.3472,-1139.6055,1050.8984, 11, 70000, 70000, 272, 810 );
	CreateHouse( 271, 768.233947, -504.002655, 18.012926, 223.0062, 1287.1655, 1082.1406, 1, 75000, 75000, 273, 813 );
	CreateHouse( 272, 795.175170, -507.019897, 18.012922, 223.0062, 1287.1655, 1082.1406, 1, 79000, 79000, 274, 816 );
	CreateHouse( 273, 745.154541, -556.204772, 18.012926, 2283.3472,-1139.6055,1050.8984, 11, 72000, 72000, 275, 819 );
	CreateHouse( 274, 228.433258, -1404.735229, 51.609375, 295.7500,1474.5068,1080.2578, 15, 110000, 110000, 276, 822 );
	CreateHouse( 275, 219.656082, -1250.206909, 78.333290, 2324.3579, -1148.9768, 1050.7101, 12, 200000, 200000, 277, 825 );
	CreateHouse( 276, 977.319824, -770.868835, 112.202629, 2324.3579, -1148.9768, 1050.7101, 12, 189000, 189000, 278, 828 );
	CreateHouse( 277, 808.810058, -759.292053, 76.531364, 295.7500,1474.5068,1080.2578, 15, 120000, 120000, 279, 831 );
	CreateHouse( 278, 416.458892, -1154.410034, 76.687614, 295.7500,1474.5068,1080.2578, 15, 120000, 120000, 280, 834 );
	CreateHouse( 279, 558.641357, -1075.706665, 72.921989, 295.7500,1474.5068,1080.2578, 15, 120000, 120000, 281, 837 );
    CreateHouse( 280, 2495.3457, -1690.2333, 14.7656, 2496.0549, -1695.1749, 1014.7422, 3, 100000, 100000, 0, 100 );
	CreateHouse( 281, 431.917968, -1253.568603, 51.580940, 2237.6770,-1080.4869,1049.0234, 2, 180000, 180000, 254, 756 );
	CreateHouse( 282, 471.023254, -1164.432983, 67.190299, 2365.1567, -1134.5105, 1050.8750, 8, 150000, 150000, 255, 759 );
	CreateHouse( 283, 645.6658, -1117.0242, 44.2070, 376.5438, 1417.5194, 1081.3281, 15, 180000, 180000, 256, 762 );
	CreateHouse( 284, 345.3512, -1297.8828, 50.7590, 2365.1567, -1134.5105, 1050.8750, 8, 160000, 160000, 257, 765 );
	CreateHouse( 285, 351.739074, -1197.094726, 76.515625, 295.7500,1474.5068,1080.2578, 15, 150000, 150000, 258, 768 );
	CreateHouse( 286, 143.4206, -1469.4476, 25.2036, 2365.1567, -1134.5105, 1050.8750, 8, 230000, 230000, 259, 771 );
	CreateHouse( 287, 730.882202, -1013.599182, 52.737854, 260.6836,1238.0439,1084.2578, 9, 190000, 190000, 260, 774 );
	CreateHouse( 288, 785.798706, -828.027893, 70.289581, -68.63, 1351.83, 1080.21, 6, 150000, 150000, 261, 777 );
	CreateHouse( 289, 827.971252, -858.642089, 70.330810, 376.5438, 1417.5194, 1081.3281, 15, 180000, 180000, 262, 780 );
	CreateHouse( 290, 836.378356, -894.059631, 68.768898, 234.4912, 1065.4930, 1084.2097, 6, 250000, 250000, 263, 783 );
	CreateHouse( 291, 835.827270, -928.997314, 55.250000, 2237.6770,-1080.4869,1049.0234, 2, 210000, 210000, 264, 786 );
	CreateHouse( 292, 952.593933, -910.448913, 45.765625, 140.6904,1367.2458,1083.8594, 5, 300000, 300000, 265, 789 );
	CreateHouse( 293, 1050.992797, -1057.807983, 34.796875, 23.6655,1340.8721,1084.3750, 10, 150000, 150000, 266, 792 );
	CreateHouse( 294, 1118.052246, -1022.351745, 34.992187, 295.7500,1474.5068,1080.2578, 15, 170000, 170000, 267, 795 );
	CreateHouse( 295, 1127.994140, -1022.467224, 34.992187, 2237.6770,-1080.4869,1049.0234, 2, 190000, 190000, 268, 798 );
	CreateHouse( 296, 1189.554321, -1018.033569, 36.234375, 2333.2029,-1076.5475,1049.0234, 6, 80000, 80000, 269, 801 );
	CreateHouse( 297, 1227.951538, -1017.142456, 36.335937, 2333.2029,-1076.5475,1049.0234, 6, 80000, 80000, 270, 804 );
	CreateHouse( 298, 1242.578979, -1076.549438, 31.554687, 447.3509,1397.9342,1084.3047, 2, 150000, 150000, 271, 807 );
	CreateHouse( 299, 1183.166503, -1076.158447, 31.678918, 235.6503,1187.1404,1080.2578, 3, 160000, 160000, 272, 810 );
	CreateHouse( 300, 1111.487670, -975.658752, 42.765625, 2195.6973,-1204.0471,1049.0234, 6, 150000, 150000, 273, 813 );
	CreateHouse( 301, 423.708740, 2536.581054, 16.148437, 243.7343, 305.1178, 999.1484, 1, 80000, 80000, 303, 903 );
	CreateHouse( 302, -254.704086, 2603.216064, 62.858154, 227.2102, 1114.0662, 1080.9976, 5, 350000, 350000, 304, 906 );
	CreateHouse( 303, -208.132644, 2712.909179, 62.979370, 422.2346, 2536.7002, 10.0000, 10, 35000, 35000, 305, 909 );
	CreateHouse( 304, -232.912322, 2807.542968, 62.054687, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 306, 912 );
	CreateHouse( 305, -553.490844, 2593.794189, 53.934780, 225.6608, 1021.8754, 1084.0165, 7, 200000, 200000, 307, 915 );
	CreateHouse( 306, -362.244079, 2222.264648, 43.007812, 2333.2029,-1076.5475,1049.0234, 6, 20000, 20000, 308, 918 );
	CreateHouse( 307, -431.072906, 2240.711425, 42.983383, -42.3936, 1406.0759, 1084.4297, 8, 22000, 22000, 309, 921 );
	CreateHouse( 308, -1390.018554, 2638.048583, 55.984375, 2333.2029,-1076.5475,1049.0234, 6, 25000, 25000, 310, 924 );
	CreateHouse( 309, -1051.527343, 1549.818725, 33.437610, 2333.2029,-1076.5475,1049.0234, 6, 25000, 25000, 311, 927 );
	CreateHouse( 310, -746.166687, 1590.162109, 26.975921, 266.8205, 305.0191, 999.1484, 2, 30000, 30000, 312, 930 );
	CreateHouse( 311, -795.678405, 1557.046020, 27.124444, 344.3439, 304.6621, 999.1484, 6, 28000, 28000, 313, 933 );
	CreateHouse( 312, -773.805786, 1425.845825, 13.945312, 266.8205, 305.0191, 999.1484, 2, 20000, 20000, 314, 936 );
	CreateHouse( 313, -308.319488, 1538.374023, 75.562500, 223.0062, 1287.1655, 1082.1406, 1, 35000, 35000, 315, 939 );
	CreateHouse( 314, 2238.006835, 1285.748779, 10.820312, 140.6904,1367.2458,1083.8594, 5, 400000, 400000, 316, 942 );
	CreateHouse( 315, 2186.077148, 1113.818969, 12.648437, 225.6608, 1021.8754, 1084.0165, 7, 400000, 400000, 317, 945 );
	CreateHouse( 316, 1374.702880, 475.196289, 20.053573, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 318, 948 );
	CreateHouse( 317, 870.177734, -25.506868, 63.943473, 221.8483, 1140.6533, 1082.6094, 4, 80000, 80000, 319, 951 );
	CreateHouse( 318, -381.753784, -1438.930053, 25.726562, 140.6904,1367.2458,1083.8594, 5, 200000, 200000, 320, 954 );
	CreateHouse( 319, -283.303649, -2174.710205, 28.666320, 260.6836,1238.0439,1084.2578, 9, 190000, 190000, 321, 957 );
	CreateHouse( 320, -607.461181, -1074.881591, 23.518177, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 322, 960 );
	CreateHouse( 321, -601.159545, -1065.905029, 23.406784, 243.7343, 305.1178, 999.1484, 1, 25000, 25000, 323, 963 );
	CreateHouse( 322, -594.730285, -1057.355102, 23.357742, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 324, 966 );
	CreateHouse( 323, -588.549865, -1049.303466, 23.349040, 243.7343, 305.1178, 999.1484, 1, 25000, 25000, 325, 969 );
	CreateHouse( 324, -582.584533, -1040.734008, 23.594219, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 326, 972 );
	CreateHouse( 325, -576.570190, -1032.448486, 23.817081, 243.7343, 305.1178, 999.1484, 1, 25000, 25000, 327, 975 );
	CreateHouse( 326, -347.909973, -1046.598144, 59.812500, 223.0062, 1287.1655, 1082.1406, 1, 100000, 100000, 328, 978 );
	CreateHouse( 327, -491.537445, -193.745880, 78.345634, 422.2346, 2536.7002, 10.0000, 10, 60000, 60000, 329, 981 );
	CreateHouse( 328, 2351.967285, -1169.586914, 28.022224, 295.7500,1474.5068,1080.2578, 15, 150000, 150000, 330, 984 );
	CreateHouse( 329, 2382.882568, -1366.293701, 24.491352, -42.3936, 1406.0759, 1084.4297, 8, 80000, 80000, 331, 987 );
	CreateHouse( 330, 2153.657470, -1242.888671, 25.367187, 2365.1567, -1134.5105, 1050.8750, 8, 100000, 100000, 332, 990 );
	CreateHouse( 331, 2110.962402, -1243.621704, 25.851562, 2365.1567, -1134.5105, 1050.8750, 8, 100000, 100000, 333, 993 );
	CreateHouse( 332, 2095.265625, -1145.089721, 26.592920, -68.63, 1351.83, 1080.21, 6, 100000, 100000, 334, 996 );
	CreateHouse( 333, 2111.207031, -1279.811889, 25.687500, 22.9850, 1404.0869, 1084.4297, 5, 100000, 100000, 335, 999 );
	CreateHouse( 334, 2100.861328, -1321.039184, 25.953125, 22.9850, 1404.0869, 1084.4297, 5, 80000, 80000, 336, 1002 );
	CreateHouse( 335, 2126.705322, -1319.908081, 26.624101, 23.6655,1340.8721,1084.3750, 10, 120000, 120000, 337, 1005 );
	CreateHouse( 336, 2132.284667, -1280.719360, 25.890625, 223.0062, 1287.1655, 1082.1406, 1, 90000, 90000, 338, 1008 );
	CreateHouse( 337, 2148.491210, -1319.070434, 25.743345, 2283.3472,-1139.6055,1050.8984, 11, 90000, 90000, 339, 1011 );
	CreateHouse( 338, 2191.521972, -1276.447387, 25.156250, 422.2346, 2536.7002, 10.0000, 10, 60000, 60000, 340, 1014 );
	CreateHouse( 339, 2250.281738, -1280.986206, 25.476562, -42.3936, 1406.0759, 1084.4297, 8, 70000, 70000, 341, 1017 );
	CreateHouse( 340, 2256.489501, -1395.528808, 24.000000, 2333.2029,-1076.5475,1049.0234, 6, 50000, 50000, 342, 1020 );
	CreateHouse( 341, 2191.358886, -1470.371459, 25.914062, 243.7343, 305.1178, 999.1484, 1, 50000, 50000, 343, 1023 );
	CreateHouse( 342, 2149.864501, -1419.042846, 25.921875, 223.0062, 1287.1655, 1082.1406, 1, 70000, 70000, 344, 1026 );
	CreateHouse( 343, 1468.692871, -905.167297, 54.835937, 260.6836,1238.0439,1084.2578, 9, 100000, 100000, 345, 1029 );
	CreateHouse( 344, 1536.104248, -885.078125, 57.657482, 225.4087, 1240.1775, 1082.1406, 2, 100000, 100000, 346, 1032 );
	CreateHouse( 345, 1539.977050, -851.510742, 64.336059, 235.6503,1187.1404,1080.2578, 3, 120000, 120000, 347, 1035 );
	CreateHouse( 346, 1034.426757, -811.965637, 101.851562, 2365.1567, -1134.5105, 1050.8750, 8, 100000, 100000, 348, 1038 );
	CreateHouse( 347, 989.746826, -828.423828, 95.468574, 376.5438, 1417.5194, 1081.3281, 15, 110000, 110000, 349, 1041 );
	CreateHouse( 348, 1378.942260, -1753.133666, 14.140625, 2267.3247, -1210.0126, 1048.2891, 10, 95000, 95000, 350, 1044 );
	CreateHouse( 349, 2014.450073, -1732.512451, 14.235466, 223.0062, 1287.1655, 1082.1406, 1, 100000, 100000, 351, 1047 );
	CreateHouse( 350, 1894.466430, -2021.346557, 13.546875, 422.2346, 2536.7002, 10.0000, 10, 40000, 40000, 352, 1050 );
	CreateHouse( 351, 692.8987, -1602.7727, 15.0469, 23.6655, 1340.8721, 1084.3750, 10, 150000, 150000, 353, 1053 );
	CreateHouse( 352, 2147.5879, -1367.0447, 25.6418, 2283.3472,-1139.6055,1050.8984, 11, 110000, 110000, 354, 1054 );
    CreateHouse( 353, 937.3655, -847.6946, 93.7398, -68.5478, 1353.0201, 1080.2109, 6, 150000, 150000, 355, 1056 );
//    CreateHouse( 354, 231.3050, -1819.5000, 4.1184, 447.3509, 1397.9342, 1084.3047, 2, 300000, 300000, 356, 1062 ); // Festa - Praia
    CreateHouse( 355, 2027.5443,1917.5222,12.3373, 2216.1282, -1076.3052, 1050.4844, 1, 150000, 150000, 357, 1066 );
    CreateHouse( 356, 993.7194,-1057.6760,33.7031, 2324.3579, -1148.9768, 1050.7101, 12, 170000, 170000, 359, 1067 );
    // Casas Vila Da CSI
    CreateHouse( 357, 2261.963134, 589.187866, 7.786874, 387.1854, 1471.9427, 1080.1875, 15, 250000, 250000, 359, 1071 );
	CreateHouse( 358, 2260.515625, 563.880249, 7.785625, 23.6655,1340.8721,1084.3750, 10, 250000, 250000, 360, 1074 );
	CreateHouse( 359, 2325.656250, 579.700317, 7.786874, 295.7500,1474.5068,1080.2578, 15, 250000, 250000, 361, 1077 );
	CreateHouse( 360, 2344.977050, 580.741577, 7.796875, 2237.6770,-1080.4869,1049.0234, 2, 250000, 250000, 362, 1080 );
	CreateHouse( 361, 2372.857666, 579.677185, 7.781250, -261.0245,1456.4869,1084.3672, 4, 250000, 250000, 363, 1083 );
	// Veículos das Casas
	CreateHouseCar( 1, 0, -687.3868,965.7045,11.8777,90.9877, 0, 0, -1 );
	CreateHouseCar( 2, 0, 1517.4708,-694.2891,94.4554,89.7378, 0, 0, -1 );
	CreateHouseCar( 3, 0, 1354.9941,-630.3472,108.8381,17.4824, 0, 0, -1 );
	CreateHouseCar( 4, 0, 2516.3625, -1671.9678, 13.5918, 58.2170, 0, 0, -1 );
	CreateHouseCar( 5, 0, 2517.1094,-1664.5002,13.6933,96.5770, 0, 0, -1 );
	CreateHouseCar( 6, 0, 2503.0354,-1657.8546,13.1154,53.9267, 0, 0, -1 );
	CreateHouseCar( 7, 0, 2498.3149,-1653.5753,13.1456,80.1001, 0, 0, -1 );
	CreateHouseCar( 8, 0, 2484.5068,-1654.7645,13.0966,89.7307, 0, 0, -1 );
	CreateHouseCar( 9, 0, 2443.4265, -1645.5237, 13.1781, 178.6024, 0, 0, -1 );
	CreateHouseCar( 10, 0, 2065.2610,-1694.3782,13.2522,269.6798, 0, 0, -1 );
	CreateHouseCar( 11, 0, 2169.4944,-1678.7472,14.7907,315.6564, 0, 0, -1 );
	CreateHouseCar( 12, 0, 1980.0782,-1710.6604,15.6740,270.3912, 0, 0, -1 );
	CreateHouseCar( 13, 0, 1422.9460,-918.9777,35.7518,171.2688, 0, 0, -1 );
	CreateHouseCar( 14, 0, 1529.5782,-813.4952,71.5919,89.4726, 0, 0, -1 );
	CreateHouseCar( 15, 0, 1515.0631,-766.3877,79.9059,136.6565, 0, 0, -1 );
	CreateHouseCar( 16, 0, 1460.4629,-634.8943,95.5478,178.9956, 0, 0, -1 );
	CreateHouseCar( 17, 0, 1094.3132,-827.4517,86.6496,94.5609, 0, 0, -1 );
	CreateHouseCar( 18, 0, 1108.7673,-732.5138,100.2081,90.7626, 0, 0, -1 );
	CreateHouseCar( 19, 0, 1088.8481,-641.2798,112.8503,269.4590, 0, 0, -1 );
	CreateHouseCar( 20, 0, 1052.0073,-638.1581,119.8224,96.0242, 0, 0, -1 );
	CreateHouseCar( 21, 0, 1006.3774,-662.0094,120.8522,30.9535, 0, 0, -1 );
	CreateHouseCar( 22, 0, 945.1553,-716.7941,121.9158,28.0664, 0, 0, -1 );
	CreateHouseCar( 23, 0, 912.3835,-665.6247,117.1956,236.6676, 0, 0, -1 );
	CreateHouseCar( 24, 0, 836.3948,-755.5460,85.7745,221.2043, 0, 0, -1 );
	CreateHouseCar( 25, 0, 883.7321,-783.2852,101.6222,294.8188, 0, 0, -1 );
	CreateHouseCar( 26, 0, 479.8321,-1089.8436,83.0432,358.0445, 0, 0, -1 );
	CreateHouseCar( 27, 0, 287.5587,-1156.4557,81.2000,227.1200, 0, 0, -1 );
	CreateHouseCar( 28, 0, 270.3034,-1205.0654,75.5973,218.6077, 0, 0, -1 );
	CreateHouseCar( 29, 0, 277.5040,-1267.1361,75.0659,215.2186, 0, 0, -1 );
	CreateHouseCar( 30, 0, 251.5024,-1358.9968,53.2786,306.3808, 0, 0, -1 );
	CreateHouseCar( 31, 0, 311.2965,-1334.9668,53.3720,37.6192, 0, 0, -1 );
	CreateHouseCar( 32, 0, 179.1255,-1332.2999,70.8059,177.9881, 0, 0, -1 );
	CreateHouseCar( 33, 0, 730.7025,-1290.4763,13.7366,358.4771, 0, 0, -1 );
	CreateHouseCar( 34, 0, 766.9962,-1421.3713,13.7076,359.4164, 0, 0, -1 );
	CreateHouseCar( 35, 0, 2473.2305, -1694.3531, 13.2206, 359.9984, 0, 0, -1 );
	CreateHouseCar( 36, 0, 1254.6884,-805.5715,83.8677,179.0475, 0, 0, -1 );
	CreateHouseCar( 37, 0, -77.9988,76.9696,3.3848,68.4252, 0, 0, -1 );
	CreateHouseCar( 38, 0, -901.0707,2688.1077,43.2706,44.7500, 0, 0, -1 );
	CreateHouseCar( 39, 0, 1856.7719,-1924.3473,13.4724,89.9669, 0, 0, -1 );
	CreateHouseCar( 40, 0, 1878.0116,-1924.3644,13.2521,89.9761, 0, 0, -1 );
	CreateHouseCar( 41, 0, 1898.9370,-1924.6112,13.2533,89.1331, 0, 0, -1 );
	CreateHouseCar( 42, 0, 1942.6576,-1924.9049,13.2513,90.1749, 0, 0, -1 );
	CreateHouseCar( 43, 0, 1918.6223,-1924.9786,13.2516,90.1755, 0, 0, -1 );
	CreateHouseCar( 44, 0, 1141.1304,-2037.0978,69.3960,269.9436, 0, 0, -1 );
	CreateHouseCar( 45, 0, 1847.7256,-2144.5566,13.4712,183.7308, 0, 0, -1 );
	CreateHouseCar( 46, 0, 1870.0549,-2145.5664,14.0081,180.9775, 0, 0, -1 );
	CreateHouseCar( 47, 0, 1891.3715,-2144.6455,13.4718,183.5147, 0, 0, -1 );
	CreateHouseCar( 48, 0, 707.6241,-1694.3922,3.7638,0.2565, 0, 0, -1 );
	CreateHouseCar( 49, 0, 1793.5309,-2129.0083,14.0086,359.0665, 0, 0, -1 );
	CreateHouseCar( 50, 0, 2519.7676,-1282.4758,34.5692,1.0032, 0, 0, -1 );
	CreateHouseCar( 51, 0, 2818.6035,2265.1306,10.5474,180.1303, 0, 0, -1 );
	CreateHouseCar( 52, 0, 2798.6558,2225.5518,10.5473,271.6242, 0, 0, -1 );
	CreateHouseCar( 53, 0, 2535.9414,744.9554,10.5474,270.0467, 0, 0, -1 );
	CreateHouseCar( 54, 0, 2617.5161,723.8155,10.5474,0.9170, 0, 0, -1 );
	CreateHouseCar( 55, 0, 2443.7390,697.6362,11.0814,88.4873, 0, 0, -1 );
	CreateHouseCar( 56, 0, 2354.0024,651.3694,11.0981,180.4541, 0, 0, -1 );
	CreateHouseCar( 57, 0, 2212.9438,647.3034,10.8674,180.6750, 0, 0, -1 );
	CreateHouseCar( 58, 0, 2363.1580,726.5258,10.9047,180.9505, 0, 0, -1 );
	CreateHouseCar( 59, 0, 2213.0674,727.1468,10.8507,180.0946, 0, 0, -1 );
	CreateHouseCar( 60, 0, 2128.0698,660.3079,10.8897,0.6493, 0, 0, -1 );
	CreateHouseCar( 61, 0, 2076.9277,688.1819,10.9176,179.2831, 0, 0, -1 );
	CreateHouseCar( 62, 0, 2008.6616,767.0726,10.9478,179.9917, 0, 0, -1 );
	CreateHouseCar( 63, 0, 2127.3745,739.0555,10.9748,0.9001, 0, 0, -1 );
	CreateHouseCar( 64, 0, 2161.0183,777.0677,10.9357,89.9561, 0, 0, -1 );
	CreateHouseCar( 65, 0, 1853.9351,725.7637,10.8199,271.6869, 0, 0, -1 );
	CreateHouseCar( 66, 0, 1903.3967,681.4406,10.5474,270.6947, 0, 0, -1 );
	CreateHouseCar( 67, 0, 1905.7776,736.0991,10.5468,272.1383, 0, 0, -1 );
	CreateHouseCar( 68, 0, 1947.3564,730.1666,10.5474,93.8612, 0, 0, -1 );
	CreateHouseCar( 69, 0, 1951.1267,679.6194,10.5474,90.6746, 0, 0, -1 );
	CreateHouseCar( 70, 0, 1427.3265,2000.1987,10.5474,0.9034, 0, 0, -1 );
	CreateHouseCar( 71, 0, -2381.3594,1123.1815,56.6984,162.4527, 0, 0, -1 );
	CreateHouseCar( 72, 0, -2435.0081,1136.9258,56.2352,176.3620, 0, 0, -1 );
	CreateHouseCar( 73, 0, -2489.9673,1137.9728,57.5770,178.9499, 0, 0, -1 );
	CreateHouseCar( 74, 0, -2546.4099,1141.4269,56.0634,166.7395, 0, 0, -1 );
	CreateHouseCar( 75, 0, -2473.0427,1248.0194,35.4790,273.3703, 0, 0, -1 );
	CreateHouseCar( 76, 0, -2379.3623,1342.1732,13.6770,268.2826, 0, 0, -1 );
	CreateHouseCar( 77, 0, -2897.6902,1175.7253,15.7467,270.4544, 0, 0, -1 );
	CreateHouseCar( 78, 0, -2838.3523,925.6689,46.5636,273.3635, 0, 0, -1 );
	CreateHouseCar( 79, 0, -2858.9583,680.7177,24.6765,295.7650, 0, 0, -1 );
	CreateHouseCar( 80, 0, -2718.3013,981.3989,55.9719,8.8677, 0, 0, -1 );
	CreateHouseCar( 81, 0, -2661.5583,990.4232,66.2099,359.4951, 0, 0, -1 );
	CreateHouseCar( 82, 0, -2636.1702,930.9497,72.1993,178.1087, 0, 0, -1 );
	CreateHouseCar( 83, 0, -2680.7319,868.9680,77.8258,7.6084, 0, 0, -1 );
	CreateHouseCar( 84, 0, -2724.1372,915.3228,68.5916,104.4300, 0, 0, -1 );
	CreateHouseCar( 85, 0, -2714.0010,870.2825,71.6749,90.2129, 0, 0, -1 );
	CreateHouseCar( 86, 0, -2697.5710,826.6564,50.7140,181.2130, 0, 0, -1 );
	CreateHouseCar( 87, 0, -2735.6270,720.2889,42.2470,179.2932, 0, 0, -1 );
	CreateHouseCar( 88, 0, -2620.7410,729.1437,30.2211,270.6780, 0, 0, -1 );
	CreateHouseCar( 89, 0, -2618.1506,798.9344,50.8746,269.0716, 0, 0, -1 );
	CreateHouseCar( 90, 0, -2624.6921,893.4102,66.6001,274.9032, 0, 0, -1 );
	CreateHouseCar( 91, 0, -2796.8923,223.8482,7.9153,91.0507, 0, 0, -1 );
	CreateHouseCar( 92, 0, -2796.5684,180.7524,7.5982,90.6492, 0, 0, -1 );
	CreateHouseCar( 93, 0, -2796.7749,53.0166,7.6947,359.3589, 0, 0, -1 );
	CreateHouseCar( 94, 0, -2796.6497,-183.9400,7.9644,90.2692, 0, 0, -1 );
	CreateHouseCar( 95, 0, -2662.9968,-286.1310,8.4450,314.7298, 0, 0, -1 );
	CreateHouseCar( 96, 0, 686.6584,-1073.0121,49.2557,58.3662, 0, 0, -1 );
	CreateHouseCar( 97, 0, -2718.0386,-33.9002,4.9914,269.2469, 0, 0, -1 );
	CreateHouseCar( 98, 0, -2694.5710,112.8088,4.9667,89.3487, 0, 0, -1 );
	CreateHouseCar( 99, 0, -2638.4614,250.2303,4.8851,88.9586, 0, 0, -1 );
	CreateHouseCar( 100, 0, -2448.4241,-118.1876,26.4131,91.9444, 0, 0, -1 );
	CreateHouseCar( 101, 0, -2206.6340,715.7536,50.2306,1.9371, 0, 0, -1 );
	CreateHouseCar( 102, 0, -2102.9343,893.2582,76.8949,0.4219, 0, 0, -1 );
	CreateHouseCar( 103, 0, -2159.3860,1231.2446,34.8797,88.2319, 0, 0, -1 );
	CreateHouseCar( 104, 0, -1974.6974,1276.2445,8.1051,0.0583, 0, 0, -1 );
	CreateHouseCar( 105, 0, -1874.1185,1120.5602,46.1725,359.0143, 0, 0, -1 );
	CreateHouseCar( 106, 0, -1873.8445,1151.4510,46.7101,358.9590, 0, 0, -1 );
	CreateHouseCar( 107, 0, 1109.9283,-305.3158,75.0130,88.6266, 0, 0, -1 );
	CreateHouseCar( 108, 0, -2050.2712,781.1205,61.0368,179.2603, 0, 0, -1 );
	CreateHouseCar( 109, 0, -2048.0483,759.8347,61.2792,356.9721, 0, 0, -1 );
	CreateHouseCar( 110, 0, 1274.9363,2526.9558,11.2552,270.0052, 0, 0, -1 );
	CreateHouseCar( 111, 0, 1457.1399,2518.2534,12.3280,270.0717, 0, 0, -1 );
	CreateHouseCar( 112, 0, 1497.2955,2541.9529,11.2059,90.8170, 0, 0, -1 );
	CreateHouseCar( 113, 0, 1460.6254,2839.8130,12.2802,179.9341, 0, 0, -1 );
	CreateHouseCar( 114, 0, 1579.0714,2839.7300,11.7921,180.3355, 0, 0, -1 );
	CreateHouseCar( 115, 0, 1671.7687,2694.6052,11.2073,0.4568, 0, 0, -1 );
	CreateHouseCar( 116, 0, 1914.8673,2778.1138,12.1533,180.1736, 0, 0, -1 );
	CreateHouseCar( 117, 0, 2113.0046,2660.9722,12.5905,90.1069, 0, 0, -1 );
	CreateHouseCar( 118, 0, 985.4224,2307.2012,12.4076,269.0419, 0, 0, -1 );
	CreateHouseCar( 119, 0, 993.5674,2270.2554,11.6527,0.6338, 0, 0, -1 );
	CreateHouseCar( 120, 0, 1033.2881,2020.5304,11.6590,90.6410, 0, 0, -1 );
	CreateHouseCar( 121, 0, 984.0276,1986.1713,11.9769,271.0129, 0, 0, -1 );
	CreateHouseCar( 122, 0, 933.1169,2012.5775,11.4080,89.9835, 0, 0, -1 );
	CreateHouseCar( 123, 0, 923.1568,2035.5889,12.4902,178.4410, 0, 0, -1 );
	CreateHouseCar( 124, 0, 1030.9832,1912.8907,11.7495,89.5828, 0, 0, -1 );
	CreateHouseCar( 125, 0, 1321.0928,2012.7382,11.5060,89.5903, 0, 0, -1 );
	CreateHouseCar( 126, 0, 1317.7046,1940.3094,13.3063,0.0295, 0, 0, -1 );
	CreateHouseCar( 127, 0, 1363.2827,1966.9966,11.7740,270.8000, 0, 0, -1 );
	CreateHouseCar( 128, 0, 1413.8922,1903.1510,11.5786,90.6611, 0, 0, -1 );
	CreateHouseCar( 129, 0, 1472.8647,1899.3533,10.8306,270.9216, 0, 0, -1 );
	CreateHouseCar( 130, 0, 1447.2256,1949.1477,11.6270,0.1872, 0, 0, -1 );
	CreateHouseCar( 131, 0, 1527.3076,1999.0507,11.4745,359.0600, 0, 0, -1 );
	CreateHouseCar( 239, 0, 2392.8931,-1375.6843,24.0769,88.8958, 0, 0, -1 );
	// Veículos casas ilha
	CreateHouseCar( 132, 0, 597.8362,-2400.0659,63.3507,62.4231, 0, 0, -1 );
	CreateHouseCar( 133, 0, 1031.8423,-2476.2329,17.8640,69.3187, 0, 0, -1 );
	CreateHouseCar( 134, 0, 1091.1410,-2504.0444,18.9627,68.8754, 0, 0, -1 );
	CreateHouseCar( 135, 0, 1017.5695,-2546.6174,18.4001,250.3989, 0, 0, -1 );
	CreateHouseCar( 136, 0, 873.1840,-2517.2622,28.7950,359.0918, 0, 0, -1 );
	CreateHouseCar( 137, 0, 793.6558,-2499.5920,27.5927,269.7949, 0, 0, -1 );
	CreateHouseCar( 138, 0, 875.0643,-2551.3286,29.0335,179.4611, 0, 0, -1 );
	CreateHouseCar( 139, 0, 893.9148,-2547.4980,28.9789,178.8300, 0, 0, -1 );
	CreateHouseCar( 140, 0, 901.1118,-2600.1235,29.3323,89.8458, 0, 0, -1 );
	CreateHouseCar( 141, 0, 894.4935,-2617.2896,29.9246,359.7473, 0, 0, -1 );
	CreateHouseCar( 142, 0, 900.8537,-2650.1560,29.2059,88.8008, 0, 0, -1 );
	CreateHouseCar( 143, 0, 836.1298,-2634.6873,29.1956,0.2985, 0, 0, -1 );
	CreateHouseCar( 144, 0, 837.0666,-2604.2371,28.8546,180.2182, 0, 0, -1 );
	CreateHouseCar( 145, 0, 830.6456,-2635.2307,29.4407,359.5410, 0, 0, -1 );
	CreateHouseCar( 146, 0, 831.2421,-2604.0581,28.7083,178.6087, 0, 0, -1 );
	CreateHouseCar( 147, 0, 769.6930,-2647.4885,28.9897,0.4522, 0, 0, -1 );
	CreateHouseCar( 148, 0, 764.2359,-2613.0701,29.4713,268.6080, 0, 0, -1 );
	CreateHouseCar( 149, 0, 769.3023,-2585.6184,29.1513,179.8216, 0, 0, -1 );
	CreateHouseCar( 150, 0, 769.2317,-2564.1887,29.9995,179.7400, 0, 0, -1 );
	CreateHouseCar( 151, 0, 406.0754,-1264.1157,50.1461,24.2498, 0, 0, -1 );
	CreateHouseCar( 152, 0, 542.4798,-1201.6375,44.2047,21.5143, 0, 0, -1 );
	CreateHouseCar( 153, 0, 870.1133,-1678.2731,13.2518,179.3330, 0, 0, -1 );
	CreateHouseCar( 154, 0, 1438.0797,-891.5886,50.3396,0.6556, 0, 0, -1 );
	CreateHouseCar( 155, 0, 1018.624206, -1775.092407, 13.497029, 270.419982, 0, 0, -1 );
	CreateHouseCar( 156, 0, 892.539062, -1658.417358, 13.273955, 180.368515, 0, 0, -1 );
	CreateHouseCar( 157, 0, 858.341552, -1646.523437, 13.281361, 180.845748, 0, 0, -1 );
	CreateHouseCar( 158, 0, 855.589782, -1709.570800, 13.281511, 359.866546, 0, 0, -1 );
	CreateHouseCar( 159, 0, 760.593872, -1688.790161, 4.096809, 182.115478, 0, 0, -1 );
	CreateHouseCar( 160, 0, 321.773529, -1764.909790, 4.297110, 179.263412, 0, 0, -1 );
	CreateHouseCar( 161, 0, 1331.582275, -1081.301025, 24.968860, 270.137329, 0, 0, -1 );
	CreateHouseCar( 162, 0, 311.807495, -1789.091796, 4.301789, 179.933547, 0, 0, -1 );
	CreateHouseCar( 163, 0, 318.212036, -1789.283691, 4.404170, 180.640304, 0, 0, -1 );
	CreateHouseCar( 164, 0, 384.941192, -1860.334716, 7.563022, 89.615898, 0, 0, -1 );
	CreateHouseCar( 165, 0, 738.615783, -1437.807861, 13.266126, 89.497993, 0, 0, -1 );
	CreateHouseCar( 166, 0, 763.307067, -1601.533081, 13.150205, 90.112960, 0, 0, -1 );
	CreateHouseCar( 167, 0, 1183.974121, -1264.895141, 14.907935, 181.265792, 0, 0, -1 );
	CreateHouseCar( 168, 0, 1934.726806, -1118.752197, 26.210111, 179.494964, 0, 0, -1 );
	CreateHouseCar( 169, 0, 1993.736328, -1119.318603, 26.501680, 271.388336, 0, 0, -1 );
	CreateHouseCar( 170, 0, 2051.984375, -1119.561523, 24.494262, 180.949829, 0, 0, -1 );
	CreateHouseCar( 171, 0, 2116.851806, -1058.233398, 25.480531, 140.094894, 0, 0, -1 );
	CreateHouseCar( 172, 0, 2093.865722, -1075.250488, 26.043642, 155.230895, 0, 0, -1 );
	CreateHouseCar( 173, 0, 2227.934326, -1156.122192, 25.539289, 90.092979, 0, 0, -1 );
	CreateHouseCar( 174, 0, 2224.772460, -1059.107543, 45.741516, 226.152084, 0, 0, -1 );
	CreateHouseCar( 175, 0, 2176.643798, -985.647338, 64.195823, 169.534591, 0, 0, -1 );
	CreateHouseCar( 176, 0, 2271.449218, -1032.412109, 51.584247, 134.796157, 0, 0, -1 );
	CreateHouseCar( 177, 0, 2095.839599, -965.775390, 52.173366, 169.706176, 0, 0, -1 );
	CreateHouseCar( 178, 0, 2040.104980, -967.492126, 42.671924, 99.300666, 0, 0, -1 );
	CreateHouseCar( 179, 0, 2146.614013, -1008.865478, 62.125385, 255.563415, 0, 0, -1 );
	CreateHouseCar( 180, 0, 2222.694091, -1044.531494, 57.568176, 313.496551, 0, 0, -1 );
	CreateHouseCar( 181, 0, 2279.603759, -1048.559082, 49.185173, 230.824249, 0, 0, -1 );
	CreateHouseCar( 182, 0, 2452.786376, -1108.387084, 43.098209, 359.925292, 0, 0, -1 );
	CreateHouseCar( 183, 0, 2524.447753, -1112.642578, 56.214324, 353.095672, 0, 0, -1 );
	CreateHouseCar( 184, 0, 2569.648437, -1100.325805, 65.960998, 47.360248, 0, 0, -1 );
	CreateHouseCar( 185, 0, 2758.356201, -1176.842407, 69.134582, 89.970275, 0, 0, -1 );
	CreateHouseCar( 186, 0, 2856.376708, -1355.501342, 10.800822, 269.997985, 0, 0, -1 );
	CreateHouseCar( 187, 0, 2852.420410, -1328.593383, 10.797469, 190.133239, 0, 0, -1 );
	CreateHouseCar( 188, 0, 2801.839843, -1172.379760, 25.304330, 182.812225, 0, 0, -1 );
	CreateHouseCar( 189, 0, 2814.257812, -1186.962646, 24.981042, 269.425170, 0, 0, -1 );
	CreateHouseCar( 190, 0, 2806.233154, -1108.747436, 30.449907, 2.562198, 0, 0, -1 );
	CreateHouseCar( 191, 0, 2804.574707, -1065.284179, 30.229013, 182.751983, 0, 0, -1 );
	CreateHouseCar( 192, 0, 2798.789794, -1091.878295, 30.446790, 272.630218, 0, 0, -1 );
	CreateHouseCar( 193, 0, 2645.113525, -1981.868896, 13.278908, 181.254302, 0, 0, -1 );
	CreateHouseCar( 194, 0, 2685.306640, -2020.625122, 13.260437, 359.122894, 0, 0, -1 );
	CreateHouseCar( 195, 0, 2474.239501, -1991.246459, 13.275389, 180.733825, 0, 0, -1 );
	CreateHouseCar( 196, 0, 2530.596923, -2006.288452, 13.275494, 90.469810, 0, 0, -1 );
	CreateHouseCar( 197, 0, 2497.339111, -2029.217285, 13.273958, 0.509948, 0, 0, -1 );
	CreateHouseCar( 198, 0, 2400.455078, -1803.227416, 13.273957, 1.435859, 0, 0, -1 );
	CreateHouseCar( 199, 0, 2390.226074, -1714.941284, 13.338514, 179.509841, 0, 0, -1 );
	CreateHouseCar( 200, 0, 2418.380859, -1674.532348, 13.370217, 0.476898, 0, 0, -1 );
	CreateHouseCar( 201, 0, -2022.442749, -45.953701, 35.083423, 179.818145, 0, 0, -1 );
	CreateHouseCar( 202, 0, -2513.779052, 939.624877, 64.954010, 89.432556, 0, 0, -1 );
	CreateHouseCar( 203, 0, -2558.152587, 2262.192871, 4.801624, 334.251434, 0, 0, -1 );
	CreateHouseCar( 204, 0, -2047.713256, 899.501159, 53.143665, 357.935424, 0, 0, -1 );
	CreateHouseCar( 205, 0, -2691.664794, 204.686828, 4.063066, 359.814422, 0, 0, -1 );
	CreateHouseCar( 206, 0, -2693.730712, -190.826354, 4.066789, 89.276176, 0, 0, -1 );
	CreateHouseCar( 207, 0, -2616.547607, -96.672271, 4.082615, 269.817687, 0, 0, -1 );
	CreateHouseCar( 208, 0, -2384.480712, 2440.830322, 9.155686, 158.822937, 0, 0, -1 );
	CreateHouseCar( 209, 0, -2603.196777, 2360.520507, 8.634740, 90.925308, 0, 0, -1 );
	CreateHouseCar( 210, 0, -2528.010986, 2251.475341, 4.703290, 334.724212, 0, 0, -1 );
	CreateHouseCar( 211, 0, -2570.237304, 2290.170654, 5.113996, 302.553741, 0, 0, -1 );
	CreateHouseCar( 212, 0, -2629.285644, 2269.779785, 7.899729, 269.599395, 0, 0, -1 );
	CreateHouseCar( 213, 0, -2625.222167, 2344.340332, 8.149758, 358.981872, 0, 0, -1 );
	CreateHouseCar( 214, 0, -2620.061767, 2426.326171, 14.176007, 254.119140, 0, 0, -1 );
	CreateHouseCar( 215, 0, -2437.402587, 2450.906738, 13.516137, 179.254394, 0, 0, -1 );
	CreateHouseCar( 216, 0, -2428.515136, 2447.470703, 13.256059, 179.836166, 0, 0, -1 );
	CreateHouseCar( 217, 0, -2379.428466, 2409.998291, 8.327021, 327.649841, 0, 0, -1 );
	CreateHouseCar( 218, 0, -2426.395019, 2346.547607, 4.702646, 190.815155, 0, 0, -1 );
	CreateHouseCar( 219, 0, -2050.648437, -2465.247558, 30.362537, 141.895278, 0, 0, -1 );
	CreateHouseCar( 220, 0, -2149.606689, -2544.500244, 30.348794, 321.326690, 0, 0, -1 );
	CreateHouseCar( 221, 0, -2200.950439, -2503.621337, 30.345354, 321.240417, 0, 0, -1 );
	CreateHouseCar( 222, 0, -2232.180175, -2423.908447, 31.191322, 231.329238, 0, 0, -1 );
	CreateHouseCar( 223, 0, -2069.024414, -2309.380615, 30.373653, 52.889297, 0, 0, -1 );
	CreateHouseCar( 224, 0, -2178.068847, -2474.810058, 30.344268, 141.015335, 0, 0, -1 );
	CreateHouseCar( 225, 0, -2125.982421, -2502.839843, 30.346042, 231.717163, 0, 0, -1 );
	CreateHouseCar( 226, 0, -2204.105224, -2252.571777, 30.421001, 230.976104, 0, 0, -1 );
	CreateHouseCar( 227, 0, -2188.543945, -2265.197021, 30.353487, 50.646091, 0, 0, -1 );
	CreateHouseCar( 228, 0, -1527.879516, 2643.343261, 55.564533, 90.252159, 0, 0, -1 );
	CreateHouseCar( 229, 0, -1669.119628, 2494.444335, 86.752204, 273.698669, 0, 0, -1 );
	CreateHouseCar( 230, 0, -1506.779785, 1975.345947, 48.048744, 0.079129, 0, 0, -1 );
	CreateHouseCar( 231, 0, -1423.447998, 2176.933349, 50.107406, 204.889114, 0, 0, -1 );
	CreateHouseCar( 232, 0, -301.028015, 1777.559692, 42.414653, 270.039794, 0, 0, -1 );
	CreateHouseCar( 233, 0, -9.456252, 2355.723388, 23.869239, 90.635093, 0, 0, -1 );
	CreateHouseCar( 234, 0, -321.166198, 2684.131591, 62.383911, 358.993225, 0, 0, -1 );
	CreateHouseCar( 235, 0, -101.394264, 1221.964599, 19.467515, 180.886199, 0, 0, -1 );
	CreateHouseCar( 236, 0, -79.557609, 1222.143188, 19.469266, 180.487792, 0, 0, -1 );
	CreateHouseCar( 237, 0, -0.709952, 1125.432006, 19.448932, 179.081207, 0, 0, -1 );
	CreateHouseCar( 238, 0, 2.596627, 1083.790405, 19.476078, 89.990272, 0, 0, -1 );
	CreateHouseCar( 239, 0, -45.284786, 1051.582275, 19.427082, 179.655029, 0, 0, -1 );
	CreateHouseCar( 240, 0, -50.603935, 1126.438842, 19.467657, 179.213790, 0, 0, -1 );
	CreateHouseCar( 241, 0, -256.245086, 1158.758544, 19.476173, 89.927589, 0, 0, -1 );
	CreateHouseCar( 242, 0, -245.458557, 1069.695800, 19.439870, 358.533935, 0, 0, -1 );
	CreateHouseCar( 243, 0, -240.170150, 998.768371, 19.475404, 359.853332, 0, 0, -1 );
	CreateHouseCar( 244, 0, -305.893554, 1117.689453, 19.475563, 179.471633, 0, 0, -1 );
	CreateHouseCar( 245, 0, -365.089050, 1102.942016, 19.476074, 270.029052, 0, 0, -1 );
	CreateHouseCar( 246, 0, -360.627075, 1198.762329, 19.470756, 180.295211, 0, 0, -1 );
	CreateHouseCar( 247, 0, 287.421661, -52.379604, 1.306705, 180.181320, 0, 0, -1 );
	CreateHouseCar( 248, 0, 319.052978, -87.950256, 1.911734, 270.989776, 0, 0, -1 );
	CreateHouseCar( 249, 0, 318.138946, -125.498497, 2.061927, 270.909118, 0, 0, -1 );
	CreateHouseCar( 250, 0, 247.363967, -88.201469, 2.043487, 90.461082, 0, 0, -1 );
	CreateHouseCar( 251, 0, 247.468200, -125.596160, 2.058308, 90.118980, 0, 0, -1 );
	CreateHouseCar( 252, 0, 2550.798095, 71.906814, 26.204849, 89.644050, 0, 0, -1 );
	CreateHouseCar( 253, 0, 2491.532226, 130.809417, 26.761945, 179.785552, 0, 0, -1 );
	CreateHouseCar( 254, 0, 2447.761962, 56.077262, 26.921440, 180.458724, 0, 0, -1 );
	CreateHouseCar( 255, 0, 2480.185302, -22.871322, 26.947282, 0.126737, 0, 0, -1 );
	CreateHouseCar( 256, 0, 2553.059326, 14.137961, 26.762474, 89.303192, 0, 0, -1 );
	CreateHouseCar( 257, 0, 2424.731201, -56.825340, 27.144296, 0.255741, 0, 0, -1 );
	CreateHouseCar( 258, 0, 2358.288818, -62.642143, 27.196708, 359.703277, 0, 0, -1 );
	CreateHouseCar( 259, 0, 2379.439697, 75.450592, 26.934833, 270.650573, 0, 0, -1 );
	CreateHouseCar( 260, 0, 2379.716308, -12.865635, 26.894250, 270.047119, 0, 0, -1 );
	CreateHouseCar( 261, 0, 2299.066894, -121.019332, 27.138851, 359.784057, 0, 0, -1 );
	CreateHouseCar( 262, 0, 2254.636718, -126.557785, 27.132984, 0.578629, 0, 0, -1 );
	CreateHouseCar( 263, 0, 2189.870605, -80.256637, 27.196899, 269.298858, 0, 0, -1 );
	CreateHouseCar( 264, 0, 2240.175048, -5.634837, 27.137687, 180.499557, 0, 0, -1 );
	CreateHouseCar( 265, 0, 2329.686035, 195.603225, 26.897262, 270.094970, 0, 0, -1 );
	CreateHouseCar( 266, 0, 2358.489501, 120.359733, 26.952856, 90.055374, 0, 0, -1 );
	CreateHouseCar( 267, 0, 2231.010986, 172.308517, 27.208383, 179.819763, 0, 0, -1 );
	CreateHouseCar( 268, 0, 2290.378173, 156.023132, 26.908592, 181.135879, 0, 0, -1 );
	CreateHouseCar( 269, 0, 2209.352294, 57.936172, 26.953052, 269.485412, 0, 0, -1 );
	CreateHouseCar( 270, 0, 827.427001, -495.561248, 17.055189, 179.903076, 0, 0, -1 );
	CreateHouseCar( 271, 0, 763.014648, -507.592803, 16.992214, 180.248870, 0, 0, -1 );
	CreateHouseCar( 272, 0, 786.097412, -489.035125, 17.072526, 180.176956, 0, 0, -1 );
	CreateHouseCar( 273, 0, 750.485046, -553.304931, 17.016201, 0.213145, 0, 0, -1 );
	CreateHouseCar( 274, 0, 231.017013, -1410.496459, 51.337062, 327.470916, 0, 0, -1 );
	CreateHouseCar( 275, 0, 220.929809, -1268.372924, 64.950866, 143.074401, 0, 0, -1 );
	CreateHouseCar( 276, 0, 974.126708, -766.056762, 111.737800, 1.891398, 0, 0, -1 );
	CreateHouseCar( 277, 0, 814.260559, -767.664916, 76.574470, 285.764343, 0, 0, -1 );
	CreateHouseCar( 278, 0, 406.488555, -1152.161621, 76.757682, 147.486694, 0, 0, -1 );
	CreateHouseCar( 279, 0, 566.170043, -1068.878051, 72.903053, 28.820878, 0, 0, -1 );
	CreateHouseCar( 280, 0, 2506.0701, -1694.5660, 13.2607, 1.8656, 0, 0, -1 );
	CreateHouseCar( 281, 0, 419.572021, -1255.772705, 51.307083, 22.255168, 0, 0, -1 );
	CreateHouseCar( 282, 0, 464.398101, -1163.416503, 67.157714, 196.303863, 0, 0, -1 );
	CreateHouseCar( 283, 0, 634.8447, -1120.5585, 45.6529, 46.3129, 0, 0, -1 );
	CreateHouseCar( 284, 0, 338.1861, -1293.2529, 53.9205, 28.2643, 0, 0, -1 );
	CreateHouseCar( 285, 0, 346.773864, -1198.064331, 76.241279, 39.800323, 0, 0, -1 );
	CreateHouseCar( 286, 0, 150.0016, -1470.3369, 25.0638, 50.9922, 0, 0, -1 );
	CreateHouseCar( 287, 0, 726.266662, -992.622619, 52.395824, 62.005023, 0, 0, -1 );
	CreateHouseCar( 288, 0, 796.628234, -843.589172, 60.370391, 191.275253, 0, 0, -1 );
	CreateHouseCar( 289, 0, 831.282531, -856.754699, 69.651908, 199.418487, 0, 0, -1 );
	CreateHouseCar( 290, 0, 830.176818, -886.208557, 68.501724, 252.406433, 0, 0, -1 );
	CreateHouseCar( 291, 0, 831.480651, -924.418701, 54.980934, 242.426635, 0, 0, -1 );
	CreateHouseCar( 292, 0, 958.829956, -903.193298, 45.492706, 185.468597, 0, 0, -1 );
	CreateHouseCar( 293, 0, 1041.237915, -1053.730102, 31.432849, 1.006290, 0, 0, -1 );
	CreateHouseCar( 294, 0, 1108.522583, -1025.936401, 31.653556, 183.115814, 0, 0, -1 );
	CreateHouseCar( 295, 0, 1137.652709, -1025.283691, 31.628089, 179.540420, 0, 0, -1 );
	CreateHouseCar( 296, 0, 1193.009033, -1020.751647, 32.276023, 184.951797, 0, 0, -1 );
	CreateHouseCar( 297, 0, 1230.911132, -1019.413146, 32.329925, 186.427978, 0, 0, -1 );
	CreateHouseCar( 298, 0, 1238.364501, -1085.746093, 28.871826, 269.773620, 0, 0, -1 );
	CreateHouseCar( 299, 0, 1178.338989, -1067.294189, 28.737810, 91.794212, 0, 0, -1 );
	CreateHouseCar( 300, 0, 1110.390502, -969.203796, 42.493286, 0.852601, 0, 0, -1 );
	CreateHouseCar( 301, 0, 435.804504, 2537.405761, 16.000637, 91.375724, 0, 0, -1 );
	CreateHouseCar( 302, 0, -240.931350, 2595.918701, 62.430206, 0.480919, 0, 0, -1 );
	CreateHouseCar( 303, 0, -202.900024, 2715.195800, 62.415485, 180.364242, 0, 0, -1 );
	CreateHouseCar( 304, 0, -229.206375, 2802.193359, 61.703380, 88.118858, 0, 0, -1 );
	CreateHouseCar( 305, 0, -538.181457, 2603.655029, 53.143672, 268.866790, 0, 0, -1 );
	CreateHouseCar( 306, 0, -356.498840, 2217.367431, 42.213157, 89.345268, 0, 0, -1 );
	CreateHouseCar( 307, 0, -437.731842, 2244.521972, 42.157852, 179.570877, 0, 0, -1 );
	CreateHouseCar( 308, 0, -1400.564941, 2640.874755, 55.416385, 90.220390, 0, 0, -1 );
	CreateHouseCar( 309, 0, -1044.432250, 1561.286010, 33.019435, 218.977050, 0, 0, -1 );
	CreateHouseCar( 310, 0, -756.092041, 1584.579833, 26.689073, 235.820556, 0, 0, -1 );
	CreateHouseCar( 311, 0, -786.352783, 1551.354125, 26.845424, 89.153068, 0, 0, -1 );
	CreateHouseCar( 312, 0, -772.145080, 1430.105712, 13.513079, 103.992843, 0, 0, -1 );
	CreateHouseCar( 313, 0, -298.767425, 1540.059082, 75.282676, 135.371582, 0, 0, -1 );
	CreateHouseCar( 314, 0, 2210.555175, 1284.568481, 10.547401, 91.155281, 0, 0, -1 );
	CreateHouseCar( 315, 0, 2153.975097, 1122.342163, 12.378697, 244.046722, 0, 0, -1 );
	CreateHouseCar( 316, 0, 1368.545776, 476.260742, 19.856452, 162.188247, 0, 0, -1 );
	CreateHouseCar( 317, 0, 888.410034, -24.918619, 62.963573, 157.128692, 0, 0, -1 );
	CreateHouseCar( 318, 0, -369.195281, -1437.184204, 25.453643, 88.230697, 0, 0, -1 );
	CreateHouseCar( 319, 0, -275.128784, -2176.640625, 28.503692, 111.481620, 0, 0, -1 );
	CreateHouseCar( 320, 0, -592.641906, -1085.544311, 23.344364, 240.115112, 0, 0, -1 );
	CreateHouseCar( 321, 0, -587.182250, -1076.067382, 23.192825, 236.181838, 0, 0, -1 );
	CreateHouseCar( 322, 0, -580.962341, -1066.946533, 23.151037, 236.492797, 0, 0, -1 );
	CreateHouseCar( 323, 0, -575.243164, -1057.481323, 23.380130, 235.885742, 0, 0, -1 );
	CreateHouseCar( 324, 0, -569.644470, -1048.155395, 23.599334, 235.667739, 0, 0, -1 );
	CreateHouseCar( 325, 0, -562.926391, -1039.500732, 23.772510, 236.415100, 0, 0, -1 );
	CreateHouseCar( 326, 0, -354.986267, -1042.290893, 59.110973, 182.748596, 0, 0, -1 );
	CreateHouseCar( 327, 0, -498.636138, -197.643249, 78.134582, 0.000000, 0, 0, -1 );
	CreateHouseCar( 328, 0, 2357.799560, -1164.064575, 27.278715, 90.226119, 0, 0, -1 );
	CreateHouseCar( 329, 0, 2376.1230, -1366.6750, 23.6352, 0.5298, 0, 0, -1 );
	CreateHouseCar( 330, 0, 2149.099121, -1250.819458, 24.721223, 0.313411, 0, 0, -1 );
	CreateHouseCar( 331, 0, 2106.308837, -1250.939086, 25.212203, 359.802185, 0, 0, -1 );
	CreateHouseCar( 332, 0, 2090.284667, -1140.904296, 25.291933, 91.373695, 0, 0, -1 );
	CreateHouseCar( 333, 0, 2102.369628, -1274.912353, 25.219499, 181.204895, 0, 0, -1 );
	CreateHouseCar( 334, 0, 2096.305419, -1327.365844, 25.279041, 3.380581, 0, 0, -1 );
	CreateHouseCar( 335, 0, 2135.746826, -1329.511962, 25.272127, 1.652859, 0, 0, -1 );
	CreateHouseCar( 336, 0, 2136.909423, -1273.461303, 25.205484, 182.285812, 0, 0, -1 );
	CreateHouseCar( 337, 0, 2141.437255, -1329.210327, 25.274692, 0.794262, 0, 0, -1 );
	CreateHouseCar( 338, 0, 2196.062500, -1277.521240, 24.261655, 179.611572, 0, 0, -1 );
	CreateHouseCar( 339, 0, 2254.619384, -1275.508178, 25.088266, 179.965728, 0, 0, -1 );
	CreateHouseCar( 340, 0, 2264.886718, -1401.134765, 23.730077, 0.189229, 0, 0, -1 );
	CreateHouseCar( 341, 0, 2184.872314, -1466.046630, 25.266145, 268.970031, 0, 0, -1 );
	CreateHouseCar( 342, 0, 2157.011230, -1423.361572, 25.268846, 89.769821, 0, 0, -1 );
	CreateHouseCar( 343, 0, 1463.923461, -901.075744, 54.565170, 0.000000, 0, 0, -1 );
	CreateHouseCar( 344, 0, 1529.293823, -882.706665, 60.850765, 46.734893, 0, 0, -1 );
	CreateHouseCar( 345, 0, 1534.557983, -841.721862, 64.734031, 92.321960, 0, 0, -1 );
	CreateHouseCar( 346, 0, 1028.554443, -809.423828, 101.580619, 19.990022, 0, 0, -1 );
	CreateHouseCar( 347, 0, 978.047851, -828.040222, 95.768356, 30.317029, 0, 0, -1 );
	CreateHouseCar( 348, 0, 1373.059448, -1769.970703, 13.275707, 270.742523, 0, 0, -1 );
	CreateHouseCar( 349, 0, 2014.064819, -1737.298583, 13.282177, 92.161476, 0, 0, -1 );
	CreateHouseCar( 350, 0, 1886.259033, -2022.853393, 13.119763, 181.041748, 0, 0, -1 );
	CreateHouseCar( 351, 0, 688.2668, -1599.0713, 13.8022, 358.9326, 0, 0, -1 );
	CreateHouseCar( 352, 0, 2137.8267, -1367.3488, 24.6181, 180.8371, 0, 0, -1 );
	CreateHouseCar( 353, 0, 944.1937, -841.6887, 93.8413, 34.4224, 0, 0, -1 );
	CreateHouseCar( 354, 0, 232.0107, -1833.9233, 3.8740, 270.1948, 0, 0, -1 );
	CreateHouseCar( 355, 0, 2034.7188, 1917.6317, 11.8837, 178.9075, 0, 0, -1 );
	CreateHouseCar( 356, 0, 1003.9589, -1054.0613, 30.6459, 358.7893, 0, 0, -1 );
	// Veiculo Casas Vila Da CSI
	CreateHouseCar( 357, 0, 2266.4282, 593.6262, 7.5140, 269.3809, 0, 0, -1 );
	CreateHouseCar( 358, 0, 2271.2258, 556.5813, 7.5141, 269.4060, 0, 0, -1 );
	CreateHouseCar( 359, 0, 2330.0317, 590.9598, 7.5185, 180.0907, 0, 0, -1 );
	CreateHouseCar( 360, 0, 2339.4241, 576.4761, 7.5256, 179.4019, 0, 0, -1 );
	CreateHouseCar( 361, 0, 2367.7971, 592.9636, 7.5129, 179.3980, 0, 0, -1 );
	//	   |_-»			Empresas			«-_|
	CriarEmpresa( 1, "Food Mart", 1315.464111, -898.710998, 39.578125, -25.837999, -187.239395, 1003.546875, 17, 1, 300000 );
	CriarEmpresa( 2, "Roboi1s Food", 1352.373046, -1758.632324, 13.507812, 6.091599, -30.549299, 1003.549377, 10, 2, 250000 );
	CriarEmpresa( 3, "Electronic", 1966.1129, 1623.1558, 12.8625, 88.1227, -91.125297, 1003.546875, 18, 3, 300000 );
	CriarEmpresa( 4, "Market", 2140.333007, -1176.803833, 23.992187, -25.832300, -140.684997, 1003.546875, 16, 4, 250000 );
	CriarEmpresa( 5, "Papercuts", 1081.220581, -1697.867187, 13.546875, -26.966600, -30.807100, 1003.557312, 4, 5, 300000 );
	CriarEmpresa( 6, "TABLEAU", 559.762084, -1506.726562, 14.543160, -27.589300, -57.167499, 1003.546875, 6, 6, 280000 );
	CriarEmpresa( 7, "AMMU-NATION", 2400.424072, -1981.291870, 13.546875, 285.601013, -41.051300, 1001.515625, 1, 7, 280000 );
	CriarEmpresa( 8, "AMMU-NATION", 1368.043701, -1279.949951, 13.546875, 285.761596, -85.367202, 1001.515625, 4, 8, 350000 );
	CriarEmpresa( 9, "TATTOOS", 2069.252929, -1779.892578, 13.559297, -204.354598, -26.642499, 1002.273376, 16, 9, 250000 );
	CriarEmpresa( 10, "Pizzaria", 2105.105468, -1806.479858, 13.554687, 372.079895, -132.395095, 1001.492187, 5, 10, 270000 );
	CriarEmpresa( 11, "Posto de Los Santos", 999.7303 ,-919.8886 ,42.3281 ,275.2312 , -24.469100, 1000.718811, 17, 11, 300000 );
	CriarEmpresa( 12, "GYM", 2229.217773, -1722.098876, 13.562500, 773.784118, -77.836196, 1000.661315, 7, 12, 300000 );
	CriarEmpresa( 13, "CLUCKIN BELL", 2397.887451, -1898.007080, 13.546875, 365.111114, -10.971799, 1001.851623, 9, 13, 290000 );
	CriarEmpresa( 14, "SEX SHOP", 1940.378051, -2115.974365, 13.695312, -100.455299, -24.469100, 1000.718811, 3, 14, 300000 );
	CriarEmpresa( 15, "BOBO", 821.769714, -1758.119628, 13.648437, 773.629028, -49.462501, 1000.585876, 6, 15, 350000 );
	CriarEmpresa( 16, "Burger Shot", 811.147644, -1616.114013, 13.546875, 363.414611, -74.365303, 1001.507812, 10, 16, 330000 );
	CriarEmpresa( 17, "BARBER SALON", 823.338378, -1589.021728, 13.554450, 411.523986, -22.786100, 1001.804687, 2, 17, 250000 );
	CriarEmpresa( 18, "JIM'S RING", 1038.194458, -1339.522705, 13.726562, 376.620788, -192.283798, 1000.632812, 17, 18, 270000 );
	CriarEmpresa( 19, "CLUCKIN' NELL", 927.195251, -1352.832153, 13.376651, -100.455299, -24.469100, 1000.718811, 3, 19, 350000 );
	CriarEmpresa( 20, "CATHAY", 998.929870, -1131.920776, 23.828125, 974.485412, -8.716199, 1001.148376, 3, 20, 300000 );
	CriarEmpresa( 21, "Sub Urban", 2112.819824, -1212.503784, 23.964399, 203.630493, -49.946998, 1001.804687, 1, 21, 250000 );
	CriarEmpresa( 22, "HOTEL", 2232.740722, -1159.736572, 25.890625, 2215.607910, -1150.757324, 1025.796875, 15, 22, 350000 );
	CriarEmpresa( 23, "Pig Pen", 2421.590087, -1219.911010, 25.518304, 1204.656860, -13.272500, 1000.921875, 2, 23, 400000 );
	CriarEmpresa( 24, "CARWASH", 2440.282226, -1472.441162, 24.000000, 964.865173, 2159.355468, 1011.030273, 1, 24, 350000 );
	CriarEmpresa( 25, "CLUCKIN BELL", 2420.779541, -1509.034790, 24.000000, 365.111114, -10.971799, 1001.851623, 9, 25, 330000 );
	CriarEmpresa( 26, "Zip", 1457.943847, -1138.051879, 24.010606, 161.198806, -96.252799, 1001.804687, 18, 26, 350000 );
	CriarEmpresa( 27, "FINAL NIGHT", 1322.326660, -1711.318969, 13.546875, 2266.965087, 1647.895507, 1084.234375, 1, 27, 300000 );
	CriarEmpresa( 28, "Pizzaria", 1680.741943, -1839.121093, 13.538237, 372.079895, -132.395095, 1001.492187, 5, 28, 250000 );
	CriarEmpresa( 29, "Banco", 1462.511108, -1013.706237, 26.843750, 833.768676, 7.284800, 1004.179687, 3, 29, 500000 );
	CriarEmpresa( 30, "PROlaps", 499.989532, -1359.190185, 16.248178, 206.901794, -139.172698, 1003.507812, 3, 30, 290000 );
	CriarEmpresa( 31, "VICTIM", 460.088531, -1500.984619, 31.056472, 226.692199, -8.083700, 1002.210876, 5, 31, 300000 );
	CriarEmpresa( 32, "Binco", 2244.645507, -1664.581298, 15.476562, 207.352798, -110.384696, 1005.132812, 15, 32, 250000 );
	CriarEmpresa( 33, "EMERALD ISLE", 2127.5159, 2379.0271, 10.8203, 359.3228, 1401.596801, 27.765600, 3, 33, 1000000 );
	CriarEmpresa( 34, "Binco", 1413.8735, -1701.2799, 13.5395, 207.352798, -110.384696, 1005.132812, 15, 34, 450000 );
	// Empresas SF
	CriarEmpresa( 35, "Jizzy Club's", -2624.466064, 1412.001586, 7.093750, -2637.449951, 1404.627563, 906.460876, 3, 35, 700000 ); // Int 44
	CriarEmpresa( 36, "Motel SF", -2231.465087, 251.861618, 35.320312, 2266.965087, 1647.895507, 1084.234375, 1, 36, 350000 ); // Int 19
	CriarEmpresa( 37, "Cluckin Bell", -2671.494140, 259.470520, 4.632812, 365.111114, -10.971799, 1001.851623, 9, 37, 300000 ); // Int 23
	CriarEmpresa( 38, "The Well", -1807.935302, 945.198547, 24.890625, 372.079895, -132.395095, 1001.492187, 5, 38, 350000 ); // Int 22
	CriarEmpresa( 39, "VICTIM", -1695.502197, 951.007812, 24.890625, 226.692199, -8.083700, 1002.210876, 5, 39, 300000 ); // Int 29
	CriarEmpresa( 40, "Banco San Fierro", -2665.243896, -7.562736, 6.132812, 833.768676, 7.284800, 1004.179687, 3, 40, 500000 ); // Int 18
	// Empresas LV
	CriarEmpresa( 41, "Royal Casino", 2089.600585, 1451.328491, 10.820312, 1133.566040, -14.818499, 1000.679687, 12, 41, 600000 ); // Int 17
	CriarEmpresa( 42, "Caligula's 2", 2195.835205, 1677.162231, 12.367187, 2233.928710, 1713.350219, 1012.109924, 1, 42, 1000000 ); // Int 15
	CriarEmpresa( 43, "Top Heavy", 2506.894775, 2121.349609, 10.840066, 1204.656860, -13.272500, 1000.921875, 2, 43, 450000 ); // Int 38
	CriarEmpresa( 44, "AMMU-NATION", 2556.990234, 2064.558349, 11.099519, 296.707397, -110.990402, 1001.515625, 6, 44, 350000 ); // Int 9
	CriarEmpresa( 45, "Burger Shot", 2472.202392, 2034.134399, 11.062500, 363.414611, -74.365303, 1001.507812, 10, 45, 300000 ); // Int 21
	CriarEmpresa( 46, "Cluckin' Bell", 2393.182861, 2042.465942, 10.820312, 365.111114, -10.971799, 1001.851623, 9, 46, 250000 ); // Int 23
	CriarEmpresa( 47, "Motel Las Venturas", 1932.543701, 1345.236938, 9.968750, 974.485412, -8.716199, 1001.148376, 3, 47, 500000 ); // Int 36
	CriarEmpresa( 48, "The For Dragons", 2020.776000, 1007.602294, 10.820312, 2018.031738, 1017.536987, 996.875000, 10, 48, 900000 ); // Int 16
	CriarEmpresa( 49, "Ammu-Nation", 2158.278564, 943.146423, 10.820312, 285.761596, -85.367202, 1001.515625, 4, 49, 400000 ); // Int 8
	CriarEmpresa( 50, "Posto Las Venturas", 2117.480224, 898.109741, 11.179687, -27.589300, -57.167499, 1003.546875, 6, 50, 290000 ); // Int 6
	CriarEmpresa( 51, "Nude Stripper", 2543.261230, 1024.267578, 10.820312, 1211.974487, -26.684600, 1000.953125, 3, 51, 350000 ); // Int 37
	CriarEmpresa( 52, "Cargas BPO", 2814.652099, 972.860839, 10.750000, -957.831420, 1881.237182, 9.000000, 17, 52, 450000 ); // Int 14
	CriarEmpresa( 53, "The Well", 2756.089355, 2476.546630, 11.062500, 372.079895, -132.395095, 1001.492187, 5, 53, 300000 ); // Int 22
	CriarEmpresa( 54, "Sub Urban", 2778.875976, 2453.064941, 11.062500, 203.630493, -49.946998, 1001.804687, 1, 54, 350000 ); // Int 30
	CriarEmpresa( 55, "VICTIM", 2802.411376, 2430.141845, 11.062500, 226.692199, -8.083700, 1002.210876, 5, 55, 360000 ); // Int 29
	CriarEmpresa( 56, "Train Hard", 2825.374267, 2406.899169, 11.062500, 206.901794, -139.172698, 1003.507812, 3, 56, 350000 ); // Int 28
	CriarEmpresa( 57, "Cluckin' Bell", 2846.815673, 2414.407714, 11.068956, 365.111114, -10.971799, 1001.851623, 9, 57, 290000 ); // Int 23
	CriarEmpresa( 58, "ZIP", 2090.423339, 2223.458007, 11.023437, 161.198806, -96.252799, 1001.804687, 18, 58, 350000 ); // Int 32
	CriarEmpresa( 59, "Rock Hotel", 2637.312500, 2351.615966, 10.820312, 974.485412, -8.716199, 1001.148376, 3, 59, 1000000 ); // Int 36
	CriarEmpresa( 60, "Supa Save", -2442.652587, 754.006408, 35.171875, -25.837999, -187.239395, 1003.546875, 17, 60, 450000 ); // Int 1
	// Empresas SF
	CriarEmpresa( 61, "Cobra Marital Arts", -2269.168945, -155.882873, 35.320312, 773.629028, -49.462501, 1000.585876, 6, 61, 800000 ); // Int 42
	 // Empresas LS
	CriarEmpresa( 62, "Burger Shot", 1199.465087, -919.259582, 43.113391, 363.414611, -74.365303, 1001.507812, 10, 62, 400000 ); // Int 21
	// Novas
	CriarEmpresa( 63, "QUEENS", -2591.366943, 168.653594, 4.470185, 2266.965087, 1647.895507, 1084.234375, 1, 63, 300000 ); // Int 19
	CriarEmpresa( 64, "The Barbers Pole", -2570.799804, 246.065063, 10.099188, 411.773406, -53.717300, 1001.898376, 12, 64, 350000 ); // Int 35
	CriarEmpresa( 65, "Burger Shot", -1911.795043, 828.549865, 35.174381, 363.414611, -74.365303, 1001.507812, 10, 65, 320000 ); // Int 21
	CriarEmpresa( 66, "ZIP", -1883.181396, 865.524536, 35.171875, 161.198806, -96.252799, 1001.804687, 18, 66, 400000 ); // Int 32
	CriarEmpresa( 67, "Binco", -2374.775146, 910.131774, 45.445312, 207.352798, -110.384696, 1005.132812, 15, 67, 350000 ); // Int 34
	CriarEmpresa( 68, "Burger Shot", -2356.908691, 1008.164733, 50.898437, 363.414611, -74.365303, 1001.507812, 10, 68, 400000 ); // Int 21
	CriarEmpresa( 69, "The Well", -1721.820190, 1359.750000, 7.185316, 372.079895, -132.395095, 1001.492187, 5, 69, 450000 ); // Int 22
	CriarEmpresa( 70, "Burger Shot", -2336.106445, -166.923110, 35.554687, 363.414611, -74.365303, 1001.507812, 10, 70, 400000 ); // Int 21
	CriarEmpresa( 71, "DONUTS", -2767.353271, 788.784057, 52.781250, -228.481704, 1401.596801, 27.765600, 18, 71, 300000 ); // Int 40
	CriarEmpresa( 72, "Restaurant", -2523.535888, 1216.211181, 37.428329, 459.566192, -88.641502, 999.554687, 4, 72, 350000 ); // Int 39
	CriarEmpresa( 73, "AMMU-NATION", -2093.096435, -2464.365966, 30.625000, 316.314086, -169.066696, 999.593811, 6, 73, 250000 ); // Int 11
	CriarEmpresa( 74, "Cluckin' Bell", -2154.665283, -2460.606445, 30.851562, 365.111114, -10.971799, 1001.851623, 9, 74, 300000 ); // Int 23
	CriarEmpresa( 75, "Gas", -2232.059814, -2557.925537, 31.921875, -228.481704, 1401.596801, 27.765600, 18, 75, 380000 ); // Int 40
	CriarEmpresa( 76, "Monte Chiliad", -2409.569824, -2189.833984, 34.039062, 964.865173, 2159.355468, 1011.030273, 1, 76, 400000 ); // Int 41
	CriarEmpresa( 77, "Empresa de Energia", -2521.136962, -623.985534, 132.780715, -957.831420, 1881.237182, 9.000000, 17, 77, 600000 ); // Int 14
	CriarEmpresa( 78, "Academia", -2491.567138, 2363.216796, 10.272698, 773.784118, -77.836196, 1000.661315, 7, 78, 350000 ); // Int 43
	CriarEmpresa( 79, "Jays", -1941.360473, 2379.664550, 49.696559, 376.620788, -192.283798, 1000.632812, 17, 79, 300000 ); // Int 24
	CriarEmpresa( 80, "AMMU-NATION", -1508.859497, 2610.036132, 55.835937, 296.707397, -110.990402, 1001.515625, 6, 80, 250000 ); // Int 9
	CriarEmpresa( 81, "BARBERS", -1450.018432, 2592.754394, 55.835937, 418.375488, -83.647201, 1001.804687, 3, 81, 250000 ); // Int 27
	CriarEmpresa( 82, "SMOKIN' BEEF", -857.680603, 1535.882202, 22.587043, 376.620788, -192.283798, 1000.632812, 17, 82, 320000 ); // Int 24
	CriarEmpresa( 83, "Cluckin' Bell", -1213.300415, 1830.875488, 41.929687, 365.111114, -10.971799, 1001.851623, 9, 83, 380000 ); // Int 23
	CriarEmpresa( 84, "BAR", -180.122497, 1087.937744, 19.742187, -228.481704, 1401.596801, 27.765600, 18, 84, 350000 ); // Int 40
	CriarEmpresa( 85, "King Ring", -144.026275, 1222.932495, 19.899219, 376.620788, -192.283798, 1000.632812, 17, 85, 380000 ); // Int 24
	CriarEmpresa( 86, "Bar da Vaca", -19.147558, 1176.150146, 19.563381, -228.481704, 1401.596801, 27.765600, 18, 86, 250000 ); // Int 40
	CriarEmpresa( 87, "Lil' Probe'Inn", -88.322143, 1378.413696, 10.273437, 459.566192, -88.641502, 999.554687, 4, 87, 280000 ); // Int 39
	CriarEmpresa( 88, "The Well", 2083.332519, 2223.903076, 11.023437, 372.079895, -132.395095, 1001.492187, 5, 88, 300000 ); // Int 22
	CriarEmpresa( 88, "Cluckin' Bell", 2102.673583, 2228.811767, 11.023437, 365.111114, -10.971799, 1001.851623, 9, 88, 300000 ); // Int 23
	CriarEmpresa( 89, "Binco", 2102.797607, 2257.449462, 11.023437, 207.352798, -110.384696, 1005.132812, 15, 89, 300000 ); // Int 34
	CriarEmpresa( 90, "Casino", 2331.154296, 2165.621337, 10.828125, 1133.566040, -14.818499, 1000.679687, 12, 90, 600000 ); // Int 17
	CriarEmpresa( 91, "Clowns Pocket", 2225.134521, 1838.585449, 10.820312, 974.485412, -8.716199, 1001.148376, 3, 91, 450000 ); // Int 36
	CriarEmpresa( 92, "24 Seven", 2546.479003, 1971.296386, 10.820312, -25.837999, -187.239395, 1003.546875, 17, 92, 400000 ); // Int 1
	CriarEmpresa( 93, "General STORE", 2810.919677, 1986.250854, 10.820312, 6.091599, -30.549299, 1003.549377, 10, 93, 390000 ); // Int 2
	CriarEmpresa( 94, "Spread Ranch", 693.599060, 1966.490966, 5.539062, 1211.974487, -26.684600, 1000.953125, 3, 94, 550000 ); // Int 37
	CriarEmpresa( 95, "Burger Shot", 2169.835693, 2795.845947, 10.820312, 363.414611, -74.365303, 1001.507812, 10, 95, 390000 ); // Int 21
	CriarEmpresa( 96, "Binco", 1656.141479, 1733.247924, 10.828111, 207.352798, -110.384696, 1005.132812, 15, 96, 390000 ); // Int 34
	CriarEmpresa( 97, "Casino", 1658.623901, 2251.175292, 11.070102, 1133.566040, -14.818499, 1000.679687, 12, 97, 500000 ); // Int 17
	CriarEmpresa( 98, "SteakeHouse", 1694.744384, 2207.833496, 11.069177, 376.620788, -192.283798, 1000.632812, 17, 98, 350000 ); // Int 24
	CriarEmpresa( 99, "GYM", 1968.794555, 2295.092285, 16.455863, 773.784118, -77.836196, 1000.661315, 7, 99, 450000 ); // Int 43
	CriarEmpresa( 100, "The Well", 1367.022827, 248.602478, 19.566932, 372.079895, -132.395095, 1001.492187, 5, 100, 400000 ); // Int 22
	CriarEmpresa( 101, "Lanchonete", 2637.332519, 1128.456054, 11.179687, 376.620788, -192.283798, 1000.632812, 17, 101, 350000 ); // Int 24
	CriarEmpresa( 102, "Hardon", 2861.676269, 2430.471679, 11.068956, -27.589300, -57.167499, 1003.546875, 6, 102, 250000 ); // Int 6
	CriarEmpresa( 103, "24 Seven", 2884.894531, 2453.758789, 11.068956, -25.837999, -187.239395, 1003.546875, 17, 103, 300000 ); // Int 1
	CriarEmpresa( 104, "Erotic", 2500.151123, 2241.842529, 10.820312, 974.485412, -8.716199, 1001.148376, 3, 104, 300000 ); // Int 36
	CriarEmpresa( 105, "Sex Shop", 2515.750244, 2297.372070, 10.820312, -100.455299, -24.469100, 1000.718811, 3, 105, 350000 ); // Int 26
	CriarEmpresa( 106, "Casino Hotel", 2217.323486, 2123.949462, 10.820312, 1204.656860, -13.272500, 1000.921875, 2, 106, 450000 ); // Int 38
	CriarEmpresa( 107, "Casino", 2314.039550, 2118.210693, 10.828125, 1133.566040, -14.818499, 1000.679687, 12, 107, 700000 ); // Int 17
	// DS
	CriarEmpresa( 108, "DS", 1643.3785, -2281.4272, -1.1968, 204.2934, -168.0919, 1000.5234, 14, 108, 500000 ); // DS
    CriarEmpresa( 109, "DS", 453.7641, -1478.1044, 30.8132, 204.2934, -168.0919, 1000.5234, 14, 109, 500000 ); // DS
	// Text Label Informações do servidor
	Create3DTextLabel( "{33CCFF}Oficina de Tuning {FFFFFF}Digite: /TunarVeiculo | /DestunarVeiculo", 0xFFFFFFFF, 1665.1106, -1716.3702, 20.0626, 40.0, 0 );
	Create3DTextLabel( "{66FFFF}Delegacia de Policia\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1555.1055, -1675.6426, 16.1953, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Delegacia de Policia\n{FFFFFF}de\n{CCFF99}San Fierro", 0xFFFFFFFF, -1605.4912, 711.4242, 13.8672, 30.0, 0 );
	Create3DTextLabel( "{ffa500}/FardaSF", 0xFFFFFFFF, 294.8674, 183.7677, 1007.1719, 30.0, 1 ); // DP SF // SF DP
	Create3DTextLabel( "{ffa500}/ColeteSF", 0xFFFFFFFF, 298.6661, 183.1014, 1007.1719, 30.0, 1 ); // DP SF // SF DP
	Create3DTextLabel( "{66FFFF}Policia Rodoviaria\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 627.5673, -571.7941, 17.6481, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Posto - Policia Rodoviaria\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 53.4001, -1530.7544, 5.2698, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Alhambra Balada\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1836.5631, -1682.5184, 13.3427, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Auto Escola\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1310.2739, -1367.0903, 13.5192, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Auto Escola\n{FFFFFF}de\n{CCFF99}San Fierro", 0xFFFFFFFF, -2026.6133, -100.9539, 35.1641, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Utilitários 24/7²\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1833.7720, -1842.4988, 13.5781, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Loteria\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1631.8516, -1172.9270, 24.0843, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Prefeitura\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1481.1034, -1770.4825, 18.7958, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Prefeitura\n{FFFFFF}de\n{CCFF99}San Fierro", 0xFFFFFFFF, -2765.3511,375.5041,6.3359, 30.0, 0 );
	Create3DTextLabel( "Procurado?\nRetire suas estrelas aqui !", 0xFFFFFFFF, 358.9193, 166.1699, 1008.3828, 30.0, 0 );
	Create3DTextLabel( "Apostas aqui !", 0xFFFFFFFF, -2159.0813, 640.3607, 1052.3817, 30.0, 0 );
	Create3DTextLabel( "Prefeitura", 0xFFFFFFFF, 362.3257,173.7074,1008.3828, 30.0, 0 );
 	Create3DTextLabel( "Corpo de Bombeiros", 0xFFFFFFFF, 2770.6172, -1627.9358, 12.1775, 80.0, 0 );
  	Create3DTextLabel( "/MaterialObra1", 0x00FE00FF, 2624.1807, 834.7396, 5.3158, 80.0, 0 );
  	Create3DTextLabel( "/MaterialObra2", 0x00FE00FF, 1248.4409, -1258.4224, 13.1609, 80.0, 0 );
  	Create3DTextLabel( "/MaterialObra3", 0x00FE00FF, -2115.0127, 242.0457, 35.5022, 80.0, 0 );
	// Bancos
	Create3DTextLabel( "Abrir Conta\nSaque e Deposito\nExtrato\naqui !", 0xFFFFFFFF, 822.0108, 1.9151, 1004.1797, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Banco Principal\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1778.8096, -1662.7579, 14.4375, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Banco Principal\n{FFFFFF}de\n{CCFF99}Las Venturas", 0xFFFFFFFF, 1958.3718, 951.9951, 10.8203, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Banco Principal\n{FFFFFF}de\n{CCFF99}San Fierro", 0xFFFFFFFF, -2650.2886, 376.0364, 6.1563, 30.0, 0 );
	// Pague Impostos
	Create3DTextLabel( "Impostos\nCasa e Outros?\naqui !", 0xFFFFFFFF, 359.0632,178.6568,1008.3828, 30.0, 0 );
	Create3DTextLabel( "Impostos\nCasa e Outros?\naqui !", 0xFFFFFFFF, 830.7095, -0.1333, 1004.1797, 30.0, 0 );
	Create3DTextLabel( "Impostos\nCasa e Outros?\naqui !", 0xFFFFFFFF, -2161.2563, 640.5176, 1052.3817, 30.0, 0 );
	// 3D Agências de Emprego
    Create3DTextLabel( "{66FFFF}Agência de Empregos\n{FFFFFF}de\n{CCFF99}Los Santos", 0xFFFFFFFF, 1219.1569, -1812.4558, 16.5938, 30.0, 0 );
    Create3DTextLabel( "{66FFFF}Agência de Empregos\n{FFFFFF}de\n{CCFF99}Las Venturas", 0xFFFFFFFF, 1989.1378, 959.3508, 10.8203, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Agência de Empregos\n{FFFFFF}de\n{CCFF99}Blueberry", 0xFFFFFFFF, 207.8856, -62.8081, 1.5781, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Agência de Empregos\n{FFFFFF}de\n{CCFF99}Fort Carson", 0xFFFFFFFF, -177.7854, 1110.6555, 19.7422, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Agência de Empregos\n{FFFFFF}de\n{CCFF99}Angel Pine", 0xFFFFFFFF, -2165.2070, -2417.1287, 30.8203, 30.0, 0 );
	Create3DTextLabel( "{66FFFF}Agência de Empregos\n{FFFFFF}de\n{CCFF99}San Fierro", 0xFFFFFFFF, -2054.8433, 456.0135, 35.1719, 70.0, 0 );
	// Radares
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}120", 0xFFFFFFFF, 1529.6328, -1732.3198, 14.9468, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}120", 0xFFFFFFFF, 1193.4443, -1852.2771, 14.9218, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}150", 0xFFFFFFFF, -15.1126, -1518.2516, 3.6745, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}150", 0xFFFFFFFF, 807.8500, -1400.5115, 15.0895, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}120", 0xFFFFFFFF, 1125.8978, -1144.8754, 25.2703, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}150", 0xFFFFFFFF, 1194.1735, -943.1405, 44.3574, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}190", 0xFFFFFFFF, 2749.8408, -149.9315, 34.5190, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}190", 0xFFFFFFFF, 1796.8328, 843.0880, 12.2468, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}190", 0xFFFFFFFF, 1698.0563, -735.8344, 52.1640, 120.0, 0 );
	Create3DTextLabel( "{FFFF00}RADAR\n{66FF33}Velocidade Máx: {FF6600}150", 0xFFFFFFFF, 1350.0825, -1280.4806, 14.9968, 120.0, 0 );

	Create3DTextLabel( "{FFFFFF}Mercadoria para Empresas\n{FFFF00}aqui !", 0xFFFFFFFF, 2846.7603, 983.6639, 10.7500, 80.0, 0 );
	// Veículos profissão
	vPrefeito[ 0 ] = CreateVehicle( 409, 1481.1176, -1738.6106, 13.3469, 270.5152, 1, 1, 300 );
	// Trem para os Maquinistas
	AddStaticVehicleEx( 538, 1740.9092, -1953.9208, 13.5469, 0.0, 1, 1, 300 ); // Trem Maquinista
	AddStaticVehicleEx( 538, 1740.9092, -1953.9208, 13.5469, 0.0, 1, 1, 300 ); // Trem Maquinista
	AddStaticVehicleEx( 538, 1740.9092, -1953.9208, 13.5469, 0.0, 1, 1, 300 ); // Trem Maquinista
	//
	vMotoBoys[ 0 ] = CreateVehicle( 522,1114.0569,-1250.1796,15.3836,3.5543,147,1,300 ); // Motoboy
	vMotoBoys[ 1 ] = CreateVehicle( 522,1111.4313,-1250.5857,15.3940,12.0699,147,1,300 ); // motoboy
	vMotoBoys[ 2 ] = CreateVehicle( 522,1109.0042,-1250.8276,15.3954,3.0878,147,1,300 ); // Motoboy
	vMotoBoys[ 3 ] = CreateVehicle( 522,1106.7517,-1250.8179,15.3921,5.8806,147,1,300 ); // Motoboy
	vMotoBoys[ 4 ] = CreateVehicle( 522,1104.1266,-1250.9253,15.3845,3.9051,147,1,300 ); // Motoboy
	vMotoBoys[ 5 ] = CreateVehicle( 522,1102.0940,-1251.1199,15.3883,4.2573,147,1,300 ); // Motoboy
	vMotoBoys[ 6 ] = CreateVehicle( 522,1099.8965,-1251.4105,15.3955,2.8052,147,1,300 ); // Motoboy
	vMotoBoys[ 7 ] = CreateVehicle( 522,1097.8820,-1251.2789,15.3848,5.7710,147,1,300 ); // Motoboy
	vMotoBoys[ 8 ] = CreateVehicle( 522,1095.5231,-1251.3767,15.3934,357.1451,147,1,300 ); // Motoboy
	vMotoBoys[ 9 ] = CreateVehicle( 522,1093.4855,-1251.4585,15.3914,359.1604,147,1,300 ); // Motoboy
	vMotoBoys[ 10 ] = CreateVehicle( 522,1091.1774,-1251.4663,15.3860,2.2951,147,1,300 ); // Motoboy
	vMotoBoys[ 11 ] = CreateVehicle( 522,1088.7025,-1251.4991,15.3947,359.7247,147,1,300 ); // Motoboy
	vMotoBoys[ 12 ] = CreateVehicle( 522,1086.5094,-1251.3291,15.3879,0.6624,147,1,300 ); // Motoboy
	vMotoBoys[ 13 ] = CreateVehicle( 522,1083.9999,-1251.4783,15.3865,1.0179,147,1,300 ); // Motoboy
	vMotoBoys[ 14 ] = CreateVehicle( 522,1116.6655,-1250.5627,15.4403,358.5095,147,1,300 ); // Motoboy
	// Pedreiros
 	vPedreiro[ 0 ] = CreateVehicle( 524,664.3394,813.1977,-42.0293,18.5056,0,0,300 ); // Pedreiro
	vPedreiro[ 1 ] = CreateVehicle( 524,659.2021,809.3203,-42.0225,14.2758,0,0,300 ); // Pedreiro
	vPedreiro[ 2 ] = CreateVehicle( 524,652.0322,808.9119,-42.0248,355.4403,0,0,300 ); // Pedreiro
	vPedreiro[ 3 ] = CreateVehicle( 524,644.9286,808.6224,-42.0258,344.8365,0,0,300 ); // Pedreiro
	vPedreiro[ 4 ] = CreateVehicle( 524,640.9124,809.5889,-42.0284,343.6975,0,0,300 ); // Pedreiro
	vPedreiro[ 5 ] = CreateVehicle( 524,634.9953,811.9414,-42.0372,340.7485,0,0,300 ); // Pedreiro
	vPedreiro[ 6 ] = CreateVehicle( 524,626.9748,810.9967,-42.0461,335.7044,0,0,300 ); // Pedreiro
	vPedreiro[ 7 ] = CreateVehicle( 524,621.6002,813.6164,-42.0732,338.9165,0,0,300 ); // Pedreiro
	vPedreiro[ 8 ] = CreateVehicle( 524,616.8309,815.0422,-42.0266,343.8089,0,0,300 ); // Pedreiro
	vPedreiro[ 9 ] = CreateVehicle( 524,611.2800,816.1484,-42.0228,345.1877,0,0,300 ); // Pedreiro
	// Seguranças
	vSegurancas[ 0 ] = CreateVehicle( 505,287.8646,-1522.3406,24.7374,234.6137,0,0, 300 ); // SegurançaV
	vSegurancas[ 1 ] = CreateVehicle( 505,291.1874,-1517.6626,24.7372,234.6137,0,0, 300 ); // SegurançaV
	vSegurancas[ 2 ] = CreateVehicle( 505,294.3252,-1513.2450,24.7370,234.6137,0,0, 300 ); // SegurançaV
	//--
	vPescadores[ 0 ] = CreateVehicle( 453,451.0436,-1912.8796,-0.2565,185.7546,1,1, 300 ); // barco pesca
	vPescadores[ 1 ] = CreateVehicle( 453,444.3646,-1913.5549,-0.1187,185.7546,1,1, 300 ); // barco pesca
	vPescadores[ 2 ] = CreateVehicle( 453,435.9167,-1914.4097,0.0555,185.7546,1,1, 300 ); // barco pesca
	vPescadores[ 3 ] = CreateVehicle( 453,466.1953,-1911.3475,-0.5692,185.7546,1,1, 300 ); // barco pesca
	// Sedex
 	vSedex[ 0 ] = CreateVehicle( 482,2445.0000000,-1556.3000488,24.2000008,0.0000000,6,6, 300 ); // Carro Sedex
	vSedex[ 1 ] = CreateVehicle( 482,2448.5000000,-1556.4000244,24.2000008,0.0000000,6,6, 300 ); // Carro Sedex
	vSedex[ 2 ] = CreateVehicle( 482,2452.3999023,-1556.3000488,24.2000008,0.0000000,6,6, 300 ); // Carro Sedex
	vSedex[ 3 ] = CreateVehicle( 482,2456.1999512,-1556.1999512,24.2000008,0.0000000,6,6, 300 ); // Carro Sedex
	vSedex[ 4 ] = CreateVehicle( 482,2460.5000000,-1556.0999756,24.2000008,0.0000000,6,6, 300 ); // Carro Sedex
	vSedex[ 5 ] = CreateVehicle( 482,2464.3000488,-1556.1999512,24.2000008,0.0000000,6,6, 300 ); // Carro Sedex
	// Sedex
 	vPiloto[ 0 ] = CreateVehicle( 553,1646.974365,-2400.885986,14.882700,178.619598,0,0, 300 ); // Avião Piloto
	vPiloto[ 1 ] = CreateVehicle( 553,1646.463134,-2424.796142,14.892333,178.889053,0,0, 300 ); // Avião Piloto
	vPiloto[ 2 ] = CreateVehicle( 553,1728.380859,-2400.412841,14.882589,179.687271,0,0, 300 ); // Avião Piloto
	vPiloto[ 3 ] = CreateVehicle( 553,1728.108398,-2422.896972,14.886241,179.985809,0,0, 300 ); // Avião Piloto
	//--
	vMotoristap[ 0 ] = CreateVehicle( 409,1276.4667,-1320.8260,13.1401,359.9849,0,0, 300 ); // Car Motoris Particular
	vMotoristap[ 1 ] = CreateVehicle( 409,1276.4568,-1312.7593,13.1279,359.2265,1,1, 300 ); // Car Motoris Particular
	//--
	vCacadores[ 0 ] = CreateVehicle( 478,28.1363,-2641.9214,40.4366,94.8409,1,1, 300 ); // veiculo caça
	vCacadores[ 1 ] = CreateVehicle( 478,18.3176,-2632.8232,40.4057,90.3283,1,1, 300 ); // veiculo caça
	vCacadores[ 2 ] = CreateVehicle( 478,25.7510,-2632.5090,40.3899,91.9184,1,1, 300 ); // veiculo caça
	vCacadores[ 3 ] = CreateVehicle( 478,33.6382,-2632.4417,40.3974,92.5672,1,1, 300 ); // veiculo caça
	//--
	vMotoTaxista[ 0 ] = CreateVehicle( 522,1807.5647,-1868.8413,13.1648,356.5757,6,6, 300 ); // Moto Moto taxista
	vMotoTaxista[ 1 ] = CreateVehicle( 522,1802.8372,-1868.3347,13.1380,17.3903,6,6, 300 ); // Moto Moto taxista
	vMotoTaxista[ 2 ] = CreateVehicle( 522,1798.3392,-1868.8032,13.1687,0.5008,6,6, 300 ); // Moto Moto taxista
	//--
	vMotoAereo[ 0 ] = CreateVehicle( 487,1762.5267,-1926.9878,13.7495,271.5492,6,6, 300 ); // Heli taxista Aero
	vMotoAereo[ 1 ] = CreateVehicle( 487,1762.2338,-1916.1537,13.6899,271.5492,6,6, 300 ); // Heli taxista Aero
	//--
	vTraficDrogas[ 0 ] = CreateVehicle( 467,-1189.0453,-1136.1168,128.9587,357.9854,1,0, 300 ); // carro traficante de dorgas
	vTraficDrogas[ 1 ] = CreateVehicle( 467,-1068.8763,-1149.9882,128.9588,270.7453,1,0, 300 ); // carro traficante de dorgas
	vTraficDrogas[ 2 ] = CreateVehicle( 467,-1030.0145,-1188.4044,128.9587,88.9144,1,0, 300 ); // carro traficante de dorgas
	vTraficDrogas[ 3 ] = CreateVehicle( 521,-1029.9248,-1183.9967,128.7935,91.3651,0,1, 300 ); // carro traficante de dorgas
	vTraficDrogas[ 4 ] = CreateVehicle( 521,-1072.4183,-1154.1243,128.7847,269.7610,0,1, 300 ); // carro traficante de dorgas
	vTraficDrogas[ 5 ] = CreateVehicle( 521,-1184.6030,-1141.4117,128.7936,358.3395,0,1, 300 ); // carro traficante de dorgas
	//--
	vTraficArmas[ 0 ] = CreateVehicle( 468,-1110.3940,-1637.1936,76.0363,269.9586,54,54, 300 ); // Moto Trafico de Armas
	vTraficArmas[ 1 ] = CreateVehicle( 468,-1111.8992,-1676.6799,76.0360,3.1572,54,54, 300 ); // Moto Trafico de Armas
	vTraficArmas[ 2 ] = CreateVehicle( 451,-1109.0090,-1631.2808,76.0807,272.2647,54,54, 300 ); // Turismo Trafico de Armas
	vTraficArmas[ 3 ] = CreateVehicle( 476,-1108.6602,-1620.8835,77.0840,269.1622,55,54, 300 ); // Rustler Trafico de Armas
	//--
	vAssasino[ 0 ] = CreateVehicle( 474,2114.4490,-963.4556,54.8433,167.3380,0,0, 300 ); // Veículo Assasinos
	//--
	vTerrorista[ 0 ] = CreateVehicle( 471,-373.3637,2234.6597,41.9646,102.0292,1,56, 300 ); // Veiculo Terrorista
	vTerrorista[ 1 ] = CreateVehicle( 468,-391.7790,2232.0850,42.0977,285.4930,166,166, 300 ); // Veiculo Terrorista
	vTerrorista[ 2 ] = CreateVehicle( 468,-394.2222,2241.8101,42.0970,280.6775,166,166, 300 ); // Veiculo Terrorista
	vTerrorista[ 3 ] = CreateVehicle( 542,-391.1064,2221.6970,42.1717,284.7092,54,0, 300 ); // Veiculo Terrorista
	//--
	vChefeMafia[ 0 ] = CreateVehicle( 411,2488.4399,1534.6350,10.4062,51.5545,0,0, 300 ); // veículo Mafia
	vChefeMafia[ 1 ] = CreateVehicle( 411,2561.6050,1571.3802,10.5474,90.9047,0,0, 300 ); // veículo Mafia
	vChefeMafia[ 2 ] =CreateVehicle( 487,2463.6387,1590.7494,10.9981,271.1713,0,0, 300 ); // Veículo Mafia
	//--
	vPortIlha[ 0 ] = CreateVehicle( 471,851.3491,-2063.1509,12.3475,358.7915,145,1, 300 ); // veículo Porteiro Ilha
	vPortIlha[ 1 ] = CreateVehicle( 471,821.6732,-2062.6360,12.3494,358.7045,145,1, 300 ); // veículo Porteiro Ilha
	//--
	vSegIlha[ 0 ] = CreateVehicle( 471,814.5830,-2522.3289,27.9365,0.9913,145,0, 300 ); // véiculo segurançã ilha
	vSegIlha[ 1 ] = CreateVehicle( 471,849.8387,-2522.4033,27.9305,0.8867,145,0, 300 ); // véiculo segurançã ilha
	vSegIlha[ 2 ] = CreateVehicle( 471,833.9085,-2491.4033,25.7588,182.4494,145,0, 300 ); // véiculo segurançã ilha
	//--
	vFotografo[ 0 ] = CreateVehicle( 480,2331.3274,1725.5581,10.4449,180.0953,1,1, 300 ); // veículo fotografo
	vFotografo[ 1 ] = CreateVehicle( 480,2339.7651,1717.1587,10.4521,90.6157,1,1, 300 ); // ve´ciulo fotografo
	//--
	vReporter[ 0 ] = CreateVehicle( 582,737.8336,-1335.7264,13.5974,179.3407,1,16, 300 ); // veículo reporter
	vReporter[ 1 ] = CreateVehicle( 582,741.2506,-1335.7659,13.5973,179.3407,1,16, 300 ); // veículo reporter
	vReporter[ 2 ] = CreateVehicle( 488,744.1884,-1365.1838,25.8694,269.4309,16,1, 300 ); // veículo reporter
	vReporter[ 3 ] = CreateVehicle( 488,744.0966,-1374.4130,25.9173,269.4309,16,1, 300 ); // veículo reporter
	//--
	vInstrutor[ 0 ] = CreateVehicle( 506,-2064.3757,-83.5828,34.8686,0.7376,166,166, 300 ); // veículo instrutor
	vInstrutor[ 1 ] = CreateVehicle( 506,-2019.8495,-94.6888,34.8686,90.8285,166,166, 300 ); // veículo instrutor
	//--
	vMecanico[ 0 ] = CreateVehicle( 525,2655.4319,-2032.5044,13.4440,89.2650,1,1, 300 ); // veiculo mecanico
	vMecanico[ 1 ] = CreateVehicle( 525,2642.8240,-2018.8339,13.4255,359.1790,1,1, 300 ); // veiculo  mecanico
	vMecanico[ 2 ] = CreateVehicle( 525,2659.5083,-2048.8501,13.4518,3.4411,1,1, 300 ); // veiculo mecanico
	//--
	vPadre[ 0 ] = CreateVehicle( 545,2234.7483,-1321.4547,23.7954,359.1054,1,1, 300 ); // veiculo padre
	//--
	vPizzaBoy[ 0 ] = CreateVehicle( 448,2098.2131,-1815.1091,12.9822,93.6541,8,3, 300 ); // 1motinha
	vPizzaBoy[ 1 ] = CreateVehicle( 448,2098.0688,-1813.3397,12.9785,89.0505,8,3, 300 ); // 2motinha
	vPizzaBoy[ 2 ] = CreateVehicle( 448,2098.0679,-1816.5538,12.9629,90.4330,8,3, 300 ); // 3motinha
	vPizzaBoy[ 3 ] = CreateVehicle( 448,2098.1392,-1818.1722,12.9643,87.3365,8,3, 300 ); // 4motinha
	vPizzaBoy[ 4 ] = CreateVehicle( 448,2098.1360,-1819.8542,12.9824,90.8346,8,3, 300 ); // 5motinha
	//--
	vHOTDOG[ 0 ] = CreateVehicle( 588,1203.616577,-878.291748,42.850486,190.496383,1,1, 300 ); // Hotdog
	vHOTDOG[ 1 ] = CreateVehicle( 588,1197.293090,-879.107604,42.916858,189.692733,1,1, 300 ); // Hotdog
	vHOTDOG[ 2 ] = CreateVehicle( 588,1190.261474,-880.375061,42.990242,189.602691,1,1, 300 ); // Hotdog
	//--
	vSorveteiro[ 0 ] = CreateVehicle( 423,1066.249389,-1334.661987,13.406672,1.693901,1,126, 300 ); // Caminhão do sorvete
	vSorveteiro[ 1 ] = CreateVehicle( 423,1066.336059,-1339.969604,13.404533,1.081431,1,128, 300 ); // Caminhão do sorvete
	vSorveteiro[ 2 ] = CreateVehicle( 423,1066.460815,-1345.613525,13.404375,0.862603,1,7, 300 ); // Caminhão do sorvete
	//--
	vDrifter[ 0 ] = CreateVehicle( 562,-320.9942,1515.8362,75.0176,180.6931,1,1, 300 ); // Elegy Drifter
	vDrifter[ 1 ] = CreateVehicle( 562,-327.2626,1515.6719,75.0182,180.5077,1,1, 300 ); // Elegy Drifter
	vDrifter[ 2 ] = CreateVehicle( 562,-333.3788,1515.8314,75.0206,179.5955,1,1, 300 ); // Elegy Drifter
	vDrifter[ 3 ] = CreateVehicle( 562,-339.7828,1515.7581,75.0199,180.8299,1,1, 300 ); // Elegy Drifter
	vDrifter[ 4 ] = CreateVehicle( 562,-345.9114,1515.9675,75.0194,178.5889,1,1, 300 ); // Elegy Drifter
	vDrifter[ 5 ] = CreateVehicle( 562,-314.8153,1515.8854,75.0162,181.2863,1,1, 300 ); // Elegy Drifter
	//--
	vAdvogado[ 0 ] = CreateVehicle( 410,1407.8767,-1795.2533,13.2014,90.2798,0,0, 300 ); // veiculo advogado
	vAdvogado[ 1 ] = CreateVehicle( 410,1407.3461,-1785.3204,13.2004,89.9296,0,0, 300 ); // veiculo advogado
	//--
	vAmbulancias[ 0 ] = CreateVehicle( 416,1177.543579,-1338.968994,14.057520,271.427795,1,3, 300 ); // Ambulância Los Santos
	vAmbulancias[ 1 ] = CreateVehicle( 416,1177.002807,-1308.756958,14.018218,270.577850,1,3, 300 ); // Ambulância Los Santos
	vAmbulancias[ 2 ] = CreateVehicle( 563,1180.0081,-1374.4187,24.6877,0.4498,1,3, 300 ); // Helicóptero Los Santos
	vAmbulancias[ 3 ] = CreateVehicle( 416,-2661.2725,613.8994,14.6035,180.2214,1,3, 300 ); // Ambulância San Fierro
	vAmbulancias[ 4 ] = CreateVehicle( 416,-1503.7245,2526.3696,55.8361,359.3794,1,3, 300 ); // Ambulância ElQuebrados
	vAmbulancias[ 5 ] = CreateVehicle( 416,-298.1814,1049.1421,19.7348,1.1242,1,3, 300 ); // Ambulância Fort Carson
	vAmbulancias[ 6 ] = CreateVehicle( 416,-2215.8601,-2287.9236,30.7761,320.7556,1,3, 300 ); // Ambulãncia Angel Pine
	vAmbulancias[ 7 ] = CreateVehicle( 416,1624.1400,1819.9449,10.9709,1.6646,1,3, 300 ); // Ambulância Las Venturas
	//--
	vBombeiros[ 0 ] = CreateVehicle( 407, 2771.1772, -1615.3698, 11.1582,271.1622, 3, 1, 300 ); // C/ Bombeiro(a)s
	vBombeiros[ 1 ] = CreateVehicle( 407, 2770.3794, -1606.4230, 11.1582,271.4028, 3, 1, 300 ); // C/ Bombeiro(a)s
	vBombeiros[ 2 ] = CreateVehicle( 407, 2796.7600, -1580.0347, 11.1662,273.6882, 3, 1, 300 ); // C/ Bombeiro(a)s
	vBombeiros[ 3 ] = CreateVehicle( 407, 2796.2788, -1575.7710, 11.1686,271.8888, 3, 1, 300 ); // C/ Bombeiro(a)s
	vBombeiros[ 4 ] = CreateVehicle( 407, 2796.6211, -1571.6295, 11.1653,270.3109, 3, 1, 300 ); // C/ Bombeiro(a)s
	vBombeiros[ 5 ] = CreateVehicle( 407, 2796.4626, -1567.1689, 11.1632,270.5214, 3, 1, 300 ); // C/ Bombeiro(a)s
	vBombeiros[ 6 ] = CreateVehicle( 407, 2796.3936, -1562.8431, 11.1618,269.8318, 3, 1, 300 ); // C/ Bombeiro(a)s
	vBombeiros[ 7 ] = CreateVehicle( 407, 2796.4529, -1558.5083, 11.1582,269.2480, 3, 1, 300 ); // C/ Bombeiro(a)s
	//-- Veiculos Lixeiro
	vLixeiro[ 0 ] = CreateVehicle(408,2154.3999023,-2289.5000000,14.1999998,223.2500000,1,1,300); //Trashmaster
	vLixeiro[ 1 ] = CreateVehicle(408,2159.6999512,-2279.8999023,14.1999998,223.2476807,1,1,300); //Trashmaster
	vLixeiro[ 2 ] = CreateVehicle(408,2165.0000000,-2275.1000977,14.1999998,223.2476807,1,1,300); //Trashmaster
	vLixeiro[ 3 ] = CreateVehicle(408,2168.1000977,-2272.1999512,14.1999998,223.2476807,1,1,300); //Trashmaster
	vLixeiro[ 4 ] = CreateVehicle(408,2172.8999023,-2267.8000488,14.1999998,223.2476807,1,1,300); //Trashmaster
	vLixeiro[ 5 ] = CreateVehicle(408,2186.1000977,-2295.8999023,14.1999998,44.7476807,1,1,300); //Trashmaster
	vLixeiro[ 6 ] = CreateVehicle(408,2182.3999023,-2299.3999023,14.1999998,44.7473145,1,1,300); //Trashmaster
	vLixeiro[ 7 ] = CreateVehicle(408,2178.6999512,-2303.0000000,14.1999998,44.7473145,1,1,300); //Trashmaster
	// Veículos Carro Forte
	vMCarroForte[ 0 ] = CreateVehicle(428,1766.5000000,-1690.8000488,13.6999998,180.2500000,38,55,300); //Securicar
	vMCarroForte[ 1 ] = CreateVehicle(428,1770.6999512,-1690.6999512,13.6999998,180.2471924,38,55,300); //Securicar
	vMCarroForte[ 2 ] = CreateVehicle(428,1774.5000000,-1690.6999512,13.6999998,180.2471924,38,55,300); //Securicar
	vMCarroForte[ 3 ] = CreateVehicle(428,1778.5000000,-1690.8000488,13.6999998,180.2471924,38,55,300); //Securicar
	vMCarroForte[ 4 ] = CreateVehicle(428,1782.5000000,-1690.9000244,13.6999998,180.2471924,38,55,300); //Securicar
	vMCarroForte[ 5 ] = CreateVehicle(428,1786.5000000,-1690.9000244,13.6999998,180.2471924,38,55,300); //Securicar
	// Veículos Novatos(as)
	vNovatos[ 0 ] = CreateVehicle(510,1213.3535,-1818.6487,13.2030,178.4481,3,3,300); // Bicicleta Novatos(as)
	vNovatos[ 1 ] = CreateVehicle(510,1214.7531,-1818.6344,13.2055,177.6775,3,3,300); // Bicicleta Novatos(as)
	vNovatos[ 2 ] = CreateVehicle(510,1216.1552,-1818.5426,13.1526,183.8737,3,3,300); // Bicicleta Novatos(as)
	vNovatos[ 3 ] = CreateVehicle(510,1217.6976,-1818.5922,13.1476,181.3166,3,3,300); // Bicicleta Novatos(as)
	//--
	CreateVehicle( 592,1423.7231,-2594.4561,14.7433,270.2109,1,1, 300 ); // Avião LS
	CreateVehicle( 577,1427.9728,-2493.5127,13.4710,269.5437,1,3, 300 ); // Avião LS
	CreateVehicle( 519,1601.9318,-2463.0769,14.4773,178.2335,1,1, 300 ); // Avião LS
	CreateVehicle( 487,1850.3358,-2416.2932,13.7322,174.2626,1,0, 300 ); // Heli LS
	CreateVehicle( 513,1753.3306,-2628.9766,14.1008,3.9929,1,149, 300 ); // Avião LS
	CreateVehicle( 563,2112.2705,-2426.5793,14.2522,181.0629,1,4, 300 ); // Heli LS
	CreateVehicle( 469,1924.3121,-2250.1438,13.5612,190.6606,1,1, 300 ); // Heli LS
	CreateVehicle( 512,1996.3955,-2316.0864,13.8293,91.1660,1,3, 300 ); // Avião LS
	CreateVehicle( 593,1993.8778,-2251.0203,14.0059,94.9982,1,3, 300 ); // Avião LS
	CreateVehicle( 511,1985.2704,-2382.3853,14.9203,94.0198,1,3, 300 ); // Avião LS
	// Viatura DP LS
	CreateVehicle( 596,1535.9290,-1678.0125,13.1029,0.4477,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 596,1535.9070,-1666.8684,13.1035,0.5706,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 596,1595.5728,-1710.5785,5.6146,0.1492,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 596,1587.5530,-1710.6703,5.6123,0.6534,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 523,1529.6401,-1683.8788,5.4521,270.2300,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 523,1529.5391,-1688.0732,5.4568,269.2461,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 523,1601.2778,-1704.1078,5.4485,91.1078,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 523,1601.2748,-1700.1243,5.4519,90.7162,0,1, 300 ); // Veiculo Policia LS
	CreateVehicle( 497,1564.961669,-1616.634887,25.185575,0.097611,0,1, 300 ); // Helicoptero Policia LS
	CreateVehicle( 599,1538.9386,-1644.8782,6.1076,179.4829,0,1, 300 ); // Blaser Policia Em baixo
	CreateVehicle( 599,1545.8494,-1651.1372,6.0345,89.6678,0,1, 300 ); // Blaser Policia Em baixo
	CreateVehicle( 599,1602.6898,-1616.3588,13.6988,89.9646,0,1, 300 ); // Blaser Policia Em cima
	CreateVehicle( 599,1602.7123,-1623.1898,13.6998,90.2372,0,1, 300 ); // Blaser Policia Em cima
	// Viaitura DP SF
    CreateVehicle( 596, -1597.0004, 724.9412, 10.0076, 268.9134, 0,1, 300); // VTR LS DP SF
    CreateVehicle( 597, -1603.0397, 724.9410, 11.1438, 270.1569, 0,1, 300); // VTR SF DP SF
    CreateVehicle( 598, -1609.2382, 724.9209, 12.2457, 269.5353, 0,1, 300); // VTR LV DP SF
    CreateVehicle( 599, -1615.5315, 724.9910, 13.8397, 270.4763, 0,1, 300); // VTR RANGER DP SF
	// Viatura BOPE
	vBOPE[ 0 ] = CreateVehicle( 596,2251.844726,2442.881835,10.540665,0.348869,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 1 ] = CreateVehicle( 597,2256.243164,2442.898681,10.541450,0.681569,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 2 ] = CreateVehicle( 598,2260.589111,2442.865478,10.566013,0.000000,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 3 ] = CreateVehicle( 599,2251.850585,2459.385742,11.012219,181.103088,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 4 ] = CreateVehicle( 523,2247.432861,2456.858642,10.390257,182.378250,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 5 ] = CreateVehicle( 601,2256.178710,2459.198486,10.579088,181.084625,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 6 ] = CreateVehicle( 528,2260.588623,2459.187988,10.865048,181.766769,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 7 ] = CreateVehicle( 490,2269.273193,2442.272460,10.949021,359.352569,0,0, 300 ); // Veiculo BOPE
	vBOPE[ 8 ] = CreateVehicle( 427,2269.062744,2459.531005,10.952075,181.559600,0,0, 300 ); // Veiculo BOPE
	// Viaturas Exercito
	vExercito[ 0 ] = CreateVehicle( 470,203.6999969,1860.6999512,13.3000002,0.0000000,95,10, 300 ); //Patriot
	vExercito[ 1 ] = CreateVehicle( 470,207.3999939,1860.8000488,13.3000002,0.0000000,95,10, 300 ); //Patriot
	vExercito[ 2 ] = CreateVehicle( 470,210.8999939,1860.8000488,13.3000002,0.0000000,95,10, 300 ); //Patriot
	vExercito[ 3 ] = CreateVehicle( 470,214.3999939,1861.0000000,13.3000002,0.0000000,95,10, 300 ); //Patriot
	vExercito[ 4 ] = CreateVehicle( 548,278.6000061,1956.3000488,28.3999996,272.0000000,245,245, 300 ); //Patriot
	vExercito[ 5 ] = CreateVehicle( 548,279.0000000,1989.3000488,28.3999996,271.9995117,245,245, 300 ); //Patriot
	vExercito[ 6 ] = CreateVehicle( 548,279.5000000,2023.0999756,28.3999996,271.9995117,245,245, 300 ); //Patriot
	vExercito[ 7 ] = CreateVehicle( 433,278.2000122,1950.0000000,18.2000008,272.2500000,95,10, 300 ); //Barracks
	vExercito[ 8 ] = CreateVehicle( 433,278.1000061,1954.8000488,18.2000008,272.2467041,95,10, 300 ); //Barracks
	vExercito[ 9 ] = CreateVehicle( 433,278.1000061,1959.5000000,18.2000008,272.2467041,95,10, 300 ); //Barracks
	vExercito[ 10 ] = CreateVehicle( 433,278.2000122,1986.3000488,18.2000008,272.2467041,95,10, 300 ); //Barracks
	vExercito[ 11 ] = CreateVehicle( 433,278.3994141,1992.7998047,18.2000008,272.2467041,95,10, 300 ); //Barracks
	vExercito[ 12 ] = CreateVehicle( 433,278.6000061,2018.9000244,18.2000008,272.2467041,95,10, 300 ); //Barracks
	vExercito[ 13 ] = CreateVehicle( 433,278.2000122,2023.9000244,18.1000004,272.2467041,95,10, 300 ); //Barracks
	vExercito[ 14 ] = CreateVehicle( 433,278.6000061,2028.9000244,18.2000008,272.2467041,95,10, 300 ); //Barracks
    // Viaturas Policia Rodoviaria
	vRodoviaria[ 0 ] = CreateVehicle( 596,612.504272,-597.162597,16.953321,271.763000,0,6, 300 ); // Veiculo Policia Rodoviaria - LSPD
	vRodoviaria[ 1 ] = CreateVehicle( 597,612.821960,-600.945861,17.021778,271.578155,0,6, 300 ); // Veiculo Policia Rodoviaria - SFPD
	vRodoviaria[ 2 ] = CreateVehicle( 598,621.685546,-606.175415,16.904586,270.304077,0,6, 300 ); // Veiculo Policia Rodoviaria - LVPD
	vRodoviaria[ 3 ] = CreateVehicle( 599,621.690795,-610.532714,17.345811,270.545745,0,6, 300 ); // Veiculo Policia Rodoviaria - COPCAR
	vRodoviaria[ 4 ] = CreateVehicle( 523,632.700866,-574.398193,15.906911,269.825195,0,6, 300 ); // Veiculo Policia Rodoviaria - MOTO
	vRodoviaria[ 5 ] = CreateVehicle( 523,632.708190,-569.188476,15.907533,269.967468,0,6, 300 ); // Veiculo Policia Rodoviaria - MOTO
	vRodoviaria[ 6 ] = CreateVehicle( 497,613.564819,-603.368347,22.902381,269.708435,0,6, 300 ); // Veiculo Policia Rodoviaria - Helicoptero
	vRodoviaria[ 7 ] = CreateVehicle( 427,615.011657,-592.050659,17.364822,269.212890,0,6, 300 ); // Veiculo Policia Rodoviaria - Enforcer
    // Viaturas Marinha
	vMarinha[ 0 ] = CreateVehicle( 430,-1298.216064,487.896850,-0.252464,270.199645,1,1, 300 ); // Veiculo da Marinha
	vMarinha[ 1 ] = CreateVehicle( 430,-1471.867553,487.873931,-0.112442,90.605827,1,1, 300 ); // Veiculo da Marinha
	vMarinha[ 2 ] = CreateVehicle( 472,-1444.163085,498.892364,0.142036,87.727622,1,1, 300 ); // Veiculo da Marinha
	vMarinha[ 3 ] = CreateVehicle( 473,-1442.223876,495.378326,-0.352868,89.464363,1,1, 300 ); // Veiculo da Marinha
	vMarinha[ 4 ] = CreateVehicle( 539,-1431.674926,501.366210,2.399647,90.596946,7,7, 300 ); // Veiculo da Marinha
	vMarinha[ 5 ] = CreateVehicle( 539,-1431.544799,513.118835,2.400227,90.221084,1,1, 300 ); // Veiculo da Marinha
	vMarinha[ 6 ] = CreateVehicle( 472,-1444.150756,492.155609,-0.003843,89.352432,1,1, 300 ); // Veiculo da Marinha
	vMarinha[ 7 ] = CreateVehicle( 473,-1436.024780,504.046844,-0.406641,90.638191,1,1, 300 ); // Veiculo da Marinha
	vMarinha[ 8 ] = CreateVehicle( 430,-1438.873657,509.576965,-0.314510,88.268783,7,7, 300 ); // Veiculo da Marinha
	vMarinha[ 9 ] = CreateVehicle( 497,-1412.925048,492.301818,18.408697,271.537231,7,7, 300 ); // Veiculo da Marinha
	vMarinha[ 10 ] = CreateVehicle( 497,-1428.886230,492.110412,18.411106,271.115661,7,7, 300 ); // Veiculo da Marinha
	vMarinha[ 11 ] = CreateVehicle( 469,-1291.874633,492.074127,18.245605,270.789916,7,7, 300 ); // Veiculo da Marinha
	vMarinha[ 12 ] = CreateVehicle( 490,-1237.548950,480.248138,7.310434,89.664649,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 13 ] = CreateVehicle( 490,-1233.199340,475.625396,7.315752,90.916213,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 14 ] = CreateVehicle( 523,-1228.237426,472.507995,6.761778,91.575698,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 15 ] = CreateVehicle( 523,-1226.213134,470.825531,6.759807,91.847206,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 16 ] = CreateVehicle( 528,-1223.268310,463.376739,7.231689,89.167785,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 17 ] = CreateVehicle( 601,-1224.164550,467.889953,7.232314,91.233917,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 18 ] = CreateVehicle( 596,-1223.999877,458.022125,6.935302,89.532073,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 19 ] = CreateVehicle( 597,-1223.791137,453.303039,7.437500,91.166648,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 20 ] = CreateVehicle( 598,-1223.496337,449.328948,6.994298,91.766876,7,1, 300 ); // Veiculo da Marinha
	vMarinha[ 21 ] = CreateVehicle( 599,-1223.877319,444.701171,7.435553,91.672225,7,1, 300 ); // Veiculo da Marinha
	// Taxi
	CreateVehicle( 420, 1728.2139, -1858.6439, 13.1936, 269.0216, 6, 6, 300 ); // Taxi Unity 1
	CreateVehicle( 420, 1736.3907, -1858.6445, 13.1927, 270.0750, 6, 6, 300 ); // Taxi Unity 2
	CreateVehicle( 420, 1743.6343, -1858.6270, 13.1935, 270.5515, 6, 6, 300 ); // Taxi Unity 3
	CreateVehicle( 420, 1750.5465, -1858.6066, 13.1934, 269.4393, 6, 6, 300 ); // Taxi Unity 4
	// Onibus
	CreateVehicle( 431, 2296.3962, -2336.7234, 13.6552, 48.5965, 154, 0, 300 ); // Busao 1
	CreateVehicle( 431, 2290.1770, -2343.6411, 13.6464, 46.6267, 154, 0, 300 ); // Busao 2
	CreateVehicle( 431, 2283.3823, -2350.9822, 13.6591, 45.9532, 154, 0, 300 ); // Busao 3
	CreateVehicle( 431, 2263.2764, -2339.1724, 13.6516, 301.8688, 154, 0, 300 ); // Busao 4
	CreateVehicle( 431, 2267.5144, -2343.5747, 13.6475, 300.5205, 154, 0, 300 ); // Busao 5
	// Caminhoes ( RoadTrain )
	CreateVehicle( 515, 2779.8469, -2510.3757, 14.6438, 89.2830, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2779.7981, -2473.9719, 14.6542, 90.4162, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2779.5789, -2402.1841, 14.6300, 89.2225, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2780.3342, -2436.9912, 14.6374, 90.4412, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2739.0566, -2465.5708, 14.6642, 270.2811, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2765.3372, -2385.9246, 14.6532, 181.3853, 0, 0, 300 ); // RoadTrain
	CreateVehicle( 515, 2727.9050, -2491.9709, 14.6728, 270.3910, 0, 0, 300 ); // RoadTrain
	CreateVehicle( 515, 2739.0923, -2431.7849, 14.6630, 270.3166, 0, 0, 300 ); // RoadTrain
	CreateVehicle( 515, 2739.2590, -2421.2480, 14.6498, 269.0966, 0, 0, 300 ); // RoadTrain
	CreateVehicle( 515, 2727.4551, -2392.5996, 14.6535, 269.7193, 0, 0, 300 ); // RoadTrain
	CreateVehicle( 515, 2726.4458, -2413.4219, 14.6509, 270.3562, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2745.7681, -2446.6987, 14.6721, 269.1304, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2738.7390, -2473.2537, 14.6684,269.8560, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2738.5317, -2485.1572, 14.6606,269.9633, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2745.7764, -2440.2886, 14.6657,269.7522, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2808.993164, -2560.620849, 14.686378, 359.220886, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2809.101318, -2548.151611, 14.648846, 0.273403, 1, 1, 300 ); // RoadTrain
	CreateVehicle( 515, 2809.037353, -2534.625244, 14.654483, 0.271967, 1, 1, 300 ); // RoadTrain
	// Cargas /\ ~ \/
	CreateVehicle( 435,2757.7380,-2522.0793,14.2571,359.0142,0,0, 300 ); // Carga
	CreateVehicle( 435,2758.2053,-2375.5615,14.2540,178.8849,1,1, 300 ); // Carga
	CreateVehicle( 435,2785.7273,-2494.3032,14.3044,90.8958,0,0, 300 ); // Carga
	CreateVehicle( 435,2787.1638,-2456.0078,14.2752,92.2094,1,1, 300 ); // Carga
	CreateVehicle( 435,2786.0039,-2417.4854,14.2675,93.3644,1,1, 300 ); // Carga
	CreateVehicle( 435,2752.8098,-2387.8840,14.2740,180.9518,1,1, 300 ); // Carga
	CreateVehicle( 435,2749.7456,-2387.8872,14.2957,180.8876,1,1, 300 ); // Carga
	CreateVehicle( 435,2746.7368,-2388.1199,14.2543,181.0977,1,1, 300 ); // Carga
	CreateVehicle( 435,2795.7568,-2436.7715,14.2670,90.8619,1,1, 300 ); // Carga
	CreateVehicle( 435,2793.4177,-2473.7644,14.2724,89.6742,1,1, 300 ); // Carga
	CreateVehicle( 435,2792.6731,-2510.1604,14.2706,90.3851,1,1, 300 ); // Carga
	CreateVehicle( 435,2725.1392,-2511.2146,14.2995,270.3798,1,1, 300 ); // Carga
	// Bikes do Stunt Park LS
	CreateVehicle( 510, 1948.6721,-1366.3226,18.1865, 93.8039,0,0,300 ); // MT Bike
	CreateVehicle( 481, 1885.6619,-1366.7535,13.0832, 267.3179,0,0,300 ); // BMX 1
	CreateVehicle( 481, 1885.6909,-1364.5441,13.0781, 268.4727,154,154,300 ); // BMX
	// Públicos - // LS
	CreateVehicle( 522,1196.2634,-1826.6163,12.9794,269.6883,154,6, 300); // NRG - AGENCIA
	CreateVehicle( 466,1191.4963,-1306.7321,13.2944,179.0238,154,6, 300 ); // GLENDALE - HOSPITAL
	CreateVehicle( 581,1182.1487,-1333.2148,13.1678,269.4432,154,6, 300 ); // BF 400 - HOSPITAL
    CreateVehicle( 492,2008.7533,-1418.3582,16.8539,91.8401,154,6, 300 ); // GREENWOOD - HOSPITAL 2
	CreateVehicle( 522,2018.6222,-1445.7380, 14.9824,90.8849,154,6, 300); // NRG - HOSPITAL 2
	CreateVehicle( 522,2156.0435,-1023.2498,62.1927,273.8935,154,6, 300); // NRG - FAVELA
    // Públicos - // SF
    CreateVehicle( 404,-2654.5610,594.3204,14.1871,91.0362,154,6, 300 ); //OCEANIC - HOSPITAL SF
    CreateVehicle( 522,-2033.1578,148.6367,28.4041,270.8870,154,6, 300); // NRG - POSTO SF
    CreateVehicle( 479,-2020.6326,473.1247,34.8773,269.4811,154,6, 300); // REGINA - AGENCIA SF
    CreateVehicle( 491,-1528.2860,2525.6157,55.5701,0.5664,154,6, 300 ); // VIRGO - HOSPITAL TIERRA ROUBADA
    CreateVehicle( 554,-304.9458,1036.1084,19.6788,269.3598,6,154, 300 ); // YOSEMITE - HOSPITAL FORT CARSON
    CreateVehicle( 424,-2217.8867,-2278.6392,30.5000,232.1206,154,6, 300 ); // BF INJECTION - HOSPITAL ANGEL PINE
   	// Públicos - // LV
	CreateVehicle( 522,1608.4377,1838.3145,10.3853,1.7932,154,6, 300 ); // NGR - HOSPITAL LV
	
	new
		File:SET_Fopen,
		SET_Index,
		SET_Modelo,
		Float:SET_X,
		Float:SET_Y,
		Float:SET_Z,
		Float:SET_A,
		SET_Cor1,
		SET_Cor2
	;
	
	SET_Fopen = fopen( "Sets.cfg", io_readwrite );

	while( fread( SET_Fopen, gstring, sizeof( gstring ), false ))
	{
		SET_Index 	= 	0;
		SET_Modelo 	= 	strval( strtok( gstring, SET_Index ));
		SET_X 		= 	Float:floatstr( strtok( gstring, SET_Index ));
		SET_Y		= 	Float:floatstr( strtok( gstring, SET_Index ));
		SET_Z 		= 	Float:floatstr( strtok( gstring, SET_Index ));
		SET_A 		= 	Float:floatstr( strtok( gstring, SET_Index ));
		SET_Cor1	= 	strval( strtok( gstring, SET_Index ));
		SET_Cor2 	= 	strval( strtok( gstring, SET_Index ));
		CreateVehicle( SET_Modelo, SET_X, SET_Y, SET_Z, SET_A, SET_Cor1, SET_Cor2, 300 );
	}
	fclose( SET_Fopen );

	skins_binco = LoadModelSelectionMenu("skins/skins_binco.txt");
	skins_didiersachs = LoadModelSelectionMenu("skins/skins_didiersachs.txt");
	skins_prolaps = LoadModelSelectionMenu("skins/skins_prolaps.txt");
	skins_suburban = LoadModelSelectionMenu("skins/skins_suburban.txt");
	skins_victim = LoadModelSelectionMenu("skins/skins_victim.txt");
	skins_zip = LoadModelSelectionMenu("skins/skins_zip.txt");
	skins_vip = LoadModelSelectionMenu("skins/skins_vip.txt");

	//  Textdraws
	AFK1 = TextDrawCreate( 330.000000, 120.000000, "~r~~h~# ~r~~h~Bloqueado de Upar! ~y~~h~#~n~~w~~h~/SairAFK" );
	TextDrawAlignment( AFK1, 2 );
	TextDrawBackgroundColor( AFK1, 255 );
	TextDrawFont( AFK1, 1 );
	TextDrawLetterSize( AFK1, 1.120000, 4.099999 );
	TextDrawColor( AFK1, -1 );
	TextDrawSetOutline( AFK1, 1 );
	TextDrawSetProportional( AFK1, 1 );
	//--
	Favela_1 = TextDrawCreate( 120.000000, 415.000000, "Area de DM Liberado" );
	TextDrawBackgroundColor( Favela_1, 0xFF6633AA );
	TextDrawFont( Favela_1, 1 );
	TextDrawLetterSize( Favela_1, 0.460000, 1.600000 );
	TextDrawColor( Favela_1, -1 );
	TextDrawSetOutline( Favela_1, 1 );
	TextDrawSetProportional( Favela_1, 1 );
	//--
	Favela_2 = TextDrawCreate( 120.000000, 415.000000, "Area de DM Liberado" );
	TextDrawBackgroundColor( Favela_2, -1 );
	TextDrawFont( Favela_2, 1 );
	TextDrawLetterSize( Favela_2, 0.460000, 1.600000 );
	TextDrawColor( Favela_2, -16776961 );
	TextDrawSetOutline( Favela_2, 1 );
	TextDrawSetProportional( Favela_2, 1 );
	//--
	IMG_Matou = TextDrawCreate(38.000000, 274.000000, "ld_tatt:5gun");
	TextDrawBackgroundColor(IMG_Matou, 255);
	TextDrawFont(IMG_Matou, 4);
	TextDrawLetterSize(IMG_Matou, 0.500000, 1.000000);
	TextDrawColor(IMG_Matou, -1);
	TextDrawSetOutline(IMG_Matou, 0);
	TextDrawSetProportional(IMG_Matou, 1);
	TextDrawSetShadow(IMG_Matou, 1);
	TextDrawUseBox(IMG_Matou, 1);
	TextDrawBoxColor(IMG_Matou, 255);
	TextDrawTextSize(IMG_Matou, 50.000000, 40.000000);
	//
	IMG_Morreu = TextDrawCreate(88.000000, 274.000000, "ld_tatt:5cross");
	TextDrawBackgroundColor(IMG_Morreu, 255);
	TextDrawFont(IMG_Morreu, 4);
	TextDrawLetterSize(IMG_Morreu, 0.500000, 1.000000);
	TextDrawColor(IMG_Morreu, -1);
	TextDrawSetOutline(IMG_Morreu, 0);
	TextDrawSetProportional(IMG_Morreu, 1);
	TextDrawSetShadow(IMG_Morreu, 1);
	TextDrawUseBox(IMG_Morreu, 1);
	TextDrawBoxColor(IMG_Morreu, 255);
	TextDrawTextSize(IMG_Morreu, 50.000000, 40.000000);
	//
	BPO_Games = TextDrawCreate( 307.000000, 126.000000, "Bem - Vindo" );
	TextDrawAlignment( BPO_Games, 2 );
	TextDrawBackgroundColor( BPO_Games, 255 );
	TextDrawFont( BPO_Games, 3 );
	TextDrawLetterSize( BPO_Games, 1.120000, 3.700000 );
	TextDrawColor( BPO_Games, -1 );
	TextDrawSetOutline( BPO_Games, 1 );
	TextDrawSetProportional( BPO_Games, 1 );
	//--
/*	Viva_Vida = TextDrawCreate( 311.000000, 26.000000, "[ RPG ] Brasil Play Online" );
	TextDrawAlignment( Viva_Vida, 2 );
	TextDrawBackgroundColor( Viva_Vida, 255 );
	TextDrawFont( Viva_Vida, 3 );
	TextDrawLetterSize( Viva_Vida, 0.690000, 2.800000 );
	TextDrawColor( Viva_Vida, -1 );
	TextDrawSetOutline( Viva_Vida, 1 );
	TextDrawSetProportional( Viva_Vida, 1 ); */
	//--
	text_Top5[ 0 ] = TextDrawCreate( 79.000000, 135.000000, "~y~~h~Colocacao Evento" );
	TextDrawAlignment( text_Top5[ 0 ], 2 );
	TextDrawBackgroundColor( text_Top5[ 0 ], 255 );
	TextDrawFont( text_Top5[ 0 ], 1 );
	TextDrawLetterSize( text_Top5[ 0 ], 0.280000, 1.499999 );
	TextDrawColor( text_Top5[ 0 ], -1 );
	TextDrawSetOutline( text_Top5[ 0 ], 0 );
	TextDrawSetProportional( text_Top5[ 0 ], 1 );
	TextDrawSetShadow( text_Top5[ 0 ], 0 );
    //--
	text_Top5[ 1 ] = TextDrawCreate( 16.000000, 135.000000, "			" );
	TextDrawBackgroundColor( text_Top5[ 1 ], 255 );
	TextDrawFont( text_Top5[ 1 ], 1 );
	TextDrawLetterSize( text_Top5[ 1 ], 0.200000, 0.999999 );
	TextDrawColor( text_Top5[ 1 ], -1 );
	TextDrawSetOutline( text_Top5[ 1 ], 0 );
	TextDrawSetProportional( text_Top5[ 1 ], 1 );
	TextDrawSetShadow( text_Top5[ 1 ], 0 );
	TextDrawUseBox( text_Top5[ 1 ], 1 );
	TextDrawBoxColor( text_Top5[ 1 ], 150 );
	TextDrawTextSize( text_Top5[ 1 ], 143.000000, 20.000000 );
	//--
	TextLoteria = TextDrawCreate( 313.000000, 122.000000, "			" );
	TextDrawAlignment( TextLoteria, 2 );
	TextDrawBackgroundColor( TextLoteria, 255 );
	TextDrawFont( TextLoteria, 3 );
	TextDrawLetterSize( TextLoteria, 0.620000, 1.800001 );
	TextDrawColor( TextLoteria, -1 );
	TextDrawSetOutline( TextLoteria, 1 );
	TextDrawSetProportional( TextLoteria, 1 );
	//--
	TextNumero = TextDrawCreate( 317.000000, 377.000000, "			" );
	TextDrawAlignment( TextNumero, 2 );
	TextDrawBackgroundColor( TextNumero, 255 );
	TextDrawFont( TextNumero, 1 );
	TextDrawLetterSize( TextNumero, 0.899999, 2.799999 );
	TextDrawColor( TextNumero, -1 );
	TextDrawSetOutline( TextNumero, 1 );
	TextDrawSetProportional( TextNumero, 1 );
	//--
	Flash = TextDrawCreate( -20.000000, 2.000000, "|" );
	TextDrawUseBox( Flash, 1 );
	TextDrawBoxColor( Flash, 0xffffff66 );
	TextDrawTextSize( Flash, 660.000000,22.000000 );
	TextDrawAlignment( Flash, 0 );
	TextDrawBackgroundColor( Flash, 0x000000ff );
	TextDrawFont( Flash, 3 );
	TextDrawLetterSize( Flash, 1.000000, 52.200000 );
	TextDrawColor( Flash, 0xffffffff );
	TextDrawSetOutline( Flash, 1 );
	TextDrawSetProportional( Flash, 1 );
	TextDrawSetShadow( Flash, 1 );
	// --
	statsShop = TextDrawCreate(484.000000, 9.000000, "~r~~h~ Brasil Play Online"); // TOPO // SHOPPING
	TextDrawBackgroundColor(statsShop, 255);
	TextDrawFont(statsShop, 1);
	TextDrawLetterSize(statsShop, 0.270000, 1.200000);
	TextDrawColor(statsShop, -1);
	TextDrawSetOutline(statsShop, 0);
	TextDrawSetProportional(statsShop, 1);
	TextDrawSetShadow(statsShop, 1);
	TextDrawSetSelectable(statsShop, 0);
	//--
	Enquete = TextDrawCreate( 318.000000, 238.000000, "			" );
	TextDrawAlignment( Enquete, 2 );
	TextDrawBackgroundColor( Enquete, 255 );
	TextDrawFont( Enquete, 1 );
	TextDrawLetterSize( Enquete, 0.330000, 1.200000 );
	TextDrawColor( Enquete, -1 );
	TextDrawSetOutline( Enquete, 1 );
	TextDrawSetProportional( Enquete, 1 );
	//--
	ContagemEnquete = TextDrawCreate( 320.000000, 303.000000, "			" );
	TextDrawAlignment( ContagemEnquete, 2 );
	TextDrawBackgroundColor( ContagemEnquete, 255 );
	TextDrawFont( ContagemEnquete, 1 );
	TextDrawLetterSize( ContagemEnquete, 0.450000, 1.300000 );
	TextDrawColor( ContagemEnquete, -1 );
	TextDrawSetOutline( ContagemEnquete, 1 );
	TextDrawSetProportional( ContagemEnquete, 1 );
	//--
	Relogio = TextDrawCreate( 547.000000, 23.000000, "			" );
	TextDrawUseBox( Relogio, 0 );
	TextDrawFont( Relogio, 3 );
	TextDrawSetShadow( Relogio, 1 );
	TextDrawSetOutline( Relogio, 2 );
	TextDrawBackgroundColor( Relogio, 0x000000FF );
	TextDrawColor( Relogio, 0xFFFFFFFF );
	TextDrawLetterSize( Relogio, 0.590000, 2.000000 );
	TextDrawSetProportional( Relogio, 1 );
	TextDrawAlignment( Relogio, 0 );
	//--
	Data = TextDrawCreate( 495.000000, 20.000000, "			" );
	TextDrawBackgroundColor( Data, 255 );
	TextDrawFont( Data, 2 );
	TextDrawLetterSize( Data, 0.190000, 1.100000 );
	TextDrawColor( Data, -1 );
	TextDrawSetOutline( Data, 1 );
	TextDrawSetProportional( Data, 1 );
	//--
	InfoSite = TextDrawCreate( 316.000000, 425.000000, "Discord: Malboro#5173" ); // TELA
	TextDrawAlignment( InfoSite, 2 );
	TextDrawBackgroundColor( InfoSite, 255 );
	TextDrawFont( InfoSite, 1 );
	TextDrawLetterSize( InfoSite, 0.320000, 0.899999 );
	TextDrawColor( InfoSite, -1 );
	TextDrawSetOutline( InfoSite, 1 );
	TextDrawSetProportional( InfoSite, 1 );
	//--
	dm_text_Top5[ 0 ] = TextDrawCreate(18.000000, 186.000000, "~r~~h~5 ~y~~h~Melhores");
	TextDrawBackgroundColor(dm_text_Top5[ 0 ], 255);
	TextDrawFont(dm_text_Top5[ 0 ], 2);
	TextDrawLetterSize(dm_text_Top5[ 0 ], 0.449999, 1.399999);
	TextDrawColor(dm_text_Top5[ 0 ], -1);
	TextDrawSetOutline(dm_text_Top5[ 0 ], 1);
	TextDrawSetProportional(dm_text_Top5[ 0 ], 1);
	TextDrawSetSelectable(dm_text_Top5[ 0 ], 0);

	dm_text_Top5[ 1 ] = TextDrawCreate(37.000000, 206.000000, "		");
	TextDrawBackgroundColor(dm_text_Top5[ 1 ], 255);
	TextDrawFont(dm_text_Top5[ 1 ], 2);
	TextDrawLetterSize(dm_text_Top5[ 1 ], 0.229999, 1.100000);
	TextDrawColor(dm_text_Top5[ 1 ], -1);
	TextDrawSetOutline(dm_text_Top5[ 1 ], 1);
	TextDrawSetProportional(dm_text_Top5[ 1 ], 1);
	TextDrawSetSelectable(dm_text_Top5[ 1 ], 0);

	dmColoText[ 2 ] = TextDrawCreate(12.000000, 220.000000, "ld_otb2:ric1");
	TextDrawBackgroundColor(dmColoText[ 2 ], 255);
	TextDrawFont(dmColoText[ 2 ], 4);
	TextDrawLetterSize(dmColoText[ 2 ], 0.500000, 1.000000);
	TextDrawColor(dmColoText[ 2 ], -1);
	TextDrawSetOutline(dmColoText[ 2 ], 0);
	TextDrawSetProportional(dmColoText[ 2 ], 1);
	TextDrawSetShadow(dmColoText[ 2 ], 1);
	TextDrawUseBox(dmColoText[ 2 ], 1);
	TextDrawBoxColor(dmColoText[ 2 ], 255);
	TextDrawTextSize(dmColoText[ 2 ], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[ 2 ], 0);

	dmColoText[ 3 ] = TextDrawCreate(12.000000, 230.000000, "ld_otb2:ric2");
	TextDrawBackgroundColor(dmColoText[ 3 ], 255);
	TextDrawFont(dmColoText[ 3 ], 4);
	TextDrawLetterSize(dmColoText[ 3 ], 0.500000, 1.000000);
	TextDrawColor(dmColoText[ 3 ], -1);
	TextDrawSetOutline(dmColoText[ 3 ], 0);
	TextDrawSetProportional(dmColoText[ 3 ], 1);
	TextDrawSetShadow(dmColoText[ 3 ], 1);
	TextDrawUseBox(dmColoText[ 3 ], 1);
	TextDrawBoxColor(dmColoText[ 3 ], 255);
	TextDrawTextSize(dmColoText[ 3 ], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[ 3 ], 0);

	dmColoText[ 4 ] = TextDrawCreate(12.000000, 240.000000, "ld_otb2:ric3");
	TextDrawBackgroundColor(dmColoText[ 4 ], 255);
	TextDrawFont(dmColoText[ 4 ], 4);
	TextDrawLetterSize(dmColoText[ 4 ], 0.500000, 1.000000);
	TextDrawColor(dmColoText[ 4 ], -1);
	TextDrawSetOutline(dmColoText[ 4 ], 0);
	TextDrawSetProportional(dmColoText[ 4 ], 1);
	TextDrawSetShadow(dmColoText[ 4 ], 1);
	TextDrawUseBox(dmColoText[ 4 ], 1);
	TextDrawBoxColor(dmColoText[ 4 ], 255);
	TextDrawTextSize(dmColoText[ 4 ], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[ 4 ], 0);

	dmColoText[ 0 ] = TextDrawCreate(12.000000, 250.000000, "ld_otb2:ric4");
	TextDrawBackgroundColor(dmColoText[ 0 ], 255);
	TextDrawFont(dmColoText[ 0 ], 4);
	TextDrawLetterSize(dmColoText[ 0 ], 0.500000, 1.000000);
	TextDrawColor(dmColoText[ 0 ], -1);
	TextDrawSetOutline(dmColoText[ 0 ], 0);
	TextDrawSetProportional(dmColoText[ 0 ], 1);
	TextDrawSetShadow(dmColoText[ 0 ], 1);
	TextDrawUseBox(dmColoText[ 0 ], 1);
	TextDrawBoxColor(dmColoText[ 0 ], 255);
	TextDrawTextSize(dmColoText[ 0 ], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[ 0 ], 0);

	dmColoText[ 1 ] = TextDrawCreate(12.000000, 260.000000, "ld_otb2:ric5");
	TextDrawBackgroundColor(dmColoText[ 1 ], 255);
	TextDrawFont(dmColoText[ 1 ], 4);
	TextDrawLetterSize(dmColoText[ 1 ], 0.500000, 1.000000);
	TextDrawColor(dmColoText[ 1 ], -1);
	TextDrawSetOutline(dmColoText[ 1 ], 0);
	TextDrawSetProportional(dmColoText[ 1 ], 1);
	TextDrawSetShadow(dmColoText[ 1 ], 1);
	TextDrawUseBox(dmColoText[ 1 ], 1);
	TextDrawBoxColor(dmColoText[ 1 ], 255);
	TextDrawTextSize(dmColoText[ 1 ], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[ 1 ], 0);

	dmiTimer[ 0 ] = TextDrawCreate(71.000000, 284.000000, "	");
	TextDrawAlignment(dmiTimer[ 0 ], 2);
	TextDrawBackgroundColor(dmiTimer[ 0 ], 255);
	TextDrawFont(dmiTimer[ 0 ], 1);
	TextDrawLetterSize(dmiTimer[ 0 ], 0.309999, 1.100000);
	TextDrawColor(dmiTimer[ 0 ], -1);
	TextDrawSetOutline(dmiTimer[ 0 ], 1);
	TextDrawSetProportional(dmiTimer[ 0 ], 1);
	TextDrawSetSelectable(dmiTimer[ 0 ], 0);

	dmiTimer[ 1 ] = TextDrawCreate(10.000000, 284.000000, "ld_grav:timer");
	TextDrawBackgroundColor(dmiTimer[ 1 ], 255);
	TextDrawFont(dmiTimer[ 1 ], 4);
	TextDrawLetterSize(dmiTimer[ 1 ], 0.500000, 1.000000);
	TextDrawColor(dmiTimer[ 1 ], -1);
	TextDrawSetOutline(dmiTimer[ 1 ], 0);
	TextDrawSetProportional(dmiTimer[ 1 ], 1);
	TextDrawSetShadow(dmiTimer[ 1 ], 1);
	TextDrawUseBox(dmiTimer[ 1 ], 1);
	TextDrawBoxColor(dmiTimer[ 1 ], 255);
	TextDrawTextSize(dmiTimer[ 1 ], 23.000000, 19.000000);
	TextDrawSetSelectable(dmiTimer[ 1 ], 0);
	//--
	for( new t = 0; t < 4; ++t )
	{
		TextAnuncio[ t ] = TextDrawCreate( 321.000000, 180.000000, "	" );
        TextDrawLetterSize( TextAnuncio[ t ], 0.430000, 1.600000 );
        TextDrawBackgroundColor( TextAnuncio[ t ], 255 );
        TextDrawSetProportional( TextAnuncio[ t ], 1 );
        TextDrawSetOutline( TextAnuncio[ t ], 1 );
		TextDrawAlignment( TextAnuncio[ t ], 2 );
		TextDrawColor( TextAnuncio[ t ], -1 );
	 	TextDrawFont( TextAnuncio[ 0 ], 0 );
		TextDrawFont( TextAnuncio[ 1 ], 1 );
		TextDrawFont( TextAnuncio[ 2 ], 2 );
		TextDrawFont( TextAnuncio[ 3 ], 3 );
	}
	for( new i = 0; i < MAX_PLAYERS; ++i )
	{
		InfoPlayer[ i ] = TextDrawCreate( 322.000000, 436.000000, "	" );
		TextDrawAlignment( InfoPlayer[ i ], 2 );
		TextDrawBackgroundColor( InfoPlayer[ i ], 255 );
		TextDrawFont( InfoPlayer[ i ], 1 );
		TextDrawLetterSize( InfoPlayer[ i ], 0.390000, 1.100000 );
		TextDrawColor( InfoPlayer[ i ], -1 );
		TextDrawSetOutline( InfoPlayer[ i ], 1 );
		TextDrawSetProportional( InfoPlayer[ i ], 1 );
		//-- Status Matou / Morreu
		MSG_Matou[ i ] = TextDrawCreate(63.000000, 314.000000, "		");
		TextDrawAlignment(MSG_Matou[ i ], 2);
		TextDrawBackgroundColor(MSG_Matou[ i ], 255);
		TextDrawFont(MSG_Matou[ i ], 2);
		TextDrawLetterSize(MSG_Matou[ i ], 0.280000, 1.200000);
		TextDrawColor(MSG_Matou[ i ], -1);
		TextDrawSetOutline(MSG_Matou[ i ], 1);
		TextDrawSetProportional(MSG_Matou[ i ], 1);
		//-- Info Relogio UP
		TextLevelUP[ i ] = TextDrawCreate( 506.000000, 241.000000, "			" );
		TextDrawBackgroundColor( TextLevelUP[ i ], 255 );
		TextDrawFont( TextLevelUP[ i ], 3 );
		TextDrawLetterSize( TextLevelUP[ i ], 0.549998, 1.600000 );
		TextDrawColor( TextLevelUP[ i ], -1 );
		TextDrawSetOutline( TextLevelUP[ i ], 1 );
		TextDrawSetProportional( TextLevelUP[ i ], 1 );
		//-- Info Zonas
		Zones[ i ] = TextDrawCreate( 149.000000, 381.000000, "			" );
		TextDrawAlignment( Zones[ i ], 2 );
		TextDrawBackgroundColor( Zones[ i ], 255 );
		TextDrawFont( Zones[ i ], 1 );
		TextDrawLetterSize( Zones[ i ], 0.670000, 2.099999 );
		TextDrawColor( Zones[ i ], -1 );
		TextDrawSetOutline( Zones[ i ], 1 );
		TextDrawSetProportional( Zones[ i ], 3 );
		//-- Info Velocidade
		Velocidade[ i ] = TextDrawCreate( 89.000000, 278.000000, "			" );
		TextDrawAlignment( Velocidade[ i ], 2 );
		TextDrawBackgroundColor( Velocidade[ i ], 255 );
		TextDrawFont( Velocidade[ i ], 1 );
		TextDrawLetterSize( Velocidade[ i ], 0.479999, 1.399999 );
		TextDrawColor( Velocidade[ i ], -1 );
		TextDrawSetOutline( Velocidade[ i ], 1 );
		TextDrawSetProportional( Velocidade[ i ], 1 );
		//-- Info Gasolina
		Gasolina[ i ] = TextDrawCreate( 89.000000, 310.000000, "			" );
		TextDrawAlignment( Gasolina[ i ], 2 );
		TextDrawBackgroundColor( Gasolina[ i ], 255 );
		TextDrawFont( Gasolina[ i ], 1 );
		TextDrawLetterSize( Gasolina[ i ], 0.479999, 1.399999 );
		TextDrawColor( Gasolina[ i ], -1 );
		TextDrawSetOutline( Gasolina[ i ], 1 );
		TextDrawSetProportional( Gasolina[ i ], 1 );
		//-- Info Modelo
		Modelo[ i ] = TextDrawCreate( 143.000000, 348.000000, "			" );
		TextDrawBackgroundColor( Modelo[ i ], 255 );
		TextDrawFont( Modelo[ i ], 1 );
		TextDrawLetterSize( Modelo[ i ], 0.479999, 1.399999 );
		TextDrawColor( Modelo[ i ], -1 );
		TextDrawSetOutline( Modelo[ i ], 1 );
		TextDrawSetProportional( Modelo[ i ], 1 );
		//-- Info Preso
		p_TextPreso[ i ] = TextDrawCreate( 90.000000, 274.000000, "			" );
		TextDrawAlignment( p_TextPreso[ i ], 2 );
		TextDrawBackgroundColor( p_TextPreso[ i ], 255 );
		TextDrawFont( p_TextPreso[ i ], 1 );
		TextDrawLetterSize( p_TextPreso[ i ], 0.460000, 1.600000 );
		TextDrawColor( p_TextPreso[ i ], -1 );
		TextDrawSetOutline( p_TextPreso[ i ], 1 );
		TextDrawSetProportional( p_TextPreso[ i ], 1 );
		//-- Infos Areas
		Server_Areas[ i ] = TextDrawCreate( 623.000000, 411.000000, "			" );
		TextDrawAlignment( Server_Areas[ i ], 3 );
		TextDrawBackgroundColor( Server_Areas[ i ], 255 );
		TextDrawFont( Server_Areas[ i ], 3 );
		TextDrawLetterSize( Server_Areas[ i ], 0.500000, 1.600000 );
		TextDrawColor( Server_Areas[ i ], -1 );
		TextDrawSetOutline( Server_Areas[ i ], 1 );
		TextDrawSetProportional( Server_Areas[ i ], 1 );
		//-- Info GZ
	}
	// Arquivos
	if( !fexist( "Eleitos.ini" ))
	{
	    dini_Create( "Eleitos.ini" );
	    dini_IntSet( "Eleitos.ini", "votoStatus", 0 );
	    dini_Set( "Eleitos.ini", "Presidente", "Nenhum" );
	    dini_IntSet( "Eleitos.ini", "Candidatos", 0 );
	    dini_Set( "Eleitos.ini", "1_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "2_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "3_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "4_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "5_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "6_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "7_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "8_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "9_", "Nenhum" );
	    dini_Set( "Eleitos.ini", "10_", "Nenhum" );
	    dini_IntSet( "Eleitos.ini", "1", 0 );
	    dini_IntSet( "Eleitos.ini", "2", 0 );
	    dini_IntSet( "Eleitos.ini", "3", 0 );
	    dini_IntSet( "Eleitos.ini", "4", 0 );
	    dini_IntSet( "Eleitos.ini", "5", 0 );
	    dini_IntSet( "Eleitos.ini", "6", 0 );
	    dini_IntSet( "Eleitos.ini", "7", 0 );
	    dini_IntSet( "Eleitos.ini", "8", 0 );
	    dini_IntSet( "Eleitos.ini", "9", 0 );
	    dini_IntSet( "Eleitos.ini", "10", 0 );
	}
 	if( !fexist( "Loteria.ini" ))
	{
     	dini_Create( "Loteria.ini" );
		dini_Set( "Loteria.ini", "1", "1" );
	    dini_Set( "Loteria.ini", "2", "1" );
	    dini_Set( "Loteria.ini", "3", "1" );
	    dini_Set( "Loteria.ini", "4", "1" );
	    dini_Set( "Loteria.ini", "5", "1" );
	    dini_Set( "Loteria.ini", "6", "1" );
	    dini_Set( "Loteria.ini", "7", "1" );
	    dini_Set( "Loteria.ini", "8", "1" );
	    dini_Set( "Loteria.ini", "9", "1" );
	    dini_Set( "Loteria.ini", "10", "1" );
	    dini_Set( "Loteria.ini", "11", "1" );
	    dini_Set( "Loteria.ini", "12", "1" );
	    dini_Set( "Loteria.ini", "13", "1" );
	    dini_Set( "Loteria.ini", "14", "1" );
	    dini_Set( "Loteria.ini", "15", "1" );
	    dini_Set( "Loteria.ini", "16", "1" );
	    dini_Set( "Loteria.ini", "17", "1" );
	    dini_Set( "Loteria.ini", "18", "1" );
	    dini_Set( "Loteria.ini", "19", "1" );
	    dini_Set( "Loteria.ini", "20", "1" );
	    dini_Set( "Loteria.ini", "21", "1" );
	    dini_Set( "Loteria.ini", "22", "1" );
	    dini_Set( "Loteria.ini", "23", "1" );
	    dini_Set( "Loteria.ini", "24", "1" );
	    dini_Set( "Loteria.ini", "25", "1" );
	    dini_Set( "Loteria.ini", "26", "1" );
	    dini_Set( "Loteria.ini", "27", "1" );
	    dini_Set( "Loteria.ini", "28", "1" );
	    dini_Set( "Loteria.ini", "29", "1" );
	    dini_Set( "Loteria.ini", "30", "1" );
	    dini_Set( "Loteria.ini", "31", "1" );
	    dini_Set( "Loteria.ini", "32", "1" );
	    dini_Set( "Loteria.ini", "33", "1" );
	    dini_Set( "Loteria.ini", "34", "1" );
	    dini_Set( "Loteria.ini", "35", "1" );
	    dini_Set( "Loteria.ini", "36", "1" );
	    dini_Set( "Loteria.ini", "37", "1" );
	    dini_Set( "Loteria.ini", "38", "1" );
	    dini_Set( "Loteria.ini", "39", "1" );
	    dini_Set( "Loteria.ini", "40", "1" );
	    dini_Set( "Loteria.ini", "41", "1" );
	    dini_Set( "Loteria.ini", "42", "1" );
	    dini_Set( "Loteria.ini", "43", "1" );
	    dini_Set( "Loteria.ini", "44", "1" );
	    dini_Set( "Loteria.ini", "45", "1" );
	    dini_Set( "Loteria.ini", "46", "1" );
	    dini_Set( "Loteria.ini", "47", "1" );
	    dini_Set( "Loteria.ini", "48", "1" );
	    dini_Set( "Loteria.ini", "49", "1" );
	    dini_Set( "Loteria.ini", "50", "1" );
	    dini_Set( "Loteria.ini", "51", "1" );
	    dini_Set( "Loteria.ini", "52", "1" );
	    dini_Set( "Loteria.ini", "53", "1" );
	    dini_Set( "Loteria.ini", "54", "1" );
	    dini_Set( "Loteria.ini", "55", "1" );
	    dini_Set( "Loteria.ini", "56", "1" );
	    dini_Set( "Loteria.ini", "57", "1" );
	    dini_Set( "Loteria.ini", "58", "1" );
	    dini_Set( "Loteria.ini", "59", "1" );
	    dini_Set( "Loteria.ini", "60", "1" );
	}
	if( !fexist( "Acumulado.ini" ))
	{
 		dini_Create( "Acumulado.ini" );
 		dini_IntSet( "Acumulado.ini", "Acumulado", 0 );
	}
	if( !fexist( "Drogas.ini" ))
	{
		dini_Create( "Drogas.ini" );
		dini_IntSet( "Drogas.ini", "Maconha", 0 );
		dini_IntSet( "Drogas.ini", "Cocaina", 0 );
		dini_IntSet( "Drogas.ini", "Crack", 0 );
	}
	// GZS
	for( new gz = 0; gz < sizeof( ZoneInfo ); gz++ )
	{
	    format( gzfo, sizeof( gzfo ), "GangueZones/%d.ini", gz );

		if( !fexist( gzfo ))
		{
			dini_Create( gzfo );
			dini_Set( gzfo, "Dono", "NINGUEM" );
			dini_IntSet( gzfo, "ID", gz );
			dini_IntSet( gzfo, "Cor", -1 );

		    ZoneID[ gz ] = GangZoneCreate( ZoneInfo[ gz ][ zMinX ], ZoneInfo[ gz ][ zMinY ], ZoneInfo[ gz ][ zMaxX ], ZoneInfo[ gz ][ zMaxY ] );
		    format( ZoneInfo[ gz ][ aClan ], 64, "NINGUEM" );
		}
		else
		{
	    	ZoneID[ gz ] = GangZoneCreate( ZoneInfo[ gz ][ zMinX ], ZoneInfo[ gz ][ zMinY ], ZoneInfo[ gz ][ zMaxX ], ZoneInfo[ gz ][ zMaxY ] );

			format( ZoneInfo[ gz ][ aClan ], 64, dini_Get( gzfo, "Dono" ));
			ZoneInfo[ gz ][ zCor ][ 0 ] = dini_Int( gzfo, "Cor" );
		}
	}

	AreasGZServer[ 0 ] = GangZoneCreate( 2691.561, -2522.731, 2782.829, -2412.194 ); // Carga
	AreasGZServer[ 1 ] = GangZoneCreate( 2777.631347, 844.073974, 2881.631347, 1020.073974 ); // Descarga LV
	AreasGZServer[ 2 ] = GangZoneCreate( -1131.585, -695.9416, -1000.253, -573.6477 ); // DescargaSF
	AreasGZServer[ 3 ] = GangZoneCreate( 385.345092, -2512.000000, 529.345092, -2368.000000 ); // Area de Pesca
	AreasGZServer[ 4 ] = GangZoneCreate( -746.633666, -2122.113037, -474.633666, -1874.113037 ); // Área de Caça
	AreasGZServer[ 5 ] = GangZoneCreate( -1212.007202, -1315.776733, -996.007202, -907.776733 ); // Fazenda das Drogas
	AreasGZServer[ 6 ] = GangZoneCreate( -1145.915283, -1735.292114, -1001.915283, -1599.292114 ); // Fazenda das Armas
	AreasGZServer[ 7 ] = GangZoneCreate( 1071.939819, -1279.053710, 1135.939819, -1223.053710 ); // Área dos Motoboy/girl
	AreasGZServer[ 8 ] = GangZoneCreate( 678.9000, 824.7999, 529.4000, 946.5000 ); // Obras

    GZ_Favela = GangZoneCreate( 2059.889648, -1158.775512, 2299.889648, -958.775512 );

	ObjetosInSanAndreas( );

	// Timers
	SetTimer( "MudarTempo", 15000, false );
	SetTimer( "CheckPlayerInRadar", 500, false );

	SetTimer( "umSegundo", 1000, false );
	SetTimer( "CheckAreasServer", 1000, false );
	SetTimer( "CheckPlayerInFavela", 1000, false );
	SetTimer( "upManolos", 1000, false );
	//
	SetTimer( "TimerdeDez", 5000, false );
	SetTimer( "tresMinutos", 180000, false );
	SetTimer( "AtualizarCombustivel", 120000, false );

	return 1;
}

forward umSegundo();
public umSegundo()
{
	foreach(Player, i)
	{
		if( pInfo[ i ][ Preso ] <= 0 )
		{
/*			SetPlayerInterior( i, 6 );
		    SetPlayerPos( i, 265.9714, 83.1550, 1001.0391 );
		    TextDrawHideForPlayer( i, p_TextPreso[ i ] );
		    SendClientMessage( i, 0xA9FF91FF, "[ > ] Você cumpriu sua pena e está livre novamente !" );
		    GameTextForPlayer( i, "~w~~h~SOLTO(A)!", 3000, 0 );*/
			pInfo[ i ][ EntrouL ] = true;
			pInfo[ i ][ Preso ] = 0;
			pInfo[ i ][ entrouDEL ] = 1;
			SetPlayerWantedLevel( i, 0 );
		    SetPlayerHealth( i, 100.0 );
			dini_IntSet( f( i ), "Abuser", 0 );
			return 1;
		}
		if( pInfo[ i ][ Preso ] >= 1 )
		{
		    pInfo[ i ][ Preso ] --;

			new
				d_Horas1,
				d_Minut1,
				d_Segun1
			;
			formatSeconds( pInfo[ i ][ Preso ], d_Horas1, d_Minut1, d_Segun1 );

			if( d_Horas1 > 0 )
			{
				format( gstring, sizeof( gstring ), "~r~~h~Tempo de Prisao~n~~y~~h~Hora(s): %d~n~~p~~h~Minutos: ~w~%d~n~~y~~h~Segundos: ~w~%d", d_Horas1, d_Minut1, d_Segun1 );
				TextDrawSetString( p_TextPreso[ i ], gstring );
			}
			else if( d_Horas1 <= 0 && d_Minut1 > 0 )
			{
				format( gStr, sizeof( gStr ), "~r~~h~Tempo de Prisao~n~~n~~p~~h~Minutos: ~w~%d~n~~y~~h~Segundos: ~w~%d", d_Minut1, d_Segun1 );
				TextDrawSetString( p_TextPreso[ i ], gStr );
			}
			else if( d_Horas1 <= 0 && d_Minut1 <= 0 && d_Segun1 > 0 )
			{
				format( gStr, sizeof( gStr ), "~r~~h~Tempo de Prisao~n~~n~~y~~h~Segundos: ~w~%d", d_Segun1 );
				TextDrawSetString( p_TextPreso[ i ], gStr );
			}
			TextDrawShowForPlayer( i, p_TextPreso[ i ] );
		}

	    citylocal_textplayer_update( i );
	}

	SetTimer( "umSegundo", 1000, false );

	return 1;
}

forward CheckAreasServer( );
public CheckAreasServer( )
{
	foreach(Player, i )
    {
		if( GetPlayerCash( i ) != GetPlayerMoney( i ))
		{
			new
				const old_money = GetPlayerCash( i )
			;
			ResetPlayerCash( i ), GivePlayerCash( i, old_money );
		}
		if( IsPlayerInPlace( i, 2691.561, -2522.731, 2782.829, -2412.194 )) // Carga
		{
			if( CaminhaoCarga[ i ] == false )
			{
		  		format( gStr, sizeof( gStr ), "~y~~h~Area ~y~~h~de ~y~~h~Carga - ~r~~h~/Carregar" );
				TextDrawSetString( Server_Areas[ i ], gStr );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
    			CaminhaoCarga[ i ] = true;
			}
		}
		else
  		{
			if( CaminhaoCarga[ i ] == true )
			{
   				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				CaminhaoCarga[ i ] = false;
			}
		}
		if( IsPlayerInPlace( i, 2777.631347, 844.073974, 2881.631347, 1020.073974 )) // Descarga LV
		{
			if( CaminhaoDesCargaLV[ i ] == false )
			{
				InDescargaLV[ i ] = true;
		  		format( gStr, sizeof( gStr ), "~y~~h~Area ~y~~h~de ~y~~h~Descarga ( LV ) - ~r~~h~/Descarregar" );
				TextDrawSetString( Server_Areas[ i ], gStr );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
          		CaminhaoDesCargaLV[ i ] = true;
			}
		}
		else
  		{
			if( CaminhaoDesCargaLV[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				CaminhaoDesCargaLV[ i ] = false;
			}
			InDescargaLV[ i ] = false;
		}
		if( IsPlayerInPlace( i, -1131.585, -695.9416, -1000.253, -573.6477 )) // DescargaSF
		{
			if( CaminhaoDesCargaSF[ i ] == false )
			{
				InDescargaSF[ i ] = true;
		  		format( gStr, sizeof( gStr ), "~y~~h~Area ~y~~h~de ~y~~h~Descarga ( SF ) - ~r~~h~/Descarregar" );
				TextDrawSetString( Server_Areas[ i ], gStr );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
              	CaminhaoDesCargaSF[ i ] = true;
			}
		}
		else
  		{
			if( CaminhaoDesCargaSF[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				CaminhaoDesCargaSF[ i ] = false;
			}
			InDescargaSF[ i ] = false;
		}
		if( IsPlayerInPlace( i, 385.345092, -2512.000000, 529.345092, -2368.000000 )) // Area de Pesca
		{
			if( AreadePesca[ i ] == false )
			{
				TextDrawSetString( Server_Areas[ i ], "~y~~h~Area ~y~~h~de ~y~~h~Pesca - ~r~~h~/JogarRede" );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
             	AreadePesca[ i ] = true;
			}
		}
		else
  		{
			if( AreadePesca[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				AreadePesca[ i ] = false;
			}
		}
		if( IsPlayerInPlace( i, 505.859375, 796.875, 712.890625, 958.984375 )) // Obras
		{
			if( Areaobra[ i ] == false )
			{
				TextDrawSetString( Server_Areas[ i ], "~y~~h~Area ~y~~h~Odbretch - ~r~~h~/IniciarObra" );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
             	Areaobra[ i ] = true;
			}
		}
		else
		{
			if(	Areaobra[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				Areaobra[ i ] = false;
			}
		}
		if( IsPlayerInPlace( i, -746.633666, -2122.113037, -474.633666, -1874.113037 )) // Área de Caça
		{
			if( AreadeCasca[ i ] == false )
			{
				TextDrawSetString( Server_Areas[ i ], "~y~~h~Area ~y~~h~de ~y~~h~Caca - ~r~~h~/Cacar" );
    			TextDrawShowForPlayer( i, Server_Areas[ i ] );
            	AreadeCasca[ i ] = true;
			}
		}
		else
  		{
			if( AreadeCasca[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				AreadeCasca[ i ] = false;
			}
		}
  		if( IsPlayerInPlace( i, -1212.007202, -1315.776733, -996.007202, -907.776733 )) // Fazenda das Drogas
		{
			if( AreaFazendaDrogas[ i ] == false )
			{
		  		format( gStr, sizeof( gStr ), "~y~~h~Fazenda ~w~~h~dos ~r~~h~Traficantes ~w~~h~de ~y~~h~Drogas" );
				TextDrawSetString( Server_Areas[ i ], gStr );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
             	AreaFazendaDrogas[ i ] = true;
			}
		}
		else
  		{
			if( AreaFazendaDrogas[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				AreaFazendaDrogas[ i ] = false;
			}
		}
    	if( IsPlayerInPlace( i, -1145.915283, -1735.292114, -1001.915283, -1599.292114 )) // Fazenda das Armas
		{
			if( AreaFazendaArmas[ i ] == false )
			{
		  		format( gStr, sizeof( gStr ), "~r~~h~Fazenda ~w~~h~dos ~y~~h~Traficantes ~w~~h~de ~r~~h~Armas" );
				TextDrawSetString( Server_Areas[ i ], gStr );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
             	AreaFazendaArmas[ i ] = true;
			}
		}
		else
  		{
			if( AreaFazendaArmas[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				AreaFazendaArmas[ i ] = false;
			}
		}
     	if( IsPlayerInPlace( i, 1071.939819, -1279.053710, 1135.939819, -1223.053710 )) // Área dos Motoboy/girl
		{
			if( AreaMotoboyGirl[ i ] == false )
			{
		  		format( gStr, sizeof( gStr ), "~y~~h~Area ~y~~h~de ~y~~h~Mercadoria - ~r~~h~/PegarMercadoria" );
				TextDrawSetString( Server_Areas[ i ], gStr );
				TextDrawShowForPlayer( i, Server_Areas[ i ] );
              	AreaMotoboyGirl[ i ] = true;
			}
		}
		else
  		{
			if( AreaMotoboyGirl[ i ] == true )
			{
				TextDrawHideForPlayer( i, Server_Areas[ i ] );
				AreaMotoboyGirl[ i ] = false;
			}
		}
		if( IsPlayerInRangeOfPoint( i, 10.0, 1940.6096,-1772.7147,12.9500 ) || IsPlayerInRangeOfPoint( i, 10.0, -90.8525,-1169.3555,1.9823 ) ||
		IsPlayerInRangeOfPoint( i, 10.0, -1607.8698,-2715.5637,48.9453 ) || IsPlayerInRangeOfPoint( i, 10.0, -2244.2200,-2560.6169,31.9219 ) ||
		IsPlayerInRangeOfPoint( i, 10.0, -2026.7922,156.5871,29.0391 ) || IsPlayerInRangeOfPoint( i, 10.0, -2410.0215,976.2697,45.4209 ) ||
		IsPlayerInRangeOfPoint( i, 10.0, -1328.4185,2675.4663,50.0625 ) || IsPlayerInRangeOfPoint( i, 10.0, 1596.2703,2198.8335,10.8203 ) ||
		IsPlayerInRangeOfPoint( i, 10.0, 2639.4871,1106.6412,10.8203 ) || IsPlayerInRangeOfPoint( i, 10.0, 2114.7256,920.3104,10.8203 ) ||
	 	IsPlayerInRangeOfPoint( i, 10.0, 1004.8821,-937.0840,42.3281 ) || IsPlayerInRangeOfPoint( i, 10.0, 1382.6870,459.7101,20.3452 ) ||
 		IsPlayerInRangeOfPoint( i, 10.0, -1676.3906,412.9636,6.9068 ) || IsPlayerInRangeOfPoint( i, 10.0, 70.4693,1218.8176,18.5393 ) ||
	 	IsPlayerInRangeOfPoint( i, 20.0, 613.1774,1692.8209,7.1875 ) || IsPlayerInRangeOfPoint( i, 10.0, 2147.0969,2747.4377,10.5474 ) ||
	 	IsPlayerInRangeOfPoint( i, 10.0, 2202.2954,2474.0007,10.5474 ) || IsPlayerInRangeOfPoint( i, 10.0, 655.3937,-565.2368,15.9072 ))
		{
			new
				zone[ MAX_ZONE_NAME ]
			;
			GetPlayer2DZone( i, zone, MAX_ZONE_NAME );
			format( gStr, sizeof( gStr ), "~y~Posto ~y~de ~y~%s ~w~-~r~ /Abastecer", zone );
			TextDrawSetString( Zones[ i ], gStr );
			TextDrawShowForPlayer( i, Zones[ i ] );
   			AreaPosto[ i ] = true;
		}
		else
		{
   			if( InAreaCarga[ i ] == false && InDescargaSF[ i ] == false && InDescargaLV[ i ] == false )
			{
           		TextDrawHideForPlayer( i, Zones[ i ] );
			}
   			TextDrawHideForPlayer( i, Zones[ i ] );
			AreaPosto[ i ] = false;
		}
	}
	SetTimer( "HealthDown", 1000, false );
	SetTimer( "CheckAreasServer", 1000, false );
	return 1;
}

forward CheckPlayerInFavela( );
public CheckPlayerInFavela( )
{
	foreach(Player, i )
    {
   		if( IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ))
		{
			if( GetPlayerInterior( i ) == 0 )
			{
 				if( GetPlayerState( i ) != PLAYER_STATE_DRIVER )
				{
					format( gStr, sizeof( gStr ), "      ~y~~h~Matou ~w~%d   ~r~~h~Morreu ~w~%d", pInfo[ i ][ fMatou ], pInfo[ i ][ fMorreu ] );
					TextDrawSetString( MSG_Matou[ i ], gStr );
					TextDrawShowForPlayer( i, MSG_Matou[ i ] );
					TextDrawShowForPlayer( i, IMG_Matou );
					TextDrawShowForPlayer( i, IMG_Morreu );
				}
				else
				{
				    TextDrawHideForPlayer( i, MSG_Matou[ i ] );
				    TextDrawHideForPlayer( i, IMG_Matou );
					TextDrawHideForPlayer( i, IMG_Morreu );
				}
				if( TextFavela[ i ] == false )
				{
					TextFavela[ i ] = true;
					TextDrawHideForPlayer( i, Favela_2 );
					TextDrawShowForPlayer( i, Favela_1 );
					GangZoneShowForPlayer( i, GZ_Favela, 0xFF6633AA );
				}
				else if( TextFavela[ i ] == true )
				{
			   		TextFavela[ i ] = false;
	  		    	TextDrawHideForPlayer( i, Favela_1 );
			    	TextDrawShowForPlayer( i, Favela_2 );
			    	GangZoneShowForPlayer( i, GZ_Favela, 0xFFFFFF99 );
				}
			}
		}
   		else
		{
			TextDrawHideForPlayer( i, MSG_Matou[ i ] );
			TextDrawHideForPlayer( i, Favela_1 );
			TextDrawHideForPlayer( i, Favela_2 );
  			TextDrawHideForPlayer( i, IMG_Matou );
			TextDrawHideForPlayer( i, IMG_Morreu );
			GangZoneHideForPlayer( i, GZ_Favela );
			GangZoneStopFlashForPlayer( i, GZ_Favela );
		}
		// Gangue Zone
		in_z[ i ] = GetPlayerZone( i );

		if( in_z[ i ] == -1 )
  		{
    		PlayerTextDrawHide( i, TGangueZone[ i ] );
      	}
       	else
        {
      		format( gStr, sizeof( gStr ), "Gangue Zone %s Donos %s", ZoneNome[ in_z[ i ] ], ZoneInfo[ in_z[ i ] ][ aClan ] );
			PlayerTextDrawSetString( i, TGangueZone[ i ], gStr );
	       	PlayerTextDrawShow( i, TGangueZone[ i ] );

	   		if( strcmp( playerClan[ i ], ZoneInfo[ in_z[ i ] ][ aClan ], false ) && strcmp( playerClan[ i ], "Nenhum", false ) && ZonaAtacada[ in_z[ i ] ] == -1 )
			{
				if( GetPlayersInZone( in_z[ i ], playerClan[ i ] ) >= MINIMO_D_MEMBROS && GetPlayerState( i ) == PLAYER_STATE_ONFOOT )
	  			{
			  		ZonaAtacada[ in_z[ i ] ] = 1;
	          		ZoneInfo[ in_z[ i ] ][ zCor ][ 1 ] = clanColor[ i ];
	            	format( ZoneInfo[ in_z[ i ] ][ zClan ], 24, playerClan[ i ] );
	            	format( gstring, 256, "[ > ] A gangue dos(as) {FFFFFF}%s {C28CDC}invadiu o território %s dos(as) {FFFFFF}%s", playerClan[ i ], ZoneNome[ in_z[ i ] ], ZoneInfo[ in_z[ i ] ][ aClan ] );
					SendClientMessageToAll( 0xC28CDCFF, gstring );
	      		}
	  		}
        }
	}
    for( new gz = 0; gz < sizeof( ZoneInfo ); gz++ )
    {
        if( ZonaAtacada[ gz ] != -1 )
        {
            if( GetPlayersInZone( gz, ZoneInfo[ gz ][ zClan ] ) >= MINIMO_D_MEMBROS )
            {
           		ZoneAttackTempo[ gz ] ++;

                GangZoneFlashForAll( ZoneID[ gz ], SetZonaCorClan( ZoneInfo[ gz ][ zCor ][ 1 ] ));

                foreach(Player, i )
                {
                    if( !strcmp( playerClan[ i ], ZoneInfo[ gz ][ zClan ], true ) && IsPlayerInZone( i, gz ))
                    {
	                    format( gStr, 128, "~n~~n~~n~Atacando o territorio~n~%s~n~dominio em (%d de %d)", ZoneNome[ gz ], (TEMPO_DOMINAR-ZoneAttackTempo[ gz ] ), TEMPO_DOMINAR );
	                	GameTextForPlayer( i, gStr, 1000, 5 );
                	}
                	if( !strcmp( playerClan[ i ], ZoneInfo[ gz ][ aClan ], true ))
                    {
	                    format( gStr, 128, "~n~~n~~n~%s sendo atacado~n~vao dominar em (%d de %d)", ZoneNome[ gz ], (TEMPO_DOMINAR-ZoneAttackTempo[ gz ] ), TEMPO_DOMINAR );
	                	GameTextForPlayer( i, gStr, 1000, 5 );
                	}
                }

                if( ZoneAttackTempo[ gz ] >= TEMPO_DOMINAR )
				{
					GangZoneStopFlashForAll( ZoneID[ gz ] );

                    ZoneInfo[ gz ][ zCor ][ 0 ] = ZoneInfo[ gz ][ zCor ][ 1 ];

                    GangZoneShowForAll( ZoneID[ gz ], SetZonaCorClan( ZoneInfo[ gz ][ zCor ][ 0 ] ));

					foreach(Player, i )
					{
						if( !strcmp( playerClan[ i ], ZoneInfo[ gz ][ aClan ], true ))
						{
						    format( gStr, 128, "[ x ] A gangue zone %s que pertencia à sua gangue %s foi dominada !", ZoneNome[ gz ], playerClan[ i ] );
							SendClientMessage( i, 0xFFDAFFFF, gStr );

							format( gStr, 128, "%s~n~ex territorio da sua gangue~n~foi dominado!", ZoneNome[ gz ] );
							GameTextForPlayer( i, gStr, 3000, 5 );
						}
						if( !strcmp( playerClan[ i ], ZoneInfo[ gz ][ zClan ], true ) && IsPlayerInZone( i, gz ))
						{
							new
							    gArea[ 64 ]
							;
							format( gArea, 64, "~w~%s ~r~DOMINADO!", ZoneNome[ gz ] );
							GameTextForPlayer( i, gArea, 1000, 0 );

						    format( gStr, 128, "[ > ] Sua gangue {FFFFFF}%s dominou o {FFDAFF}%s", playerClan[ i ], ZoneNome[ gz ] );
							SendClientMessage( i, 0xFFDAFFFF, gStr );
						}
					}
					format( gstring, 256, "[ > ] A gangue dos(as) {FFFFFF}%s {61BDFF}dominou o %s dos(as) {FFFFFF}%s", ZoneInfo[ gz ][ zClan ], ZoneNome[ gz ], ZoneInfo[ gz ][ aClan ] );
					SendClientMessageToAll( 0x61BDFFFF, gstring );

                    format( ZoneInfo[ gz ][ aClan ], 24, ZoneInfo[ gz ][ zClan ] );

                    ZonaAtacada[ gz ] = -1;

                    ZoneAttackTempo[ gz ] = 0;

                    salvGZ( gz );
                }
            }
            else
            {
                GangZoneStopFlashForAll( ZoneID[ gz ] );
                ZonaAtacada[ gz ] = -1;
                ZoneAttackTempo[ gz ] = 0;
            }
		}
	}
	SetTimer( "CheckPlayerInFavela", 1000, false );
	return 1;
}

forward upManolos( );
public upManolos( )
{
	foreach(Player, i )
	{
		if( pInfo[ i ][ Logado ] == true )
	    {
			if( pInfo[ i ][ SegUP ] > 0 )
			{
				pInfo[ i ][ SegUP ] --;
			}
			if( pInfo[ i ][ SegUP ] == 0 && pInfo[ i ][ MinUP ] >= 1 )
			{
				pInfo[ i ][ SegUP ] = 59;
				pInfo[ i ][ MinUP ] --;
			}
			if( pInfo[ i ][ MinUP ] == 0 && pInfo[ i ][ SegUP ] == 0 )
			{
				pInfo[ i ][ SegUP ] = 59;
				pInfo[ i ][ MinUP ] = 9;
				UPLevel( i );
			}
			format( gStr, sizeof( gStr ), "~w~UP~y~: ~w~%02d~y~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		 	TextDrawSetString( TextLevelUP[ i ], gStr );
			if( pInfo[ i ][ RelogioCor ] == 0 )
			{
				format( gStr, sizeof( gStr ), "~w~UP~y~: ~w~%02d~y~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 1 )
			{
				format( gStr, sizeof( gStr ), "~y~UP: ~w~%02d~y~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 2 )
			{
				format( gStr, sizeof( gStr ), "~r~UP: ~w~%02d~r~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 3 )
			{
				format( gStr, sizeof( gStr ), "~y~UP: ~w~%02d~y~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 4 )
			{
				format( gStr, sizeof( gStr ), "~p~UP: ~w~%02d~p~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 5 )
			{
				format( gStr, sizeof( gStr ), "~y~UP: ~w~%02d~y~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 6 )
			{
				format( gStr, sizeof( gStr ), "~y~~h~UP: ~w~%02d~y~~h~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 7 )
			{
				format( gStr, sizeof( gStr ), "~r~~h~UP: ~w~%02d~r~~h~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 8 )
			{
				format( gStr, sizeof( gStr ), "~y~~h~UP: ~w~%02d~y~~h~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 9 )
			{
				format( gStr, sizeof( gStr ), "~p~~h~UP: ~w~%02d~p~~h~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
			else if( pInfo[ i ][ RelogioCor ] == 10 )
			{
				format( gStr, sizeof( gStr ), "~y~~h~UP: ~w~%02d~y~~h~:~w~%02d", pInfo[ i ][ MinUP ], pInfo[ i ][ SegUP ] );
		    	TextDrawSetString( TextLevelUP[ i ], gStr );
	    	}
    	}
		if( IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) && ( GetPlayerInterior( i ) == 0 ))
		{
			if(( pInfo[ i ][ Tem_Kit ] == 1 ) && ( setoukit[ i ] == 0 ) && ( validArmas[ i ] == false ))
			{
			    give[ i ] = false;
			    ResetPlayerWeapons( i );
				validArmas[ i ] = true;
    			CarregarKit( i );
				setoukit[ i ] = 1;
			}
		}
		if( !IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ))
		{
			if(( pInfo[ i ][ Tem_Kit ] == 1 ) && ( setoukit[ i ] == 1 ) && ( validArmas[ i ] == true ))
			{
			    if( epDM[ i ][ dmParticipando ] == 0 )
				{
					if( trafcArma[ i ] == -1 )
					{
					    ResetPlayerWeapons( i );
					}
					else if( trafcArma[ i ] != -1 && give[ i ] == false )
					{
					    give[ i ] = true;
					    ResetPlayerWeapons( i );
						GivePlayerWeapon( i, trafcArma[ i ], 250 );
					}
				}
   				validArmas[ i ] = false;
				setoukit[ i ] = 0;
				armasProf( i );
			}
		}
	 	if( in_z[ i ] != -1 ) // GZ
		{
      		if(( validArmas[ i ] == false ))
		    {
		        give[ i ] = false;
		    	ResetPlayerWeapons( i );
		        validArmas[ i ] = true;
		    	SetPlayerArmas( i );
			}
		}
		else
		{
		    if( !IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) && ( validArmas[ i ] == true ))
		    {
		        validArmas[ i ] = false;
		    	if( epDM[ i ][ dmParticipando ] == 0 )
				{
					if( trafcArma[ i ] == -1 )
					{
					    ResetPlayerWeapons( i );
					}
					else if( trafcArma[ i ] != -1 && give[ i ] == false )
					{
					    ResetPlayerWeapons( i );
					    give[ i ] = true;
						GivePlayerWeapon( i, trafcArma[ i ], 250 );
					}
				}
		    	armasProf( i );
			}
		} // Quem pode usar armas
  		if( !IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) && in_z[ i ] == -1 &&
		aInfo[ i ][ Admin ] != 1 && pInfo[ i ][ Prof ] != POL_CIVIL && pInfo[ i ][ Prof ] != EXERCITO && pInfo[ i ][ Prof ] != POL_MILITAR && pInfo[ i ][ Prof ] != BOPE && pInfo[ i ][ Prof ] != POL_RODOVIARIA &&
		pInfo[ i ][ Prof ] != GUARDA_TRANSITO && pInfo[ i ][ Prof ] != DELEGADO && pInfo[ i ][ Prof ] != FOTOGRAFO && pInfo[ i ][ Prof ] != PROSTITUTA && pInfo[ i ][ Prof ] != MARINHA &&
  		pInfo[ i ][ Prof ] != ASSASSINO && pInfo[ i ][ Prof ] != TRAF_DROGAS && pInfo[ i ][ Prof ] != TRAF_ARMAS && pInfo[ i ][ Prof ] != ATIRADOR &&
		pInfo[ i ][ Prof ] != TERRORISTA && pInfo[ i ][ Prof ] != CHEFE_MAFIA && pInfo[ i ][ Prof ] != CACADOR && pInfo[ i ][ Prof ] != BOMBEIRO && ArenaDuelo[ i ] == false )
		{
      		if( epDM[ i ][ dmParticipando ] == 0 )
			{
				if( trafcArma[ i ] == -1 )
				{
				    ResetPlayerWeapons( i );
				}
				else if( trafcArma[ i ] != -1 && give[ i ] == false )
				{
				    ResetPlayerWeapons( i );
				    give[ i ] = true;
					GivePlayerWeapon( i, trafcArma[ i ], 250 );
				}
			}
		}
		if( IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) || in_z[ i ] != -1 || ArenaDuelo[ i ] == true )
		{
   			new
				Float:vida
			;
			GetPlayerHealth( i, vida );

		    if( strcmp( playerClan[ i ], "Nenhum", false ))
			{
			    format( gStr, sizeof( gStr ), "%s - {FFFFFF}Vida: {FF5D00}%.0f", playerClan[ i ], vida );

			 	SetPlayerChatBubble( i, gStr, SetZonaCorClan( clanColor[ i ] ), 30.0, 10000 );
			}
			else
			{
			    format( gStr, sizeof( gStr ), "Vida: {FF5D00}%.0f", vida );
			    SetPlayerChatBubble( i, gStr, -1, 30.0, 10000 );
			}
		} // Nome Em Cima Da Cabeça
		else if( !IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) && in_z[ i ] == -1 && ArenaDuelo[ i ] == false )
		{
      		if( pInfo[ i ][ AFK ] == true )
		    {
	            SetPlayerChatBubble( i, "• Jogador AFK •", 0xCCFF33AA, 30.0, 10000 );
		    }
			else if( aInfo[ i ][ Dono ] == 1 && aInfo[ i ][ Oculto ] == false )
			{
			    SetPlayerChatBubble( i, "Dono(a)", 0xFF0000AA, 30.0, 10000 );
		    }
			else if( aInfo[ i ][ Admin ] == 1 && aInfo[ i ][ Oculto ] == false )
			{
			    SetPlayerChatBubble( i, "Administrador(a)", 0x0000FFAA, 30.0, 10000 );
			}
	 		else if( aInfo[ i ][ Moderador ] == 1 && aInfo[ i ][ Oculto ] == false )
			{
			    SetPlayerChatBubble( i, "Moderador(a)", 0x00CCFFAA, 30.0, 10000 );
			}
			else if( aInfo[ i ][ Ajudante ] == 1 && aInfo[ i ][ Oculto ] == false )
			{
			    SetPlayerChatBubble( i, "Ajudante(a)", 0x33FF99AA, 30.0, 10000 );
			}
			else if( strcmp( playerClan[ i ], "Nenhum", false ))
			{
			 	SetPlayerChatBubble( i, playerClan[ i ], SetZonaCorClan( clanColor[ i ] ), 30.0, 10000 );
			}
		}
		if( GetPlayerSpecialAction( i ) == SPECIAL_ACTION_USEJETPACK ) // Quem Pode Usar O /Jetpack
		{
      if( aInfo[ i ][ Dono ] != 1 && aInfo[ i ][ Admin ] != 1 && aInfo[ i ][ Moderador ] != 1 && aInfo[ i ][ Ajudante ] != 1 && pInfo[ i ][ JetPack ] != 1 && pInfo[ i ][ PLAYER_VIP ] != 1 )
		    {
				SendClientMessage( i, COLOR_ERRO, "[ x ] Você não possui um JetPack !" );
				new
					Float:jx, Float:jy, Float:jz
				;
				GetPlayerPos( i, jx, jy, jz );
				SetPlayerPos( i, jx, jy, jz );
				SetPlayerSpecialAction( i, SPECIAL_ACTION_NONE );
			}
		}
		for( new w; w < sizeof( ArmasProibidas ); ++w )
		{
			if( GetPlayerWeapon( i ) == ArmasProibidas[ w ] )
			{
			    new
					wName[ 24 ]
				;
				GetWeaponName( ArmasProibidas[ w ], wName, sizeof( wName ));

				if( aInfo[ i ][ Dono ] == 0 && aInfo[ i ][ Admin ] == 0 && epDM[ i ][ dmParticipando ] == 0 )
				{
					#if ACTION == 0
						if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ] [ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
						{
							format( gStr, sizeof( gStr ), "[ ANTI WH ] O Jogador %s [ ID: %d ] foi banido por usar uma arma proibida. ( %s )", PlayerName( i ), i, wName );
							SendClientMessage( i, -1, gStr );
						}
						BanEx( i, "Weapon Cheat" );
					#elseif ACTION == 1
					    if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
					    {
					        format( gStr, sizeof( gStr ), "[ ANTI WH ] O Jogador %s [ ID: %d ] foi kickado por usar uma arma proibida. ( %s )", PlayerName( i ), i, wName );
					    	SendClientMessage( i, -1, gStr );
					    }
						Kick( i );
					#elseif ACTION == 2
					    if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
					    {
					        format( gStr, sizeof( gStr ), "[ ANTI WH ] O Jogador %s [ ID: %d ] tentou usar uma arma proibida e não obteve sucesso. ( %s )", PlayerName( i ), i, wName );
					    	SendClientMessage( i, -1, gStr );
					    }
						RemoveWeaponSlot( i, GetWeaponSlot( ArmasProibidas[ w ] ));
					#endif
				}
			}
		}
	}
	SetTimer( "upManolos", 1000, false );
	return 1;
}

forward TimerdeDez( );
public TimerdeDez( )
{
    SetTimer( "TimerdeDez", 10000, false );

	foreach(Player, i )
	{
	    new
			s[ 5 ]
		;
	    if( pInfo[ i ][ PLAYER_VIP ] == 1 )
	    {
	        s = "Sim";
	    }
	    else
	    {
	        s = "Nao";
	    }
	    if( pInfo[ i ][ Casa ] > 0 )
		{
			format( gstring, sizeof( gstring ), "~r~~h~LEVEL: ~y~~h~%d | ~r~~h~CASA: ~y~~h~%d | ~r~~h~VIP: ~y~~h~%s | ~r~~h~CLAN/GANGUE: ~y~~h~%s", pInfo[ i ][ Level ], pInfo[ i ][ Casa ], s, playerClan[ i ] );
			TextDrawSetString( InfoPlayer[ i ], gstring );
		}
		else
     	{
			format( gstring, sizeof( gstring ), "~r~~h~LEVEL: ~y~~h~%d  ~r~~h~CASA: ~y~~h~Nenhuma | ~r~~h~VIP: ~y~~h~%s | ~r~~h~CLAN/GANGUE: ~y~~h~%s", pInfo[ i ][ Level ], s, playerClan[ i ]);
			TextDrawSetString( InfoPlayer[ i ], gstring );
		}
	 	new
			casa_id,
			Float:proxima_casa,
			Float:casa_distancia = 99999.9
		;
	  	for( new CasaID = 1; CasaID < MAX_CASAS; ++CasaID )
	 	{
   			proxima_casa = GetPlayeyCasaDistacia( i, CasaID );

			if( proxima_casa < casa_distancia )
	    	{
	        	casa_distancia = proxima_casa;
	          	casa_id = CasaID;
			}
		}
		RemovePlayerMapIcon( i, 31 );

		if( !strcmp( CasaInfo[ casa_id ][ Proprietario ], "Ninguem", true ))
		{
    		SetPlayerMapIcon( i, icon_casa, CasaInfo[ casa_id ][ PickupX ], CasaInfo[ casa_id ][ PickupY ], CasaInfo[ casa_id ][ PickupZ ], 31, 0 );
		}
		else
		{
			SetPlayerMapIcon( i, icon_casa, CasaInfo[ casa_id ][ PickupX ], CasaInfo[ casa_id ][ PickupY ], CasaInfo[ casa_id ][ PickupZ ], 32, 0 );
		}

	   	new
			empresa_id,
			Float:proxima_empresa,
			Float:empresa_distancia = 99999.9
		;

	  	for( new m = 1; m < MAX_EMPRESAS; ++m )
	 	{
	    	proxima_empresa = GetPlayeyEmpresaDistacia( i, m );

	     	if( proxima_empresa < empresa_distancia )
	    	{
	       		empresa_distancia = proxima_empresa;
	        	empresa_id = m;
			}
		}

		RemovePlayerMapIcon( i, 33 );

		if( !strcmp( EmpresaInfo[ empresa_id ][ Proprietario ], "Ninguem", true ))
		{
		    // empresas roupas
		    if( empresa_id == 21
			 || empresa_id == 26
			 || empresa_id == 30
			 || empresa_id == 31
			 || empresa_id == 32
			 || empresa_id == 34
			 || empresa_id == 39
			 || empresa_id == 54
			 || empresa_id == 55
			 || empresa_id == 56
			 || empresa_id == 58
			 || empresa_id == 66
			 || empresa_id == 67
			 || empresa_id == 89
			 || empresa_id == 96
			 || empresa_id == 108
			 || empresa_id == 109 ) {
			 	SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 45, 0 );
			}
			else
			{
			    // empresas hamburguer
			    if( empresa_id == 16 || empresa_id == 45 || empresa_id == 62 || empresa_id == 65 || empresa_id == 68 || empresa_id == 70 || empresa_id == 95 )
			    {
			        SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 10, 0 );
			    }
			    else
			    {
			        if( empresa_id == 7 || empresa_id == 8 || empresa_id == 44 || empresa_id == 73 || empresa_id == 80 )
			        {
						SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 18, 0 );
					}
			        else
			        {
			            // academias
			            if( empresa_id == 12 || empresa_id == 99 || empresa_id == 15 || empresa_id == 78 )
			            {
							SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 54, 0 );
						}
			            else
			            {
			                if( empresa_id == 9 )
			                {
				                SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 39, 0 );
							}
							else
							{
								SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 44, 0 );
							}
						}
					}
				}
			}
		}
		else
		{
		    if( empresa_id == 21
			 || empresa_id == 26
			 || empresa_id == 30
			 || empresa_id == 31
			 || empresa_id == 32
			 || empresa_id == 34
			 || empresa_id == 39
			 || empresa_id == 54
			 || empresa_id == 55
			 || empresa_id == 56
			 || empresa_id == 58
			 || empresa_id == 66
			 || empresa_id == 67
			 || empresa_id == 89
			 || empresa_id == 96
			 || empresa_id == 108
			 || empresa_id == 109 ) {
			 	SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 45, 0 );
			}
			else
			{
				// empresas hamburguer
			    if( empresa_id == 16 || empresa_id == 45 || empresa_id == 62 || empresa_id == 65 || empresa_id == 68 || empresa_id == 70 || empresa_id == 95 )
			    {
			        SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 10, 0 );
			    }
			    else
			    {
			        if( empresa_id == 7 || empresa_id == 8 || empresa_id == 44 || empresa_id == 73 || empresa_id == 80 )
			        {
						SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 18, 0 );
					}
			        else
			        {
			            // academias
			            if( empresa_id == 12 || empresa_id == 99 || empresa_id == 15 || empresa_id == 78 )
			            {
							SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 54, 0 );
						}
			            else
			            {
			                if( empresa_id == 9 )
			                {
				                SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 39, 0 );
							}
				            else
				            {
								SetPlayerMapIcon( i, icon_empr, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 43, 0 );
							}
						}
					}
				}
			}
		}
	}

	new
		hora, minuto, segundo, ano, mes, dia
	;
	gettime( hora, minuto, segundo );
	getdate( ano, mes, dia );

	new
		iTempo[ 24 ]
	;
    format( iTempo, sizeof( iTempo ), "%02d:%02d", hora, minuto );
	TextDrawSetString( Relogio, iTempo );
	new
		iData[ 24 ]
	;
	format( iData, sizeof( iData ), "%02d/%02d/%02d", dia, mes, ano );
	TextDrawSetString( Data, iData );
	if( hora == 6 ) {
		SetWorldTime( 8 );
	}
    else if( hora == 12 ) {
		SetWorldTime( 10 );
	}
    else if( hora == 13 ) {
		SetWorldTime( 16 );
	}
    else if( hora == 17 ) {
		SetWorldTime( 21 );
	}
    else if( hora == 20 ) {
		SetWorldTime( 23 );
	}
    else if( hora == 22 ) {
		SetWorldTime( 0 );
	}
    else if( hora == 0 ) {
		SetWorldTime( 3 );
	}
    else if( hora == 5 ) {
		SetWorldTime( 5 );
	}
	return 1;
}

forward tresMinutos( );
public tresMinutos( )
{
	// Retorna o temporizador
    SetTimer( "tresMinutos", 180000, false );
	// Mensagem aleatória para todos
 	new
		randMSG = random( sizeof( RandomMSG ))
	;
    SendClientMessageToAll( 0xFFFFFFAA, RandomMSG[ randMSG ] );
    // Checa a hora e atualiza o taximetro
    new
		hora, minuto, segundo
	;
	gettime( hora, minuto, segundo );
	if( hora >= 18 || hora < 6 )
	{
	    Taxi_Bandeira = 2;
	}
	else if( hora < 18 || hora >= 6 )
	{
	    Taxi_Bandeira = 1;
	}
	// Faz um loop(passa por todos jogadores) para checar se alguém está ausente
	foreach(Player, i )
	{
		if( pInfo[ i ][ Logado ] == true && aInfo[ i ][ Admin ] == 0 && ParticipandoEvento[ i ] == 0 && epDM[ i ][ dmParticipando ] == 0 )
		{
 			if( pInfo[ i ][ AFK ] == false )
			{
			    if( TempoAFK[ i ] >= 2 )
			    {
				    pInfo[ i ][ AFK ] = true;

				    format( gStr, sizeof( gStr ), "› {FFFFFF}%s {A0B1F3}você foi bloqueado(a) por ficar ausente !", PlayerName( i ));
					SendClientMessage( i, 0xA0B1F3FF, gStr );

					if( GetPlayerState( i ) == PLAYER_STATE_DRIVER )
					{
	 					TextDrawHideForPlayer( i, Velocidade[ i ] );
	  					TextDrawHideForPlayer( i, Gasolina[ i ] );
	   					TextDrawHideForPlayer( i, Modelo[ i ] );
	     			}
					TextDrawShowForPlayer( i, AFK1 );
					TextDrawShowForPlayer( i, AFK2 );
				}
			}
			if( pInfo[ i ][ AFK ] == false )
			{
			 	GetPlayerPos( i, GetPosPlayer[ 0 ], GetPosPlayer[ 1 ], GetPosPlayer[ 2 ] );

	            if( !floatcmp( GetPosPlayer[ 0 ], PlayerLastPos[ i ][ LastX ] ) && !floatcmp( GetPosPlayer[ 1 ], PlayerLastPos[ i ][ LastY ] ))
				{
					TempoAFK[ i ] ++;
				}
				else
				{
					TempoAFK[ i ] = 0;
				}
	  			PlayerLastPos[ i ][ LastX ] = GetPosPlayer[ 0 ];
				PlayerLastPos[ i ][ LastY ] = GetPosPlayer[ 1 ];
				PlayerLastPos[ i ][ LastZ ] = GetPosPlayer[ 2 ];
			}
		}
	}
    return 1;
}

forward AtualizarCombustivel( );
public AtualizarCombustivel( )
{
    SetTimer( "AtualizarCombustivel", 120000, false );

	foreach(Player, i )
	{
	    new
			vehicleid = GetPlayerVehicleID( i ),
			vehicleModel = GetVehicleModel( vehicleid )
		;
		if( GetPlayerState( i ) == PLAYER_STATE_DRIVER && vehicleModel != 481 && vehicleModel != 509 && vehicleModel != 510 )
		{
 			if( pInfo[ i ][ Gas ] <= 0 )
			{
				SendClientMessage( i, COLOR_ERRO, "[ x ] Você não pode andar sem combustível, procure um posto mais próximo de você e abasteça !" );
    			dini_IntSet( f( i ), "Gasolina", 0 );
				pInfo[ i ][ Gas ] = 0;
				RemovePlayerFromVehicle( i );
    			PlayerPlaySound( i, 1055, 0.0, 0.0, 0.0 );
			}
			else if( pInfo[ i ][ Gas ] > 0 )
			{
				if( pInfo[ i ][ Gas ] <= 10 )
				{
					SendClientMessage( i, COLOR_ROSACLARO, "[ > ] Seu combustível está acabando, procure um posto mais próximo de você e abasteça." );
					pInfo[ i ][ Gas ] --;
					dini_IntSet( f( i ), "Gasolina", pInfo[ i ][ Gas ] );
					PlayerPlaySound( i, 1085, 0.0, 0.0, 0.0 );
				}
				else
				{
				    pInfo[ i ][ Gas ] --; // Combustivel Admin
					if( pInfo[ i ][ Gas ] > 100 && aInfo[ i ][ Dono ] != 1 && aInfo[ i ][ Admin ] != 1 && aInfo[ i ][ Moderador ] != 1 )
					{
					    pInfo[ i ][ Gas ] = 100;
					}
				}
			}
		}
 		if( GetPlayerPing( i ) > LIMITE_PING )
		{
			SendClientMessage( i, COLOR_ERRO, "[ x ] Seu ping está muito auto ajuste sua conexão ! ( Kickado ) " );
			format( gstring, sizeof( gstring ), "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} O(A) Jogador(a) %s foi kickado(a) por exceder o limite de ping ! ( %d )", PlayerName( i ), LIMITE_PING );
			SendClientMessageToAll( 0x00FF66AA, gstring );
			Kick( i );
		}
	}
    return 1;
}
        public OnRconLoginAttempt(ip[], password[], success) // Anti /rcon login
        {
            new pip[16];
            for(new i=0; i<MAX_PLAYERS; i++)
                {
                        GetPlayerIp(i, pip, sizeof(pip));
                        if(!strcmp(ip, pip, true))
                        {
                                Kick(i, "/RCON LOGIN");
                 }
            }
            return 1;
        }

public OnGameModeExit( )
{
	foreach(Player, i )
	{
		if( pInfo[ i ][ Preso ] > 1 )
		{
			KillTimer( T_Preso[ i ] );
		}
		SalvarFile( i );
	}
	DestruirTextsDrawns( );

	for( new i; i < 5; ++i )
	{
		TextDrawDestroy( dmColoText[ i ] );
	}
	TextDrawDestroy( dm_text_Top5[ 0 ] );
	TextDrawDestroy( dm_text_Top5[ 1 ] );
	TextDrawDestroy( dmiTimer[ 0 ] );
	TextDrawDestroy( dmiTimer[ 1 ] );

    evDMreset( );

    EventoApe = false;
    EventoVei = false;

	return 1;
} // Login

public OnPlayerRequestClass( playerid, classid )
{
    if( IsPlayerNPC( playerid ))
    {
        SpawnPlayer( playerid );
		return 1;
    }
	if( !IsPlayerNPC( playerid ))
    {
    	TextDrawHideForPlayer( playerid, BPO_Games );
//		TextDrawShowForPlayer( playerid, Viva_Vida );

		if( pInfo[ playerid ][ Logado ] == false )
		{
			new
				hora,
				minuto,
				segundo
			;
		    gettime( hora, minuto, segundo );

		    LimparChat( playerid, 50 );

		    format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));

			if( fexist( gFile ))
			{
				if( hora >= 0 && hora <= 5 )
			    {
			        MensagemFormatada( playerid, 0x008FCCFF, "••••• {FFFFFF}Boa noite %s", PlayerName( playerid ));
				}
	   		    if( hora >= 6 && hora <= 11 )
			    {
					MensagemFormatada( playerid, 0x008FCCFF, "••••• {FFFFFF}Bom dia %s", PlayerName( playerid ));
				}
	  			if( hora >= 12 && hora <= 17 )
			    {
			        MensagemFormatada( playerid, 0x008FCCFF, "••••• {FFFFFF}Boa tarde %s", PlayerName( playerid ));
				}
				if( hora >= 18 && hora <= 23 )
			    {
			        MensagemFormatada( playerid, 0x008FCCFF, "••••• {FFFFFF}Boa noite %s", PlayerName( playerid ));
				}
				SendClientMessage( playerid, 0xE5E400FF, "••••• {FFFFFF}Brasil Play Online™ 2.0 {37CA3A}'SA-MP Versão 0.3.7'" );
				SendClientMessage( playerid, 0x00B409FF, "••••• {FFFFFF}Seja bem vindo(a) novamente, caso tenha dúvidas digite: /Ajuda ou /Comandos" );
				SendClientMessage( playerid, 0xFFFFFFAA, "  " );
				format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Logando em sua conta.\n\nSeja bem vindo(a) novamente ao {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}Play Online{F90C14} 2.0™\n\n\t{00FF00}Usuário(a): {FFFFFF}%s\n\n\t{00FF00}Status da conta: {3366FF}Registrada\n\n{FFFFFF}Insira sua senha abaixo para logar:", PlayerName( playerid ));
				ShowPlayerDialog( playerid, D_LOGIN, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}Play Online{F90C14}", s5Doze, "Logar", "Cancelar" );
			}
			else
			{
				if( hora >= 0 && hora <= 5 )
			    {
			        MensagemFormatada( playerid, 0x008FCCFF, "••••• {FFFFFF}Boa noite %s", PlayerName( playerid ));
				}
	   		    if( hora >= 6 && hora <= 11 )
			    {
					MensagemFormatada( playerid, 0x008FCCFF, "••••• {FFFFFF}Bom dia %s", PlayerName( playerid ));
				}
	  			if( hora >= 12 && hora <= 17 )
			    {
			        MensagemFormatada( playerid, 0x008FCCFF, "•••••• {FFFFFF}Boa tarde %s", PlayerName( playerid ));
				}
				if( hora >= 18 && hora <= 23 )
			    {
			        MensagemFormatada( playerid, 0x008FCCFF, "••••• {FFFFFF}Boa noite %s", PlayerName( playerid ));
				}
				SendClientMessage( playerid, 0xE5E400FF, "••••• {FFFFFF}Brasil Play Online™  {37CA3A}'SA-MP Versão 0.3.7'" );
				SendClientMessage( playerid, 0x00B409FF, "••••• {FFFFFF}Seja bem vindo(a) pela primeira vez em nosso servidor, caso tenha dúvidas digite: /Ajuda ou /Comandos" );
				SendClientMessage( playerid, 0xFFFFFFAA, "  " );
				format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Registrando sua conta.\n\nSeja bem vindo(a) ao {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}Play Online {F90C14}3.0™\n\n\t{00FF00} Usuário(a): {FFFFFF}%s\n\n\t{00FF00}Status da conta: {FF0000}Não registrada\n\n{FFFFFF}Insira uma senha abaixo para registrar-se:", PlayerName( playerid ));
				ShowPlayerDialog( playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}Play Online{F90C14}™", s5Doze, "Registrar", "Cancelar" );
			}
		}
	}
	SetiSpawnInfo( playerid );
 	new
	 	getSkin = dini_Int( gFile, "Skin" ),
	 	getSexo = dini_Int( gFile, "Sexo" ),
	 	getpVip = dini_Int( gFile, "PLAYER_VIP" ),
	 	getDono = dini_Int( gFile, "Dono" ),
	 	getAdmin = dini_Int( gFile, "Administrador" ),
	 	getMod = dini_Int( gFile, "Moderador" ),
        getAjud = dini_Int( gFile, "Ajudante" );

 	if( !SkinValida( getSkin ))
 	{
 	    SetPlayerSkin( playerid, getSkin );
 	}
 	else
 	{
	 	if( getpVip == 1 || getDono == 1  || getAdmin == 1 || getMod == 1 || getAjud == 1  )
	 	{
	 	    SetPlayerSkin( playerid, getSkin );
	 	}
		else
		{
	 	if( getpVip == 0 || getDono == 0  || getAdmin == 0 || getMod == 0 || getAjud == 0  )
	 		{
		 	    if( getSexo == 1 )
		 	    {
		 	    	SetPlayerSkin( playerid, 0 );
				}
   				if( getSexo == 2 )
		        {
		            SetPlayerSkin( playerid, 10 );
		        }
	 		}
		}
	} // Camera do login
    SetPlayerPos( playerid, 189.0188,-1812.3063,7.3480 );
    SetPlayerCameraPos( playerid, 240.0806,-1804.2729,8.4493 );
    SetPlayerCameraLookAt( playerid, 231.4609,-1804.7678,10.4000 );
    SetPlayerFacingAngle( playerid, 273.8980 );
	return 1;
}

public OnPlayerRequestSpawn( playerid )
{
	ApplyAnimation( playerid, "PED", "flee_lkaround_01", 4.1, 1, 1, 1, 1, 1, 1 );
	return 0;
}

public OnPlayerConnect( playerid )
{
    if( !IsPlayerNPC( playerid ))
    {
		if( GetPlayerPing( playerid ) <= 0 )
		return Kick( playerid ), 1;
	}
	if( CountIP( GetIP( playerid )) >= 10 )
	{
		return BanAll( playerid ), 0;
	}
	if( !IsValidNick( PlayerName( playerid )) )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você utilizou um caractére inválido no seu Nick / Nome !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ ~ ] São permitidos os seguintes caractéres:" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] De A/a a Z/z e _ ." );
		SendClientMessage( playerid, COLOR_AMARELO, "[ ~ ] Exemplos de Nick-Nome: Nome.SobreNome, NomeSobrenome, Nome_SobreNome ou Nome" );
		return Kick( playerid ), 1;
	}
	if( dini_Int( f( playerid ), "Banido" ) == 1 )
	{
	    SendClientMessage( playerid, COLOR_VERMELHOCLARO, "[ x ] Você está banido(a) !" ); // BANIDO // CRIEI
	    format( gStr, sizeof( gStr ), "[ > ] Banido Por: {FF0000}%s", dini_Get( f( playerid ), "BanidoPor" ));
	    SendClientMessage( playerid, COLOR_BRANCO, gStr );
	    format( gStr, sizeof( gStr ), "[ > ] Motivo: {FF0000}%s", dini_Get( f( playerid ), "MotivoBan" ));
   	    SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_AMARELO, "[ x ] Visite nosso Discord para tentar reverter essa situação." );
		SendClientMessage( playerid, COLOR_CINZACLARO, "[ x ] Discord: Malboro#5173" );
		SetTimerEx( "Banido", 1125, false, "d", playerid );
    }
	else
	{
	    pInfo[ playerid ][ Logado ] = false;
		SetPlayerColor( playerid, 0xFFFFFFAA );
//		TextDrawHideForPlayer( playerid, Viva_Vida );
		TextDrawShowForPlayer( playerid, BPO_Games );
		TextDrawHideForPlayer( playerid, InfoSite );
		TextDrawHideForPlayer( playerid, InfoPlayer[ playerid ] );
		TextDrawHideForPlayer( playerid, statsShop );
		TextCreatePlayer( playerid );
		for( new t; t < 4; t++ )
		{
			TextDrawHideForPlayer( playerid, TextAnuncio[ t ] );
		}
		ResetPlayerWeapons( playerid );
//		PlayAudioStreamForPlayer( playerid, "https://live.hunter.fm/pisadinha_high" ); // Música De Login // Festa - Praia
		LimparChat( playerid, 30 );
		SendClientMessage( playerid, COLOR_BRANCO, "Carregando dados..." );
  	    //--
	    dmLimpar( playerid ); // QUANDO O PLAYER ENTRAR
	    pInfo[ playerid ][ psErrou ] = 0;
	    pInfo[ playerid ][ pLogin ] = true;
	    aInfo[ playerid ][ Oculto ] = false;
	    pInfo[ playerid ][ PLAYER_VIP ] = 0;
	    pInfo[ playerid ][ StatusCapacete ] = 0;
	    pInfo[ playerid ][ ModeloCapacete ] = 0;
		pInfo[ playerid ][ Seguro ] = 0;
		pInfo[ playerid ][ Convenio ] = 0;
		pInfo[ playerid ][ KiloD ] = 0;
		CaminhaoCarga[ playerid ] = false;
		CaminhaoDesCargaLV[ playerid ] = false;
		CaminhaoDesCargaSF[ playerid ] = false;
		AreadePesca[ playerid ] = false;
		AreadeCasca[ playerid ] = false;
		AreaFazendaDrogas[ playerid ] = false;
		AreaFazendaArmas[ playerid ] = false;
		AreaMotoboyGirl[ playerid ] = false;
		Areaobra[ playerid ] = false;
		Areacv[ playerid ] = false;
		pInfo[ playerid ][ procMorto ] = false;
	    vercmds[ playerid ] = 0;
		aviso[ playerid ] = 0;
		pInfo[ playerid ][ Hosp ] = -1;
		pInfo[ playerid ] [ AFK ] = false;
		pInfo[ playerid ][ JetPack ] = 0;
		pInfo[ playerid ][ fMatou ] = 0;
		pInfo[ playerid ][ fMorreu ] = 0;
 		BancoLogin[ playerid ] = 0;
		pInfo[ playerid ][ EntrouAgencia ] = 0;
  		pInfo[ playerid ][ entroupref ] = 0;
  		pInfo[ playerid ][ entrouHAB ] = 0;
		JaPescando[ playerid ] = 0;
		setoukit[ playerid ] = 0;
		pInfo[ playerid ][ Continuar ] = true;
		TextFavela[ playerid ] = false;
		CargaEstacaoLS[ playerid ] = 0;
		CargaEstacaoLV[ playerid ] = 0;
		CargaEstacaoSF[ playerid ] = 0;
		CargaAeroLS[ playerid ] = 0;
		CargaAeroLV[ playerid ] = 0;
		CargaAeroSF[ playerid ] = 0;
		CargaAeroAB[ playerid ] = 0;
		CargaAeroLS2[ playerid ] = 0;
		JaCascando[ playerid ] = 0;
		Algemou[ playerid ] = 0;
		Algemado[ playerid ] = 0;
		P_Liberado[ playerid ] = 0;
		Procurou[ playerid ] = 0;
		T_GPS[ playerid ] = 0;
		GPS[ playerid ] = false;
		PlantouBomba[ playerid ] = 0;
		PassouRadar[ playerid ] = 0;
		LiberadoCasa[ playerid ] = 0;
		FireAtual[ playerid ] = 0;
		bpopCount[ playerid ] = -1;
		pInfo[ playerid ][ chat ] = 0;
		pInfo[ playerid ][ vchat2 ] = 0;
		bateu_ponto[ playerid ] = 0;
		bateu_ponto1[ playerid ] = 0;
		RotaMFort[ playerid ] = 0;
		RotaMFort1[ playerid ] = 0;
		Consertou[ playerid ] = 0;
		// Evento
		ClickMause[ playerid ] = 0;
		SetPlayerCheckPoint[ playerid ] = 0;
		ParticipandoEvento[ playerid ] = 0;
		vOcupou[ playerid ] = -1;
		RotaBus[ playerid ] = -1;
		RotaLixo[ playerid ] = -1;
		trafcArma[ playerid ] = -1;
		floodChat[ playerid ] = gettime();
		/* Pizza */
		if( Pizza_Oferecido[ playerid ] == 1 )
		{
			KillTimer( Pizza_Timer[ playerid ] );
			Pizza_Oferecido[ playerid ] = 0;
			Pizza_Recebido[ playerid ] = 0;
			Pizza_Mensagem[ playerid ] = 0;
			Pizza_VALOR[ playerid ] = 0;
			Pizza_PID[ playerid ] = -1;
			Pizza_IID[ playerid ] = -1;
			Pizza_SID[ playerid ] = 0;
		}
		/* Hotdog */
		if( Hotdog_Oferecido[ playerid ] == 1 )
		{
			KillTimer( Hotdog_Timer[ playerid ] );
			Hotdog_Oferecido[ playerid ] = 0;
			Hotdog_Recebido[ playerid ] = 0;
			Hotdog_Mensagem[ playerid ] = 0;
			Hotdog_VALOR[ playerid ] = 0;
			Hotdog_PID[ playerid ] = -1;
			Hotdog_IID[ playerid ] = -1;
			Hotdog_SID[ playerid ] = 0;
		}

		/* Sorvete */
		if( Sorvete_Oferecido[ playerid ] == 1 )
		{
			KillTimer( Sorvete_Timer[ playerid ] );
			Sorvete_Oferecido[ playerid ] = 0;
			Sorvete_Recebido[ playerid ] = 0;
			Sorvete_Mensagem[ playerid ] = 0;
			Sorvete_VALOR[ playerid ] = 0;
			Sorvete_PID[ playerid ] = -1;
			Sorvete_IID[ playerid ] = -1;
			Sorvete_SID[ playerid ] = 0;
		}
		/* Cura */
		KillTimer( Cura_Timer[ playerid ] );
		Cura_Oferecido[ playerid ] = 0;
		Cura_Recebido[ playerid ] = 0;
		Cura_Mensagem[ playerid ] = 0;
		Cura_VALOR[ playerid ] = 0;
		Cura_PID[ playerid ] = -1;
		Cura_IID[ playerid ] = -1;
 		/* Skin */
		KillTimer( _SKIN_Timer[ playerid ] );
		_SKIN_Oferecido[ playerid ] = 0;
		_SKIN_Recebido[ playerid ] = 0;
		_SKIN_Mensagem[ playerid ] = 0;
		_SKIN_VALOR[ playerid ] = 0;
		_SKIN_PID[ playerid ] = -1;
		_SKIN_IID[ playerid ] = -1;
		_SKIN_SID[ playerid ] = 0;
		/* Maconha */
		KillTimer( Maconha_Timer[ playerid ] );
		Maconha_Oferecido[ playerid ] = 0;
		Maconha_Recebido[ playerid ] = 0;
		Maconha_Mensagem[ playerid ] = 0;
		Maconha_VALOR[ playerid ] = 0;
		Maconha_PID[ playerid ] = -1;
		Maconha_IID[ playerid ] = -1;
		Maconha_QTD[ playerid ] = 0;
		/* Cocaína */
		KillTimer( Farinha_Timer[ playerid ] );
		Farinha_Oferecido[ playerid ] = 0;
		Farinha_Recebido[ playerid ] = 0;
		Farinha_Mensagem[ playerid ] = 0;
		Farinha_VALOR[ playerid ] = 0;
		Farinha_PID[ playerid ] = -1;
		Farinha_IID[ playerid ] = -1;
		Farinha_QTD[ playerid ] = 0;
		/* Crack */
		KillTimer( Crack_Timer[ playerid ] );
		Crack_Oferecido[ playerid ] = 0;
		Crack_Recebido[ playerid ] = 0;
		Crack_Mensagem[ playerid ] = 0;
		Crack_VALOR[ playerid ] = 0;
		Crack_PID[ playerid ] = -1;
		Crack_IID[ playerid ] = -1;
		Crack_QTD[ playerid ] = 0;
		/* */
		Tirou_F[ playerid ] = 0;
		GPS_Ligado[ playerid ] = 0;
		vercmds[ playerid ] = 0;
		ArenaDuelo[ playerid ] = false;
		N_Liberado[ playerid ] = 0;
		UseLoop[ playerid ] = false;
		PMBLOQUEADO[ playerid ] = 0;
		Calado[ playerid ] = false;
 		Mercadoria1[ playerid ] = 0;
		Mercadoria2[ playerid ] = 0;
		Mercadoria3[ playerid ] = 0;
		Mercadoria4[ playerid ] = 0;
		Mercadoria5[ playerid ] = 0;
		Mercadoria[ playerid ] = 0;
     	msgcount[ playerid ] = -1;
    	msgconvi[ playerid ] = 0;
    	LiberadoGG[ playerid ] = 0;
    	Loop[ playerid ] = 0;
    	NoTuto[ playerid ] = false;
    	Votou[ playerid ] = 0;
		MensagemHouse[ playerid ] = 0;
    	KillTimer( timercou[ playerid ] );
    	KillTimer( ChatTuto[ playerid ] );
     	T_Tipo[ playerid ] = 1;
	    TextCor[ playerid ] = 12;
		MoradorCount[ playerid ] = -1;
		Finalizou[ playerid ] = 0;
		Estacionou[ playerid ] = 0;
		LiberadoEmpresa[ playerid ] = 0;
		validArmas[ playerid ] = false;
		resetNeon( playerid );
		estacionouSET[ playerid ] = 0;
		cargaTempo[ playerid ] = 0;
		ForteTempo[ playerid ] = 0;
		saiuCaminhao[ playerid ] = 0;
		saiuForte[ playerid ] = 0;
		viwerAN[ playerid ] = 0;
		InHouse[ playerid ] = -1;
		CasaOferecida[ playerid ] = false;
		Crioutapete[ playerid ] = 0;
		Taxista_P[ playerid ] = 0;
		pInfo[ playerid ][ MsgSpawn ] = 0;
		gelarSpawn[ playerid ] = false;
		RemoveItensPlayer( playerid );
	    SetPVarInt( playerid, "pDono", 0 );
	    SetPVarInt( playerid, "pAdmin", 0 );
	    for( new t; t < 4; t++ )
		{
			TextDrawHideForPlayer( playerid, TextAnuncio[ t ] );
		}
	}
	RemoveBuildingForPlayer(playerid, 1411, -2529.2813, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2524.0156, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2518.7500, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -711.8672, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -706.6328, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -701.3984, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -696.1719, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -690.9375, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -717.0938, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1684, -2508.5000, -680.9531, 139.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2513.4844, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2508.2188, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1684, -2508.4063, -669.0938, 139.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2502.9531, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2497.6875, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2492.4219, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2487.1563, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2484.2969, -597.1641, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2484.2969, -602.4297, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2484.2969, -607.6953, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2539.8125, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2534.5469, -594.3281, 133.2969, 0.25);
		// Festa - Praia
	RemoveBuildingForPlayer(playerid, 3778, 337.4531, -1875.0000, 3.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3778, 289.2266, -1875.0000, 3.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3778, 245.5391, -1875.0000, 2.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3778, 200.4844, -1875.0000, 3.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 6415, 154.2109, -1950.1953, 26.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 6295, 154.2109, -1950.1953, 26.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 150.6641, -1870.3125, 3.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 158.6641, -1908.3203, 3.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3615, 200.4844, -1875.0000, 3.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3615, 245.5391, -1875.0000, 2.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3615, 289.2266, -1875.0000, 3.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 150.6641, -1835.3594, 3.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 159.1953, -1842.5859, 3.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 150.6641, -1809.3594, 3.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 159.3359, -1794.5859, 3.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 150.6641, -1784.3359, 3.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3615, 337.4531, -1875.0000, 3.4063, 0.25);
	return 1;
}

public OnPlayerDisconnect( playerid, reason ) // QUANDO O PLAYER SAIR
{
	if( pInfo[ playerid ][ Logado ] == true )
	{
	    SalvarFile( playerid );
	}
	if( pInfo[ playerid ][ Preso ] >= 1 )
	{
	    KillTimer( T_Preso[ playerid ] );
	}
    KillTimer( ContinTimer[ playerid ] );
    PCar_PlayerDisconnect( playerid );
    pInfo[ playerid ][ PLAYER_VIP ] = 0;
    pInfo[ playerid ][ Seguro ] = 0;
	pInfo[ playerid ][ Convenio ] = 0;
	pInfo[ playerid ][ StatusCapacete ] = 0;
	pInfo[ playerid ][ ModeloCapacete ] = 0;
	pInfo[ playerid ][ KiloD ] = 0;
	pInfo[ playerid ][ psErrou ] = 0;
	pInfo[ playerid ][ pLogin ] = false;
	CaminhaoCarga[ playerid ] = false;
	CaminhaoDesCargaLV[ playerid ] = false;
	CaminhaoDesCargaSF[ playerid ] = false;
	AreadePesca[ playerid ] = false;
	AreadeCasca[ playerid ] = false;
	AreaFazendaDrogas[ playerid ] = false;
	AreaFazendaArmas[ playerid ] = false;
	AreaMotoboyGirl[ playerid ] = false;
	Areaobra[ playerid ] = false;
	Areacv[ playerid ] = false;
    pInfo[ playerid ][ ContaBanco ] = 0;
    pInfo[ playerid ][ Celular ] = 0;
    pInfo[ playerid ][ Celular_c ] = 0;
    BancoLogin[ playerid ] = 0;
    T_Tipo[ playerid ] = 1;
    TextCor[ playerid ] = 12;
    aInfo[ playerid ][ Dono ] = 0;
    aInfo[ playerid ][ Admin ] = 0;
    aInfo[ playerid ][ Moderador ] = 0;
    aInfo[ playerid ][ Ajudante ] = 0;
	LiberadoCasa[ playerid ] = 0;
	pInfo[ playerid ][ AFK ] = false;
	pInfo[ playerid ][ EntrouAgencia ] = 0;
    setoukit[ playerid ] = 0;
	pInfo[ playerid ][ Continuar ] = true;
	TextFavela[ playerid ] = false;
	CargaEstacaoLS[ playerid ] = 0;
	CargaEstacaoLV[ playerid ] = 0;
	CargaEstacaoSF[ playerid ] = 0;
	CargaAeroLS[ playerid ] = 0;
	CargaAeroLV[ playerid ] = 0;
	CargaAeroSF[ playerid ] = 0;
	CargaAeroAB[ playerid ] = 0;
	CargaAeroLS2[ playerid ] = 0;
	Algemou[ playerid ] = 0;
	Algemado[ playerid ] = 0;
	P_Liberado[ playerid ] = 0;
	Procurou[ playerid ] = 0;
	PlantouBomba[ playerid ] = 0;
	Tirou_F[ playerid ] = 0;
	vercmds[ playerid ] = 0;
	GPS_Ligado[ playerid ] = 0;
	N_Liberado[ playerid ] = 0;
	UseLoop[ playerid ] = false;
	PMBLOQUEADO[ playerid ] = 0;
	Calado[ playerid ] = false;
	Mercadoria1[ playerid ] = 0;
	Mercadoria2[ playerid ] = 0;
	Mercadoria3[ playerid ] = 0;
	Mercadoria4[ playerid ] = 0;
	Mercadoria5[ playerid ] = 0;
	Mercadoria[ playerid ] = 0;
    msgcount[ playerid ] = -1;
    msgconvi[ playerid ] = 0;
    LiberadoGG[ playerid ] = 0;
    NoTuto[ playerid ] = false;
    Votou[ playerid ] = 0;
    estacionouSET[ playerid ] = 0;
    cargaTempo[ playerid ] = 0;
    ForteTempo[ playerid ] = 0;
    saiuCaminhao[ playerid ] = 0;
    saiuForte[ playerid ] = 0;
    viwerAN[ playerid ] = 0;
	InHouse[ playerid ] = -1;
	Teleporte[ playerid ] = 0;
	Taxista_P[ playerid ] = 0;
 	pInfo[ playerid ][ MsgSpawn ] = 0;
    CasaOferecida[ playerid ] = false;
    gelarSpawn[ playerid ] = false;
    bpopCount[ playerid ] = -1;
    trafcArma[ playerid ] = 0;
    pInfo[ playerid ][ ccolete ] = 0;
	pInfo[ playerid ][ fardado ] = 0;
    RemoveItensPlayer( playerid );
    evdmResetPlayer( playerid );
    Consertou[ playerid ] = 0;
    // Evento
 	ClickMause[ playerid ] = 0;
	SetPlayerCheckPoint[ playerid ] = 0;
	ParticipandoEvento[ playerid ] = 0;
	vOcupou[ playerid ] = -1;
	RotaBus[ playerid ] = -1;
	RotaLixo[ playerid ] = -1;
	//
	KillTimer( timercou[ playerid ] );
	KillTimer( ChatTuto[ playerid ] );
	if( msgconvi[ playerid ] == 1 || msgconvi[ playerid ] == 0 )
	{
		KillTimer( timercou[ playerid ] );
	}
	if( GPS[ playerid ] )
	{
		KillTimer( T_GPS[ playerid ] );
		GPS[ playerid ] = false;
		T_GPS[ playerid ] = 0;
	}
	if( Taximetro[ playerid ][ 1 ] == 1 )
	{
		MensagemFormatada( Taximetro[ playerid ][ 2 ], COLOR_VERDEFRACO, "[ > ] Você recebeu $%d pela corrida com %s !", PrecoTaximetro[ playerid ], PlayerName( playerid ));
		sGivePlayerCash( playerid, -PrecoTaximetro[ playerid ] );
		sGivePlayerCash( Taximetro[ playerid ][ 2 ], PrecoTaximetro[ playerid ] );
		Taximetro[ playerid ][ 1 ] = 0;
		Taximetro[ playerid ][ 2 ] = -1;
		PrecoTaximetro[ playerid ] = 0;
		KillTimer( T_Taximetro[ playerid ] );
	}
	if( Eguicho[ playerid ] == 1 )
	{
	    Eguicho[ playerid ] = 0;
	    CaminhaoGuincho --;
	}
	if( ArenaDuelo[ playerid ] == true )
	{
		DentroDuelo = 0;
		IDX1 = -1;
		foreach(Player, i )
		{
			if( ArenaDuelo[ i ] == true )
			{
				SetPlayerPos( i, 2188.9343, -1081.6875, 43.8327 );
				SetPlayerFacingAngle( i, 2.1799 );
				SetCameraBehindPlayer( i );
				ArenaDuelo[ i ] = false;
				TogglePlayerControllable( i, true );
			}
		}
	}
    ArenaDuelo[ playerid ] = false;
	pInfo[ playerid ][ Logado ] = false,
	Taximetro[ playerid ][ 1 ] = 0,
	Taximetro[ playerid ][ 2 ] = -1,
	PrecoTaximetro[ playerid ] = 0,
	pInfo[ playerid ][ Prof ] = DESEMPREGADO,
	pInfo[ playerid ][ Sexo ] = -1,
	pInfo[ playerid ][ ErrouRcon ] = 0,
	pInfo[ playerid ][ Exp ] = 0,
	pInfo[ playerid ][ Level ] = 0,
	pInfo[ playerid ][ Gas ] = 0;
	pInfo[ playerid ][ HabT ] = 0,
	pInfo[ playerid ][ HabA ] = 0,
	pInfo[ playerid ][ HabN ] = 0,
	pInfo[ playerid ][ HabP ] = 0,
	pInfo[ playerid ][ Spawn ] = 0,
	pInfo[ playerid ][ Luta ] = 0,
	pInfo[ playerid ][ EntrouL ] = false,
	pInfo[ playerid ][ Hosp ] = -1,
	AceitarCoca[ playerid ] = 0,
	RecebeuCoca[ playerid ] = -1,
	ValorCoca[ playerid ] = 0,
	OfereceuCoca[ playerid ] = false,
	QuantiaCoca[ playerid ] = 0,
	Carga[ playerid ] = 0,
	Carregou[ playerid ] = 0;
	if( aInfo[ playerid ][ Admin ] == 1 )
	{
		aInfo[ playerid ][ Oculto ] = false;
	}
	if( FireAtual[ playerid ] > 0 )
	{
	    new ID = playerid;
		DestroyDynamicObject( FireObj[ ID ] );
		FireCreated[ ID ] = 0;
		FirePlayer[ ID ] = "Ninguém";
		FirePos[ ID ][ 0 ] = 0, FirePos[ ID ][ 1 ] = 0, FirePos[ ID ][ 2 ] = 0;
		Delete3DTextLabel( FireText[ ID ] );
		printf(">>>>>>>>> Fogo da casa ID %d destruido !", ID );
	}
	if( Pizza_Recebido[ playerid ] == 1 || Pizza_Oferecido[ playerid ] == 1 )
	{
	    if( Pizza_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( Pizza_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu pizza desconectou-se do servidor." );
	    }
	    if( Pizza_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( Pizza_IID[ playerid ], -1, "[ > ] O jogador que ofereceu pizza para você desconectou-se do servidor." );
	    	KillTimer( Pizza_Timer[ Pizza_IID[ playerid ] ] ); Pizza_Recebido[ Pizza_IID[ playerid ] ] = 0;
			Pizza_ID[ Pizza_IID[ playerid ] ] = -1; Pizza_SID[ Pizza_IID[ playerid ] ] = 0;
			Pizza_PID[ Pizza_IID[ playerid ] ] = -1; Pizza_VALOR[ Pizza_IID[ playerid ] ] = 0;
			Pizza_Recebido[ Pizza_IID[ playerid ] ] = 0;
		}
	    KillTimer( Pizza_Timer[ playerid ] ); KillTimer( Pizza_Timer[ Pizza_PID[ playerid ] ] );
		Pizza_Oferecido[ playerid ] = 0; 	Pizza_Recebido[ playerid ] = 0; 	Pizza_Mensagem[ playerid ] = 0;
		Pizza_VALOR[ playerid ] = 0; 	Pizza_PID[ playerid ] = -1; 	Pizza_SID[ playerid ] = 0;
	 	Pizza_Oferecido[ Pizza_PID[ playerid ] ] = 0;	Pizza_IID[ playerid ] = -1;
	}
	if( Hotdog_Recebido[ playerid ] == 1 || Hotdog_Oferecido[ playerid ] == 1 )
	{
	    if( Hotdog_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( Hotdog_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu Hotdog desconectou-se do servidor." );
	    }
	    if( Hotdog_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( Hotdog_IID[ playerid ], -1, "[ > ] O jogador que ofereceu Hotdog para você desconectou-se do servidor." );
	    	KillTimer( Hotdog_Timer[ Hotdog_IID[ playerid ] ] ); Hotdog_Recebido[ Hotdog_IID[ playerid ] ] = 0;
			Hotdog_ID[ Hotdog_IID[ playerid ] ] = -1; Hotdog_SID[ Hotdog_IID[ playerid ] ] = 0;
			Hotdog_PID[ Hotdog_IID[ playerid ] ] = -1; Hotdog_VALOR[ Hotdog_IID[ playerid ] ] = 0;
			Hotdog_Recebido[ Hotdog_IID[ playerid ] ] = 0;
		}
	    KillTimer( Hotdog_Timer[ playerid ] ); KillTimer( Hotdog_Timer[ Hotdog_PID[ playerid ] ] );
		Hotdog_Oferecido[ playerid ] = 0; 	Hotdog_Recebido[ playerid ] = 0; 	Hotdog_Mensagem[ playerid ] = 0;
		Hotdog_VALOR[ playerid ] = 0; 	Hotdog_PID[ playerid ] = -1; 	Hotdog_SID[ playerid ] = 0;
	 	Hotdog_Oferecido[ Hotdog_PID[ playerid ] ] = 0;	Hotdog_IID[ playerid ] = -1;
	}
	if( Sorvete_Recebido[ playerid ] == 1 || Sorvete_Oferecido[ playerid ] == 1 )
	{
	    if( Sorvete_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( Sorvete_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu Sorvete desconectou-se do servidor." );
	    }
	    if( Sorvete_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( Sorvete_IID[ playerid ], -1, "[ > ] O jogador que ofereceu Sorvete para você desconectou-se do servidor." );
	    	KillTimer( Sorvete_Timer[ Sorvete_IID[ playerid ] ] ); Sorvete_Recebido[ Sorvete_IID[ playerid ] ] = 0;
			Sorvete_ID[ Sorvete_IID[ playerid ] ] = -1; Sorvete_SID[ Sorvete_IID[ playerid ] ] = 0;
			Sorvete_PID[ Sorvete_IID[ playerid ] ] = -1; Sorvete_VALOR[ Sorvete_IID[ playerid ] ] = 0;
			Sorvete_Recebido[ Sorvete_IID[ playerid ] ] = 0;
		}
	    KillTimer( Sorvete_Timer[ playerid ] ); KillTimer( Sorvete_Timer[ Sorvete_PID[ playerid ] ] );
		Sorvete_Oferecido[ playerid ] = 0; 	Sorvete_Recebido[ playerid ] = 0; 	Sorvete_Mensagem[ playerid ] = 0;
		Sorvete_VALOR[ playerid ] = 0; 	Sorvete_PID[ playerid ] = -1; 	Sorvete_SID[ playerid ] = 0;
	 	Sorvete_Oferecido[ Sorvete_PID[ playerid ] ] = 0;	Sorvete_IID[ playerid ] = -1;
	}
	if( Cura_Recebido[ playerid ] == 1 || Cura_Oferecido[ playerid ] == 1 )
	{
	    if( Cura_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( Cura_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu cura desconectou-se do servidor." );
	    }
	    if( Cura_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( Cura_IID[ playerid ], -1, "[ > ] O jogador que ofereceu cura para você desconectou-se do servidor." );
	    	KillTimer( Cura_Timer[ Cura_IID[ playerid ] ] ); Cura_Recebido[ Cura_IID[ playerid ] ] = 0;
			Cura_ID[ Cura_IID[ playerid ] ] = -1; Cura_PID[ Cura_IID[ playerid ] ] = -1;
			Cura_VALOR[ Cura_IID[ playerid ] ] = 0; Cura_Recebido[ Cura_IID[ playerid ] ] = 0;
		}
	    KillTimer( Cura_Timer[ playerid ] ); KillTimer( Cura_Timer[ Cura_PID[ playerid ] ] );
		Cura_Oferecido[ playerid ] = 0; 	Cura_Recebido[ playerid ] = 0; 	Cura_Mensagem[ playerid ] = 0;
		Cura_VALOR[ playerid ] = 0; 	Cura_PID[ playerid ] = -1; Cura_Oferecido[ Cura_PID[ playerid ] ] = 0;
		Cura_IID[ playerid ] = -1;
	}
	if( _SKIN_Recebido[ playerid ] == 1 || _SKIN_Oferecido[ playerid ] == 1 )
	{
	    if( _SKIN_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( _SKIN_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu skin desconectou-se do servidor." );
	    }
	    if( _SKIN_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( _SKIN_IID[ playerid ], -1, "[ > ] O jogador que ofereceu skin para você desconectou-se do servidor." );
	    	KillTimer( _SKIN_Timer[ _SKIN_IID[ playerid ] ] ); _SKIN_Recebido[ _SKIN_IID[ playerid ] ] = 0;
			_SKIN_ID[ _SKIN_IID[ playerid ] ] = -1; _SKIN_SID[ _SKIN_IID[ playerid ] ] = 0;
			_SKIN_PID[ _SKIN_IID[ playerid ] ] = -1; _SKIN_VALOR[ _SKIN_IID[ playerid ] ] = 0;
			_SKIN_Recebido[ _SKIN_IID[ playerid ] ] = 0;
		}
	    KillTimer( _SKIN_Timer[ playerid ] ); KillTimer( _SKIN_Timer[ _SKIN_PID[ playerid ] ] );
		_SKIN_Oferecido[ playerid ] = 0; 	_SKIN_Recebido[ playerid ] = 0; 	_SKIN_Mensagem[ playerid ] = 0;
		_SKIN_VALOR[ playerid ] = 0; 	_SKIN_PID[ playerid ] = -1; 	_SKIN_SID[ playerid ] = 0;
	 	_SKIN_Oferecido[ _SKIN_PID[ playerid ] ] = 0;	_SKIN_IID[ playerid ] = -1;
	}
	if( Maconha_Recebido[ playerid ] == 1 || Maconha_Oferecido[ playerid ] == 1 )
	{
	    if( Maconha_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( Maconha_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu maconha desconectou-se do servidor." );
	    }
	    if( Maconha_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( Maconha_IID[ playerid ], -1, "[ > ] O jogador que ofereceu maconha para você desconectou-se do servidor." );
	    	KillTimer( Maconha_Timer[ Maconha_IID[ playerid ] ] ); Maconha_Recebido[ Maconha_IID[ playerid ] ] = 0;
			Maconha_ID[ Maconha_IID[ playerid ] ] = -1; Maconha_QTD[ Maconha_IID[ playerid ] ] = 0;
			Maconha_PID[ Maconha_IID[ playerid ] ] = -1; Maconha_VALOR[ Maconha_IID[ playerid ] ] = 0;
			Maconha_Recebido[ Maconha_IID[ playerid ] ] = 0;
		}
	    KillTimer( Maconha_Timer[ playerid ] ); KillTimer( Maconha_Timer[ Maconha_PID[ playerid ] ] );
		Maconha_Oferecido[ playerid ] = 0; 	Maconha_Recebido[ playerid ] = 0; 	Maconha_Mensagem[ playerid ] = 0;
		Maconha_VALOR[ playerid ] = 0; 	Maconha_PID[ playerid ] = -1; 	Maconha_QTD[ playerid ] = 0;
	 	Maconha_Oferecido[ Maconha_PID[ playerid ] ] = 0;	Maconha_IID[ playerid ] = -1;
	}
	if( Farinha_Recebido[ playerid ] == 1 || Farinha_Oferecido[ playerid ] == 1 )
	{
	    if( Farinha_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( Farinha_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu cocaína desconectou-se do servidor." );
	    }
	    if( Farinha_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( Farinha_IID[ playerid ], -1, "[ > ] O jogador que ofereceu cocaína para você desconectou-se do servidor." );
	    	KillTimer( Farinha_Timer[ Farinha_IID[ playerid ] ] ); Farinha_Recebido[ Farinha_IID[ playerid ] ] = 0;
			Farinha_ID[ Farinha_IID[ playerid ] ] = -1; Farinha_QTD[ Farinha_IID[ playerid ] ] = 0;
			Farinha_PID[ Farinha_IID[ playerid ] ] = -1; Farinha_VALOR[ Farinha_IID[ playerid ] ] = 0;
			Farinha_Recebido[ Farinha_IID[ playerid ] ] = 0;
		}
	    KillTimer( Farinha_Timer[ playerid ] ); KillTimer( Farinha_Timer[ Farinha_PID[ playerid ] ] );
		Farinha_Oferecido[ playerid ] = 0; 	Farinha_Recebido[ playerid ] = 0; 	Farinha_Mensagem[ playerid ] = 0;
		Farinha_VALOR[ playerid ] = 0; 	Farinha_PID[ playerid ] = -1; 	Farinha_QTD[ playerid ] = 0;
	 	Farinha_Oferecido[ Farinha_PID[ playerid ] ] = 0;	Farinha_IID[ playerid ] = -1;
	}
	if( Crack_Recebido[ playerid ] == 1 || Crack_Oferecido[ playerid ] == 1 )
	{
	    if( Crack_Recebido[ playerid ] == 1 )
	    {
	        SendClientMessage( Crack_PID[ playerid ], -1, "[ > ] O jogador que você ofereceu crack desconectou-se do servidor." );
	    }
	    if( Crack_Oferecido[ playerid ] == 1 )
	    {
	    	SendClientMessage( Crack_IID[ playerid ], -1, "[ > ] O jogador que ofereceu crack para você desconectou-se do servidor." );
	    	KillTimer( Crack_Timer[ Crack_IID[ playerid ] ] ); Crack_Recebido[ Crack_IID[ playerid ] ] = 0;
			Crack_ID[ Crack_IID[ playerid ] ] = -1; Crack_QTD[ Crack_IID[ playerid ] ] = 0;
			Crack_PID[ Crack_IID[ playerid ] ] = -1; Crack_VALOR[ Crack_IID[ playerid ] ] = 0;
			Crack_Recebido[ Crack_IID[ playerid ] ] = 0;
		}
	    KillTimer( Crack_Timer[ playerid ] ); KillTimer( Crack_Timer[ Crack_PID[ playerid ] ] );
		Crack_Oferecido[ playerid ] = 0; 	Crack_Recebido[ playerid ] = 0; 	Crack_Mensagem[ playerid ] = 0;
		Crack_VALOR[ playerid ] = 0; 	Crack_PID[ playerid ] = -1; 	Crack_QTD[ playerid ] = 0;
	 	Crack_Oferecido[ Crack_PID[ playerid ] ] = 0;	Crack_IID[ playerid ] = -1;
	}
    if ( bIllegalPlayer[ playerid ] )
    {
        bIllegalPlayer[ playerid ] = false;
    }
    if( Crioutapete[ playerid ] != 0 )
    {
        Crioutapete[ playerid ] = 0;
	 	if( SpikeInfo[ Crioutapete[ playerid ] ][ sCreated ] == 1 )
		{
			SpikeInfo[ Crioutapete[ playerid ] ][ sCreated ] = 0;
			SpikeInfo[ Crioutapete[ playerid ] ][ sX ] = 0.0;
			SpikeInfo[ Crioutapete[ playerid ] ][ sY ] = 0.0;
			SpikeInfo[ Crioutapete[ playerid ] ][ sZ ] = 0.0;
			DestroyDynamicObject( SpikeInfo[ Crioutapete[ playerid ] ][ sObject ] );
		}
	}
	TextDrawHideForPlayer( playerid, Relogio );
	TextDrawHideForPlayer( playerid, Flash );
	TextDrawHideForPlayer( playerid, Favela_1 );
	TextDrawHideForPlayer( playerid, Favela_2 );
	TextDrawHideForPlayer( playerid, InfoSite );
	TextDrawHideForPlayer( playerid, InfoPlayer[ playerid ] );
	TextDrawHideForPlayer( playerid, statsShop );
    for( new t = 0; t < 4; t++ )
	{
		TextDrawHideForPlayer( playerid, TextAnuncio[ t ] );
	}
    resetNeon( playerid );
    StopAudioStreamForPlayer( playerid );
	return 1;
}

public OnPlayerSpawn( playerid )
{
    if( pInfo[ playerid ][ Preso ] <= 0 && pInfo[ playerid ][ procMorto ] == false )
    {
		if( pInfo[ playerid ][ pLogin ] == true )
		{
		    pInfo[ playerid ][ pLogin ] = false;
			// StopAudioStreamForPlayer(playerid); // Tira música de login depois que loga
		    PlayAudioStreamForPlayer(playerid,"https://bit.ly/3vjJyOj", 177.5978, -1814.0729, 7.3480, 200, 1); // Festa - Praia
		    LimparChat( playerid, 50 );

		    if( pInfo[ playerid ][ MsgSpawn ] == 1 )
		    {
		    	SendClientMessage( playerid, COLOR_LARANJA, "[ > ] Você terminou de ler o tutorial." );
  				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Leia sempre as regras para não cometer nenhum erro ! ( Use: /Regras )" );
            	SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
				MensagemFormatada( playerid, COLOR_BRANCO, "» Olá %s, seja bem vindo(a) ao Brasil Play Online™", PlayerName( playerid ));
				SendClientMessage( playerid, COLOR_BRANCO, "{F0E68C}x {FFFFFF}Para começar sua nova vida em Los Santos, segue abaixo os dados:" );
				SendClientMessage( playerid, COLOR_BRANCO, "{F0E68C}x {FFFFFF} Você tem 50 litros de combustível e $500,00 de dinheiro." );
				SendClientMessage( playerid, COLOR_BRANCO, "{F0E68C}x {FFFFFF}Inicialmente, vá até o Banco Central e abra uma conta bancaria." );
 				SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
				format( gStr, sizeof( gStr ), "[ > ] Seu primeiro e último login foi {FFFFFF}%s às %s", dini_Get( f( playerid ), "ulData" ), dini_Get( f( playerid ), "ulHorario" ));
			    SendClientMessage( playerid, COLOR_AMARELO, gStr );
			    pInfo[ playerid ][ MsgSpawn ] = 0;
		    }
		    else
		    {
			    format( gStr, sizeof( gStr ), "[ > ] Seu último login foi dia {FFFFFF}%s às %s", dini_Get( f( playerid ), "ulData" ), dini_Get( f( playerid ), "ulHorario" ));
			    SendClientMessage( playerid, COLOR_AMARELO, gStr );
			    SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Caso queira continuar da sua última posição salva, digite: {7fff00}/Continuar" );
			    SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você tem 30 segundos para usar este comando !" );
				pInfo[ playerid ][ Continuar ] = true;
				ContinTimer[ playerid ] = SetTimerEx( "ContinuarFail", 30000, false, "d", playerid );
				PCar_PlayerConnect( playerid );
			}
			if( oInfo[ playerid ][ Lider ] == 0 && oInfo[ playerid ][ SubLider ] == 0 && oInfo[ playerid ][ Membro ] == 0 )
			{
				if( pInfo[ playerid ][ Spawn ] == 1 ) // Respawn Profissão - Assim que loga
				{
					if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA )
					{
						spawnPolicia( playerid );
					}
					else
					{
						SpawnCasa( playerid );
					}
				}
				else
				{
					SpawnProf( playerid );
				}
			}
			else
			{
			    new
			        oinfop[ 30 ]
				;
			    if( oInfo[ playerid ][ Lider ] != 0 && oInfo[ playerid ][ SubLider ] == 0 && oInfo[ playerid ][ Membro ] == 0 )
			    {
			        oinfop = "Líder";
			    }
			 	if( oInfo[ playerid ][ Lider ] == 0 && oInfo[ playerid ][ SubLider ] != 0 && oInfo[ playerid ][ Membro ] == 0 )
			    {
			        oinfop = "Sub Líder";
				}
   			 	if( oInfo[ playerid ][ Lider ] == 0 && oInfo[ playerid ][ SubLider ] == 0 && oInfo[ playerid ][ Membro ] != 0 )
			    {
			        oinfop = "Membro";
			    }
			}
  			SetColor( playerid );
			getarVIP( playerid );
			ultimoLogin( playerid );

			if( dini_Int( f( playerid ), "msglucro" ) == 1 )
			{
				msglucrooff( playerid, dini_Int( f( playerid ), "Contratado" ));
			}

			for( new gz = 0; gz < sizeof( ZoneInfo ); gz++ )
			{
			    GangZoneShowForPlayer( playerid, ZoneID[ gz ], SetZonaCorClan( ZoneInfo[ gz ][ zCor ][ 0 ] ));

			    if( ZonaAtacada[ gz ] != -1 ) GangZoneFlashForPlayer( playerid, ZoneID[ gz ], ZoneInfo[ gz ][ zCor ][ 1 ] );
			}
			GangZoneShowForPlayer( playerid, AreasGZServer[ 0 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 1 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 2 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 3 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 4 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 5 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 6 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 7 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 8 ], 0x00000055 );
		    GangZoneShowForPlayer( playerid, AreasGZServer[ 9 ], 0xE70000FF );
		}
   		else
   		{
		   	if( pInfo[ playerid ][ Hosp ] == 0 )
			{
				SetPlayerPos( playerid, 1173.1145,-1323.7125,15.3962 );
				SetPlayerFacingAngle( playerid, 268.1490 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
				MensagemHospital( playerid );
			}
			else if( pInfo[ playerid ][ Hosp ] == 1 )
			{
				SetPlayerPos( playerid, 2036.5521,-1412.5513,16.9922 );
				SetPlayerFacingAngle( playerid, 135.5749 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
				MensagemHospital( playerid );
			}
			else if( pInfo[ playerid ][ Hosp ] == 2 )
			{
				SetPlayerPos( playerid, 1607.4396,1819.1462,10.8280 );
				SetPlayerFacingAngle( playerid, 359.6572 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
				MensagemHospital( playerid );
			}
			else if( pInfo[ playerid ][ Hosp ] == 3 )
			{
				SetPlayerPos( playerid, -2665.0503,636.5155,14.4531 );
				SetPlayerFacingAngle( playerid, 177.0288 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
				MensagemHospital( playerid );
			}
		    else if( pInfo[ playerid ][ Hosp ] == 4 )
			{
                SetPlayerPos( playerid, -315.0838,1050.7095,20.3403 );
                SetPlayerFacingAngle( playerid, 359.3905 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
				MensagemHospital( playerid );
			}
			else if( pInfo[ playerid ][ Hosp ] == 5 )
			{
                SetPlayerPos( playerid, -1514.6455,2523.4263,55.8138 );
                SetPlayerFacingAngle( playerid, 359.6804 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
				MensagemHospital( playerid );
			}
			else if( pInfo[ playerid ][ Hosp ] == 6 )
			{
                SetPlayerPos( playerid, -2208.2485,-2286.8516,30.6250 );
                SetPlayerFacingAngle( playerid, 319.4752 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
				MensagemHospital( playerid );
			}
  			else if( pInfo[ playerid ][ Hosp ] == 7 )
			{
				GameTextForPlayer( playerid, "~p~~h~SPAWN FAVELA", 1000, 1 );
                SetPlayerPos( playerid, 2216.8623, -1178.4064, 25.7266 );
                SetPlayerFacingAngle( playerid, 2.1799 );
				SetCameraBehindPlayer( playerid );
				pInfo[ playerid ][ Hosp ] = -1;
			}
			else if( pInfo[ playerid ][ Hosp ] == 9 )
			{
	  			if( epDM[ playerid ][ dmParticipando ] == 1 && esDM[ evdmCriado ] == 1 )
	  			{
	       			if( esDM[ evdmArenaID ] == 6 )
				    {
						SetPlayerPos( playerid, dmePos[ 0 ], dmePos[ 1 ], dmePos[ 2 ] );
						SetPlayerInterior( playerid, 0 );
					}
				    else if( esDM[ evdmArenaID ] > 0 && esDM[ evdmArenaID ] < 6 )
	       			{
				        if( esDM[ evdmArenaID ] == 1 )
				        {
				            new rnd = random( sizeof( saeArena1 ));
							SetPlayerPos( playerid, saeArena1[ rnd ][ 0 ], saeArena1[ rnd ][ 1 ], saeArena1[ rnd ][ 2 ] );
							SetPlayerFacingAngle( playerid, saeArena1[ rnd ][ 3 ] );
							SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
						}
						if( esDM[ evdmArenaID ] == 2 )
				        {
				            new rnd = random( sizeof( saeArena2 ));
							SetPlayerPos( playerid, saeArena2[ rnd ][ 0 ], saeArena2[ rnd ][ 1 ], saeArena2[ rnd ][ 2 ] );
							SetPlayerFacingAngle( playerid, saeArena2[ rnd ][ 3 ] );
							SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
						}
						if( esDM[ evdmArenaID ] == 3 )
				        {
				            new rnd = random( sizeof( saeArena3 ));
							SetPlayerPos( playerid, saeArena3[ rnd ][ 0 ], saeArena3[ rnd ][ 1 ], saeArena3[ rnd ][ 2 ] );
							SetPlayerFacingAngle( playerid, saeArena3[ rnd ][ 3 ] );
							SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
						}
						if( esDM[ evdmArenaID ] == 4 )
				        {
				            new rnd = random( sizeof( saeArena4 ));
							SetPlayerPos( playerid, saeArena4[ rnd ][ 0 ], saeArena4[ rnd ][ 1 ], saeArena4[ rnd ][ 2 ] );
							SetPlayerFacingAngle( playerid, saeArena4[ rnd ][ 3 ] );
							SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
						}
						if( esDM[ evdmArenaID ] == 5 )
				        {
				            new rnd = random( sizeof( saeArena5 ));
							SetPlayerPos( playerid, saeArena5[ rnd ][ 0 ], saeArena5[ rnd ][ 1 ], saeArena5[ rnd ][ 2 ] );
							SetPlayerFacingAngle( playerid, saeArena5[ rnd ][ 3 ] );
							SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
						}
					}
					dmSetEquipamentos( playerid );
				}
			}
		}
		armasProf( playerid );
	}
	else
	{
	    if( pInfo[ playerid ][ pLogin ] == true )
	    {
		    pInfo[ playerid ][ pLogin ] = false;
		    pInfo[ playerid ][ Continuar ] = false;

			format( gStr, sizeof( gStr ), "[ > ] Seu último login foi {FFFFFF}%s às %s", dini_Get( f( playerid ), "ulData" ), dini_Get( f( playerid ), "ulHorario" ));
			SendClientMessage( playerid, COLOR_AMARELO, gStr );

			SendClientMessage( playerid, COLOR_ERRO, "[ PRISÃO ] Você não cumpriu sua pena, fique preso ate acabar o tempo !" );
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você não pode continuar da sua última posição salva, você está preso(a)." );

			SetPrisao( playerid );
			SetColor( playerid );
			getarVIP( playerid );
			ultimoLogin( playerid );
			PCar_PlayerConnect( playerid );

			if( dini_Int( f( playerid ), "msglucro" ) == 1 )
			{
				msglucrooff( playerid, dini_Int( f( playerid ), "Contratado" ));
			}

			GangZoneShowForPlayer( playerid, AreasGZServer[ 0 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 1 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 2 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 3 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 4 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 5 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 6 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 7 ], 0x00000055 );
			GangZoneShowForPlayer( playerid, AreasGZServer[ 8 ], 0x00000055 );
		}
		if( pInfo[ playerid ][ procMorto ] == true )
		{
		    Prender( playerid );
		    pInfo[ playerid ][ procMorto ] = false;
		}
		if( pInfo[ playerid ][ Preso ] > 0 )
		{
		    Prender( playerid );
		}
	}
	/* Verificação so Relógio UP */
	if( pInfo[ playerid ][ R_UP_ON_OFF ] == 1 )
	{
		TextDrawShowForPlayer( playerid, TextLevelUP[ playerid ] );
	}
	else if( pInfo[ playerid ][ R_UP_ON_OFF ] == 0 )
	{
 		TextDrawHideForPlayer( playerid, TextLevelUP[ playerid ] );
	}
	citylocal_textplayer_update( playerid );
	/* Text Drawn */
	TextDrawShowForPlayer( playerid, InfoPlayer[ playerid ] );
	TextDrawHideForPlayer( playerid, BPO_Games );
//	TextDrawHideForPlayer( playerid, Viva_Vida );
	TextDrawHideForPlayer( playerid, Flash );
	TextDrawShowForPlayer( playerid, Relogio );
	TextDrawShowForPlayer( playerid, Data );
	TextDrawShowForPlayer( playerid, InfoSite );
	TextDrawShowForPlayer( playerid, statsShop );
	SetarItensPlayer( playerid );
	/* Limpar Variável Duelo */
	ArenaDuelo[ playerid ] = false;
	ClickMause[ playerid ] = 0;
	SetPlayerCheckPoint[ playerid ] = 0;
	ParticipandoEvento[ playerid ] = 0;
	SetCameraBehindPlayer( playerid );
 // Setar skin de cada profissão
	if( pInfo[ playerid ][ fardado ] == 1 )
	{
		if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
		{
			SetPlayerSkin( playerid, 286 );
		}
		if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
		{
			SetPlayerSkin( playerid, 280 );
		}
		if( pInfo[ playerid ][ Prof ] == BOPE )
		{
			SetPlayerSkin( playerid, 285 );
		}
		if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
		{
			SetPlayerSkin( playerid, 282 );
		}
		if( pInfo[ playerid ][ Prof ] == MARINHA )
		{
			SetPlayerSkin( playerid, 281 );
		}
		if( pInfo[ playerid ][ Prof ] == DELEGADO )
		{
			SetPlayerSkin( playerid, 283 );
		}
		if( pInfo[ playerid ][ Prof ] == EXERCITO )
		{
			SetPlayerSkin( playerid, 287 );
		}
		if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
		{
			SetPlayerSkin( playerid, 288 );
		}
		if( pInfo[ playerid ][ Prof ] == JUIZ )
		{
			SetPlayerSkin( playerid, 281 );
		}
	}
 	else
 	{
		new
	 		getSkin = dini_Int( f( playerid ), "Skin" )
 		;
		if( !SkinValida( getSkin ))
	 	{
	 	    SetPlayerSkin( playerid, getSkin );
	 	}
	 	else
	 	{
			if( pInfo[ playerid ][ PLAYER_VIP ] == 1 || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
		 	{
		 	    SetPlayerSkin( playerid, getSkin );
		 	}
			else
			{
				if( pInfo[ playerid ][ PLAYER_VIP ] == 0 || aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 || aInfo[ playerid ][ Moderador ] == 0 )
		 		{
			 	    if( pInfo[ playerid ][ Sexo ] == 1 )
			 	    {
			 	    	SetPlayerSkin( playerid, 0 );
					}
	   				if( pInfo[ playerid ][ Sexo ] == 2 )
			        {
			            SetPlayerSkin( playerid, 10 );
			        }
		 		}
			}
		}
	}
 	if( gelarSpawn[ playerid ] == false )
 	{
		TogglePlayerControllable( playerid, true );
	}
 	PlayerPlaySound( playerid, 1184, 0, 0.0, 0.0 );
	return 1;
}

public OnPlayerDeath( playerid, killerid, reason )
{
	if( pdeaths[ playerid ] == 0 )
	{
        death[ playerid ] = gettime();
        pdeaths[ playerid ] = 1;
    }
	else if( pdeaths[ playerid ] == 1 )
	{
        new
			time = gettime() - death[ playerid ]
		;
        if( time < 2 )
		{
            BanEx( playerid, "Fake Kill" );
        }
		else
		{
			pdeaths[ playerid ] = 0;
		}
    }
    TextDrawHideForPlayer( playerid, Data );
    TextDrawHideForPlayer( playerid, Relogio );
    TextDrawHideForPlayer( playerid, Zones[ playerid ] );
    TextDrawHideForPlayer( playerid, Flash );
    TextDrawHideForPlayer( playerid, statsShop );
	SendDeathMessage( killerid, playerid, reason );
	if( dini_Int( f( playerid ), "Seguro" ) == 0 && pInfo[ playerid ][ Level ] > 10 )
    {
        sResetPlayerCash( playerid );
    }
	if( killerid == INVALID_PLAYER_ID )
	{
		if( ArenaDuelo[ playerid ] == true )
		{
			format( gStr, sizeof( gStr ), "( ANTI - DM ) › %s se suicidou na arena de duelos ( Arena de Duelos DM Liberado ).", PlayerName( playerid ));
			SendClientMessageToAll( -1, gStr );
			pInfo[ playerid ][ Hosp ] = 4;
			DentroDuelo = 0;
			IDX1 = -1;
			foreach(Player, i )
			{
				if( ArenaDuelo[ i ] == true )
				{
					SetPlayerPos( i, 2188.9343, -1081.6875, 43.8327 );
					SetPlayerFacingAngle( i, 2.1799 );
					SetCameraBehindPlayer( i );
					ArenaDuelo[ i ] = false;
					TogglePlayerControllable( i, true );
					SetPlayerHealth( playerid, LifeDuelo[ i ] );
				}
			}
		}
	}
	if( ArenaDuelo[ playerid ] == true || EventoDM == true || IsPlayerInPlace( killerid, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) || // Favela
	GetPlayerZone( killerid ) != -1 ) // GZ
	{
		pInfo[ killerid ][ fMatou ] += 1;
		pInfo[ playerid ][ fMorreu ] += 1;
	    if( !IsPlayerInPlace( killerid, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) && !IsPlayerInPlace( playerid, 2059.889648, -1158.775512, 2299.889648, -958.775512 ))
	    {
			if( ArenaDuelo[ playerid ] == true )
			{
				if( ArenaDuelo[ playerid ] == true && ArenaDuelo[ killerid ] == true )
				{
					new
						Float:vida, HP
					;
					GetPlayerHealth( killerid, vida );
					HP = floatround( vida, floatround_round );
					format( s5Doze, sizeof( s5Doze ), "( ANTI - DM ) › %s matou %s com %d de vida e não foi preso(a) por estar ( Arena de Duelos DM Liberado ).", PlayerName( killerid ), PlayerName( playerid ), HP );
					SendClientMessageToAll( -1, s5Doze );
				    ArenaDuelo[ playerid ] = false;
				    ArenaDuelo[ killerid ] = false;
				    pInfo[ playerid ][ Hosp ] = 7;
			 		SetPlayerPos( killerid, 2188.9343, -1081.6875, 43.8327 );
					SetCameraBehindPlayer( killerid );
					ResetPlayerWeapons( playerid );
					ResetPlayerWeapons( killerid );
					DentroDuelo = 0;
					IDX1 = -1;
					return 1;
				}
			}
		}
		else
		{
			pInfo[ playerid ][ Hosp ] = 7;
			if( pInfo[ killerid ][ Prof ] == ATIRADOR )
			{
			    SendClientMessage( killerid, COLOR_AMARELO, "[ > ] Você ganhou mais $40 !" );
			    sGivePlayerCash( killerid, 40 );
			}
		}
	}
	else
	{
		if( killerid != INVALID_PLAYER_ID )
		{
			if( pInfo[ killerid ][ Prof ] == ASSASSINO || getArmaTarfic( playerid, killerid ) || esDM[ evdmCriado ] == 1 && epDM[ playerid ][ dmParticipando ] == 1 && epDM[ killerid ][ dmParticipando ] == 1 )
			{
			    if( pInfo[ killerid ][ Prof ] == ASSASSINO && epDM[ killerid ][ dmParticipando ] == 0 )
			    {
				    SetPlayerWantedLevel( killerid, GetPlayerWantedLevel( killerid ) + 1 );
		   			format( gStr, sizeof( gStr ), "[ > ] › O(A) assasino(a) %s matou %s e não foi preso, agora está sendo procurado pela policia !", PlayerName( killerid ), PlayerName( playerid ));
					SendClientMessageToAll( 0xFFFFFFAA, gStr );
					if( GetPlayerWantedLevel( killerid ) > 6 )
					{
					    SetPlayerWantedLevel( killerid, 6 );
					}
				}
				if( epDM[ playerid ][ dmParticipando ] == 1  )
				{
					pInfo[ playerid ][ Hosp ] = 9;
				}
				if(( esDM[ evdmCriado ] == 1 ) && ( epDM[ playerid ][ dmParticipando ] == 1 ) && ( epDM[ killerid ][ dmParticipando ] == 1 ))
       			{
			    	epDM[ killerid ][ dm_Matou ] += 1;
			        epDM[ playerid ][ dm_Morreu ] += 1;
			  		format( gStr, 128, "~n~~n~~y~~h~Morreu para~w~~h~%s~n~seu frag~n~~w~Matou ~r~%d ~w~Morreu ~y~%d", PlayerName( killerid ), epDM[ playerid ][ dm_Matou ], epDM[ playerid ][ dm_Morreu ] );
					GameTextForPlayer( playerid, gStr, 3000, 5 );
					format( gStr, 128, "~n~~n~~n~~y~~h~Matou ~w~~h~%s~n~seu frag~n~~w~Matou ~r~%d ~w~Morreu ~y~%d", PlayerName( playerid ), epDM[ killerid ][ dm_Matou ], epDM[ killerid ][ dm_Morreu ] );
					GameTextForPlayer( killerid, gStr, 2000, 5 );
					TogglePlayerSpectating( playerid, true );
					PlayerSpectatePlayer( playerid, killerid );
					SetTimerEx( "PlayerSpectatingFalse", 3000, false, "d", playerid );
			    }
			}
 			else
			{
   				if( pInfo[ killerid ][ Preso ] > 0 )
			    {
					SendClientMessage( killerid, COLOR_ERRO, "[ x ] Você matou um jogador que está fora da sela !" );
					SendClientMessage( killerid, COLOR_ERRO, "[ x ] Punição: + 5 minutos foi adicionado para você ficar preso !" );
					pInfo[ killerid ][ Preso ] = pInfo[ killerid ][ Preso ] + 300;
			    }
			    else
			    {
			        if( modoP == 0 )
			        {
			            new
			                p = GetPlayerWantedLevel( playerid )
						;
			            if( getPolicial( killerid ) && pInfo[ killerid ][ fardado ] == 1 && p > 0 )
			            {
			            	format( gstring, sizeof( gstring ), "› Policial %s(%d) matou e prendeu %s(%d) que estava sendo procurado(a) !", PlayerName( killerid ), killerid, PlayerName( playerid ), playerid );
							SendClientMessageToAll( 0xFFFFFFAA, gstring );
               				pInfo[ playerid ][ procMorto ] = true;
						}
                        if( getPolicial( killerid ) && pInfo[ killerid ][ fardado ] == 0 || getPolicial( killerid ) && pInfo[ killerid ][ fardado ] == 1 && p <= 0 || !getPolicial( killerid ))
                        {
	                        SetPlayerWantedLevel( killerid, GetPlayerWantedLevel( killerid ) + 1 );
		           			if( GetPlayerWantedLevel( killerid ) > 6 )
							{
           SetPlayerWantedLevel( killerid, 6 );
							}
							format( gStr, sizeof( gStr ), "( ANTI - DM ) › %s foi preso(a) por matar fora da área de DM !", PlayerName( killerid ));
							SendClientMessageToAll( 0xFFFFFFAA, gStr );
							pInfo[ killerid ][ fMatou ] -= 1;
							Prender( killerid );
						}
					}
				}
			}
		}
	}
	if( ArenaDuelo[ playerid ] == true || IsPlayerInPlace( playerid, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) || epDM[ playerid ][ dmParticipando ] == 1 )
	{
	    if( ArenaDuelo[ playerid ] == true || IsPlayerInPlace( playerid, 2059.889648, -1158.775512, 2299.889648, -958.775512 ))
	    {
			pInfo[ playerid ][ Hosp ] = 7; // Spawn Favela
		}
		if( epDM[ playerid ][ dmParticipando ] == 1 )
		{
		    pInfo[ playerid ][ Hosp ] = 9;
		}
	}
	else
	{
		if( GetPlayerHospital( playerid ) == 0 )
		{
			pInfo[ playerid ][ Hosp ] = 0; SetHospital( playerid );
		}
		else if( GetPlayerHospital( playerid ) == 1 )
		{
			pInfo[ playerid ][ Hosp ] = 1; SetHospital( playerid );
		}
		else if( GetPlayerHospital( playerid ) == 2 )
		{
			pInfo[ playerid ][ Hosp ] = 2; SetHospital( playerid );
		}
		else if( GetPlayerHospital( playerid ) == 3 )
		{
			pInfo[ playerid ][ Hosp ] = 3; SetHospital( playerid );
		}
		else if( GetPlayerHospital( playerid ) == 4 )
		{
			pInfo[ playerid ][ Hosp ] = 4; SetHospital( playerid );
		}
 		else if( GetPlayerHospital( playerid ) == 5 )
		{
			pInfo[ playerid ][ Hosp ] = 5; SetHospital( playerid );
		}
 		else if( GetPlayerHospital( playerid ) == 6 )
		{
			pInfo[ playerid ][ Hosp ] = 6; SetHospital( playerid );
		}
	}
	//--
	if( GPS[ playerid ] )
	{
		KillTimer( T_GPS[ playerid ] );
		GPS[ playerid ] = false;
		T_GPS[ playerid ] = 0;
	}
	ResetPlayerWeapons( playerid );
	if( epDM[ playerid ][ dmParticipando ] == 0 )
    {
		GameTextForPlayer( playerid, "~w~Morreu", 1000, 0 );
	}
	pHospital[ playerid ] = gettime() + 15;
	return 1;
}

forward PlayerSpectatingFalse( playerid );
public PlayerSpectatingFalse( playerid )
{
	TogglePlayerSpectating( playerid, false );
	return SpawnPlayer( playerid );
}

stock SetHospital( playerid )
{
	if( pInfo[ playerid ][ PLAYER_VIP ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Moderador ] != 1 && epDM[ playerid ][ dmParticipando ] == 0 )
	{
		TogglePlayerControllable( playerid, false );
		SetPlayerPos( playerid, 1183.4017,-1297.4088,14.2143 );
		SetPlayerCameraPos( playerid, 1197.5721,-1325.6716,26.9214 );
		SetPlayerCameraLookAt( playerid, 1177.6808,-1324.3663,14.0827 );
		CountTimerHospital[ playerid ] = SetTimerEx( "HospitalCountdown", 1000, false, "d", playerid );
		CountHospital[ playerid ] = 10;
	}
}

forward HospitalCountdown( playerid );
public HospitalCountdown( playerid )
{
    format( gstring, sizeof( gstring ), "~w~~h~Hospital~n~~y~~h~Voce esta sendo tratado~n~~w~~h~Aguarde...%d", CountHospital[ playerid ] );
    GameTextForPlayer( playerid, gstring, 1500, 3 );

    if( CountHospital[ playerid ] <= 0 )
    {
        SendClientMessage( playerid, COLOR_AMARELO, "( Hospital ) Você se recuperou e agora pode voltar à jogar." );
		SetPlayerHealth( playerid, 100.0 );
		SetCameraBehindPlayer( playerid );
		TogglePlayerControllable( playerid, true );
    }
    if( CountHospital[ playerid ] > 0 )
    {
        CountHospital[ playerid ] --;
        CountTimerHospital[ playerid ] = SetTimerEx( "HospitalCountdown", 1000, false, "d", playerid );
	}
	return 1;
}

public OnVehicleSpawn( vehicleid )
{
    vHouse[ vehicleid ] = 0;
	if( IsACar( vehicleid ))
	{
		for( new c; c < sizeof( cInfo ); ++c )
		{
			if( vehicleid == cInfo[ c ][ HouseCar ] )
			{
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Nitro ] != -1 && cInfo[ CasaInfo[ c ][ Numero ] ][ t_Nitro ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Nitro ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Nitro ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Roda ] != -1 && cInfo[ CasaInfo[ c ][ Numero ] ][ t_Roda ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Roda ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Roda ] );
			    	}
			    }
	   			if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Spoiler ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Spoiler ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Spoiler ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Spoiler ] );
			    	}
				}
			    if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Hydraulico ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Hydraulico ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Hydraulico ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Hydraulico ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueDianteiro ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueDianteiro ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueDianteiro ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueDianteiro ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueTraseiro ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueTraseiro ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueTraseiro ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueTraseiro ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Escapamento ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Escapamento ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Escapamento ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Escapamento ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventr ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventr ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventr ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventr ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventl ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventl ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventl ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventl ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bscoop ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bscoop ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bscoop ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bscoop ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rscoop ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rscoop ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rscoop ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rscoop ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lskirt ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lskirt ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lskirt ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lskirt ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rskirt ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rskirt ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rskirt ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rskirt ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Base ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Base ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Base ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Base ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rbbars ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rbbars ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rbbars ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rbbars ] );
					}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Fbbars ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Fbbars ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Fbbars ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Fbbars ] );
			    	}
				}
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lights ] != -1 || cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lights ] != 0 )
				{
				    if( IsVehicleUpgradeCompatible( GetVehicleModel( vehicleid ), cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lights ] ))
				    {
			    		AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lights ] );
			    	}
				}
				/**/
				if( cInfo[ CasaInfo[ c ][ Numero ] ][ t_PaintJob ] != -1 )
				{
			    	AddVehicleComponent( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_PaintJob ] );
			    }
			    ChangeVehicleColor( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_1 ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_2 ] );
                ChangeVehiclePaintjob( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], cInfo[ CasaInfo[ c ][ Numero ] ][ t_PaintJob ] );
				vHouse[ cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ] ] = 1;
			    break;
			}
		}
	}
	for( new i = 0; i < 6; i++ )
	{
	    if( vehicleid == vDrifter[ i ] )
	    {
	    	new
				Jobv0 = random( 3 ),
				Jobv1 = random( 3 ),
				Jobv2 = random( 3 ),
				Jobv3 = random( 3 ),
				Jobv4 = random( 3 ),
				Jobv5 = random( 3 )
			;
			AddVehicleComponent( vDrifter[ 0 ], 1010 );
			AddVehicleComponent( vDrifter[ 0 ], 1079 );
			ChangeVehiclePaintjob( vDrifter[ 0 ], Jobv0 );
			SetVehicleNumberPlate( vDrifter[ 0 ], "WW-Drifter" );
			AddVehicleComponent( vDrifter[ 1 ], 1010 );
			AddVehicleComponent( vDrifter[ 1 ], 1079 );
			ChangeVehiclePaintjob( vDrifter[ 1 ], Jobv1 );
			SetVehicleNumberPlate( vDrifter[ 1 ], "WW-Drifter" );
			AddVehicleComponent( vDrifter[ 2 ], 1010 );
			AddVehicleComponent( vDrifter[ 2 ], 1079 );
			ChangeVehiclePaintjob( vDrifter[ 2 ], Jobv2 );
			SetVehicleNumberPlate( vDrifter[ 2 ], "WW-Drifter" );
			AddVehicleComponent( vDrifter[ 3 ], 1010 );
			AddVehicleComponent( vDrifter[ 3 ], 1079 );
			ChangeVehiclePaintjob( vDrifter[ 3 ], Jobv3 );
			SetVehicleNumberPlate( vDrifter[ 3 ], "WW-Drifter" );
			AddVehicleComponent( vDrifter[ 4 ], 1010 );
			AddVehicleComponent( vDrifter[ 4 ], 1079 );
			ChangeVehiclePaintjob( vDrifter[ 4 ], Jobv4 );
			SetVehicleNumberPlate( vDrifter[ 4 ], "WW-Drifter" );
			AddVehicleComponent( vDrifter[ 5 ], 1010 );
			AddVehicleComponent( vDrifter[ 5 ], 1079 );
			ChangeVehiclePaintjob( vDrifter[ 5 ], Jobv5 );
			SetVehicleNumberPlate( vDrifter[ 5 ], "WW-Drifter" );
		}
	}
	SetVehicleNumberPlate( vehicleid, "BPO" ); // Nomes nas placas dos carros
	return 1;
}

public OnVehicleDeath(vehicleid)
{
	new Float:P[3]; GetVehiclePos(vehicleid, P[0], P[1], P[2]);
	if(P[2] <= 0.4) return true; //Water Exception.. (added later)

	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
		case PLANES: return true;
		case HELIS: return true;
		default:
		{
			new
			ht = random(EFFECT_RANDOM),
			xang = random(EFFECT_RANDOM)-EFFECT_FIX_DEFAULT,
			yang = random(EFFECT_RANDOM)-EFFECT_FIX_DEFAULT,
			zang = random(EFFECT_RANDOM)
			;
			GetVehiclePos(vehicleid, P[0], P[1], P[2]);
			CreateExplosion(P[0], P[1], P[2]+EFFECT_EXPLOSIONOFFSET, EFFECT_EXPLOSIONTYPE, EFFECT_EXPLOSIONRADIUS);
			SetVehicleAngularVelocity(vehicleid, xang*EFFECT_MULTIPLIER, yang*EFFECT_MULTIPLIER, zang*EFFECT_FIX_Z);
			GetVehicleVelocity(vehicleid, P[0], P[1], P[2]);
			SetVehicleVelocity(vehicleid, P[0], P[1], P[2] + (ht*EFFECT_FIX_Z) );
		}
	}
	estCamB[ vehicleid ] = 0;
	return 1;
}
public OnPlayerText( playerid, text[ ] )
{
	if( floodChat[ playerid ] > gettime())
	{
		if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sem (flood/spam) no chat por favor !" );
			return 0;
		}
	}
	floodChat[ playerid ] = gettime() + 2;
	TempoAFK[ playerid ] = 0;  // Preso

	/*	if( pInfo[ playerid ][ Preso ] > 1 )  // Para proibir os presos de falar é so ativar este comando
	{
		SendClientMessage( playerid, COLOR_ERRO,  "[ x ] Você não pode falar no chat enquanto está preso !" );
		return 0;
	}*/
	if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 )
	{
		if( strlen( text ) == strlen( digitouChat[ playerid ] ) && !strcmp( digitouChat[ playerid ], text, false ))
		{
			SendClientMessage( playerid, 0x93B800FF, "[ ANTI FLOOD ] Por favor não repita a mesma mensagem 2 ou mais vezes !" );
			return 0;
		}
	}
	if( pInfo[ playerid ][ Logado ] == false )
	{
		SendClientMessage( playerid, COLOR_AZULCLARO, "[ x ] Você não está logado portando não pode usar o chat !" );
		return 0;
	}
	if( ChatStatus == 1  ) /* && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && text[ 0 ] != '#' && text[ 0 ] != '!' */
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O chat está desativado !" );
		return 0;
	}
	if( pInfo[ playerid ][ AFK ] == true )
	{
		SendClientMessage( playerid, COLOR_AZULCLARO, "[ x ] Você não pode usar o chat enquanto está AFK !" );
		return 0;
	}
	if( Calado[ playerid ] == true )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está calado e não pode falar nada !" );
		return 0;
	} // Palavras Proibidas - // boot
	if( strfind( text, "IPDOSERVIDOR", true ) != -1 || strfind( text, "IP DO SERVIDOR", true ) != -1 )
	{
		format( gstring, sizeof( gstring ),"{37CA3A}[ BPO ] CASTIEL:{FFFFFF} kickou o jogador(a) %s - {F90C14}MOTIVO:{FFFFFF} Suspeita de estar divulgando um IP !", PlayerName( playerid ));
		SendClientMessageToAll( COLOR_BRANCO, gstring );
		return Kick( playerid ), 0;
	}
	if( strfind( text, "www", true ) != -1 || strfind( text, "w w w", true ) != -1 || strfind( text, ".com", true ) != -1 || strfind( text, "c o m", true ) != -1 || strfind( text, ".br", true ) != -1 )
	{
		format( gstring, sizeof( gstring ),"{37CA3A}[ BPO ] CASTIEL:{FFFFFF} kickou o jogador(a) %s - {F90C14}MOTIVO:{FFFFFF} Suspeita de estar divulgando um site !", PlayerName( playerid ));
		SendClientMessageToAll( COLOR_BRANCO, gstring );
		return Kick( playerid ), 0;
	}
/*	// EVENTO
	if( strfind( text, "BRASIL", true ) != -1 )
	{
		format( gstring, sizeof( gstring ),"{37CA3A}EVENTO:{FFFFFF} O jogador(a) {F90C14}%s{FFFFFF} acaba de achar uma das palavras SECRETAS ! Que era: {006EFF}BRASIL{FFFFFF}", PlayerName( playerid ));
		SendClientMessageToAll( COLOR_BRANCO, gstring );
	} */
	new
	tmp[ 128 ]
	;
	// -- ANUNCIOS ADMINS
	if( text[ 0 ] == '@' )
	{
		if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
		{
			strmid( tmp, text, 1, strlen( text ));
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: @ [ Mensagem ]" );
				return 1;
			}
			else
			{
				if( aInfo[ playerid ][ Dono ] == 1 )
				{
					format( gStr, sizeof( gStr ), "( Dono ) %s: %s", PlayerName( playerid ), tmp );
					SendClientMessageToAll( 0x2587CEAA, gStr );
				}
				if( aInfo[ playerid ][ Admin ] == 1 )
				{
					format( gStr, sizeof( gStr ), "( ADM ) %s: %s", PlayerName( playerid ), tmp );
					SendClientMessageToAll( 0x2587CEAA, gStr );
				}
				else if( aInfo[ playerid ][ Moderador ] == 1 )
				{
					format( gStr, sizeof( gStr ), "( Moderador ) %s diz: %s", PlayerName( playerid ), tmp );
					SendClientMessageToAll( 0x2587CEAA, gStr );
				}
				if( aInfo[ playerid ][ Ajudante ] == 1 )
				{
					format( gStr, sizeof( gStr ), "( Ajudante ) %s: %s", PlayerName( playerid ), tmp );
					SendClientMessageToAll( 0x2587CEAA, gStr );
				}
				return 0;
			}
		}
	}
	if( text[ 0 ] == '-' )  // Chat -
	{
		if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo [ playerid ] [ Moderador ] || aInfo [ playerid ] [ Ajudante ] )
		{
			strmid( tmp, text, 1, strlen( text ));
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: - [ Mensagem ]" );
				return 1;
			}
			else
			{
				format( gstring, sizeof( gstring ), "~y~~h~%s", tmp );
				GameTextForAll( gstring, 5000, 3 );
			}
			return 0;
		}
	} // Chat Clan
	if( text[ 0 ] == '!' )
	{
		if( strcmp( playerClan[ playerid ], "Nenhum", false ))
		{
			strmid( tmp, text, 1, strlen( text ));
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: ! [ Mensagem ]" );
			}
			else
			{
				foreach(Player, i)
				{
					if( strcmp( playerClan[ i ], "Nenhum", false ))
					{
						if( !strcmp( playerClan[ i ], playerClan[ playerid ], true ))
						{
							format( gstring, sizeof( gstring ), "( C/C ) %s: %s", PlayerName( playerid ), tmp );
							SendClientMessage( i, SetZonaCorClan( clanColor[ playerid ] ), gstring );
						}
						if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 || aInfo[ playerid ][ Moderador ] == 0 )
						{
							if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
							{
								if( vercmds[ i ] == 1 )
								{
									format( gstring, sizeof( gstring ), "• %s • ID: %d • Disse: %s", PlayerName( playerid ), playerid, tmp );
									SendClientMessage( i, 0x00FFCCAA, gstring );
								}
							}
						}
					}
				}
			}
			return 0;
		}
	}
	// CHAT VIP
	if( text[ 0 ] == '.' )
	{
		if( pInfo[ playerid ][ PLAYER_VIP ] == 1 )
		{
			strmid( tmp, text, 1, strlen( text ));
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: . [ Mensagem ]" );
			}
			foreach(Player, i)
			{
				if( pInfo[ i ][ PLAYER_VIP ] == 1 )
				{
					format( gstring, sizeof( gstring ), "%s: {D118EA}%s", PlayerName( playerid ),  tmp );
					SendClientMessage( i, 0xFFFFFFAA, gstring );
				}
			}
			return 0;
		}
	}
	// -- CHAT DE ADMIN
	if( text[ 0 ] == '#' )
	{
	 	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	  	{
			strmid( tmp, text, 1, strlen( text ));
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: # [ Mensagem ]" );
			}
			else
			{
			    foreach(Player, i)
			    {
				    if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 || aInfo[ i ][ Ajudante ] == 1 )
					{
						format( gStr, sizeof( gStr ), "( C/A ) %s [ %d ]: %s", PlayerName( playerid ), playerid, tmp );
						SendClientMessage( i, 0xFF99FFAA, gStr );
				    }
				}
	        }
	        return 0;
	    }
	 }
	// -- MODO DE CHAT -- GLOBAL OU PRÓXIMO // CHAT GLOBAL
	foreach(Player, i)
	{
		if( pInfo[ i ][ Logado ] == true )
		{
			if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			{
				strmid( tmp, text, 0, strlen( text ));
				if( strlen( tmp ) > 65 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Mensagem muito grande !" );
					return 0;
				}
				else
				{
	   				new
						Float:chatX, Float:chatY, Float:chatZ
					;
					GetPlayerPos( playerid, chatX, chatY, chatZ );

	            	if( IsPlayerInRangeOfPoint( i, 15.0, chatX, chatY, chatZ ) || aInfo[ i ][ Dono ] == 1 && pInfo[ i ][ vchat ] == 1 || aInfo[ i ][ Admin ] == 1 && pInfo[ i ][ vchat ] == 1 || aInfo[ i ][ Moderador ] == 1 && pInfo[ i ][ vchat ] == 1 || aInfo[ i ][ Ajudante ] == 1 && pInfo[ i ][ vchat ] == 1 )
					{
						format( gstring, sizeof( gstring ), "• [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
					if( pInfo[ playerid ][ Level ] < 4 && aInfo[ i ][ Dono ] == 1 || pInfo[ playerid ][ Level ] < 4 && aInfo[ i ][ Admin ] == 1 || pInfo[ playerid ][ Level ] < 4 && aInfo[ i ][ Moderador ] == 1 || pInfo[ playerid ][ Level ] < 4 && aInfo[ i ][ Ajudante ] == 1 )
					{
						format( gstring, sizeof( gstring ), "• ( N ) [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
					if( pInfo[ playerid ][ Level ] > 4 && aInfo[ i ][ Dono ] == 1 && pInfo[ i ][ vchat2 ] == 1 || aInfo[ i ][ Admin ] == 1 && pInfo[ i ][ vchat2 ] == 1 || aInfo[ i ][ Moderador ] == 1 && pInfo[ i ][ vchat2 ] == 1 || aInfo[ i ][ Ajudante ] == 1 && pInfo[ i ][ vchat2 ] == 1 )
					{
						format( gstring, sizeof( gstring ), "• [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
			 	}
			}
			else
			{
				new  // Como aparece em frente ao nome quando fala
				Float:chatX, Float:chatY, Float:chatZ
				;
				GetPlayerPos( playerid, chatX, chatY, chatZ );

				if( aInfo[ playerid ][ Dono ] == 1 )
				{
					strmid( tmp, text, 0, strlen( text ));
					format( gstring, sizeof( gstring ), "Dono [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );

					if( pInfo[ playerid ][ chat ] == 0 )
					{
						if( IsPlayerInRangeOfPoint( i, 15.0, chatX, chatY, chatZ ))
						{
							SendClientMessage( i, GetPlayerColor( playerid ), gstring );
						}
					}
					if( pInfo[ playerid ][ chat ] == 1 )
					{
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
				}
				if( aInfo[ playerid ][ Admin ] == 1 )
				{
					strmid( tmp, text, 0, strlen( text ));
					format( gstring, sizeof( gstring ), "ADM [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );

					if( pInfo[ playerid ][ chat ] == 0 )
					{
						if( IsPlayerInRangeOfPoint( i, 15.0, chatX, chatY, chatZ ))
						{
							SendClientMessage( i, GetPlayerColor( playerid ), gstring );
						}
					}
					if( pInfo[ playerid ][ chat ] == 1 )
					{
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
				}
				if( aInfo[ playerid ][ Moderador ] == 1 )
				{
					strmid( tmp, text, 0, strlen( text ));
					format( gstring, sizeof( gstring ), "MOD [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );

					if( pInfo[ playerid ][ chat ] == 0 )
					{
						if( IsPlayerInRangeOfPoint( i, 15.0, chatX, chatY, chatZ ))
						{
							SendClientMessage( i, GetPlayerColor( playerid ), gstring );
						}
					}
					if( pInfo[ playerid ][ chat ] == 1 )
					{
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
				}
				if( aInfo[ playerid ][ Ajudante ] == 1 )
				{
					strmid( tmp, text, 0, strlen( text ));
					format( gstring, sizeof( gstring ), "AJD [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );

					if( pInfo[ playerid ][ chat ] == 0 )
					{
						if( IsPlayerInRangeOfPoint( i, 15.0, chatX, chatY, chatZ ))
						{
							SendClientMessage( i, GetPlayerColor( playerid ), gstring );
						}
					}
					if( pInfo[ playerid ][ chat ] == 1 )
					{
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
				}
				if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && aInfo[ playerid ][ Admin ] == 0 )
				{
					strmid( tmp, text, 0, strlen( text ));
					format( gstring, sizeof( gstring ), "• [ VIP ] [ %d ] %s{FFFFFF}  %s", playerid, PlayerName( playerid ), tmp );

					if( IsPlayerInRangeOfPoint( i, 15.0, chatX, chatY, chatZ ))
					{
						SendClientMessage( i, GetPlayerColor( playerid ), gstring );
					}
				}
			}
		}
	}
	format( digitouChat[ playerid ], 128, "%s", text );
	return 0;
}

public OnPlayerCommandText( playerid, cmdtext[ ] )
{
if( floodCMD[ playerid ][ 0 ] > gettime() && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
{
	if( floodCMD[ playerid ][ 1 ] >= 3 )
	{
		format( gStr, 128, "[ x ] Você poderá usar comandos daqui %d segundos !", floodCMD[ playerid ][ 0 ] - gettime());
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está calado(a) por (flood/spam) feito no chat !" );
		return 1;
	}
	if( floodCMD[ playerid ][ 1 ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sem (flood/spam) de comandos ! (1° Aviso de 3)" );
		floodCMD[ playerid ][ 1 ] = 1;
		floodCMD[ playerid ][ 0 ] = gettime() + 2;
		return 1;
	}
	if( floodCMD[ playerid ][ 1 ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sem (flood/spam) de comandos ! (2° Aviso de 3)" );
		floodCMD[ playerid ][ 1 ] = 2;
		floodCMD[ playerid ][ 0 ] = gettime() + 3;
		return 1;
	}
	if( floodCMD[ playerid ][ 1 ] == 2 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sem (flood/spam) de comandos ! (3° Aviso de 3)" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você excedeu o limite de avisos, fica sem usar comandos por 30 segundos !" );
		floodCMD[ playerid ][ 1 ] = 3;
		floodCMD[ playerid ][ 0 ] = gettime() + 30;
		return 1;
	}
}
floodCMD[ playerid ][ 0 ] = gettime() + 2;
floodCMD[ playerid ][ 1 ] = 0;
TempoAFK[ playerid ] = 0;

new
cmd[ 128 ], tmp[ 128 ], str[ 128 ], string[ 128 ], MSG[ 128 ],
giveplayerid, animeID, idx, sendername[ MAX_PLAYER_NAME ], giveplayer[ MAX_PLAYER_NAME ]
;
cmd = strtok( cmdtext, idx );

foreach(Player, i )
{
	if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
	{
		if( vercmds[ i ] == 1 )
		{
			if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 || aInfo[ playerid ][ Moderador ] == 0 )
			{
				format( gstring, sizeof( gstring ), "• %s • ID: %d • Digitou: %s", PlayerName( playerid ), playerid, cmdtext );
				SendClientMessage( i, 0x00CCCCAA, gstring );
			}
		}
	}
} // Preso
if( pInfo[ playerid ][ Preso ] > 0 && strcmp( cmdtext, "/cadvogados", true ) != 0 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 )
{
	SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode usar comandos preso ! ( Somente: /cAdvogados )" );
	return 1;
}
if( pInfo[ playerid ][ AFK ] == true && strcmp( cmd, "/sairafk", true ) != 0 )
{
	SendClientMessage( playerid, COLOR_AZULCLARO, "[ x ] Você não pode usar comandos enquanto está AFK !" );
	return 1;
}
if( ComandosStatus == 1 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 )
{
	SendClientMessage( playerid, COLOR_ERRO, "[ x ] Os comandos estão desativados !" );
	return 1;
} // boot - Comandos
if( strfind( cmdtext, "/sos mim da", true ) != -1 || strfind( cmdtext, "/sos me da", true ) != -1 || strfind( cmdtext, "/sos me puxa", true ) != -1 || strfind( cmdtext, "/sos me mata", true ) != -1 ) // palavras proibidas
{
	format( gstring, sizeof( gstring ),"{37CA3A}[ BPO ] CASTIEL:{FFFFFF} kickou o jogador(a) %s - {F90C14}MOTIVO:{FFFFFF} /SOS foi feito para pedir {006EFF}AJUDA{FFFFFF} !", PlayerName( playerid ));
	SendClientMessageToAll( COLOR_BRANCO, gstring );
	return Kick( playerid ), 1;
}
if( strfind( cmdtext, "/an servidor lixo", true ) != -1 || strfind( cmdtext, "/an server lixo", true ) != -1 || strfind( cmdtext, "/an serveridor lix0", true ) != -1 ||  strfind( cmdtext, "/an server lix0", true ) != -1 || strfind( cmdtext, "/an servidor bosta", true ) != -1 || strfind( cmdtext, "/an server bosta", true ) != -1 ) // palavras proibidas
{
	format( gstring, sizeof( gstring ),"{37CA3A}[ BPO ] CASTIEL:{FFFFFF} baniu o jogador(a) %s - {F90C14}MOTIVO:{FFFFFF} Tentou falar mal do servidor /an !", PlayerName( playerid ));
	SendClientMessageToAll( COLOR_BRANCO, gstring );
	dini_IntSet( gFile, "Banido", 1 );
	dini_IntSet( gFile, "MotivoBan", 3 );
	dini_IntSet( gFile, "BanidoPor", 66 );
	return Ban( playerid ), 1;
}
if( !strcmp( cmd, "/sos", true ) || !strcmp( cmd, "/help", true ))
{
	new
	gPM[ 128 ]
	;
	gPM = strrest( cmdtext, idx );
	if( !strlen( gPM ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: '/Help [ Mensagem ] ou '/Sos [ Mensagem ]'" );
		return 1;
	}
	if( Help[ playerid ] > gettime( ))
	{
		format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para solicitar novamente à Adminstração / Moderação !", Help[ playerid ] - gettime( ));
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	foreach(Player, i )
	{
		if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 || aInfo[ i ][ Ajudante ] == 1 )
		{
			MensagemFormatada( i, 0xFF0099AA, "[ AJUDA ] por %s [ %i ]: %s", PlayerName( playerid ), playerid, gPM );
			GameTextForPlayer( i, "~r~~h~AJUDA NOVATO!", 2000, 4 );
		}
	}
	SendClientMessage( playerid, COLOR_SISTEMA, "[ ~> ] Ajuda / Dúvida enviada, aguarde um(a) Adminstrador(a) ou Moderador(a) responder." );
	GameTextForPlayer( playerid, "~y~~h~PEDIDO DE AJUDA ENVIADO!", 5000, 4 );
	Help[ playerid ] = gettime( ) + 15;
	return 1;
}
if( !strcmp( cmd, "/par", true ) || !strcmp( cmd, "/ajudar", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		new
		gPM[ 128 ]
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: '/Ajudar [ ID ] [ Mensagem ] ou /Par [ ID ] [ Mensagem ]'." );
			return 1;
		}
		new
		id = strval( tmp )
		;
		gPM = strrest( cmdtext, idx );
		if( !strlen( gPM ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Par [ ID ] [ Mensagem ]" );
			return 1;
		}
		if( IsPlayerConnected( id ))
		{
			if( playerid != id )
			{
				foreach(Player, i )
				{

					if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 ) // Mensagem que aparece para os Administradores, quando um Administrador ajuda um player
					{
						format( gstring, sizeof( gstring ), "AJUDA: %s[ %d ] ajuda %s[ %d ] dizendo: %s", PlayerName( playerid ), playerid, PlayerName( id ), id, gPM );
						SendClientMessage( i, 0xC3FF62FF, gstring );
					}
				}
				GameTextForPlayer( playerid, "~w~AJUDA ENVIADA!", 2000, 4 );
				format( gstring, sizeof( gstring ), "AJUDA: %s[ %d ] diz: %s", PlayerName( playerid ), playerid, gPM );
				SendClientMessage( id, 0xC3FF62FF, gstring );
				GameTextForPlayer( id, "~y~RESPOSTA DE AJUDA!", 2000, 4 );
				PlayerPlaySound( id, 1085, 0.0, 0.0, 0.0 );
				Help[ id ] = gettime( );
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode ajudar você mesmo !" );
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		}
	}
	return 1;
}
if( !strcmp( cmd, "/sms", true ))
{
	if( aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
	{
		if( pInfo[ playerid ][ Celular ] != 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um celular !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Compre um celular na loja de utilitários !" );
			return 1;
		}
		else
		{
			if( pInfo[ playerid ][ AFK ] == true )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode enviar e receber SMS ausente(AFK) !" );
				return 1;
			}
			if( pInfo[ playerid ][ Celular_c ] <= 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem créditos de SMS !" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Compre créditos SMS para seu celular na loja de utilitários !" );
				return 1;
			}
		}
	}

	tmp = strtok( cmdtext, idx );

	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SMS [ ID ] [ Mensagem ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;

	if( id == playerid )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode enviar SMS para você mesmo(a) !" );
		return 1;
	}

	if( !IsPlayerConnected( id ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		return 1;
	}

	if( pInfo[ id ][ AFK ] == true )
	{
		format( gStr, sizeof( gStr ), "[ x ] O(A) jogador(a) {FFFFFF}%s {FF0000} está ausente(AFK) e não pode receber SMS !", PlayerName( id ));
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}

	if( PMBLOQUEADO[ id ] == 1 )
	{
		format( gStr, sizeof( gStr ), "[ x ] O(A) jogador(a) {FFFFFF}%s {FF0000} está bloqueado e não pode receber SMS !", PlayerName( id ));
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}

	if( pInfo[ id ][ Celular ] != 1 )
	{
		format( gStr, sizeof( gStr ), "[ x ] O(A) jogador(a) {FFFFFF}%s {FF0000} não tem celular !", PlayerName( id ));
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}

	new
	length = strlen( cmdtext )
	;
	while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
	{
		idx++;
	}
	new offset = idx;
	new result[ 64 ];
	while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )))
	{
		result[ idx - offset ] = cmdtext[ idx ];
		idx++;
	}
	result[ idx - offset ] = EOS;

	if( !strlen( result ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SMS [ ID ] [ Mensagem ]" );
		return 1;
	}
	if( strlen( tmp ) > 65 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] SMS muito grande, envie SMS de no máximo 65 caracteres !" );
		return 1;
	}
	if( aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
	{
		pInfo[ playerid ][ Celular_c ] --;
	}
	format( gstring, 256, "SMS(E) %s [%d]:{FFFFFF} %s", PlayerName( id ), id, result );
	SendClientMessage( playerid, 0xFFFF3CFF, gstring );
	GameTextForPlayer( playerid, "~y~~h~SMS ENVIADO!", 2000, 5 );
	PlayerPlaySound( playerid, 1084, 0.0, 0.0, 0.0 );

	format( gstring, 256, "SMS(R) %s [%d]:{FFFFFF} %s", PlayerName( playerid ), playerid, result );
	SendClientMessage( id, 0xCAFF86FF, gstring );
	GameTextForPlayer( id, "~n~~y~~h~SMS RECEBIDO!", 2000, 4 );
	PlayerPlaySound( id, 1085, 0.0, 0.0, 0.0 );

	return 1;
}
if( !strcmp( cmd, "/vips", true ))
{
	new v;
	SendClientMessage( playerid, COLOR_AMARELO, "x ~ Jogadores Vips ~ x" );
	foreach(Player, i )
	{
		if( pInfo[ i ][ PLAYER_VIP ] == 1 )
		{
			++v;
			format( gStr, sizeof( gStr ), "• %s [ ID: %d ]", PlayerName( i ), i );
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
		}
	}
	if( v <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ > ] Nennhum(a) jogador(a) vip online no momento." );
	}
	return 1;
}
if( !strcmp( cmd, "/procurados", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO ||
	pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || PlayerToPoint( 1.1, playerid, 249.5481, 67.6516, 1003.6406 ) || PlayerToPoint( 1.0, playerid, 251.9699, 117.4014, 1003.2188 ))
	{
		new p;
		SendClientMessage( playerid, COLOR_AZULCLARO, "x ~ Jogadores Procurados ~ x" );
		foreach(Player, i )
		{
			if( GetPlayerWantedLevel( i ) > 0 )
			{
				++p;
				format( gStr, sizeof( gStr ), "• %s [ %d ] - Nível de procurado: %d", PlayerName( i ), i, GetPlayerWantedLevel( i ));
				SendClientMessage( playerid, COLOR_BRANCO, gStr );
			}
		}
		if( p <= 0 ) return SendClientMessage( playerid, COLOR_AZULCLARO, "[ > ] Nennhum jogador sendo procurado no momento." );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) policial, para ver os jogadores procurados somente na delegacia !" );
	}
	return 1;
}
if( !strcmp( cmd, "/presos", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO ||
	pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || PlayerToPoint( 1.1, playerid, 249.5481, 67.6516, 1003.6406 ) || PlayerToPoint( 1.0, playerid, 251.9699, 117.4014, 1003.2188 ))
	{
		new p;
		SendClientMessage( playerid, COLOR_AZULCLARO, "x ~ Jogadores Presos ~ x" );
		foreach(Player, i )
		{
			if( pInfo[ i ][ Preso ] >= 1 )
			{
				++p;
				new
				d_Horas1,
				d_Minut1,
				d_Segun1
				;
				formatSeconds( pInfo[ i ][ Preso ], d_Horas1, d_Minut1, d_Segun1 );
				format( gStr, sizeof( gStr ), "• %s [ %d ] - Tempo: %d horas, %d minutos e %d segundos.", PlayerName( i ), i, d_Horas1, d_Minut1, d_Segun1 );
				SendClientMessage( playerid, COLOR_BRANCO, gStr );
			}
		}
		if( p <= 0 ) return SendClientMessage( playerid, COLOR_AZULCLARO, "[ > ] Nennhum jogador preso no momento." );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) policial, para ver os jogadores presos somente na delegacia !" );
	}
	return 1;
}
if( !strcmp( cmd, "/cAdvogados", true ))
{
	if( pInfo[ playerid ][ Preso ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está preso, portando não pode chamar os advogados !" );
		return 1;
	}
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	if( dini_Int( gFile, "SaldoBanco" ) < 5000 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $5000 no banco para poder chamar um advogado !" );
		return 1;
	}
	if( cAdvogadop[ playerid ] > gettime( ))
	{
		format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para solicitar novamente os(as) advogados(as) !", cAdvogadop[ playerid ] - gettime( ));
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	foreach(Player, i )
	{
		if( pInfo[ i ][ Prof ] == ADVOGADO || aInfo[ i ][ Admin ] == 1 )
		{
			format( gStr, sizeof( gStr ), "[ > ] %s ID %d, está precisando de um(a) advogado(a) para solta-lo(a) da prisão.", PlayerName( playerid ), playerid );
			SendClientMessage( i, COLOR_AMARELO, gStr );
		}
	}
	cAdvogadop[ playerid ] = gettime( ) + 15;
	return 1;
}
if( !strcmp( cmd, "/listaafk", true ))
{
	new a;
	SendClientMessage( playerid, COLOR_AZULCLARO, "x ~ Jogadores Ausentes ~ x" );
	foreach(Player, i )
	{
		if( pInfo[ i ][ AFK ] == true )
		{
			++a;
			format( gStr, sizeof( gStr ), "• %s [ %d ]", PlayerName( i ), i );
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
		}
	}
	if( a <= 0 ) return SendClientMessage( playerid, COLOR_AZULCLARO, "[ > ] Nennhum jogador ausente no momento." );
	return 1;
}
if( !strcmp( cmd, "/sairafk", true ))
{
	if( pInfo[ playerid ][ AFK ] == true )
	{
		SendClientMessage( playerid, COLOR_BRANCO, "( ANTI AFK ) Desbloqueado(a) !" );
		if( IsPlayerInAnyVehicle( playerid ))
		{
			TextDrawShowForPlayer( playerid, Velocidade[ playerid ] );
			TextDrawShowForPlayer( playerid, Gasolina[ playerid ] );
			TextDrawShowForPlayer( playerid, Modelo[ playerid ] );
		}
		TextDrawHideForPlayer( playerid, AFK1 );
		TextDrawHideForPlayer( playerid, AFK2 );
		pInfo[ playerid ][ AFK ] = false;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está AFK !" );
	}
	return 1;
}
if( !strcmp( cmd, "/continuar", true ))
{
	if( pInfo[ playerid ][ Continuar ] == false )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu tempo acabou e você não pode mais usar esse comando !" );
		return 1;
	}
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você foi levado até sua ultima posição salva." );
	if( pInfo[ playerid ][ Preso ] >= 1 )
	{
		SendClientMessage( playerid, COLOR_MUSGO, "[ x ] Você não cumpriu sua pena !" );
		SetPrisao( playerid );
	}
	else
	{
		SetPlayerPos( playerid, pInfo[ playerid ][ ContX ], pInfo[ playerid ][ ContY ], pInfo[ playerid ][ ContZ ] );
		SetPlayerFacingAngle( playerid, pInfo[ playerid ][ ContW ] );
		SetPlayerInterior( playerid, pInfo[ playerid ][ ContI ] );
	}
	pInfo[ playerid ][ Continuar ] = false;
	SetCameraBehindPlayer( playerid );
	if( pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		KillTimer( ContinTimer[ playerid ] );
	}
	return 1;
}
if( !strcmp( cmd, "/banco", true ))
{
	if( !PlayerToPoint( 1.1, playerid, 822.0108, 1.9151, 1004.1797 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um Banco." );
		return 1;
	}
	if( BancoLogin[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "( BANCO ) Para acessar o banco é preciso que se logue na conta bancária ! ( /EntrarConta )" );

	format( gStr, sizeof( gStr ), "Seja bem vindo(a) ao banco\n\nNome de usuário: {3366FF}%s{FFFFFF}\n\n{00FF00}Qual operação deseja realizar ?{FFFFFF}", PlayerName( playerid ));
	ShowPlayerDialog( playerid, D_iBANCO, DIALOG_STYLE_MSGBOX, "{FF0000}>>{FFFFFF} Banco Central {FF0000}<<{FFFFFF}", gStr, "Saldo", "Transação" );
	return 1;
}
if( !strcmp( cmd, "/Caixa", true ))
{
	if( !PlayerToPoint( 1.1, playerid, 822.0108, 1.9151, 1004.1797 ) &&
	!PlayerToPoint( 1.1, playerid, 1729.5397, -1754.4424, 13.5005 ) &&
	!PlayerToPoint( 1.1, playerid, 458.8765, -1494.3386, 31.1031 ) &&
	!PlayerToPoint( 1.1, playerid, 2241.7102, -1664.0626, 15.4766 ) &&
	!PlayerToPoint( 1.1, playerid, 1366.5623, -1282.4214, 13.5469 ) &&
	!PlayerToPoint( 1.1, playerid, 1228.3754, -1742.5920, 13.5982 ) &&
	!PlayerToPoint( 1.1, playerid, 1000.5516, -925.0084, 42.3281 ) &&
	!PlayerToPoint( 1.1, playerid, 1929.2378, -1785.8347, 13.5469 ) &&
	!PlayerToPoint( 1.1, playerid, 1985.3488, 1075.9269, 10.8127 ) &&
	!PlayerToPoint( 1.1, playerid, 2086.7527, 1471.3977, 10.8203 ) &&
	!PlayerToPoint( 1.1, playerid, 1673.8544, 1444.8619, 10.7920 ) &&
	!PlayerToPoint( 1.1, playerid, 2172.4304, 1402.2052, 11.0625 ) &&
	!PlayerToPoint( 1.1, playerid, 2803.6138, 892.6180, 10.7500 ) &&
	!PlayerToPoint( 1.1, playerid, -2702.8171, 372.6496, 4.9781 ) &&
	!PlayerToPoint( 1.1, playerid, -2446.7327, 751.8239, 35.1719 ) &&
	!PlayerToPoint( 1.1, playerid, -2629.7937, 1401.6936, 7.0994 ) &&
	!PlayerToPoint( 1.1, playerid, -1694.3392, 412.6917, 7.1797 ) &&
	!PlayerToPoint( 1.1, playerid, -1968.2924, 278.5286, 35.1794 ) &&
	!PlayerToPoint( 1.1, playerid, -2234.2275, 2350.0652, 4.9855 ) &&
	!PlayerToPoint( 1.1, playerid, -1453.6864, 2593.2837, 55.8359 ) &&
	!PlayerToPoint( 1.1, playerid, -230.0132, 2709.8633, 62.9843 ) &&
	!PlayerToPoint( 1.1, playerid, -828.2064, 1503.2640, 19.6672 ) &&
	!PlayerToPoint( 1.1, playerid, -189.9725, 1209.8292, 19.7422 ) &&
	!PlayerToPoint( 1.1, playerid, 241.5081, -167.8019, 1.5781 ) &&
	!PlayerToPoint( 1.1, playerid, 673.0540, -506.8918, 16.3359 ) &&
	!PlayerToPoint( 1.1, playerid, -2162.7546, -2341.4189, 30.6250 ) &&
	!PlayerToPoint( 1.1, playerid, 2303.1123, -16.1575, 26.4844 ) &&
	!PlayerToPoint( 1.1, playerid, 1306.2826, 232.1539, 19.5547 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um Caixa Eletrônico." );
		return 1;
	}
	if( BancoLogin[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "( BANCO ) Para acessar o Caixa é preciso que se logue na conta bancária ! ( /EntrarConta )" );
		return 1;
	}
	format( gStr, sizeof( gStr ), "Seja bem vindo(a) ao banco\n\nNome de usuário: {3366FF}%s{FFFFFF}\n\n{00FF00}Qual operação deseja realizar ?{FFFFFF}", PlayerName( playerid ));
	ShowPlayerDialog( playerid, D_iBANCO, DIALOG_STYLE_MSGBOX, "{FF0000}>>{FFFFFF} Caixa Eletrônico {FF0000}<<{FFFFFF}", gStr, "Saldo", "Transação" );
	return 1;
}
if( !strcmp( cmd, "/abrirconta", true ))
{
	if( !PlayerToPoint( 1.1, playerid, 822.0108, 1.9151, 1004.1797 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no Banco Central." );
		return 1;
	}
	if( pInfo[ playerid ][ ContaBanco ] == 1 )
	{
		SendClientMessage( playerid, COLOR_SISTEMA, "* Você já tem uma conta no banco, para acessa-lá digite: '/EntrarConta'." );
		return 1;
	}
	format( gStr, sizeof( gStr ), "Conta Bancária\n\nNome de usuário: {3366FF}%s{FFFFFF}\n\nInsira uma senha bancária:", PlayerName( playerid ));
	ShowPlayerDialog( playerid, D_CONTABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Criar", "Cancelar" );
	return 1;
}
if( !strcmp( cmd, "/entrarconta", true ))
{
	if( !PlayerToPoint( 1.1, playerid, 822.0108, 1.9151, 1004.1797 ) &&
	!PlayerToPoint( 1.1, playerid, 1729.5397, -1754.4424, 13.5005 ) &&
	!PlayerToPoint( 1.1, playerid, 458.8765, -1494.3386, 31.1031 ) &&
	!PlayerToPoint( 1.1, playerid, 2241.7102, -1664.0626, 15.4766 ) &&
	!PlayerToPoint( 1.1, playerid, 1366.5623, -1282.4214, 13.5469 ) &&
	!PlayerToPoint( 1.1, playerid, 1228.3754, -1742.5920, 13.5982 ) &&
	!PlayerToPoint( 1.1, playerid, 1000.5516, -925.0084, 42.3281 ) &&
	!PlayerToPoint( 1.1, playerid, 1929.2378, -1785.8347, 13.5469 ) &&
	!PlayerToPoint( 1.1, playerid, 1985.3488, 1075.9269, 10.8127 ) &&
	!PlayerToPoint( 1.1, playerid, 2086.7527, 1471.3977, 10.8203 ) &&
	!PlayerToPoint( 1.1, playerid, 1673.8544, 1444.8619, 10.7920 ) &&
	!PlayerToPoint( 1.1, playerid, 2172.4304, 1402.2052, 11.0625 ) &&
	!PlayerToPoint( 1.1, playerid, 2803.6138, 892.6180, 10.7500 ) &&
	!PlayerToPoint( 1.1, playerid, -2702.8171, 372.6496, 4.9781 ) &&
	!PlayerToPoint( 1.1, playerid, -2446.7327, 751.8239, 35.1719 ) &&
	!PlayerToPoint( 1.1, playerid, -2629.7937, 1401.6936, 7.0994 ) &&
	!PlayerToPoint( 1.1, playerid, -1694.3392, 412.6917, 7.1797 ) &&
	!PlayerToPoint( 1.1, playerid, -1968.2924, 278.5286, 35.1794 ) &&
	!PlayerToPoint( 1.1, playerid, -2234.2275, 2350.0652, 4.9855 ) &&
	!PlayerToPoint( 1.1, playerid, -1453.6864, 2593.2837, 55.8359 ) &&
	!PlayerToPoint( 1.1, playerid, -230.0132, 2709.8633, 62.9843 ) &&
	!PlayerToPoint( 1.1, playerid, -828.2064, 1503.2640, 19.6672 ) &&
	!PlayerToPoint( 1.1, playerid, -189.9725, 1209.8292, 19.7422 ) &&
	!PlayerToPoint( 1.1, playerid, 241.5081, -167.8019, 1.5781 ) &&
	!PlayerToPoint( 1.1, playerid, 673.0540, -506.8918, 16.3359 ) &&
	!PlayerToPoint( 1.1, playerid, -2162.7546, -2341.4189, 30.6250 ) &&
	!PlayerToPoint( 1.1, playerid, 2303.1123, -16.1575, 26.4844 ) &&
	!PlayerToPoint( 1.1, playerid, 1306.2826, 232.1539, 19.5547 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um Banco / Caixa Eletrônico." );
		return 1;
	}
	if( BancoLogin[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_SISTEMA, "* Você já está logado em sua conta bancária." );
		return 1;
	}
	if( pInfo[ playerid ][ ContaBanco ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "* Você não tem uma conta no banco, para cria-lá digite: '/AbrirConta'" );
		return 1;
	}
	format( gStr, sizeof( gStr ), "Conta Bancária\n\nNome de usuário: {3366FF}%s{FFFFFF}\n\nInsira sua senha bancária:", PlayerName( playerid ));
	ShowPlayerDialog( playerid, D_LOGINBANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Entrar", "Cancelar" );
	return 1;
}
if( !strcmp( cmd, "/senhabanco", true ))
{
	if( !PlayerToPoint( 1.1, playerid, 822.0108, 1.9151, 1004.1797 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no Banco Central." );
		return 1;
	}
	if( BancoLogin[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "* Para acessar o banco é preciso que logue-se na sua conta bancária ! ( /EntrarConta )" );
	ShowPlayerDialog( playerid, D_SENHABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", "Conta Bancária\n\nInsira sua senha atual:", "Confirmar", "Cancelar" );
	return 1;
}
if( strcmp( cmd, "/vNome", true ) == 0 )
{
	format( gStr, sizeof( gStr ), "[ > ] O nome do veículo que você está é %s.", vNome[ GetVehicleModel( GetPlayerVehicleID( playerid ))-400 ] );
	SendClientMessage( playerid, COLOR_LARANJA, gStr );
	return 1;
}
if( strcmp( cmd, "/vID", true ) == 0 )
{
	format( gStr, sizeof( gStr ), "[ > ] O ID do veículo que você está é %d.", GetVehicleModel( GetPlayerVehicleID( playerid )) );
	SendClientMessage( playerid, COLOR_LARANJA, gStr );
	return 1;
}
if( !strcmp( cmd, "/empregos", true ) || !strcmp( cmd, "/profs", true ) || !strcmp( cmd, "/profissoes", true ))
{
	if( PlayerToPoint( 1.1, playerid, 2309.1978, -8.3964, 26.7422 )) // Agência CP_23
	{
		ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na Agência de Empregos !" );
	return 1;
}
if( !strcmp( cmd, "/licencas", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_2 )) // AutoEscola
	{
		ShowPlayerDialog( playerid, D_AUTOE, DIALOG_STYLE_LIST, "Auto Escola", "\tHabilitação Terrestre {3DB134}$900\n\tHabilitação Náutica {3DB134}$900\n\tHabilitação Aérea {3DB134}$900", "Comprar", "Sair" );
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na Auto Escola !" );
	return 1;
}
if( !strcmp( cmd, "/Utilitarios", true ))
{
	if( PlayerToPoint( 1.1, playerid, -28.1784, -185.1464, 1003.5469 )) // Utilitários
	{
		ShowPlayerDialog( playerid, D_UTILI, DIALOG_STYLE_LIST, "Utilitários", "\tGPS Cidade {3DB134}$15000\n\tGPS Local {3DB134}$15000\n\n\tRelógio UP {3DB134}$5000\n\tStatus Modelo {3DB134}$10000\n\tCelular {3DB134}$5000\n\tCelular Créditos SMS {3DB134}$30 por SMS\n\tCapacete {3DB134}$2000\n\tGPSPlayer {3DB134}$15000", "Comprar", "Sair" );
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na Loja de Utilitários !" );
	return 1;
}
if( !strcmp( cmd, "/gps", true ))
{
	ShowPlayerDialog( playerid, D_GPSL1, DIALOG_STYLE_LIST, "GPS - Escolha a cidade", "\t>Los Santos\n\t> Desligar GPS", "Abrir", "Sair" );
	return 1;
}
if( !strcmp( cmd, "/mhospital", true ))
{
	if( PlayerToPoint( 1.0, playerid, 1172.6395, -1328.1166, 15.4027 ) || PlayerToPoint( 1.0, playerid, 2034.8190, -1406.5873, 17.2047 ))
	{
		ShowPlayerDialog( playerid, D_HOSPI, DIALOG_STYLE_LIST, "Hospital Menu", "\tCura {3DB134}$1000\n\tConvênio {3DB134}$5000\n\tSeguro de Acidentes {3DB134}$10000", "Comprar", "Sair" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na loja do Hospital !" );
	}
	return 1;
}
if( !strcmp( cmd, "/mfavela", true ))
{
	if( PlayerToPoint( 1.0, playerid, 2201.8445, -1152.3496, 25.8772 ))
	{
		ShowPlayerDialog( playerid, D_FAVEL, DIALOG_STYLE_LIST, "Favela Menu", "\tDiversas Armas {3DB134}$5000\n\tRemover Armas", "OK", "Sair" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na loja de kit na Favela !" );
	}
	return 1;
}
/*if( !strcmp( cmd, "/Algodao", true )) // ALGODÃO AGÊNCIA
{
	if( PlayerToPoint( 1.0, playerid, 1250.6077, -1806.6815, 13.4216 ))
	{
		ShowPlayerDialog( playerid, D_ALGOD, DIALOG_STYLE_LIST, "Algodões Doce", "Azul - +10 Vida {3DB134}$20\nRosa - +10 Vida {3DB134}$20\nVerde - +10 Vida {3DB134}$20\nAmarelo - +10 Vida {3DB134}$20\nBranco - +10 Vida {3DB134}$20", "Comprar", "Sair" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na barraca dos Algodão Doce !" );
	}
	return 1;
}*/
if( !strcmp( cmd, "/tempo", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		ShowPlayerDialog( playerid, D_TEMPO, DIALOG_STYLE_LIST, "Tempo", "\tManha\n\tTarde\n\tNoite\n\tMadrugada", "Esse", "Sair" );
		return 1;
	}
}
if( !strcmp( cmd, "/mudarluta", true ) || !strcmp( cmd, "/lutar", true ) || !strcmp( cmd, "/lutas", true ))
{
	if( PlayerToPoint( 1.1, playerid, 775.2586, -59.2147, 1000.7184 )) // Academia
	{
		ShowPlayerDialog( playerid, D_LUTAS, DIALOG_STYLE_LIST, "Luta {3DB134}Preço", "\tBoxe {3DB134}$1000\n\tKung Fu {3DB134}$1000\n\tBriga de Rua {3DB134}$1000\n\tAgarrar e Chutar {3DB134}$1000\n\tNormal {3DB134}$1000", "Lutar", "Sair" );
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no Ginásio de Lutas !" );
	return 1;
}
if( !strcmp( cmd, "/entrar", true )) // ENTRADA // ENTRAR
{
	if( pHospital[ playerid ] > gettime() )
	{
		return 1;
	}
	if( IsPlayerInRangeOfPoint( playerid, 2.0, 1219.1569, -1812.4558, 16.5938 )) // Agencia LS
	{
		SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
		SetPlayerFacingAngle( playerid, 268.7034 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 1;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2054.8433, 456.0135, 35.1719 )) // Agencia SF
	{
		SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
		SetPlayerFacingAngle( playerid, 268.7034 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 2;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1989.1378, 959.3508, 10.8203 )) // Agencia LV
	{
		SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
		SetPlayerFacingAngle( playerid, 268.7034 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 3;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -177.7854, 1110.6555, 19.7422 )) // Agência de Fort Carson
	{
		SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
		SetPlayerFacingAngle( playerid, 268.7034 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 4;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 207.8856, -62.8081, 1.5781 )) // Agência de Blueberry
	{
		SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
		SetPlayerFacingAngle( playerid, 268.7034 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 5;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2165.2070, -2417.1287, 30.8203 )) // Agência de Angel Pine
	{
		SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
		SetPlayerFacingAngle( playerid, 268.7034 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 6;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1555.1055, -1675.6426, 16.1953 )) // Delegacia LS
	{
		SetPlayerPos( playerid, 246.8718, 62.3202, 1003.6406 );
		SetPlayerInterior( playerid, 6 );
		SetPlayerVirtualWorld( playerid, 1 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		pInfo[ playerid ][ entrouDEL ] = 1;
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -1605.4067, 711.3124, 13.8672 )) // Delegacia SF // DP SF
	{
		SetPlayerPos( playerid, 288.745971, 169.350997, 1007.171875 );
		SetPlayerFacingAngle( playerid, 357.1938 );
		SetPlayerInterior( playerid, 3 );
		SetPlayerVirtualWorld( playerid, 1 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 627.5673, -571.7941, 17.6481 )) // Delegacia PRF // Dillimore
	{
		SetPlayerPos( playerid, 246.3651, 109.2322, 1003.2188 );
		SetPlayerInterior( playerid, 10 );
		SetPlayerVirtualWorld( playerid, 1 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 53.4001, -1530.7544, 5.2698 )) // Pedagio // POSTO PRF
	{
		if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || aInfo [ playerid ][ Dono ] || aInfo [ playerid ][ Admin ] || aInfo [ playerid ][ Moderador ] || aInfo [ playerid ][ Ajudante ] ) // Quem pode entrar no Pedagio
		{
			SetPlayerPos( playerid, 51.7680, -1530.5012, 5.2866 );
			pInfo[ playerid ][ EntrouL ] = false;
			return 1;
		}
		SendClientMessage( playerid, COLOR_ERRO,  "[ x ] Somente a Policia Rodoviária pode entrar ! [ x ]" );
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1836.5631, -1682.5184, 13.3427 )) // Alhambra
	{
		SetPlayerPos( playerid, 493.4367, -24.9197, 1000.6719 );
		SetPlayerInterior( playerid, 17 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1778.8096, -1662.7579, 14.4375 )) // Banco LS
	{
		SetPlayerPos( playerid, 831.5861, 8.8236, 1004.1797 );
		SetPlayerFacingAngle( playerid, 135.9976 );
		SetPlayerInterior( playerid, 3 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 1;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1958.3718, 951.9951, 10.8203 )) // Banco LV
	{
		SetPlayerPos( playerid, 831.5861, 8.8236, 1004.1797 );
		SetPlayerFacingAngle( playerid, 135.9976 );
		SetPlayerInterior( playerid, 3 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 2;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2650.2886, 376.0364, 6.1563 )) // Banco SF
	{
		SetPlayerPos( playerid, 831.5861, 8.8236, 1004.1797 );
		SetPlayerFacingAngle( playerid, 135.9976 );
		SetPlayerInterior( playerid, 3 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ EntrouAgencia ] = 3;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1310.2739, -1367.0903, 13.5192 )) // Auto Escola LS
	{
		SetPlayerPos( playerid, -2026.8789, -103.6022, 1035.1833 );
		SetPlayerInterior( playerid, 3 );
		pInfo[ playerid ][ entrouHAB ] = 1;
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2026.6133, -100.9539, 35.1641 )) // Auto Escola SF
	{
		SetPlayerPos( playerid, -2026.8789, -103.6022, 1035.1833 );
		SetPlayerInterior( playerid, 3 );
		pInfo[ playerid ][ entrouHAB ] = 2;
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1352.4087, -1759.2499, 13.5078 )) // 24/7
	{
		SetPlayerPos( playerid, -25.8498, -188.2523, 1003.5469 );
		SetPlayerInterior( playerid, 17 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1833.7720, -1842.4988, 13.5781 )) // 24/7²
	{
		SetPlayerPos( playerid, -25.8498, -188.2523, 1003.5469 );
		SetPlayerInterior( playerid, 17 );
		SetPlayerVirtualWorld( playerid, 24 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1631.8516, -1172.9270, 24.0843 )) // Loterica
	{
		SetPlayerPos( playerid, -2158.6572, 643.1335, 1052.3750 );
		SetPlayerInterior( playerid, 1 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	/*else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2244.3889, -1665.5635, 15.4766 )) // Binco
	{
		SetPlayerPos( playerid, 203.8940, -48.9065, 1001.8047 );
		SetPlayerFacingAngle( playerid, 0.0387 );
		SetPlayerInterior( playerid, 1 );
		SetCameraBehindPlayer( playerid );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}*/
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2229.8167, -1721.1733, 13.5603 )) // Academia
	{
		SetPlayerPos( playerid, 773.9420, -78.8449, 1000.6628 );
		SetPlayerInterior( playerid, 7 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2421.6262, -1219.2485, 25.5610 )) // Puteiro
	{
		SetPlayerPos( playerid, 1204.7864, -13.8520, 1000.9219 );
		SetPlayerInterior( playerid, 2 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2310.1558, -1643.6486, 14.8270 )) // Bar da Grove
	{
		SetPlayerPos( playerid, 501.9589, -67.5634, 998.7578 );
		SetPlayerInterior( playerid, 11 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2105.4834, -1806.5027, 13.554 )) // Pizzaria
	{
		SetPlayerPos( playerid, 372.2989, -133.5238, 1001.4922 );
		SetPlayerInterior( playerid, 5 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1199.2562, -918.1423, 43.1232 )) // Burger Shot
	{
		SetPlayerPos( playerid, 362.7990, -75.0967, 1001.5078 );
		SetPlayerInterior( playerid, 10 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 928.9155, -1352.9719, 13.3438 )) // Cluckin'Bell
	{
		SetPlayerPos( playerid, 365.0023, -11.8438, 1001.8516 );
		SetPlayerInterior( playerid, 9 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1481.1034, -1770.4825, 18.7958 )) // Prefeitura LS
	{
		SetPlayerPos( playerid, 380.0053, 173.6629, 1008.3828 );
		SetPlayerFacingAngle( playerid, 92.4343 );
		SetPlayerInterior( playerid, 3 );
		pInfo[ playerid ][ entroupref ] = 1;
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2765.3511, 375.5041, 6.3359 )) // Prefeitura SF
	{
		SetPlayerPos( playerid, 380.0053, 173.6629, 1008.3828 );
		SetPlayerFacingAngle( playerid, 92.4343 );
		SetPlayerInterior( playerid, 3 );
		pInfo[ playerid ][ entroupref ] = 2;
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1367.1837, -1279.7854, 13.5469 )) // Ammuu
	{
		SetPlayerPos( playerid, 286.0948, -85.4703, 1001.5156 );
		SetPlayerInterior( playerid, 4 );
		pInfo[ playerid ][ EntrouL ] = true;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/sair", true )) // SAIDA // SAIR
{
	if( IsPlayerInRangeOfPoint( playerid, 2.0, 246.8718, 62.3202, 1003.6406 )) // Delegacia LS
	{
		SetPlayerPos( playerid, 1552.3304, -1675.5342, 16.1953 );
		SetPlayerFacingAngle( playerid, 88.2519 );
    	SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 0 );
	    SetPlayerVirtualWorld( playerid, 0 );
	    GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
	}
/*                                                                  // CASO ENTRE POR LS E SF NO INTERIOR DA DELEGACIA DE LS - SEPARA AS SAIDAS
if( !strcmp( cmd, "/sair", true )) // SAIDA // SAIR
{
	if( IsPlayerInRangeOfPoint( playerid, 2.0, 246.8718, 62.3202, 1003.6406 )) // Delegacia LS
	{
		if( pInfo[ playerid ][ entrouDEL ] == 1 )
		{
			SetPlayerPos( playerid, 1552.3304, -1675.5342, 16.1953 );
			SetPlayerFacingAngle( playerid, 88.2519 );
			SetCameraBehindPlayer( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
		}
		else if( pInfo[ playerid ][ entrouDEL ] == 2 ) // Delegacia SF
		{
			SetPlayerPos( playerid, 0, 0, 0 );
			SetPlayerFacingAngle( playerid, 0 );
			SetCameraBehindPlayer( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
		}
		pInfo[ playerid ][ entrouDEL ] = 0;
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
*/
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 288.5685, 168.0771, 1007.1719 )) // Delegacia SF // DP SF
	{
		SetPlayerPos( playerid, -1605.4912, 711.4242, 13.8672 );
		SetPlayerFacingAngle( playerid, 2.8339 );
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 246.3827, 107.9215, 1003.2188 )) // Delegacia Dillimore
	{
		SetPlayerPos( playerid, 628.1145,-571.7684,17.3798 );
		SetPlayerFacingAngle( playerid, 270.7130 );
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 51.7680, -1530.5012, 5.2866 )) // Pedagio // POSTO PRF
	{
		SetPlayerPos( playerid, 53.4001, -1530.7544, 5.2698 );
		pInfo[ playerid ][ EntrouL ] = true;
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0,493.4367, -24.9197, 1000.6719 )) // Alhambra
	{
		SetPlayerPos( playerid, 1836.5631, -1682.5184, 13.3427 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2304.6934, -16.0919, 26.7422 )) // Agencia
	{
		if( pInfo[ playerid ][ EntrouAgencia ] == 1 )
		{
			SetPlayerPos( playerid, 1219.0415, -1814.5978, 16.5938 ); // LS
			SetPlayerFacingAngle( playerid, 272.4634 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
		}
		else if( pInfo[ playerid ][ EntrouAgencia ] == 2 )
		{
			SetPlayerPos( playerid, -2054.8433, 456.0135, 35.1719 ); // SF
			SetPlayerFacingAngle( playerid, 317.8766 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
		}
		else if( pInfo[ playerid ][ EntrouAgencia ] == 3 )
		{
			SetPlayerPos( playerid, 1994.6506, 958.8142, 10.8203 ); // LV
			SetPlayerFacingAngle( playerid, 269.9011 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~Las Venturas", 3000, 1 );
		}
		else if( pInfo[ playerid ][ EntrouAgencia ] == 4 )
		{
			SetPlayerPos( playerid, -177.7854, 1110.6555, 19.7422 ); // FC
			SetPlayerFacingAngle( playerid, 140.0 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~Fort Carson", 3000, 1 );
		}
		else if( pInfo[ playerid ][ EntrouAgencia ] == 5 )
		{
			SetPlayerPos( playerid, 207.8856, -62.8081, 1.5781 ); // Blueberry
			SetPlayerFacingAngle( playerid, 180.0 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~Blueberry", 3000, 1 );
		}
		else if( pInfo[ playerid ][ EntrouAgencia ] == 6 )
		{
			SetPlayerPos( playerid, 834.6674, 7.4959, 1004.1870 ); // Angel Pine
			SetPlayerFacingAngle( playerid, 360.0 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~Angel Pine", 3000, 1 );
		}
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 834.6674, 7.4959, 1004.1870 )) // Banco
	{
		if( pInfo[ playerid ][ EntrouAgencia ] == 1 )
		{
			SetPlayerPos( playerid, 1778.8096, -1662.7579, 14.4375 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
		}
		else if( pInfo[ playerid ][ EntrouAgencia ] == 2 )
		{
			SetPlayerPos( playerid, 1958.3718, 951.9951, 10.8203 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~Las Venturas", 3000, 1 );
		}
		else if( pInfo[ playerid ][ EntrouAgencia ] == 3 )
		{
			SetPlayerPos( playerid, -2651.6523, 376.2323, 5.5455 );
			SetPlayerFacingAngle( playerid, 87.8926 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			pInfo[ playerid ][ EntrouAgencia ] = 0;
			GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
		}
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2026.8789, -103.6022, 1035.1833 )) // Auto Escola
	{
		if( pInfo[ playerid ][ entrouHAB ] == 1 )
		{
			SetPlayerPos( playerid, 1310.2739, -1367.0903, 13.5192 ); // LS
			SetPlayerInterior( playerid, 0 );
			GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
		}
		if( pInfo[ playerid ][ entrouHAB ] == 2 )
		{
			SetPlayerPos( playerid, -2026.6133, -100.9539, 35.1641 ); // SF
			SetPlayerFacingAngle( playerid, 0.2082 );
			SetPlayerInterior( playerid, 0 );
			GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
		}
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -25.8498, -188.2523, 1003.5469 )) // 24/7 e 24/7²
	{
		if( GetPlayerVirtualWorld( playerid ) == 24 )
		{
			SetPlayerPos( playerid, 1833.7720, -1842.4988, 13.5781 );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
		}
		else if( GetPlayerVirtualWorld( playerid ) == 0 )
		{
			SetPlayerPos( playerid, 1352.4087, -1759.2499, 13.5078 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
		}
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2158.6572, 643.1335, 1052.3750 )) // Loterica
	{
		SetPlayerPos( playerid, 1631.8516, -1172.9270, 24.0843 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	/*else if( IsPlayerInRangeOfPoint( playerid, 2.0, 203.7462, -50.6643, 1001.8047 )) // Binco
	{
		SetPlayerPos( playerid, 2244.3889, -1665.5635, 15.4766 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}*/
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 773.9420, -78.8449, 1000.6628 )) // Academia
	{
		SetPlayerPos( playerid, 2229.8167, -1721.1733, 13.5603 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1204.7864, -13.8520, 1000.9219 )) // Puteiro
	{
		SetPlayerPos( playerid, 2421.6262, -1219.2485, 25.5610 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 501.9589, -67.5634, 998.7578 )) // Bar da Grove
	{
		SetPlayerPos( playerid, 2310.1558, -1643.6486, 14.8270 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 372.2989, -133.5238, 1001.4922 )) // Pizzaria
	{
		SetPlayerPos( playerid, 2105.4834, -1806.5027, 13.554 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 362.7990, -75.0967, 1001.5078 )) // Burger Shot
	{
		SetPlayerPos( playerid, 1199.2562, -918.1423, 43.1232 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 365.0023, -11.8438, 1001.8516 )) // Cluckin'Bell
	{
		SetPlayerPos( playerid, 928.9155, -1352.9719, 13.3438 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 390.0609, 173.7708, 1008.3828 )) // Prefeitura
	{
		if( pInfo[ playerid ][ entroupref ] == 1 )
		{
			SetPlayerPos( playerid, 1480.9595, -1766.3862, 18.7958 ); // LS
			SetPlayerFacingAngle( playerid, 358.2239 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			SetCameraBehindPlayer( playerid );
			GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
		}
		if( pInfo[ playerid ][ entroupref ] == 2 )
		{
			SetPlayerPos( playerid, -2763.0068, 375.6516, 5.8614 ); // SF
			SetPlayerFacingAngle( playerid, 269.5799 );
			SetPlayerInterior( playerid, 0 );
			pInfo[ playerid ][ EntrouL ] = false;
			SetCameraBehindPlayer( playerid );
			GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
		}
		pInfo[ playerid ][ entroupref ] = 0;
		return 1;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 2.0, 286.0948, -85.4703, 1001.5156 )) // Ammu
	{
		SetPlayerPos( playerid, 1367.1837, -1279.7854, 13.5469 );
		SetPlayerInterior( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = false;
		SetCameraBehindPlayer( playerid );
		return 1;
	}
	return 1;
}
if( strcmp( cmd, "/CP", true ) == 0 )
{
	strmid( tmp, cmdtext, 3, strlen( cmdtext ));
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /CP [ texto ]" );
		return 1;
	}
	else
	{
		foreach(Player, i )
		{
			if( pInfo[ i ][ Prof ] == pInfo[ playerid ][ Prof ] )
			{
				format( gstring, sizeof( gstring ), "( CP ) '%s' diz: %s", PlayerName( playerid ), tmp );
				SendClientMessage( i, GetPlayerColor( playerid ), gstring );
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/profissao", true ))
{
	ComandosProf( playerid );
	return 1;
}
if( !strcmp( cmd, "/criarset", true ) || !strcmp( cmd, "/Cset", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 )
	{
		new
		settmp[ 256 ],
		dono,
		carid,
		Float:ang,
		cor1,
		cor2
		;
		settmp = strtok( cmdtext, idx );
		if( !strlen( settmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: \"/Criarset [ ID do véiculo ] [ ID do dono ] [ COR 1 ] [ COR 2 ]" );
			return 1;
		}
		carid = strval( settmp );
		settmp = strtok( cmdtext, idx );
		if( !strlen( settmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: \"/Criarset [ ID do véiculo ] [ ID do dono ] [ COR 1 ] [ COR 2 ]\"." );
			return 1;
		}
		dono = strval( settmp );
		settmp = strtok( cmdtext, idx );
		if( !strlen( settmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: \"/Criarset [ ID do véiculo ] [ ID do dono ] [ COR 1 ] [ COR 2 ]\"." );
			return 1;
		}
		cor1 = strval( settmp );
		settmp = strtok( cmdtext, idx );
		if( !strlen( settmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: \"/Criarset [ ID do véiculo ] [ ID do dono ] [ COR 1 ] [ COR 2 ]\"." );
			return 1;
		}
		cor2 = strval( settmp );
		if( carid >= 400 && carid <= 611 )
		{
			if( IsPlayerConnected( dono ))
			{
				if( dini_Int( f( playerid ), "Dono" ) == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] você não pode criar um Set !" );
				if( IsPlayerInAnyVehicle( playerid ))
				{
					new
					SetStr[ 256 ],
					File:fSet,
					Float:sp[ 3 ]
					;
					GetPlayerPos( playerid, sp[ 0 ], sp[ 1 ], sp[ 2 ] );
					GetVehicleZAngle( GetPlayerVehicleID( playerid ), ang );
					format( SetStr, sizeof( SetStr ), "%d %f %f %f %f %d %d // Criado por %s para o jogador(a) %s\r\n", carid, sp[ 0 ], sp[ 1 ], sp[ 2 ], ang, cor1, cor2, PlayerName( playerid ), PlayerName( dono ));
					fSet = fopen( "Sets.cfg", io_append );
					fwrite( fSet, SetStr );
					fclose( fSet );
					SendClientMessage( playerid, COLOR_MUSGO, "[ > ] Veículo setado !" );
					SetTimerEx( "CriarSet", 5000, false, "dffffdd", carid, sp[ 0 ], sp[ 1 ], sp[ 2 ], ang, cor1, cor2 );
					MensagemFormatada( dono, COLOR_VERDEFRACO, "[ > ] O(A) Dono(a) %s setou um veículo para você !", PlayerName( playerid ));
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve estar em um véiculo para criar um set." );
					return 1;
				}
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) para o qual você deseja criar o Set não está conectado !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] ID de veículo invalido, id's entre 400 e 611 !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/ircasa", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /ircasa [ Número ]" );
	new
	numero = strval( tmp )
	;
	format( hFile, sizeof( hFile ), "Casas/casa%d.ini", numero );
	if( !fexist( hFile ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Casa inexistente !" );
	SetPlayerPos( playerid, dini_Float( hFile, "X" ), dini_Float( hFile, "Y" ), dini_Float( hFile, "Z" ));
	MensagemFormatada( playerid, 0x00EA3AAA, "[ > ] Você se teleportou até a casa número %d que pertence a %s.", numero, dini_Get( hFile, "Proprietario" ));
	return 1;
}
if( !strcmp( cmd, "/irempresa", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /irempresa [ Número ]" );
	new
	numero = strval( tmp )
	;
	format( hFile, sizeof( hFile ), "Empresas/Empresa%d.ini", numero );
	if( !fexist( hFile ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Empresa inexistente !" );
	SetPlayerPos( playerid, EmpresaInfo[ numero ][ PickupX ], EmpresaInfo[ numero ][ PickupY ], EmpresaInfo[ numero ][ PickupZ ] );
	MensagemFormatada( playerid, 0x00EA3AAA, "[ > ] Você se teleportou até a empresa número %d", numero );
	return 1;
}
if( !strcmp( cmd, "/casa", true ))
{
	Tempo[ playerid ] = gettime();
	if( Tempo[ playerid ] - HousePickup[ playerid ] > 5 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma casa !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Antes de usar quaisquer opção abaixo veja para que eles servem usando: /Casa Comandos" );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Opções: ( Abrir, Fechar, Morador, Remover, Mensagem, Oferecer, Aceitar, Comprar, Vender, Info )" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa [ Opção ]" );
		return 1;
	}
	else if( !strcmp( tmp, "comandos", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				new
				dStr[ 1500 ],
				acCMDS[ ] = "{1BBD62}/Casa Abrir {FFFFFF}- Abre a casa.\n{1BBD62}/Casa Fechar {FFFFFF}- Fecha a casa.\n{1BBD62}/Casa Morador {FFFFFF}- Adiciona um morador.\n{1BBD62}/Casa Remover {FFFFFF}- Remove um morador.\n",
				bcCMDS[ ] = "{1BBD62}/Casa Mensagem {FFFFFF}- Adiciona uma mensagem na casa.\n{1BBD62}/Casa Oferecer {FFFFFF}- Oferece a casa para alguém.\n{1BBD62}/Casa Aceitar {FFFFFF}- Aceita uma casa oferecida.\n",
				ccCMDS[ ] = "{1BBD62}/Casa Vender {FFFFFF}- Vende a casa.\n{1BBD62}/Casa Comprar {FFFFFF}- Compra a casa.\n{1BBD62}/Casa Info {FFFFFF}- Mostra as informações da casa.\n{1BBD62}/Casa Veiculo {FFFFFF}- Ver comandos de um veículo casa.\n"
				;
				format( dStr, sizeof( dStr ), "%s%s%s", acCMDS, bcCMDS, ccCMDS );
				ShowPlayerDialog( playerid, 5244, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Casa Comandos:", dStr, "Fechar", "" );
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "comprar", true ))
	{
		if( LiberadoCasa[ playerid ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ > ] Você precisa de permissão de um Administrador para pode comprar uma casa." );
			return 1;
		}
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa casa já é sua !" );
					return 1;
				}
				if( strcmp( CasaInfo[ c ][ Proprietario ], "Ninguem", false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa casa já tem dono !" );
					return 1;
				}
				new
				CasaID = dini_Int( f( playerid ), "Casa" )
				;
				if( CasaID > 0 )
				{
					if( !strcmp( CasaInfo[ CasaID ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é Dono(a) de uma casa !" );
						return 1;
					}
					else if( strcmp( CasaInfo[ CasaID ][ Proprietario ], PlayerName( playerid ), false ))
					{
						dini_IntSet( f( playerid ), "Casa", -1 );
					}
				}
				new
				MorandoID = dini_Int( f( playerid ), "MorandoID" )
				;
				if( MorandoID > 0 )
				{
					if( !strcmp( CasaInfo[ MorandoID ][ Morador ], PlayerName( playerid ), false ) || !strcmp( CasaInfo[ MorandoID ][ Morador2 ], PlayerName( playerid ), false ) || !strcmp( CasaInfo[ MorandoID ][ Morador3 ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é morador(a) de uma casa, antes de comprar essa casa você precisa revogar sua moradia !" );
						return 1;
					}
					else if( strcmp( CasaInfo[ MorandoID ][ Morador ], PlayerName( playerid ), false ) && strcmp( CasaInfo[ MorandoID ][ Morador2 ], PlayerName( playerid ), false ) && strcmp( CasaInfo[ MorandoID ][ Morador3 ], PlayerName( playerid ), false ))
					{
						dini_IntSet( f( playerid ), "MorandoID", -1 );
					}
				}
				if( GetPlayerCash( playerid ) < CasaInfo[ c ][ Preco ] )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente !" );
					return 1;
				}

				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );

				if( dini_Int( hFile, "Shopping" ) == 1 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa casa só pode ser comprada atraves do Shopping !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ ~ ] Acesse nosso fórum e procure pelo Shopping." );
					return 1;
				}
				format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));

				new
				zone[ MAX_ZONE_NAME ]
				;
				GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
				format( gstring, sizeof( gstring ), "[ INFO ] Jogador {FFFFFF}%s {99FF66}comprou a Casa ID {FFFFFF}%d, {99FF66}localizada em: {FFFFFF}%s", PlayerName( playerid ), CasaInfo[ c ][ Numero ], zone );
				SendClientMessageToAll( 0x99FF66AA, gstring );
				dini_IntSet( gFile, "Casa", CasaInfo[ c ][ Numero ] );
				dini_IntSet( gFile, "Spawn", 1 );
				dini_IntSet( gFile, "Impostos", 0 );
				dini_IntSet( gFile, "Atrasados", 0 );
				sGivePlayerCash( playerid, -CasaInfo[ c ][ Preco ] );
				DestroyPickup( CasaPickup[ c ] );
				CasaPickup[ c ] = CreatePickup( 1272, 23, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] );
				dini_Set( hFile, "Dono", "1" );
				dini_Set( hFile, "Proprietario", PlayerName( playerid ));
				format( CasaInfo[ c ][ Proprietario ], 50, PlayerName( playerid ));
				format( CasaInfo[ c ][ Morador ], 64, "Ninguem" );
				dini_Set( hFile, "Morador", "Ninguem" );
				format( CasaInfo[ c ][ Morador2 ], 64, "Ninguem" );
				dini_Set( hFile, "Morador2", "Ninguem" );
				format( CasaInfo[ c ][ Morador3 ], 64, "Ninguem" );
				dini_Set( hFile, "Morador3", "Ninguem" );
				CasaInfo[ c ][ Status ] = 0;
				pInfo[ playerid ][ Spawn ] = 1;
				LiberadoCasa[ playerid ] = 0;
				// -- Login
				dini_Set( hFile, "Login", dini_Get( gFile, "ulData" ));
				format( CasaInfo[ c ][ Login ], 12, dini_Get( gFile, "ulData" ));
				dini_Set( hFile, "Horario", Ghora());
				format( CasaInfo[ c ][ Horario ], 12, Ghora());
				new
				casacom[ 128 ]
				;
				format( casacom, sizeof( casacom ), "%s comprou a casa %d | %s | %s", PlayerName( playerid ), CasaInfo[ c ][ Numero ], Gdata(), Ghora());
				casaComprou( casacom );
				pInfo[ playerid ][ Casa ] = c;
				format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {FF0000}Possui Dono(a)", CasaInfo[ c ][ Numero ] );
				Update3DTextLabelText( CasaLabel[ c ], COLOR_BRANCO, gStr );
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "vender", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
				if( strcmp( dini_Get( hFile, "Proprietario" ), PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
				sGivePlayerCash( playerid, CasaInfo[ c ][ Preco ] * 90 / 100 );
				new
				zone[ MAX_ZONE_NAME ]
				;
				GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
				format( gstring, sizeof( gstring ), "[ INFO ] Jogador {FFFFFF}%s {E86B3F}vendeu a Casa ID {FFFFFF}%d, {E86B3F}localizada em: {FFFFFF}%s", PlayerName( playerid ), CasaInfo[ c ][ Numero ], zone );
				SendClientMessageToAll( 0xE86B3FFF, gstring );
				dini_IntSet( gFile, "Casa", -1 );
				dini_IntSet( gFile, "Impostos", 0 );
				dini_IntSet( gFile, "Atrasados", 0 );
				dini_IntSet( gFile, "Spawn", 0 );
				pInfo[ playerid ][ Spawn ] = 0;
				new
				strC[ 128 ]
				;
				if( strcmp( CasaInfo[ c ][ Morador ], "Ninguem", false ))
				{
					format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ c ][ Morador ] );
					dini_IntSet( strC, "MorandoID", -1 );
					dini_IntSet( strC, "Spawn", 0 );
				}
				if( strcmp( CasaInfo[ c ][ Morador2 ], "Ninguem", false ))
				{
					format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ c ][ Morador2 ] );
					dini_IntSet( strC, "MorandoID", -1 );
					dini_IntSet( strC, "Spawn", 0 );
				}
				if( strcmp( CasaInfo[ c ][ Morador3 ], "Ninguem", false ))
				{
					format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ c ][ Morador3 ] );
					dini_IntSet( strC, "MorandoID", -1 );
					dini_IntSet( strC, "Spawn", 0 );
				}
				DestroyPickup( CasaPickup[ c ] );
				format( CasaInfo[ c ][ Proprietario ], 12, "Ninguem" );
				format( CasaInfo[ c ][ Morador ], 12, "Ninguem" );
				format( CasaInfo[ c ][ Morador2 ], 12, "Ninguem" );
				format( CasaInfo[ c ][ Morador3 ], 12, "Ninguem" );
				format( CasaInfo[ c ][ Login ], 12, "00/00/0000" );
				format( CasaInfo[ c ][ Horario ], 12, "00:00:00" );
				format( CasaInfo[ c ][ Mensagem ], 6, "Nada" );
				CasaInfo[ c ][ Status ] = 0;
				dini_Set( hFile, "Proprietario", "Ninguem" );
				dini_Set( hFile, "Morador", "Ninguem" );
				dini_Set( hFile, "Morador2", "Ninguem" );
				dini_Set( hFile, "Morador3", "Ninguem" );
				dini_Set( hFile, "Login", "00/00/0000" );
				dini_Set( hFile, "Horario", "00:00:00" );
				dini_Set( hFile, "Mensagem", "Nada" );
				dini_Set( hFile, "Status", "0" );
				dini_Set( hFile, "Dono", "0" );
				if( dini_Int( hFile, "CarModel" ) != 0 )
				{
					new
					vcasaModelo = dini_Int( hFile, "CarModel" )
					;
					switch( vcasaModelo )
					{
						case 400: vPreco[ playerid ] = PRECO_LANDSTALKER;
						case 401: vPreco[ playerid ] = PRECO_BRAVURA;
						case 402: vPreco[ playerid ] = PRECO_BUFFALO;
						case 404: vPreco[ playerid ] = PRECO_PERENNIEL;
						case 409: vPreco[ playerid ] = PRECO_STRETCH;
						case 411: vPreco[ playerid ] = PRECO_INFERNUS;
						case 412: vPreco[ playerid ] = PRECO_VOODOO;
						case 415: vPreco[ playerid ] = PRECO_CHEETAH;
						case 418: vPreco[ playerid ] = PRECO_MOONBEAM;
						case 419: vPreco[ playerid ] = PRECO_ESPERANTO;
						case 421: vPreco[ playerid ] = PRECO_WASHINGTON;
						case 422: vPreco[ playerid ] = PRECO_BOBCAT;
						case 424: vPreco[ playerid ] = PRECO_BF_INJECTION;
						case 429: vPreco[ playerid ] = PRECO_BANSHEE;
						case 434: vPreco[ playerid ] = PRECO_HOTKNIFE;
						case 445: vPreco[ playerid ] = PRECO_ADMIRAL;
						case 451: vPreco[ playerid ] = PRECO_TURISMO;
						case 461: vPreco[ playerid ] = PRECO_PCJ_600;
						case 462: vPreco[ playerid ] = PRECO_FAGGIO;
						case 463: vPreco[ playerid ] = PRECO_FREEWAY;
						case 466: vPreco[ playerid ] = PRECO_GLENDALE;
						case 468: vPreco[ playerid ] = PRECO_SANCHEZ;
						case 471: vPreco[ playerid ] = PRECO_QUAD;
						case 474: vPreco[ playerid ] = PRECO_HERMES;
						case 475: vPreco[ playerid ] = PRECO_SABRE;
						case 477: vPreco[ playerid ] = PRECO_ZR_350;
						case 478: vPreco[ playerid ] = PRECO_WALTON;
						case 480: vPreco[ playerid ] = PRECO_COMET;
						case 481: vPreco[ playerid ] = PRECO_BMX;
						case 482: vPreco[ playerid ] = PRECO_BURRITO;
						case 483: vPreco[ playerid ] = PRECO_CAMPER;
						case 489: vPreco[ playerid ] = PRECO_RANCHER;
						case 491: vPreco[ playerid ] = PRECO_VIRGO;
						case 492: vPreco[ playerid ] = PRECO_GREENWOOD;
						case 494: vPreco[ playerid ] = PRECO_HOTRING;
						case 495: vPreco[ playerid ] = PRECO_SANDKING;
						case 496: vPreco[ playerid ] = PRECO_BLISTA_COMPACT;
						case 498: vPreco[ playerid ] = PRECO_BOXVILLE;
						case 500: vPreco[ playerid ] = PRECO_MESA;
						case 504: vPreco[ playerid ] = PRECO_BLOODRING_BANGER;
						case 505: vPreco[ playerid ] = PRECO_RANCHER;
						case 506: vPreco[ playerid ] = PRECO_SUPER_GT;
						case 507: vPreco[ playerid ] = PRECO_ELEGANT;
						case 509: vPreco[ playerid ] = PRECO_BIKE;
						case 517: vPreco[ playerid ] = PRECO_MAJESTIC;
						case 518: vPreco[ playerid ] = PRECO_BUCCANEER;
						case 521: vPreco[ playerid ] = PRECO_FCR_900;
						case 522: vPreco[ playerid ] = PRECO_NRG_500;
						case 529: vPreco[ playerid ] = PRECO_WILLARD;
						case 533: vPreco[ playerid ] = PRECO_FELTZER;
						case 534: vPreco[ playerid ] = PRECO_REMINGTON;
						case 535: vPreco[ playerid ] = PRECO_SLAMVAM;
						case 536: vPreco[ playerid ] = PRECO_BLADE;
						case 540: vPreco[ playerid ] = PRECO_VINCENT;
						case 541: vPreco[ playerid ] = PRECO_BULLET;
						case 542: vPreco[ playerid ] = PRECO_CLOVER;
						case 543: vPreco[ playerid ] = PRECO_SADLER;
						case 545: vPreco[ playerid ] = PRECO_HUSTLER;
						case 550: vPreco[ playerid ] = PRECO_SUNRISE;
						case 554: vPreco[ playerid ] = PRECO_YOSEMITE;
						case 558: vPreco[ playerid ] = PRECO_URANOS;
						case 559: vPreco[ playerid ] = PRECO_JESTER;
						case 560: vPreco[ playerid ] = PRECO_SULTAN;
						case 561: vPreco[ playerid ] = PRECO_STRATUM;
						case 562: vPreco[ playerid ] = PRECO_ELEGY;
						case 565: vPreco[ playerid ] = PRECO_FLASH;
						case 567: vPreco[ playerid ] = PRECO_SAVANNA;
						case 568: vPreco[ playerid ] = PRECO_BANDITO;
						case 571: vPreco[ playerid ] = PRECO_KART;
						case 575: vPreco[ playerid ] = PRECO_BROADWAY;
						case 576: vPreco[ playerid ] = PRECO_TORNADO;
						case 579: vPreco[ playerid ] = PRECO_HUNTLEY;
						case 580: vPreco[ playerid ] = PRECO_STAFFORD;
						case 581: vPreco[ playerid ] = PRECO_BF_400;
						case 585: vPreco[ playerid ] = PRECO_EMPEROR;
						case 586: vPreco[ playerid ] = PRECO_WAYFARER;
						case 587: vPreco[ playerid ] = PRECO_EUROS;
						case 589: vPreco[ playerid ] = PRECO_CLUB;
						case 600: vPreco[ playerid ] = PRECO_PICADOR;
						case 602: vPreco[ playerid ] = PRECO_ALPHA;
						case 603: vPreco[ playerid ] = PRECO_PHOENIX;
						case 604: vPreco[ playerid ] = PRECO_GLENDALE;
						case 605: vPreco[ playerid ] = PRECO_SADLER;
						case 609: vPreco[ playerid ] = PRECO_BOXVILLE;
					}
					sGivePlayerCash( playerid, vPreco[ playerid ] * 90 / 100 );
					format( gStr, sizeof( gStr ), "[ INFO ] Você recebeu o valor de %d pelo veículo %s, de sua ex casa.", ( vPreco[ playerid ] * 90 / 100 ), vNome[ dini_Int( hFile, "CarModel" )-400 ] );
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					vPreco[ playerid ] = 0;
				}
				dini_Set( hFile, "vNome", "Sem Nome" );
				dini_IntSet( hFile, "CarModel", 0 );
				dini_IntSet( hFile, "Cor1", 0 );
				dini_IntSet( hFile, "Cor2", 0 );
				cInfo[ CasaInfo[ c ][ Numero ] ][ CarModel ] = 0;
				cInfo[ CasaInfo[ c ][ Numero ] ][ Cor1 ] = 0;
				cInfo[ CasaInfo[ c ][ Numero ] ][ Cor2 ] = 0;
				Update3DTextLabelText( cInfo[ CasaInfo[ c ][ Numero ] ][ Label ], -1, "   " );
				SetVehicleVirtualWorld( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], 999 );
				new
				casacom[ 128 ]
				;
				format( casacom, sizeof( casacom ), "%s vendeu a casa %d | %s | %s", PlayerName( playerid ), CasaInfo[ c ][ Numero ], Gdata(), Ghora());
				casaComprou( casacom );

				pInfo[ playerid ][ Casa ] = -1;

				format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {00FF00}Liberada", CasaInfo[ c ][ Numero ] );
				Update3DTextLabelText( CasaLabel[ c ], COLOR_BRANCO, gStr );

				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "morador", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				if( !strcmp( CasaInfo[ c ][ Morador ], "Ninguem", true ) || !strcmp( CasaInfo[ c ][ Morador2 ], "Ninguem", true ) || !strcmp( CasaInfo[ c ][ Morador3 ], "Ninguem", true ))
				{
					tmp = strtok( cmdtext, idx );
					if( !strlen( tmp ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Morador [ ID ]" );
						return 1;
					}
					new
					id = strval( tmp )
					;
					if( GetDistanceBetweenPlayers( playerid, id ) > 5 )
					{
						MensagemFormatada( playerid, COLOR_ERRO, "[ x ] %s está muito longe da casa, peça para ele(a) ficar próximo da porta da casa !", PlayerName( id ));
						return 1;
					}
					if( !IsPlayerConnected( id ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
						return 1;
					}
					if( playerid == id )
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode por você mesmo de morador da sua casa !" );
						return 1;
					}
					format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( id ));
					new
					CasaMID = dini_Int( gFile, "Casa" )
					;
					if( CasaMID > 0 )
					{
						format( gStr, sizeof( gStr ), "Casas/casa%d.ini", CasaMID );
						if( fexist( gStr ))
						{
							if( !strcmp( PlayerName( id ), CasaInfo[ CasaMID ][ Proprietario ], true ))
							{
								SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) já é Dono(a) de uma casa !" );
								return 1;
							}
							else
							{
								dini_IntSet( gFile, "Casa", -1 );
							}
						}
					}
					else
					{
						new
						CasaMMID = dini_Int( gFile, "MorandoID" )
						;
						if( CasaMMID > 0 )
						{
							format( gStr, sizeof( gStr ), "Casas/casa%d.ini", CasaMMID );
							if( fexist( gStr ))
							{
								if( !strcmp( PlayerName( id ), CasaInfo[ CasaMMID ][ Morador ], true ) || !strcmp( CasaInfo[ CasaMMID ][ Morador2 ], PlayerName( playerid ), true ) || !strcmp( CasaInfo[ CasaMMID ][ Morador3 ], PlayerName( playerid ), true ))
								{
									SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) já mora em uma casa !" );
									return 1;
								}
								else
								{
									dini_IntSet( gFile, "MorandoID", -1 );
								}
							}
						}
					}
					format( gstring, sizeof( gstring ), "[ > ] %s está convidando você para morar na casa dele(a), use: ( /Aceitar | /Recusar )", PlayerName( playerid ));
					SendClientMessage( id, COLOR_VERDEFRACO, gstring );
					format( gstring, sizeof( gstring ), "[ > ] Você está convidando %s para morar em sua casa.", PlayerName( id ));
					SendClientMessage( playerid, COLOR_VERDEFRACO, gstring );
					MoradorCasaID[ id ] = playerid;
					AceitarMorador[ id ] = CasaInfo[ c ][ Numero ];
					MoradorCount[ id ] = 5;
					T_Morador[ id ] = SetTimerEx( "MensagemMorador", 3000, false, "d", id );
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua casa já possui 3 moradores, não há mais espaço para mais moradores !" );
				}
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "remover", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				tmp = strtok( cmdtext, idx );
				if( !strlen( tmp ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ > ] Opções: m1 = Morador 1, m2 = Morador 2, m3 = Morador 3" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Remover {FFFFFF}[ Opção ]" );
					return 1;
				}
				else if( !strcmp( tmp, "m1", true ))
				{
					if( !strcmp( CasaInfo[ c ][ Morador ], "Ninguem", true ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem nenhum morador na vaga 1 !" );
						return 1;
					}
					MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] O morador %s foi removido da sua casa com sucesso !", CasaInfo[ c ][ Morador ] );
					format( gFile, sizeof( gFile ), "Contas/%s.ini", CasaInfo[ c ][ Morador ] );
					dini_IntSet( gFile, "MorandoID", -1 );
					dini_IntSet( gFile, "Spawn", 0 );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					format( CasaInfo[ c ][ Morador ], 64, "Ninguem" );
					dini_Set( hFile, "Morador", "Ninguem" );
					return 1;
				}
				else if( !strcmp( tmp, "m2", true ))
				{
					if( !strcmp( CasaInfo[ c ][ Morador2 ], "Ninguem", true ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem nenhum morador na vaga 1 !" );
						return 1;
					}
					MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] O morador %s foi removido da sua casa com sucesso !", CasaInfo[ c ][ Morador2 ] );
					format( gFile, sizeof( gFile ), "Contas/%s.ini", CasaInfo[ c ][ Morador2 ] );
					dini_IntSet( gFile, "MorandoID", -1 );
					dini_IntSet( gFile, "Spawn", 0 );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					format( CasaInfo[ c ][ Morador2 ], 64, "Ninguem" );
					dini_Set( hFile, "Morador2", "Ninguem" );
					return 1;
				}
				else if( !strcmp( tmp, "m3", true ))
				{
					if( !strcmp( CasaInfo[ c ][ Morador3 ], "Ninguem", true ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem nenhum morador na vaga 1 !" );
						return 1;
					}
					MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] O morador %s foi removido da sua casa com sucesso !", CasaInfo[ c ][ Morador3 ] );
					format( gFile, sizeof( gFile ), "Contas/%s.ini", CasaInfo[ c ][ Morador3 ] );
					dini_IntSet( gFile, "MorandoID", -1 );
					dini_IntSet( gFile, "Spawn", 0 );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					format( CasaInfo[ c ][ Morador3 ], 64, "Ninguem" );
					dini_Set( hFile, "Morador3", "Ninguem" );
					return 1;
				}
			}
		}
	}
	else if( !strcmp( tmp, "revogar", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Morador ], PlayerName( playerid ), false ) &&
				strcmp( CasaInfo[ c ][ Morador2 ], PlayerName( playerid ), false ) &&
				strcmp( CasaInfo[ c ][ Morador3 ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não mora nessa casa !" );
					return 1;
				}
				format( gStr, sizeof( gStr ), "[ > ] %s, você revogou a sua moradia na casa ID %d.", PlayerName( playerid ), CasaInfo[ c ][ Numero ] );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
				if( strcmp( CasaInfo[ c ][ Morador ], PlayerName( playerid ), true ) == 0 )
				{
					format( CasaInfo[ c ][ Morador ], 64, "Ninguem" );
					dini_Set( hFile, "Morador", "Ninguem" );
				}
				if( strcmp( CasaInfo[ c ][ Morador2 ], PlayerName( playerid ), true ) == 0 )
				{
					format( CasaInfo[ c ][ Morador2 ], 64, "Ninguem" );
					dini_Set( hFile, "Morador2", "Ninguem" );
				}
				if( strcmp( CasaInfo[ c ][ Morador3 ], PlayerName( playerid ), true ) == 0 )
				{
					format( CasaInfo[ c ][ Morador3 ], 64, "Ninguem" );
					dini_Set( hFile, "Morador3", "Ninguem" );
				}
				format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
				dini_IntSet( gFile, "MorandoID", -1 );
				dini_IntSet( gFile, "Spawn", 0 );
				pInfo[ playerid ][ Spawn ] = 0;
				return 1;
			}
		}
	}
	else if( !strcmp( tmp, "abrir", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				if( CasaInfo[ c ][ Status ] == 0 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua casa já está aberta !" );
					return 1;
				}
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você abriu sua casa !" );
				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
				dini_IntSet( hFile, "Status", 0 );
				CasaInfo[ c ][ Status ] = 0;
				return 1;
			}
		}
	}
	else if( !strcmp( tmp, "fechar", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				if( CasaInfo[ c ][ Status ] == 1 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua casa já está fechada !" );
					return 1;
				}
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você fechou sua casa !" );
				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
				dini_IntSet( hFile, "Status", 1 );
				CasaInfo[ c ][ Status ] = 1;
				return 1;
			}
		}
	}
	else if( !strcmp( tmp, "entrar", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ) &&
				strcmp( CasaInfo[ c ][ Morador ], PlayerName( playerid ), false ) &&
				strcmp( CasaInfo[ c ][ Morador2 ], PlayerName( playerid ), false ) &&
				strcmp( CasaInfo[ c ][ Morador3 ], PlayerName( playerid ), false ))
				{
					if( CasaInfo[ c ][ Status ] == 1 )
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa casa está fechada !" );
						return 1;
					}
				}
				InHouse[ playerid ] = CasaInfo[ c ][ Numero ];
				if( strcmp( CasaInfo[ InHouse[ playerid ] ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, seja bem vindo(a) à sua casa ID %d.", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ] );
					SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
				}
				else
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, seja bem vindo(a) à casa ID %d, que pertence à %s", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ], CasaInfo[ InHouse[ playerid ] ][ Proprietario ] );
					SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
				}
				SetPlayerPos( playerid, CasaInfo[ c ][ InteriorX ], CasaInfo[ c ][ InteriorY ], CasaInfo[ c ][ InteriorZ ] );
				SetPlayerVirtualWorld( playerid, CasaInfo[ c ][ VirtualWorld ] );
				SetPlayerInterior( playerid, CasaInfo[ c ][ InteriorID ] );
				EntrouCasa[ playerid ] = 1;
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "sair", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( EntrouCasa[ playerid ] == 1 )
			{
				if( InHouse[ playerid ] == -1 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro de uma casa !" );
					return 1;
				}
				if( !IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ InHouse[ playerid ] ][ InteriorX ], CasaInfo[ InHouse[ playerid ] ][ InteriorY ], CasaInfo[ InHouse[ playerid ] ][ InteriorZ ] ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está longe da porta !" );
					return 1;
				}
				if( strcmp( CasaInfo[ InHouse[ playerid ] ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, você saiu da sua casa ID %d.", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ] );
					SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
				}
				else
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, você saiu da casa ID %d, que pertence à %s", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ], CasaInfo[ InHouse[ playerid ] ][ Proprietario ] );
					SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
				}
				SetPlayerPos( playerid, CasaInfo[ InHouse[ playerid ] ][ PickupX ], CasaInfo[ InHouse[ playerid ] ][ PickupY ], CasaInfo[ InHouse[ playerid ] ][ PickupZ ] );
				SetPlayerVirtualWorld( playerid, 0 );
				SetPlayerInterior( playerid, 0 );
				if( IsCasaIlha( CasaInfo[ InHouse[ playerid ] ][ Numero ] ))
				{
					TogglePlayerControllable( playerid, false );
					SetTimerEx( "DescongelarIlha", 5000, false, "d", playerid );
				}
				EntrouCasa[ playerid ] = 0;
				InHouse[ playerid ] = -1;
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "info", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				new
				stg[ 1024 ]
				;
				format( gStr, 128, "\t{FFFF00}[ Informações Casa {FFFFFF}ID %d {FFFF00}]\n\n{FFFFFF}• Preço:{06EE45} %d", CasaInfo[ c ][ Numero ], CasaInfo[ c ][ Preco ] );
				strcat( stg, gStr );
				format( gStr, 128, "\n\n{FFFFFF}• Dono(a) {FF0000}%s\n\t{FFFFFF}Último Login %s às %s", CasaInfo[ c ][ Proprietario ], CasaInfo[ c ][ Login ], CasaInfo[ c ][ Horario ] );
				strcat( stg, gStr );
				format( gStr, 128, "\n\n{FFFF00}• Mensagem {FFFFFF}%s", CasaInfo[ c ][ Mensagem ] );
				strcat( stg, gStr );

				if( !strcmp( CasaInfo[ c ][ Morador ], "Ninguem", false ))
				{
					strcat( stg, "\n\n{FFFFFF}»{00FF00} Morador(a) 1 {FFFFFF}Ninguém\n" );
				}
				else
				{
					format( gStr, 128, "\n\n{FFFFFF}»{00FF00} Morador(a) 1 {FFFFFF}%s", CasaInfo[ c ][ Morador ] );
					strcat( stg, gStr );
				}
				if( !strcmp( CasaInfo[ c ][ Morador2 ], "Ninguem", false ))
				{
					strcat( stg, "\n\n{FFFFFF}»{00FF00} Morador(a) 2 {FFFFFF}Ninguém\n" );
				}
				else
				{
					format( gStr, 128, "\n\n{FFFFFF}»{00FF00} Morador(a) 2 {FFFFFF}%s", CasaInfo[ c ][ Morador2 ] );
					strcat( stg, gStr );
				}
				if( !strcmp( CasaInfo[ c ][ Morador3 ], "Ninguem", false ))
				{
					strcat( stg, "\n\n{FFFFFF}»{00FF00} Morador(a) 3 {FFFFFF}Ninguém\n" );
				}
				else
				{
					format( gStr, 128, "\n\n{FFFFFF}»{00FF00} Morador(a) 3 {FFFFFF}%s", CasaInfo[ c ][ Morador3 ] );
					strcat( stg, gStr );
				}
				ShowPlayerDialog( playerid, D_iCASA, DIALOG_STYLE_MSGBOX, "{FFFFFF}»» Info Casa", stg, "OK", "" );
				break;
			}
		}
	}
	else if( !strcmp( tmp, "oferecer", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				tmp = strtok( cmdtext, idx );
				if( !strlen( tmp ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Oferecer [ ID ] [ Preço ]" );
					return 1;
				}
				new
				id = strval( tmp )
				;
				tmp = strtok( cmdtext, idx );
				if( !strlen( tmp ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Oferecer [ ID ] [ Preço ]" );
					return 1;
				}
				new
				preco = strval( tmp )
				;
				if( !IsPlayerConnected( id ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
					return 1;
				}
				if( GetDistanceBetweenPlayers( playerid, id ) > 5 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender a casa está muito longe !" );
					return 1;
				}
				if( preco < CasaInfo[ c ][ Preco ] * 50 / 100 || preco > CasaInfo[ c ][ Preco ] * 150 / 100 )
				{
					format( gStr, sizeof( gStr ), "[ x ] Essa casa somente ofertas de $%d à $%d !", CasaInfo[ c ][ Preco ] * 50 / 100, CasaInfo[ c ][ Preco ] * 150 / 100 );
					SendClientMessage( playerid, COLOR_ERRO, gStr );
					return 1;
				}
				if( GetPlayerCash( id ) < preco )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender a casa não tem dinheiro suficiente !" );
					return 1;
				}
				format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( id ));
				if( dini_Int( gFile, "Casa" ) != -1 )
				{
					MensagemFormatada( playerid, COLOR_ERRO, "[ x ] %s já é dono de uma casa !", PlayerName( id ));
					return 1;
				}
				if( dini_Int( gFile, "MorandoID" ) != -1 )
				{
					MensagemFormatada( playerid, COLOR_ERRO, "[ x ] %s é morador de uma casa !", PlayerName( id ));
					return 1;
				}
				format( gStr, sizeof( gStr ), "[ > ] %s está oferecendo a casa dele ID %d para você por $%d. ( /Casa Aceitar | /Casa Recusar )", PlayerName( playerid ), CasaInfo[ c ][ Numero ], preco );
				SendClientMessage( id, COLOR_AMARELO, gStr );
				format( gStr, sizeof( gStr ), "[ > ] Você está oferecendo sua casa ID %d para %s por $%d", CasaInfo[ c ][ Numero ], PlayerName( id ), preco );
				SendClientMessage( playerid, COLOR_SISTEMA, gStr );
				RecebeuCasa[ id ] = playerid;
				Vendedor[ playerid ] = playerid;
				CasaOferecida[ id ] = true;
				LiberadoCasa[ id ] = 1;
				HouseIP = CasaInfo[ c ][ Numero ];
				MoneyHouse[ RecebeuCasa[ id ] ] = preco;
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "aceitar", true ))
	{
		if( CasaOferecida[ playerid ] == false )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo casa para você !" );
			return 1;
		}
		if( GetPlayerCash( playerid ) < ( MoneyHouse[ RecebeuCasa[ playerid ] ] ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sim tentou bugar danadinho(a), agora se fode banido(a) ETERNAMENTE :)" );
			SendClientMessage( playerid, COLOR_VERDEFRACO, "[ > ] BPO WINS !" );
			return BanEx( playerid, "BUG HOUSE" );
		}
		if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ HouseIP ][ PickupX ], CasaInfo[ HouseIP ][ PickupY ], CasaInfo[ HouseIP ][ PickupZ ] ))
		{
			if( !strcmp( CasaInfo[ HouseIP ][ Proprietario ], "Ninguem", true ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] A casa já foi vendida !" );
				return 1;
			}
			new
			zone[ MAX_ZONE_NAME ]
			;
			GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
			format( gstring, sizeof( gstring ), "[ INFO ] Jogador {FFFFFF}%s {E86B3F}vendeu a Casa ID {FFFFFF}%d, {E86B3F}localizada em: {FFFFFF}%s", CasaInfo[ HouseIP ][ Proprietario ], CasaInfo[ HouseIP ][ Numero ], zone );
			SendClientMessageToAll( 0xE86B3FFF, gstring );
			format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ HouseIP ][ Numero ] );
			format( gFile, sizeof( gFile ), "Contas/%s.ini", CasaInfo[ HouseIP ][ Proprietario ] );
			pInfo[ Vendedor[ playerid ] ][ Spawn ] = 2;
			dini_IntSet( gFile, "Casa", -1 );
			dini_IntSet( gFile, "Spawn", 0 );
			dini_IntSet( gFile, "Impostos", 0 );
			dini_IntSet( gFile, "Atrasados", 0 );
			new
			strC[ 128 ]
			;
			if( strcmp( CasaInfo[ HouseIP ][ Morador ], "Ninguem", false ))
			{
				format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ HouseIP ][ Morador ] );
				dini_IntSet( strC, "MorandoID", -1 );
				dini_IntSet( strC, "Spawn", 0 );
			}
			if( strcmp( CasaInfo[ HouseIP ][ Morador2 ], "Ninguem", false ))
			{
				format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ HouseIP ][ Morador2 ] );
				dini_IntSet( strC, "MorandoID", -1 );
				dini_IntSet( strC, "Spawn", 0 );
			}
			if( strcmp( CasaInfo[ HouseIP ][ Morador3 ], "Ninguem", false ))
			{
				format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ HouseIP ][ Morador3 ] );
				dini_IntSet( strC, "MorandoID", -1 );
				dini_IntSet( strC, "Spawn", 0 );
			}
			DestroyPickup( CasaPickup[ HouseIP ] );
			CasaPickup[ HouseIP ] = CreatePickup( 1273, 23, CasaInfo[ HouseIP ][ PickupX ], CasaInfo[ HouseIP ][ PickupY ], CasaInfo[ HouseIP ][ PickupZ ] );
			format( CasaInfo[ HouseIP ][ Proprietario ], 12, "Ninguem" );
			dini_Set( hFile, "Proprietario", "Ninguem" );
			format( CasaInfo[ HouseIP ][ Morador ], 12, "Ninguem" );
			dini_Set( hFile, "Morador", "Ninguem" );
			format( CasaInfo[ HouseIP ][ Morador2 ], 12, "Ninguem" );
			dini_Set( hFile, "Morador2", "Ninguem" );
			format( CasaInfo[ HouseIP ][ Morador3 ], 12, "Ninguem" );
			dini_Set( hFile, "Morador3", "Ninguem" );
			format( CasaInfo[ HouseIP ][ Login ], 12, "00/00/0000" );
			dini_Set( hFile, "Login", "00/00/0000" );
			format( CasaInfo[ HouseIP ][ Mensagem ], 12, "Nada" );
			dini_Set( hFile, "Horario", "00:00:00" );
			format( CasaInfo[ HouseIP ][ Horario ], 12, "00:00:00" );
			dini_Set( hFile, "Mensagem", "Nada" );
			dini_IntSet( hFile, "Status", 0 );
			CasaInfo[ HouseIP ][ Status ] = 0;
			dini_IntSet( hFile, "Dono", 0 );
			dini_IntSet( hFile, "Cor1", 0 );
			dini_IntSet( hFile, "Cor2", 0 );
			dini_Set( hFile, "vNome", "Sem Nome" );
			dini_IntSet( hFile, "newSpawn", 0 );
			sGivePlayerCash( RecebeuCasa[ playerid ], ( MoneyHouse[ RecebeuCasa[ playerid ] ] ));
			sGivePlayerCash( playerid, ( -MoneyHouse[ RecebeuCasa[ playerid ] ] ));
			ComprandoCasaOferecida( playerid );
			CasaOferecida[ playerid ] = false;
			return 1;
		}
		return 1;
	}
	else if( !strcmp( tmp, "mensagem", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
					return 1;
				}
				new
				casaMensagem[ 128 ]
				;
				casaMensagem = strrest( cmdtext, idx );
				if( !strlen( casaMensagem ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Mensagem [ Mensagem ]" );
					return 1;
				}
				if( strlen( casaMensagem ) > 25 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Mensagem muito grande ! ( Máx: 25 caracteres )" );
					return 1;
				}
				format( gStr, sizeof( gStr ), "[ > ] Você alterou a mensagem de sua casa para: {FFFFFF}%s", casaMensagem );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
				dini_Set( hFile, "Mensagem", casaMensagem );
				format( CasaInfo[ c ][ Mensagem ], 25, casaMensagem );
				return 1;
			}
		}
	}
	else if( !strcmp( tmp, "shop", true ))
	{
		for( new c; c < MAX_CASAS; ++c )
		{
			if( aInfo[ playerid ][ Dono ] == 1 )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );

					dini_IntSet( hFile, "Shopping", 1 );

					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Casa reservada para o Shopping." );
				}
				return 1;
			}
			else return SendClientMessage( playerid, 0xA9C4E4AA, "[ SERVER ] Comando invalido !" );
		}
	}
	else if( !strcmp( tmp, "liberar", true )) // Liberar Casa
	{
		if( aInfo[ playerid ][ Dono ] == 1 ) // Quem Pode Liberar Casa
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					format( gFile, sizeof( gFile ), "Contas/%s.ini" , CasaInfo[ c ][ Proprietario ] );
					dini_IntSet( gFile, "Casa", -1 );
					dini_IntSet( gFile, "Spawn", 0 );
					dini_IntSet( gFile, "Impostos", 0 );
					dini_IntSet( gFile, "Atrasados", 0 );
					new
					strC[ 128 ]
					;
					if( strcmp( CasaInfo[ c ][ Morador ], "Ninguem", false ))
					{
						format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ c ][ Morador ] );
						dini_IntSet( strC, "MorandoID", -1 );
						dini_IntSet( strC, "Spawn", 0 );
					}
					if( strcmp( CasaInfo[ c ][ Morador2 ], "Ninguem", false ))
					{
						format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ c ][ Morador2 ] );
						dini_IntSet( strC, "MorandoID", -1 );
						dini_IntSet( strC, "Spawn", 0 );
					}
					if( strcmp( CasaInfo[ c ][ Morador3 ], "Ninguem", false ))
					{
						format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ c ][ Morador3 ] );
						dini_IntSet( strC, "MorandoID", -1 );
						dini_IntSet( strC, "Spawn", 0 );
					}
					DestroyPickup( CasaPickup[ c ] );
					CasaPickup[ c ] = CreatePickup( 1273, 23, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					format( CasaInfo[ c ][ Proprietario ], 12, "Ninguem" );
					dini_Set( hFile, "Proprietario", "Ninguem" );
					format( CasaInfo[ c ][ Morador ], 12, "Ninguem" );
					dini_Set( hFile, "Morador", "Ninguem" );
					format( CasaInfo[ c ][ Morador2 ], 12, "Ninguem" );
					dini_Set( hFile, "Morador2", "Ninguem" );
					format( CasaInfo[ c ][ Morador3 ], 12, "Ninguem" );
					dini_Set( hFile, "Morador3", "Ninguem" );
					format( CasaInfo[ c ][ Login ], 12, "00/00/0000" );
					dini_Set( hFile, "Login", "00/00/0000" );
					format( CasaInfo[ c ][ Mensagem ], 12, "Nada" );
					dini_Set( hFile, "Horario", "00:00:00 " );
					format( CasaInfo[ c ][ Horario ], 12, "00:00:00" );
					dini_Set( hFile, "Mensagem", "Nada" );
					dini_IntSet( hFile, "Status", 0 );
					CasaInfo[ c ][ Status ] = 0;
					dini_IntSet( hFile, "Dono", 0 );
					dini_IntSet( hFile, "CarModel", 0 );
					cInfo[ CasaInfo[ c ][ Numero ] ][ CarModel ] = 0;
					dini_Set( hFile, "vNome", "Sem Nome" );
					SetVehicleVirtualWorld( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], 999 );
					Update3DTextLabelText( cInfo[ CasaInfo[ c ][ Numero ] ][ Label ], 0xFFFFFFAA, "		" );
					new
					zone[ MAX_ZONE_NAME ]
					;
					GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
					format( gstring, sizeof( gstring ), "[ INFO ] O(A) Dono(a) {FFFFFF}%s {4EB84A}liberou a Casa ID {FFFFFF}%d, {4EB84A}localizada em: {FFFFFF}%s", PlayerName( playerid ), CasaInfo[ c ][ Numero ], zone );
					SendClientMessageToAll( 0x4EB84AFF, gstring );
					format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {00FF00}Liberada", CasaInfo[ c ][ Numero ] );
					Update3DTextLabelText( CasaLabel[ c ], COLOR_BRANCO, gStr );
					return 1;
				}
			}
		}
		else return SendClientMessage( playerid, 0xA9C4E4AA, "[ SERVER ] Comando invalido !" );
	}
	else if( !strcmp( tmp, "veiculo", true ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ > ] Para estacionar/fixar o veículo de sua casa digite: {FFFFFF}/VeiculoEstacionar" );
			SendClientMessage( playerid, COLOR_ERRO, "[ > ] Opções: ( Comprar, Respawn, Cor, Nome, IDcorNome, Liberar, Bloquear, Conceder, Desconceder, Vender, Respawn, Recriar )" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo {FFFFFF}[ Opção ]" );
			return 1;
		}
		if( strcmp( tmp, "vender", true ) == 0 )
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					if( dini_Int( hFile, "CarModel" ) == 0 )
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua casa não possui nenhum veículo !" );
						return 1;
					}
					switch( dini_Int( hFile, "CarModel" ))
					{
						case 400: vPreco[ playerid ] = PRECO_LANDSTALKER;
						case 401: vPreco[ playerid ] = PRECO_BRAVURA;
						case 402: vPreco[ playerid ] = PRECO_BUFFALO;
						case 404: vPreco[ playerid ] = PRECO_PERENNIEL;
						case 409: vPreco[ playerid ] = PRECO_STRETCH;
						case 411: vPreco[ playerid ] = PRECO_INFERNUS;
						case 412: vPreco[ playerid ] = PRECO_VOODOO;
						case 415: vPreco[ playerid ] = PRECO_CHEETAH;
						case 418: vPreco[ playerid ] = PRECO_MOONBEAM;
						case 419: vPreco[ playerid ] = PRECO_ESPERANTO;
						case 421: vPreco[ playerid ] = PRECO_WASHINGTON;
						case 422: vPreco[ playerid ] = PRECO_BOBCAT;
						case 424: vPreco[ playerid ] = PRECO_BF_INJECTION;
						case 429: vPreco[ playerid ] = PRECO_BANSHEE;
						case 434: vPreco[ playerid ] = PRECO_HOTKNIFE;
						case 445: vPreco[ playerid ] = PRECO_ADMIRAL;
						case 451: vPreco[ playerid ] = PRECO_TURISMO;
						case 461: vPreco[ playerid ] = PRECO_PCJ_600;
						case 462: vPreco[ playerid ] = PRECO_FAGGIO;
						case 463: vPreco[ playerid ] = PRECO_FREEWAY;
						case 466: vPreco[ playerid ] = PRECO_GLENDALE;
						case 468: vPreco[ playerid ] = PRECO_SANCHEZ;
						case 471: vPreco[ playerid ] = PRECO_QUAD;
						case 474: vPreco[ playerid ] = PRECO_HERMES;
						case 475: vPreco[ playerid ] = PRECO_SABRE;
						case 477: vPreco[ playerid ] = PRECO_ZR_350;
						case 478: vPreco[ playerid ] = PRECO_WALTON;
						case 480: vPreco[ playerid ] = PRECO_COMET;
						case 481: vPreco[ playerid ] = PRECO_BMX;
						case 482: vPreco[ playerid ] = PRECO_BURRITO;
						case 483: vPreco[ playerid ] = PRECO_CAMPER;
						case 489: vPreco[ playerid ] = PRECO_RANCHER;
						case 491: vPreco[ playerid ] = PRECO_VIRGO;
						case 492: vPreco[ playerid ] = PRECO_GREENWOOD;
						case 494: vPreco[ playerid ] = PRECO_HOTRING;
						case 495: vPreco[ playerid ] = PRECO_SANDKING;
						case 496: vPreco[ playerid ] = PRECO_BLISTA_COMPACT;
						case 498: vPreco[ playerid ] = PRECO_BOXVILLE;
						case 500: vPreco[ playerid ] = PRECO_MESA;
						case 504: vPreco[ playerid ] = PRECO_BLOODRING_BANGER;
						case 505: vPreco[ playerid ] = PRECO_RANCHER;
						case 506: vPreco[ playerid ] = PRECO_SUPER_GT;
						case 507: vPreco[ playerid ] = PRECO_ELEGANT;
						case 509: vPreco[ playerid ] = PRECO_BIKE;
						case 517: vPreco[ playerid ] = PRECO_MAJESTIC;
						case 518: vPreco[ playerid ] = PRECO_BUCCANEER;
						case 521: vPreco[ playerid ] = PRECO_FCR_900;
						case 522: vPreco[ playerid ] = PRECO_NRG_500;
						case 529: vPreco[ playerid ] = PRECO_WILLARD;
						case 533: vPreco[ playerid ] = PRECO_FELTZER;
						case 534: vPreco[ playerid ] = PRECO_REMINGTON;
						case 535: vPreco[ playerid ] = PRECO_SLAMVAM;
						case 536: vPreco[ playerid ] = PRECO_BLADE;
						case 540: vPreco[ playerid ] = PRECO_VINCENT;
						case 541: vPreco[ playerid ] = PRECO_BULLET;
						case 542: vPreco[ playerid ] = PRECO_CLOVER;
						case 543: vPreco[ playerid ] = PRECO_SADLER;
						case 545: vPreco[ playerid ] = PRECO_HUSTLER;
						case 546: vPreco[ playerid ] = PRECO_URANUS;
						case 550: vPreco[ playerid ] = PRECO_SUNRISE;
						case 554: vPreco[ playerid ] = PRECO_YOSEMITE;
						case 558: vPreco[ playerid ] = PRECO_URANOS;
						case 559: vPreco[ playerid ] = PRECO_JESTER;
						case 560: vPreco[ playerid ] = PRECO_SULTAN;
						case 561: vPreco[ playerid ] = PRECO_STRATUM;
						case 562: vPreco[ playerid ] = PRECO_ELEGY;
						case 565: vPreco[ playerid ] = PRECO_FLASH;
						case 567: vPreco[ playerid ] = PRECO_SAVANNA;
						case 568: vPreco[ playerid ] = PRECO_BANDITO;
						case 571: vPreco[ playerid ] = PRECO_KART;
						case 575: vPreco[ playerid ] = PRECO_BROADWAY;
						case 576: vPreco[ playerid ] = PRECO_TORNADO;
						case 579: vPreco[ playerid ] = PRECO_HUNTLEY;
						case 580: vPreco[ playerid ] = PRECO_STAFFORD;
						case 581: vPreco[ playerid ] = PRECO_BF_400;
						case 585: vPreco[ playerid ] = PRECO_EMPEROR;
						case 586: vPreco[ playerid ] = PRECO_WAYFARER;
						case 587: vPreco[ playerid ] = PRECO_EUROS;
						case 589: vPreco[ playerid ] = PRECO_CLUB;
						case 600: vPreco[ playerid ] = PRECO_PICADOR;
						case 602: vPreco[ playerid ] = PRECO_ALPHA;
						case 603: vPreco[ playerid ] = PRECO_PHOENIX;
						case 604: vPreco[ playerid ] = PRECO_GLENDALE;
						case 605: vPreco[ playerid ] = PRECO_SADLER;
						case 609: vPreco[ playerid ] = PRECO_BOXVILLE;
					}
					SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~[ Venda Veículo ]~~~~~~~~~~~~•" );
					format( gStr, sizeof( gStr ), "[ > ] Veículo %s vendido, valo recebido $%d.", vNome[ dini_Int( hFile, "CarModel" )-400 ], ( vPreco[ playerid ] * 90 / 100 ));
					SendClientMessage( playerid, COLOR_BRANCO, gStr );
					SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~[ Venda Veículo ]~~~~~~~~~~~~•" );
					sGivePlayerCash( playerid, vPreco[ playerid ] * 90 / 100 );
					SetVehicleVirtualWorld( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], 999 );
					cInfo[ CasaInfo[ c ][ Numero ] ][ CarModel ] = 0;
					dini_IntSet( hFile, "CarModel", 0 );
					dini_Set( hFile, "vNome", "Sem Nome" );
					Update3DTextLabelText( cInfo[ CasaInfo[ c ][ Numero ] ][ Label ], 0xFFFFFFAA, "		" );
					vPreco[ playerid ] = 0;
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "comprar", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					if( dini_Int( hFile, "useCar" ) == 0 )
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa casa não pode ter veículo !" );
						return 1;
					}
					pInfo[ playerid ][ Casa ] = CasaInfo[ c ][ Numero ];
					new
					vIndex[ ] = "» Carros\n» Motos"
					;
					ShowPlayerDialog( playerid, D_vINDEX, DIALOG_STYLE_LIST, "Selecione a categoria", vIndex, "Ok", "Cancelar" );
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "respawn", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ) &&
					strcmp( CasaInfo[ c ][ Morador ], PlayerName( playerid ), false ) &&
					strcmp( CasaInfo[ c ][ Morador2 ], PlayerName( playerid ), false ) &&
					strcmp( CasaInfo[ c ][ Morador3 ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					if( dini_Int( hFile, "CarModel" ) == 0 )
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua casa não possui nenhum veículo !" );
						return 1;
					}
					if( !strcmp( CasaInfo[ c ][ Morador ], PlayerName( playerid ), true ))
					{
						if( dini_Int( hFile, "vM1" ) == 0 )
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem privilégios para usar esse comando !" );
							return 1;
						}
					}
					if( !strcmp( CasaInfo[ c ][ Morador2 ], PlayerName( playerid ), true ))
					{
						if( dini_Int( hFile, "vM2" ) == 0 )
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem privilégios para usar esse comando !" );
							return 1;
						}
					}
					if( !strcmp( CasaInfo[ c ][ Morador3 ], PlayerName( playerid ), true ))
					{
						if( dini_Int( hFile, "vM3" ) == 0 )
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem privilégios para usar esse comando !" );
							return 1;
						}
					}
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O veículo respawnado !" );
					if( GetVehicleVirtualWorld( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ] ) != 999 )
					{
						SetVehicleToRespawn( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ] );
						SetVehicleVirtualWorld( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], 0 );
					}
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "cor", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					tmp = strtok( cmdtext, idx );
					if( !strlen( tmp ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo Cor [ Cor ID 1 ] [ Cor ID 2 ]" );
						return 1;
					}
					new
					vColor1 = strval( tmp )
					;
					tmp = strtok( cmdtext, idx );
					if( !strlen( tmp ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo Cor [ Cor ID 1 ] [ Cor ID 2 ]" );
						return 1;
					}
					new
					vColor2 = strval( tmp )
					;
					format( gStr, sizeof( gStr ), "CarrosTunados/vCasa%d.ini", CasaInfo[ c ][ Numero ] );
					if( !fexist( gStr )) dini_Create( gStr );
					format( gstring, sizeof( gstring ), "[ > ] As cores de seu veículo foram alteradas: {FFFFFF}Cor ID 1 %d, Cor ID 2 %d.", vColor1, vColor2 );
					SendClientMessage( playerid, COLOR_AMARELO, gstring );
					dini_IntSet( gStr, "Cor1", vColor1 );
					dini_IntSet( gStr, "Cor2", vColor2 );
					ChangeVehicleColor( cInfo[ CasaInfo[ c ][ Numero ] ][ HouseCar ], vColor1, vColor2 );
					cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_1 ] = vColor1;
					cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_2 ] = vColor2;
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "recriar", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					SendClientMessage( playerid, COLOR_AMARELO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} Você deixou o seu veículo original." );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
			    	dini_FloatSet( hFile, "vNome", 0 );
					dini_FloatSet( hFile, "newCarX", 0 );
					dini_FloatSet( hFile, "newCarY", 0 );
					dini_FloatSet( hFile, "newCarZ", 0 );
					dini_FloatSet( hFile, "newCarAng", 0 );
					dini_IntSet( hFile, "newSpawn", 0 );
					dini_IntSet( hFile, "Respawn", -1 );
					cInfo[ CasaInfo[ c ][ Numero ] ][ NewCar ] = 1;
					SetTimerEx( "NewCarH", 1000, false, "d", CasaInfo[ c ][ Numero ] );
					format( gStr, 128, "CarrosTunados/vCasa%d.ini", CasaInfo[ c ][ Numero ] );
					fremove( gStr );
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "spawn", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					tmp = strtok( cmdtext, idx );
					if( !strlen( tmp ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo Spawn [ Tempo ]" );
						return 1;
					}
					new
					respawnTempo = strval( tmp )
					;
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O respawn de seu veículo foi redefinido." );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					dini_IntSet( hFile, "Respawn", respawnTempo );
					cInfo[ CasaInfo[ c ][ Numero ] ][ NewCar ] = 1;
					SetTimerEx( "NewCarH", 1000, false, "d", CasaInfo[ c ][ Numero ] );
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "nome", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					new
					veiculoMsg[ 128 ]
					;
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					veiculoMsg = strrest( cmdtext, idx );
					if( !strlen( veiculoMsg ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo Nome [ Nome ]" );
						return 1;
					}
					if( strlen( veiculoMsg ) > 25 )
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Nome muito grande ! ( Máx: 25 caracteres )" );
						return 1;
					}
					MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] Você alterou o nome de seu veículo para: {FFFFFF}%s", veiculoMsg );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					dini_Set( hFile, "vNome", veiculoMsg );
					new
					color = dini_Int( hFile, "vColorID" )
					;
					Update3DTextLabelText( cInfo[ CasaInfo[ c ][ Numero ] ][ Label ], SetZonaCorClan( color ), veiculoMsg );
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "idcornome", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					tmp = strtok( cmdtext, idx );
					if( !strlen( tmp ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo IDcorNome [ Cor ID de 0 à 44 ]" );
						return 1;
					}
					new
					nColor = strval( tmp )
					;
					format( gStr, sizeof( gStr ), "[ > ] Você alterou o ID da cor de seu veículo para Cor ID: {FFFFFF}%d", nColor );
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					Update3DTextLabelText( cInfo[ CasaInfo[ c ][ Numero ] ][ Label ], SetZonaCorClan( nColor ), dini_Get( hFile, "vNome" ));
					dini_IntSet( hFile, "vColorID", nColor );
				}
			}
			return 1;
		}
		else if( !strcmp( tmp, "liberar", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você liberou seu veículo para que todos possa dirigi-lo." );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					dini_IntSet( hFile, "vLiberado", 1 );
					CasaInfo[ c ][ vLiberado ] = 1;
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "bloquear", true ))
		{
			for( new c; c < MAX_CASAS; ++c )
			{
				if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
				{
					if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
						return 1;
					}
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você bloqueou seu veículo para que ninguém possa dirigi-lo." );
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					dini_IntSet( hFile, "vLiberado", 0 );
					CasaInfo[ c ][ vLiberado ] = 0;
					return 1;
				}
			}
		}
		else if( !strcmp( tmp, "conceder", true ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ > ] Opções: m1 = Morador 1, m2 = Morador 2, m3 = Morador 3" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo Conceder {FFFFFF}[ Opção ]" );
				return 1;
			}
			if( !strcmp( tmp, "m1", true ))
			{
				for( new c; c < MAX_CASAS; ++c )
				{
					if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
					{
						if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
							return 1;
						}
						SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você liberou seu veículo para o morador 1." );
						format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
						dini_IntSet( hFile, "vM1", 1 );
						CasaInfo[ c ][ vM1 ] = 1;
						return 1;
					}
				}
			}
			else if( !strcmp( tmp, "m2", true ))
			{
				for( new c; c < MAX_CASAS; ++c )
				{
					if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
					{
						if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
							return 1;
						}
						SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você liberou seu veículo para o morador 2." );
						format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
						dini_IntSet( hFile, "vM2", 1 );
						CasaInfo[ c ][ vM2 ] = 1;
						return 1;
					}
				}
			}
			else if( !strcmp( tmp, "m3", true ))
			{
				for( new c; c < MAX_CASAS; ++c )
				{
					if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
					{
						if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
							return 1;
						}
						SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você liberou seu veículo para o morador 3." );
						format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
						dini_IntSet( hFile, "vM3", 1 );
						CasaInfo[ c ][ vM3 ] = 1;
						return 1;
					}
				}
			}
		}
		else if( !strcmp( tmp, "desconceder", true ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ > ] Opções: m1 = Morador 1, m2 = Morador 2, m3 = Morador 3" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Casa Veiculo Desconceder {FFFFFF}[ Opção ]" );
				return 1;
			}
			if( !strcmp( tmp, "m1", true ))
			{
				for( new c; c < MAX_CASAS; ++c )
				{
					if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
					{
						if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
							return 1;
						}
						SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você bloqueou o veículo para que o morador 1 não possa dirigi-lo." );
						format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
						dini_IntSet( hFile, "vM1", 0 );
						CasaInfo[ c ][ vM1 ] = 0;
						return 1;
					}
				}
			}
			else if( !strcmp( tmp, "m2", true ))
			{
				for( new c; c < MAX_CASAS; ++c )
				{
					if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
					{
						if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
							return 1;
						}
						SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você bloqueou o veículo para que o morador 2 não possa dirigi-lo." );
						format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
						dini_IntSet( hFile, "vM2", 0 );
						CasaInfo[ c ][ vM2 ] = 0;
						return 1;
					}
				}
			}
			else if( !strcmp( tmp, "m3", true ))
			{
				for( new c; c < MAX_CASAS; ++c )
				{
					if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
					{
						if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta casa !" );
							return 1;
						}
						SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você bloqueou o veículo para que o morador 3 não possa dirigi-lo." );
						format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
						dini_IntSet( hFile, "vM3", 0 );
						CasaInfo[ c ][ vM3 ] = 0;
						return 1;
					}
				}
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/empresa", true ))
{
	Tempo[ playerid ] = gettime();

	if( Tempo[ playerid ] - CompanyPickup[ playerid ] > 5 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma empresa !" );
		return 1;
	}

	tmp = strtok( cmdtext, idx );

	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Empresa [ Comprar/Vender/Entrar/Sair/Info/Comandos ]" );
		return 1;
	}
	else if( !strcmp( tmp, "comandos", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; ++m )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) e nem funcionário(a) desta empresa !" );
					return 1;
				}
				SendClientMessage( playerid, COLOR_BRANCO, "{FFFF00}»»»»»»» COMANDOS EMPRESA:" );
				SendClientMessage( playerid, COLOR_BRANCO, "{FFFF00}»»»»»»» (D) para Dono(a) ||| (F) para funcinonário(a) ||| (T) para todos os(as) jogadores(as)." );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa ReceberLucro - Comando para receber o lucro da empresa. (D)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa BaterPonto - Comando para iniciar um busca de mercadoria. (F)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa BaixaEntrega - Comando para dar baixa em uma mercadoria entregue. (F)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa Contratar - Comando para contratar um(a) funcinonário(a). (D)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa Info - Comando para ver as informações da empresa. (T)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa Mensagem - Comando para colocar uma mensagem na informação da empresa. (D)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa SubNome - Comando para colocar um subnome na empresa. (D)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa Demitir - Comando para demitir um(a) funcionário(a). (D)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa Demissao - Comando para se demitir. (F)" );
				SendClientMessage( playerid, COLOR_BRANCO, "» /Empresa Info - Comando para ver as informações da empresa. (T)" );
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "comprar", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( LiberadoEmpresa[ playerid ] == 1 )
				{
					if( !strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa empresa já é sua !" );
						return 1;
					}
					if( strcmp( EmpresaInfo[ m ][ Proprietario ], "Ninguem", false ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa empresa já tem Dono(a) !" );
						return 1;
					}
					new
					donoempresaID = dini_Int( gFile, "EmpresaID" )
					;
					if( donoempresaID > 0 )
					{
						format( str, 128, "[ x ] Você é Dono(a) da empresa %s ID %d.", EmpresaInfo[ donoempresaID ][ NomeEmp ], donoempresaID );
						SendClientMessage( playerid, COLOR_ERRO, str );
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Cada jogador(a) só pode ter somente uma empresa, portando você não pode comprar esta empresa !" );
						return 1;
					}
					new
					contraempresaID = dini_Int( gFile, "Contratado" )
					;
					if( contraempresaID > 0 )
					{
						format( str, 128, "[ x ] Você é funcinonário(a) da empresa %s ID %d.", EmpresaInfo[ contraempresaID ][ NomeEmp ], contraempresaID );
						SendClientMessage( playerid, COLOR_ERRO, str );
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para comprar uma empresa você não pode ser funcionário(a) de outra empresa !" );
						return 1;
					}
					DestroyPickup( EmpresaPickup[ m ] );
					EmpresaPickup[ m ] = CreatePickup( 1579, 23, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] );

					format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
					format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

					dini_IntSet( gFile, "EmpresaID", EmpresaInfo[ m ][ Numero ] );
					dini_IntSet( gStr, "Dono", 1 );
					dini_Set( gStr, "Proprietario", PlayerName( playerid ));

					format( EmpresaInfo[ m ][ Proprietario ], 24, PlayerName( playerid ));

					if( strcmp( EmpresaInfo[ m ][ Funcionario1 ], "Ninguem", false ))
					{
						format( pFile, sizeof( pFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario1 ] );
						dini_IntSet( pFile, "Contratado", 0 );
					}
					if( strcmp( EmpresaInfo[ m ][ Funcionario2 ], "Ninguem", false ))
					{
						format( pFile, sizeof( pFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario2 ] );
						dini_IntSet( pFile, "Contratado", 0 );
					}
					if( strcmp( EmpresaInfo[ m ][ Funcionario3 ], "Ninguem", false ))
					{
						format( pFile, sizeof( pFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario3 ] );
						dini_IntSet( pFile, "Contratado", 0 );
					}
					// F1
					format( EmpresaInfo[ m ][ Funcionario1 ], 10, "Ninguem" );
					dini_Set( gStr, "Funcionario1", "Ninguem" );
					dini_IntSet( gStr, "Producao1", 0 );
					dini_IntSet( gStr, "P1Atual", 0 );
					dini_IntSet( gStr, "P1Time", 0 );

					// F2
					format( EmpresaInfo[ m ][ Funcionario2 ], 10, "Ninguem" );
					dini_Set( gStr, "Funcionario2", "Ninguem" );
					dini_IntSet( gStr, "Producao2", 0 );
					dini_IntSet( gStr, "P2Atual", 0 );
					dini_IntSet( gStr, "P2Time", 0 );

					// F3
					format( EmpresaInfo[ m ][ Funcionario3 ], 10, "Ninguem" );
					dini_Set( gStr, "Funcionario3", "Ninguem" );
					dini_IntSet( gStr, "Producao3", 0 );
					dini_IntSet( gStr, "P3Atual", 0 );
					dini_IntSet( gStr, "P3Time", 0 );

					// Infos Empresa
					format( EmpresaInfo[ m ][ NomeEmpresa ], 10, "Nenhum" );
					format( EmpresaInfo[ m ][ Mensagem ], 10, "Nenhuma" );
					format( EmpresaInfo[ m ][ Horario ], 10, "00:00:00" );
					dini_Set( gStr, "NomeEmpresa", "Nenhum" );
					dini_Set( gStr, "Mensagem", "Nenhuma" );
					dini_Set( gStr, "Login", dini_Get( gFile, "ulData" ));
					dini_Set( gStr, "Horario", dini_Get( gFile, "ulHorario" ));
					dini_IntSet( gStr, "Aberta", 1 );
					EmpresaInfo[ m ][ Aberta ] = 1;
					format( gstring, sizeof( gstring ), "{00FFFF}%s ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}Subnome {FFE735}%s\n{6F62F6}+Info digite:\n{FFFFFF}/Empresa Info", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ EmpresaNome ] );
					Update3DTextLabelText( EmpresaInfo[ m ][ TxTt ], -1, gstring );
					new
					zone[ MAX_ZONE_NAME ]
					;
					GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
					format( gstring, sizeof( gstring ), "> Jogador {FFFFFF}%s {99FF66}comprou a Empresa %s ID {FFFFFF}%d, {99FF66}localizada em: {FFFFFF}%s", PlayerName( playerid ), EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ], zone );
					SendClientMessageToAll( 0x99FF66AA, gstring );
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
				}
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "abrir", true ) && aInfo[ playerid ][ Admin ] == 1 )
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta empresa !" );
					return 1;
				}
				if( EmpresaInfo[ m ][ Aberta ] == 1 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] A sua empresa já está aberta !" );
					return 1;
				}
				SendClientMessage( playerid, COLOR_AZULBEBE, "[ > ] Sua empresa foi aberta." );
				format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );
				dini_IntSet( gStr, "Aberta", 1 );
				EmpresaInfo[ m ][ Aberta ] = 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "fechar", true ) && aInfo[ playerid ][ Admin ] == 1 )
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta empresa !" );
					return 1;
				}
				if( EmpresaInfo[ m ][ Aberta ] == 0 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] A sua empresa já está fechada !" );
					return 1;
				}
				SendClientMessage( playerid, COLOR_AZULBEBE, "[ > ] Sua empresa foi fechada." );
				format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );
				dini_IntSet( gStr, "Aberta", 0 );
				EmpresaInfo[ m ][ Aberta ] = 0;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "entrar", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( EntrouEmpresa[ playerid ] == 0 )
				{
					if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
					{
						if( EmpresaInfo[ m ][ Aberta ] == 0 )
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esta empresa está fechada !" );
							return 1;
						}
					}
					SetPlayerVirtualWorld( playerid, EmpresaInfo[ m ][ VirtualWorld ] );
					SetPlayerInterior( playerid, EmpresaInfo[ m ][ InteriorID ] );
					SetPlayerPos( playerid, EmpresaInfo[ m ][ InteriorX ], EmpresaInfo[ m ][ InteriorY ], EmpresaInfo[ m ][ InteriorZ ] );
					InCompanyPickup[ playerid ] = m;
					if( !strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
					{
						format( gstring, sizeof( gstring ), "[ > ] Seja bem vindo(a) a sua Empresa ID %d - %s, %s", EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ EmpresaNome ], PlayerName( playerid ));
						SendClientMessage( playerid, 0xE0EEEEAA, gstring );
					}
					else
					{
						format( gstring, sizeof( gstring ), "[ > ] Seja bem vindo(a) a Empresa ID %d - %s, que pertence a %s", EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ EmpresaNome ], EmpresaInfo[ m ][ Proprietario ] );
						SendClientMessage( playerid, 0xE0EEEEAA, gstring );
					}
					EntrouEmpresa[ playerid ] = 1;
					return 1;
				}
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "sair", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( EntrouEmpresa[ playerid ] == 1 )
				{
					if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ InteriorX ], EmpresaInfo[ m ][ InteriorY ], EmpresaInfo[ m ][ InteriorZ ] ))
					{
						if( InCompanyPickup[ playerid ] == -1 )
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma empresa !" );
							return 1;
						}
						SetPlayerVirtualWorld( playerid, 0 );
						SetPlayerInterior( playerid, 0 );
						SetPlayerPos( playerid, EmpresaInfo[ InCompanyPickup[ playerid ] ][ PickupX ], EmpresaInfo[ InCompanyPickup[ playerid ] ][ PickupY ], EmpresaInfo[ InCompanyPickup[ playerid ] ][ PickupZ ] );
						EntrouEmpresa[ playerid ] = 0;
						InCompanyPickup[ playerid ] = -1;
						return 1;
					}
				}
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "info", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				format( str, sizeof( str ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );
				new
				stg[ 1500 ]
				;
				format( gstring, 256, "\t{FFFF00}[ Informações Empresa {FFFFFF}ID %d {FFFF00}]\n\n{FFFFFF}• Empresa {FFFF00}%s{FFFFFF} - Preço:{06EE45} %d", EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Preco ] );
				strcat( stg, gstring );
				format( gStr, 128, "\n{FFFFFF}• Sub Nome {FFFF00}%s\n\n{FFFFFF}• Dono(a) {31FFF0}%s\n\n", EmpresaInfo[ m ][ NomeEmpresa ], EmpresaInfo[ m ][ Proprietario ] );
				strcat( stg, gStr );
				if( !strcmp( EmpresaInfo[ m ][ Funcionario1 ], "Ninguem", true ))
				{
					format( gStr, 128, "{FFFFFF}»{B7FF1A} Funcionário(a) 1 {FFFFFF}Nenhum(a) funcionário(a)\n" );
					strcat( stg, gStr );
				}
				else
				{
					format( gStr, 128, "{FFFFFF}»{B7FF1A} Funcionário(a) 1 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d\n", EmpresaInfo[ m ][ Funcionario1 ], dini_Int( str, "Producao1" ), dini_Int( str, "P1Atual" ));
					strcat( stg, gStr );
				}
				if( !strcmp( EmpresaInfo[ m ][ Funcionario2 ], "Ninguem", true ))
				{
					format( gStr, 128, "{FFFFFF}»{B7FF1A} Funcionário(a) 2 {FFFFFF}Nenhum(a) funcionário(a)\n" );
					strcat( stg, gStr );
				}
				else
				{
					format( gStr, 128, "{FFFFFF}»{B7FF1A} Funcionário(a) 2 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d\n", EmpresaInfo[ m ][ Funcionario2 ], dini_Int( str, "Producao2" ), dini_Int( str, "P2Atual" ));
					strcat( stg, gStr );
				}
				if( !strcmp( EmpresaInfo[ m ][ Funcionario3 ], "Ninguem", true ))
				{
					format( gStr, 128, "{FFFFFF}»{B7FF1A} Funcionário(a) 3 {FFFFFF}Nenhum(a) funcionário(a)\n" );
					strcat( stg, gStr );
				}
				else
				{
					format( gStr, 128, "{FFFFFF}»{B7FF1A} Funcionário(a) 3 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d", EmpresaInfo[ m ][ Funcionario3 ], dini_Int( str, "Producao3" ), dini_Int( str, "P3Atual" ));
					strcat( stg, gStr );
				}
				if( !strcmp( EmpresaInfo[ m ][ Proprietario ], "Ninguem", false ))
				{
					format( gStr, 128, "\n{FFFFFF}Ultimo login do(a) Dono(a): {FF0000}Empresa sem Dono(a)" );
				}
				else
				{
					format( pFile, 128, "Contas/%s.ini", EmpresaInfo[ m ][ Proprietario ] );
					format( gStr, 128, "\n{FFFFFF}Ultimo login do(a) Dono(a): %s as %s", dini_Get( pFile, "ulData" ), dini_Get( pFile, "ulHorario" ));
				}
				strcat( stg, gStr );
				ShowPlayerDialog( playerid, D_EMPRINFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}»» Info Empresa", stg, "OK", "" );
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "liberar", true )) // Liberar Empresa
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( aInfo[ playerid ][ Dono ] == 1 ) // Quem Pode Liberar Empresa
				{
					format( gFile, sizeof( gFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Proprietario ] );
					format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

					DestroyPickup( EmpresaPickup[ m ] );
					EmpresaPickup[ m ] = CreatePickup( 1577, 23, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] );

					dini_IntSet( gFile, "EmpresaID", 0 );
					dini_IntSet( gFile, "Contratado", 0 );
					dini_IntSet( gStr, "Dono", 0 );

					format( EmpresaInfo[ m ][ Proprietario ], 24, "Ninguem" );
					dini_Set( gStr, "Proprietario", "Ninguem" );

					if( strcmp( EmpresaInfo[ m ][ Funcionario1 ], "Ninguem", false ))
					{
						format( pFile, sizeof( pFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario1 ] );
						dini_IntSet( pFile, "Contratado", 0 );
					}
					if( strcmp( EmpresaInfo[ m ][ Funcionario2 ], "Ninguem", false ))
					{
						format( pFile, sizeof( pFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario2 ] );
						dini_IntSet( pFile, "Contratado", 0 );
					}
					if( strcmp( EmpresaInfo[ m ][ Funcionario3 ], "Ninguem", false ))
					{
						format( pFile, sizeof( pFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario3 ] );
						dini_IntSet( pFile, "Contratado", 0 );
					}
					format( EmpresaInfo[ m ][ Funcionario1 ], 12, "Ninguem" );
					dini_Set( gStr, "Funcionario1", "Ninguem" );
					format( EmpresaInfo[ m ][ Funcionario2 ], 12, "Ninguem" );
					dini_Set( gStr, "Funcionario2", "Ninguem" );
					format( EmpresaInfo[ m ][ Funcionario3 ], 12, "Ninguem" );
					dini_Set( gStr, "Funcionario3", "Ninguem" );
					dini_Set( gStr, "NomeEmpresa", "Nenhum" );
					format( EmpresaInfo[ m ][ NomeEmpresa ], 64, "Nenhum" );
					format( EmpresaInfo[ m ][ NomeEmp ], 12, "Nenhum" );
					dini_Set( gStr, "Login", "00/00/0000" );
					format( EmpresaInfo[ m ][ Mensagem ], 12, "Nada" );
					dini_Set( gStr, "Horario", "00:00:00" );
					format( EmpresaInfo[ m ][ Horario ], 12, "00:00:00" );
					dini_Set( gStr, "Mensagem", "Nada" );
					dini_IntSet( gStr, "Producao1", 0 );
					dini_IntSet( gStr, "Producao2", 0 );
					dini_IntSet( gStr, "Producao3", 0 );
					dini_IntSet( gStr, "Aberta", 1 );
					EmpresaInfo[ m ][ Aberta ] = 1;
					format( gstring, sizeof( gstring ), "{00FFFF}%s ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}Subnome {FFE735}%s\n{6F62F6}+Info digite:\n{FFFFFF}/Empresa Info", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ EmpresaNome ] );
					Update3DTextLabelText( EmpresaInfo[ m ][ TxTt ], -1, gstring );
					new
					zone[ MAX_ZONE_NAME ]
					;
					GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
					format( gstring, sizeof( gstring ), "[ INFO ] O(A) Dono(a) {FFFFFF}%s {4EB84A}liberou a Empresa ID {FFFFFF}%d, {4EB84A}localizada em: {FFFFFF}%s", PlayerName( playerid ), EmpresaInfo[ m ][ Numero ], zone );
					SendClientMessageToAll( 0x4EB84AFF, gstring );
					return 1;
				}
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "subnome", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta empresa !" );
					return 1;
				}
				new length = strlen( cmdtext );
				while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
				{
					idx++;
				}
				new offset = idx;
				new result[ 64 ];
				while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
				{
					result[ idx - offset ] = cmdtext[ idx ];
					idx++;
				}
				result[ idx - offset ] = EOS;
				if( !strlen( result ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: '/Empresa SubNome [ Nome ]'" );
					return 1;
				}
				if( !IsValidFrase( result ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você utilizou caracteres invalido / especiais !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Escolha um subnome com caracteres comuns !" );
					return 1;
				}
				if( strlen( result ) > 25 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Nome muito grande ! ( Máx: 25 caracteres )" );
					return 1;
				}
				format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );
				dini_Set( gStr, "NomeEmpresa", result );
				format( EmpresaInfo[ m ][ NomeEmpresa ], 64, result );
				format( gStr, 128, "[ > ] Você alterou o subnome da sua empresa para:{FFFFFF} %s", result );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
				format( gstring, sizeof( gstring ), "{00FFFF}%s ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}Subnome {FFE735}%s\n{6F62F6}+Info digite:\n{FFFFFF}/Empresa Info", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmpresa ] );
				Update3DTextLabelText( EmpresaInfo[ m ][ TxTt ], -1, gstring );
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "mensagem", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta empresa !" );
					return 1;
				}
				new length = strlen( cmdtext );
				while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
				{
					idx++;
				}
				new offset = idx;
				new result[ 64 ];
				while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
				{
					result[ idx - offset ] = cmdtext[ idx ];
					idx++;
				}
				result[ idx - offset ] = EOS;
				if( !strlen( result ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: '/Empresa Mensagem [ Mensagem ]'" );
					return 1;
				}
				if( !IsValidFrase( result ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você utilizou caracteres invalido / especiais !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Escolha uma mensagem com caracteres comuns !" );
					return 1;
				}
				if( strlen( result ) > 30 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Mensagem muito grande ! ( Máx: 30 caracteres )" );
					return 1;
				}
				format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );
				dini_Set( gStr, "Mensagem", result );

				format( EmpresaInfo[ m ][ Mensagem ], 64, result );

				format( gStr, 128, "[ > ] Você alterou a mensagem de sua empresa para: {FFFFFF}%s", result );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );

				format( s5Doze, sizeof( s5Doze ), "{00FFFF}%s ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}Subnome {FFE735}%s\n{6F62F6}+Info digite:\n{FFFFFF}/Empresa Info\n\n{FFFFFF}Mensagem: {00E4F6}%s", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmpresa ], EmpresaInfo[ m ][ Mensagem ] );
				Update3DTextLabelText( EmpresaInfo[ m ][ TxTt ], -1, s5Doze );
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "contratar", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta empresa !" );
					return 1;
				}
				if( strcmp( EmpresaInfo[ m ][ Funcionario1 ], "Ninguem", false ) && strcmp( EmpresaInfo[ m ][ Funcionario2 ], "Ninguem", false ) && strcmp( EmpresaInfo[ m ][ Funcionario3 ], "Ninguem", false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já excedeu o limite de funcionários em sua empresa !" );
					return 1;
				}
				tmp = strtok( cmdtext, idx );
				if( !strlen( tmp ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Empresa Contratar [ ID ]" );
					return 1;
				}
				new
				id = strval( tmp )
				;
				if( GetDistanceBetweenPlayers( playerid, id ) > 5 )
				{
					MensagemFormatada( playerid, COLOR_ERRO, "[ x ] %s está muito longe da empresa, peça para ele vim mais próximo !", PlayerName( id ));
					return 1;
				}
				if( !IsPlayerConnected( id ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
					return 1;
				}
				if( playerid == id )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode contratar você mesmo(a) para sua empresa !" );
					return 1;
				}
				new
				donoempresaID = dini_Int( f( id ), "EmpresaID" )
				;
				if( donoempresaID > 0 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) é Dono(a) de uma empresa !" );
					return 1;
				}
				new
				contratadoID = dini_Int( f( id ), "Contratado" )
				;
				if( contratadoID > 0 )
				{
					if( !strcmp( EmpresaInfo[ contratadoID ][ Funcionario1 ], PlayerName( playerid ), true ) || !strcmp( EmpresaInfo[ contratadoID ][ Funcionario2 ], PlayerName( playerid ), true ) || strcmp( EmpresaInfo[ contratadoID ][ Funcionario3 ], PlayerName( playerid ), true ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) já é funcionário(a) de uma empresa !" );
					}
					return 1;
				}
				format( gstring, sizeof( gstring ), "[ > ] %s está lhe oferecendo um contrato para trabalhar na empresa dele.", PlayerName( playerid ));
				SendClientMessage( id, COLOR_VERDEFRACO, gstring );
				format( gstring, sizeof( gstring ), "[ > ] Você está oferecendo para %s um contrato para ele(a) trabalhar na sua empresa.", PlayerName( id ));
				SendClientMessage( playerid, COLOR_VERDEFRACO, gstring );
				DonoEmpresa[ id ] = playerid;
				AceitarContrato[ id ] = 1;
				ContratoMsg[ id ] = 5;
				T_Contratado[ id ] = SetTimerEx( "MensagemContrato", 3000, false, "d", id );
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "demitir", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ) && dini_Int( f( playerid ), "Dono" ) == 0 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta empresa !" );
					return 1;
				}

				format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

				tmp = strtok( cmdtext, idx );

				if( !strlen( tmp ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /empresa demitir [ f1/f2/f3 ]" );
					return 1;
				}
				else if( !strcmp( tmp, "f1", true ))
				{
					if( !strcmp( EmpresaInfo[ m ][ Funcionario1 ], "Ninguem", true ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não à ninguém ocupando a vaga número 1 !" );
						return 1;
					}
					MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] Você demitiu %s da sua empresa que ocupava a vaga número 1 !", EmpresaInfo[ m ][ Funcionario1 ] );
					format( gFile, sizeof( gFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario1 ] );
					foreach(Player, i )
					{
						if( !strcmp( PlayerName( i ), EmpresaInfo[ m ][ Funcionario1 ], false ))
						{
							MensagemFormatada( i, COLOR_AMARELO, "[ > ] Você foi demitido da empresa de %s", PlayerName( playerid ));
						}
					}
					dini_IntSet( gFile, "Contratado", 0 );
					format( EmpresaInfo[ m ][ Funcionario1 ], 64, "Ninguem" );
					dini_Set( gStr, "Funcionario1", "Ninguem" );
					dini_IntSet( gStr, "Producao1", 0 );
					dini_IntSet( gStr, "P1Atual", 0 );
				}
				else if( !strcmp( tmp, "f2", true ))
				{
					if( !strcmp( EmpresaInfo[ m ][ Funcionario2 ], "Ninguem", true ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não à ninguém ocupando a vaga número 2 !" );
						return 1;
					}
					MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] Você demitiu %s da sua empresa que ocupava a vaga número 3 !", EmpresaInfo[ m ][ Funcionario2 ] );
					format( gFile, sizeof( gFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario2 ] );
					foreach(Player, i )
					{
						if( !strcmp( PlayerName( i ), EmpresaInfo[ m ][ Funcionario2 ], false ))
						{
							MensagemFormatada( i, COLOR_AMARELO, "[ > ] Você foi demitido da empresa de %s", PlayerName( playerid ));
						}
					}
					dini_IntSet( gFile, "Contratado", 0 );
					format( EmpresaInfo[ m ][ Funcionario2 ], 64, "Ninguem" );
					dini_Set( gStr, "Funcionario2", "Ninguem" );
					dini_IntSet( gStr, "Producao2", 0 );
					dini_IntSet( gStr, "P2Atual", 0 );
				}
				else if( !strcmp( tmp, "f3", true ))
				{
					if( !strcmp( EmpresaInfo[ m ][ Funcionario3 ], "Ninguem", true ))
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não à ninguém ocupando a vaga número 3 !" );
						return 1;
					}
					MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] Você demitiu %s da sua empresa que ocupava a vaga número 3 !", EmpresaInfo[ m ][ Funcionario3 ] );
					format( gFile, sizeof( gFile ), "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario3 ] );
					foreach(Player, i )
					{
						if( !strcmp( PlayerName( i ), EmpresaInfo[ m ][ Funcionario3 ], false ))
						{
							MensagemFormatada( i, COLOR_AMARELO, "[ > ] Você foi demitido da empresa de %s", PlayerName( playerid ));
						}
					}
					dini_IntSet( gFile, "Contratado", 0 );
					format( EmpresaInfo[ m ][ Funcionario3 ], 64, "Ninguem" );
					dini_Set( gStr, "Funcionario3", "Ninguem" );
					dini_IntSet( gStr, "Producao3", 0 );
					dini_IntSet( gStr, "P3Atual", 0 );
				}
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "demissao", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; m++ )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( !strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é Dono(a) desta empresa somente funcinários se demitem !" );
					return 1;
				}
				if( strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é funcionário(a) desta empresa !" );
					return 1;
				}

				format( str, sizeof( str ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

				if( !strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ))
				{
					format( gStr, 128,"[ > ] Você se demitiu da empresa %s ID %d que você trabalhava na produção 1.", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ] );
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					dini_IntSet( f( playerid ), "Contratado", 0 );
					format( EmpresaInfo[ m ][ Funcionario1 ], 24, "Ninguem" );
					dini_Set( str, "Funcionario1", "Ninguem" );
					dini_IntSet( str, "Producao1", 0 );
					dini_IntSet( str, "P1Atual", 0 );
				}
				else if( !strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ))
				{
					format( gStr, 128,"[ > ] Você se demitiu da empresa %s ID %d que você trabalhava na produção 2.", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ] );
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					dini_IntSet( f( playerid ), "Contratado", 0 );
					format( EmpresaInfo[ m ][ Funcionario2 ], 24, "Ninguem" );
					dini_Set( str, "Funcionario2", "Ninguem" );
					dini_IntSet( str, "Producao2", 0 );
					dini_IntSet( str, "P2Atual", 0 );
				}
				else if( !strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false ))
				{
					format( gStr, 128,"[ > ] Você se demitiu da empresa %s ID %d que você trabalhava na produção 3.", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ] );
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					dini_IntSet( f( playerid ), "Contratado", 0 );
					format( EmpresaInfo[ m ][ Funcionario3 ], 24, "Ninguem" );
					dini_Set( str, "Funcionario3", "Ninguem" );
					dini_IntSet( str, "Producao3", 0 );
					dini_IntSet( str, "P3Atual", 0 );
				}
				return 1;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "baterponto", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; ++m )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				new
				get_empresa = dini_Int( f( playerid ), "EmpresaID" )
				;
				if( get_empresa > 0 && get_empresa != EmpresaInfo[ m ][ Numero ] )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é Dono(a) de uma empresa, portanto não pode trabalhar em outras empresas !" );
					return 1;
				}
				if( !strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é Dono(a) desta empresa somente funcinários trabalham !" );
					return 1;
				}
				if( strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é funcionário(a) desta empresa !" );
					return 1;
				}

				format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

				if( !strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ))
				{
					new
					p_producao_tempo = dini_Int( gStr, "P1Time" )
					;
					if( p_producao_tempo > gettime())
					{
						new
						s_hora_minuto[ 64 ]
						;
						rHoraMinuto((p_producao_tempo - gettime()), s_hora_minuto, sizeof( s_hora_minuto ));

						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa aguardar um tempo para próxima produção !" );
						format( gStr, 128, "[ x ] Próxima produção somente daqui à %s", s_hora_minuto );
						SendClientMessage( playerid, COLOR_ERRO, gStr );
						return 1;
					}
				}
				else if( !strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ))
				{
					new
					p_producao_tempo = dini_Int( gStr, "P2Time" )
					;
					if( p_producao_tempo > gettime())
					{
						new
						s_hora_minuto[ 64 ]
						;
						rHoraMinuto((p_producao_tempo - gettime()), s_hora_minuto, sizeof( s_hora_minuto ));

						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa aguardar um tempo para próxima produção !" );
						format( gStr, 128, "[ x ] Próxima produção somente daqui à %s", s_hora_minuto );
						SendClientMessage( playerid, COLOR_ERRO, gStr );
						return 1;
					}
				}
				else if( !strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false ))
				{
					new
					p_producao_tempo = dini_Int( gStr, "P3Time" )
					;
					if( p_producao_tempo > gettime())
					{
						new
						s_hora_minuto[ 64 ]
						;
						rHoraMinuto((p_producao_tempo - gettime()), s_hora_minuto, sizeof( s_hora_minuto ));

						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa aguardar um tempo para próxima produção !" );
						format( gStr, 128, "[ x ] Próxima produção somente daqui à %s", s_hora_minuto );
						SendClientMessage( playerid, COLOR_ERRO, gStr );
						return 1;
					}
				}
				if( bateu_ponto[ playerid ] > 0 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já bateu o ponto !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve ir até a àrea de descarga de caminhoneiros para pegar a mercadoria !" );
					return 1;
				}
				GameTextForPlayer( playerid, "~w~ponto batido", 2000, 1 );
				format( gStr, 128, "[ > ] %s você bateu o ponto.", PlayerName( playerid ));
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Agora você deve ir até a àrea de descarga de caminhoneiros para pegar a mercadoria." );
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] A empresa de cargas de Las Venturas vai indicar a empresa na qual você deve fazer a entrega." );
				bateu_ponto[ playerid ] = 2000;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "baixaentrega", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; ++m )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( !strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), true ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é dono desta empresa somente funcinários trabalham !" );
					return 1;
				}
				if( strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é funcionário(a) desta empresa !" );
					return 1;
				}
				if( bateu_ponto1[ playerid ] != 1 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez uma entrega !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve fazer uam entrega para poder dar baixa na mesma !" );
					return 1;
				}
				format( gStr, 128, "[ > ] %s você deu baixa na entrega feita para empresa ID %d.", PlayerName( playerid ), bateu_ponto[ playerid ] );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );

				format( gStr, 128, "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

				if( !strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ))
				{
					new
					total_entregas = dini_Int( gStr, "Producao1" ),
					total_ereceber = dini_Int( gStr, "P1Atual" )
					;
					dini_IntSet( gStr, "Producao1", (total_entregas + 1));
					dini_IntSet( gStr, "P1Atual", (total_ereceber + 1));

					dini_IntSet( gStr, "P1Time", (gettime()+7200));

					format( gStr, 128, "[ > ] {FFFFFF}%s {9CF071}você completou uma tarefa e soma mais uma produção !", PlayerName( playerid ));
					SendClientMessage( playerid, 0x9CF071FF, gStr );

					format( gstring, 256, "[ > ] A empresa de {FFFFFF}%s, %s ID %d soma suas produções:", EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], m );
					SendClientMessage( playerid, COLOR_AMARELO, gstring );

					format( gStr, 128, "[ > ] Produção atual: %d - Produção total: %d", (total_ereceber + 1), (total_entregas + 1));
					SendClientMessage( playerid, 0x9CF071FF, gStr );
				}
				else if( !strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ))
				{
					new
					total_entregas = dini_Int( gStr, "Producao2" ),
					total_ereceber = dini_Int( gStr, "P2Atual" )
					;
					dini_IntSet( gStr, "Producao2", (total_entregas + 1));
					dini_IntSet( gStr, "P2Atual", (total_ereceber + 1));

					dini_IntSet( gStr, "P2Time", (gettime()+7200));

					format( gStr, 128, "[ > ] {FFFFFF}%s {9CF071}você completou uma tarefa e soma mais uma produção !", PlayerName( playerid ));
					SendClientMessage( playerid, 0x9CF071FF, gStr );

					format( gstring, 256, "[ > ] A empresa de {FFFFFF}%s, %s ID %d soma suas produções:", EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], m );
					SendClientMessage( playerid, COLOR_AMARELO, gstring );

					format( gStr, 128, "[ > ] Produção atual: %d - Produção total: %d", (total_ereceber + 1), (total_entregas + 1));
					SendClientMessage( playerid, 0x9CF071FF, gStr );
				}
				else if( !strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false ))
				{
					new
					total_entregas = dini_Int( gStr, "Producao3" ),
					total_ereceber = dini_Int( gStr, "P3Atual" )
					;
					dini_IntSet( gStr, "Producao3", (total_entregas + 1));
					dini_IntSet( gStr, "P3Atual", (total_ereceber + 1));

					dini_IntSet( gStr, "P3Time", (gettime()+7200));

					format( gStr, 128, "[ > ] {FFFFFF}%s {9CF071}você completou uma tarefa e soma mais uma produção !", PlayerName( playerid ));
					SendClientMessage( playerid, 0x9CF071FF, gStr );

					format( gstring, 256, "[ > ] A empresa de {FFFFFF}%s, %s ID %d soma suas produções:", EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], m );
					SendClientMessage( playerid, COLOR_AMARELO, gstring );

					format( gStr, 128, "[ > ] Produção atual: %d - Produção total: %d", (total_ereceber + 1), (total_entregas + 1));
					SendClientMessage( playerid, 0x9CF071FF, gStr );
				}
				GameTextForPlayer( playerid, "~y~~h~+1 producao!", 2000, 1 );

				bateu_ponto[ playerid ] = -1;
				bateu_ponto1[ playerid ] = 0;
			}
		}
		return 1;
	}
	else if( !strcmp( tmp, "receberlucro", true ))
	{
		for( new m = 0; m < MAX_EMPRESAS; ++m )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
			{
				if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ) /*&& strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), false ) && strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), false )*/)
				{
					//SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) e nem funcionário desta empresa !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) desta empresa !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] No momento somente o(a) Dono(a) desta empresa pode retirar o lucro !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Lembrando que você recebe online ou offline a sua parte do lucro !" );
					return 1;
				}
				else
				{
					format( str, sizeof( str ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );

					new // Lucro Total P1
					int_lucrot_pd1,
					// Lucro Atual P2
					int_lucroa_pd1,
					//
					// Lucro Total
					int_lucrot_pd2,
					// Lucro Atual
					int_lucroa_pd2,
					//
					// Lucro Total
					int_lucrot_pd3,
					// Lucro Atual
					int_lucroa_pd3
					;
					new
					// Total P1
					totalt_lucro_pd1,
					// Atual P1
					totala_lucro_pd1,
					//
					// Total P2
					totalt_lucro_pd2,
					// Atual P2
					totala_lucro_pd2,
					//
					// Total P3
					totalt_lucro_pd3,
					// Atual P3
					totala_lucro_pd3
					;

					if( !strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), true ))
					{
						new
						stg[ 1500 ]
						;
						format( gStr, 128, "\t{FFFF00}[ Lucro (Empresa {FFFFFF}ID %d) {FFFF00}]\n\n{FFFFFF}• Empresa {FFFF00}%s", EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ NomeEmp ] );
						strcat( stg, gStr );

						format( gStr, 128, "\n{FFFFFF}• Sub Nome {FFFF00}%s\n\n{FFFFFF}• Lucrando Dono(a) {31FFF0}%s", EmpresaInfo[ m ][ NomeEmpresa ], EmpresaInfo[ m ][ Proprietario ] );
						strcat( stg, gStr );

						if( !strcmp( EmpresaInfo[ m ][ Funcionario1 ], "Ninguem", true ))
						{
							format( gStr, 128, "\n\n{FFFFFF}>{B7FF1A} Funcionário(a) 1 {FFFFFF}Nenhum(a) funcionário(a)\n\t{FF0000}Sem lucros !" );
							strcat( stg, gStr );
						}
						else
						{
							new	// Porcentagem de Lucro por Mercadoria
							lucro_pd1_porcento = (EmpresaInfo[ m ][ Preco ] * 1 / 100)
							;

							// Lucro Total P1
							int_lucrot_pd1 = dini_Int( str, "Producao1" ),
							// Lucro Atual P2
							int_lucroa_pd1 = dini_Int( str, "P1Atual" );

							// Total
							totalt_lucro_pd1 = int_lucrot_pd1 * lucro_pd1_porcento,
							// Atual
							totala_lucro_pd1 = int_lucroa_pd1 * lucro_pd1_porcento;

							format( gStr, 128, "\n\n{FFFFFF}>{B7FF1A} Funcionário(a) 1 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d", EmpresaInfo[ m ][ Funcionario1 ], int_lucrot_pd1, int_lucroa_pd1 );
							strcat( stg, gStr );

							format( gStr, 128, "\n»{FFFFFF} Lucro Total P1 $%d - Lucro Atual: $%d", totalt_lucro_pd1, (totala_lucro_pd1 / 2 ) );
							strcat( stg, gStr );

							if( int_lucroa_pd1 > 0 )
							{
								if( pConectadoa( EmpresaInfo[ m ][ Funcionario1 ] ))
								{
									new
									id_f1 = pConectadoID( EmpresaInfo[ m ][ Funcionario1 ] )
									;
									GameTextForPlayer( id_f1, "~w~+ ~y~lucro empresa!", 2000, 1 );
									format( gstring, 128, "» %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[ m ][ Funcionario1 ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ] );
									SendClientMessage( id_f1, COLOR_AMARELO, gstring );
									format( gstring, 128, "» Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", int_lucroa_pd1, int_lucrot_pd1 );
									SendClientMessage( id_f1, COLOR_BRANCO, gstring );
									format( gstring, 128, "» Você recebe {00B900}$%d {FFFFFF}pelas suas entregas atuais.", (totala_lucro_pd1 / 2 ));
									SendClientMessage( id_f1, COLOR_BRANCO, gstring );
									SendClientMessage( id_f1, COLOR_AMARELO, "» Sua produção agora está em 0, para lucrar mais volte a trabalhar." );
									sGivePlayerCash( id_f1, (totala_lucro_pd1 / 2 ));
								}
								else
								{
									format( pFile, 128, "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario1 ] );
									dini_IntSet( pFile, "atualprod", int_lucroa_pd1 );
									dini_IntSet( pFile, "msglucro", 1 );
									dini_IntSet( pFile, "qtdlucro", (totala_lucro_pd1 / 2 ));
								}
								sGivePlayerCash( playerid, (totala_lucro_pd1 / 2 ));
								//
								dini_IntSet( str, "P1Atual", 0 );
							}
						}

						if( !strcmp( EmpresaInfo[ m ][ Funcionario2 ], "Ninguem", true ))
						{
							format( gStr, 128, "\n\n{FFFFFF}>{B7FF1A} Funcionário(a) 2 {FFFFFF}Nenhum(a) funcionário(a)\n\t{FF0000}Sem lucros !" );
							strcat( stg, gStr );
						}
						else
						{
							new	// Porcentagem de Lucro por Mercadoria
							lucro_pd2_porcento = (EmpresaInfo[ m ][ Preco ] * 1 / 100)
							;

							// Lucro Total
							int_lucrot_pd2 = dini_Int( str, "Producao2" ),
							// Lucro Atual
							int_lucroa_pd2 = dini_Int( str, "P2Atual" );

							// Total
							totalt_lucro_pd2 = int_lucrot_pd2 * lucro_pd2_porcento,
							// Atual
							totala_lucro_pd2 = int_lucroa_pd2 * lucro_pd2_porcento;

							format( gStr, 128, "\n\n{FFFFFF}>{B7FF1A} Funcionário(a) 2 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d", EmpresaInfo[ m ][ Funcionario2 ], int_lucrot_pd2, int_lucroa_pd2 );
							strcat( stg, gStr );

							format( gStr, 128, "\n»{FFFFFF} Lucro Total P2 $%d - Lucro Atual: $%d", totalt_lucro_pd2, (totala_lucro_pd2 / 2 ));
							strcat( stg, gStr );

							if( int_lucroa_pd2 > 0 )
							{
								if( pConectadoa( EmpresaInfo[ m ][ Funcionario2 ] ))
								{
									new
									id_f2 = pConectadoID( EmpresaInfo[ m ][ Funcionario2 ] )
									;
									GameTextForPlayer( id_f2, "~w~+ ~y~lucro empresa!", 2000, 1 );
									format( gstring, 128, "» %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[ m ][ Funcionario2 ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ] );
									SendClientMessage( id_f2, COLOR_AMARELO, gstring );
									format( gstring, 128, "» Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", int_lucroa_pd2, int_lucrot_pd2 );
									SendClientMessage( id_f2, COLOR_BRANCO, gstring );
									format( gstring, 128, "» Você recebe {00B900}$%d {FFFFFF}pelas suas entregas atuais.", (totala_lucro_pd2 / 2 ));
									SendClientMessage( id_f2, COLOR_BRANCO, gstring );
									SendClientMessage( id_f2, COLOR_AMARELO, "» Sua produção agora está em 0, para lucrar mais volte a trabalhar." );
									sGivePlayerCash( id_f2, (totala_lucro_pd2 / 2 ));
								}
								else
								{
									format( pFile, 128, "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario2 ] );
									dini_IntSet( pFile, "atualprod", int_lucroa_pd2 );
									dini_IntSet( pFile, "msglucro", 1 );
									dini_IntSet( pFile, "qtdlucro", (totala_lucro_pd2 / 2 ));
								}
								sGivePlayerCash( playerid, (totala_lucro_pd2 / 2 ));
								//
								dini_IntSet( str, "P2Atual", 0 );
							}
						}
						if( !strcmp( EmpresaInfo[ m ][ Funcionario3 ], "Ninguem", true ))
						{
							format( gStr, 128, "\n\n{FFFFFF}>{B7FF1A} Funcionário(a) 3 {FFFFFF}Nenhum(a) funcionário(a)\n\t{FF0000}Sem lucros !" );
							strcat( stg, gStr );
						}
						else
						{
							new	// Porcentagem de Lucro por Mercadoria
							lucro_pd3_porcento = (EmpresaInfo[ m ][ Preco ] * 1 / 100)
							;

							// Lucro Total
							int_lucrot_pd3 = dini_Int( str, "Producao3" ),
							// Lucro Atual
							int_lucroa_pd3 = dini_Int( str, "P3Atual" );

							// Total
							totalt_lucro_pd3 = int_lucrot_pd3 * lucro_pd3_porcento,
							// Atual
							totala_lucro_pd3 = int_lucroa_pd3 * lucro_pd3_porcento;

							format( gStr, 128, "\n\n{FFFFFF}>{B7FF1A} Funcionário(a) 3 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d", EmpresaInfo[ m ][ Funcionario3 ], int_lucrot_pd3, int_lucroa_pd3 );
							strcat( stg, gStr );

							format( gStr, 128, "\n»{FFFFFF} Lucro Total P3 $%d - Lucro Atual: $%d", totalt_lucro_pd3, (totala_lucro_pd3 / 2 ) );
							strcat( stg, gStr );

							if( int_lucroa_pd3 > 0 )
							{
								if( pConectadoa( EmpresaInfo[ m ][ Funcionario3 ] ))
								{
									new
									id_f3 = pConectadoID( EmpresaInfo[ m ][ Funcionario3 ] )
									;
									GameTextForPlayer( id_f3, "~w~+ ~y~lucro empresa!", 2000, 1 );
									format( gstring, 128, "» %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[ m ][ Funcionario3 ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ] );
									SendClientMessage( id_f3, COLOR_AMARELO, gstring );
									format( gstring, 128, "» Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", int_lucroa_pd3, int_lucrot_pd3 );
									SendClientMessage( id_f3, COLOR_BRANCO, gstring );
									format( gstring, 128, "» Você recebe {00B900}$%d {FFFFFF}pelas suas entregas atuais.", (totala_lucro_pd3 / 2 ));
									SendClientMessage( id_f3, COLOR_BRANCO, gstring );
									SendClientMessage( id_f3, COLOR_AMARELO, "» Sua produção agora está em 0, para lucrar mais volte a trabalhar." );
									sGivePlayerCash( id_f3, (totala_lucro_pd3 / 2 ));
								}
								else
								{
									format( pFile, 128, "Contas/%s.ini", EmpresaInfo[ m ][ Funcionario3 ] );
									dini_IntSet( pFile, "atualprod", int_lucroa_pd3 );
									dini_IntSet( pFile, "msglucro", 1 );
									dini_IntSet( pFile, "qtdlucro", (totala_lucro_pd3 / 2 ));
								}
								sGivePlayerCash( playerid, (totala_lucro_pd3 / 2 ));
								//
								dini_IntSet( str, "P3Atual", 0 );
							}
						}
						new
						l_t_a = ( (totala_lucro_pd1 / 2 ) + (totala_lucro_pd2 / 2 ) + (totala_lucro_pd3 / 2 ))
						;
						format( gStr, 128, "\n\n{FFFFFF}»{83FF57} Lucro total recebido agora $%d", l_t_a );
						strcat( stg, gStr );
						new
						l_t_e = (int_lucrot_pd1 + int_lucrot_pd2 + int_lucrot_pd3) * (EmpresaInfo[ m ][ Preco ] * 1 / 100)
						;
						format( gStr, 128, "\n{FFFFFF}»{FFFF00} Lucro total da empresa $%d\n", l_t_e );
						strcat( stg, gStr );

						ShowPlayerDialog( playerid, D_EMPRINFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}»» Empresa Lucro", stg, "OK", "" );
					}
				}
			}
		}
		return 1;
	}
}
if( !strcmp( cmdtext, "/mercadoriaempresa", true ))
{
	new
	contratado_id = dini_Int( f( playerid ), "Contratado" )
	;
	if( contratado_id > 0 )
	{
		if( !IsPlayerInRangeOfPoint( playerid, 2.0, 2846.7603, 983.6639, 10.7500 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na àrea de descarga de Las Venturas no local de pegar mercadoria !" );
			return 1;
		}
		if( bateu_ponto[ playerid ] <= 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não bateu o ponto na empresa que você trabalha !" );
			return 1;
		}
		if( bateu_ponto[ playerid ] != 2000 && bateu_ponto[ playerid ] > 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já pegou a mercadoria !" );
			format( gStr, 128, "[ > ] %s você pegou a mercadoria.", PlayerName( playerid ));
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
			format( gStr, 128, "[ > ] %s você deve entregar a mercadoria na empresa {FFFFFF}ID %d.", PlayerName( playerid ), bateu_ponto[ playerid ] );
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
			return 1;
		}
		GameTextForPlayer( playerid, "~y~~h~entregue a mercadoria.", 2000, 1 );
		new
		empresa_id = minrand( 1, MAX_EMPRESAS )
		;
		if( empresa_id == contratado_id || empresa_id == 52 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Utilize o comando novamente !" );
			return 1;
		}
		bateu_ponto[ playerid ] = empresa_id;
		format( gStr, 128, "[ > ] %s você pegou a mercadoria.", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		new
		zone[ MAX_ZONE_NAME ],
		Cidade[ MAX_ZONE_NAME ],
		m = bateu_ponto[ playerid ]
		;
		GetEmpresa2DZone( m, zone, MAX_ZONE_NAME );
		GetEmpresa2DCidade( m, Cidade, MAX_ZONE_NAME );

		if( !strcmp( EmpresaInfo[ m ][ Proprietario ], "Ninguem", true ))
		{
			format( gstring, 256, "[ > ] Você deve entregar a mercadoria na empresa {FFFFFF}%s ID %d que não possui Dono(a).",  EmpresaInfo[ m ][ NomeEmp ], empresa_id );
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, 256, "[ > ] A empresa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade );
			SendClientMessage( playerid, 0xFFF17CFF, gstring );
		}
		else
		{
			format( gstring, 256, "[ > ] Você deve entregar a mercadoria na empresa {FFFFFF}%s ID %d que pertence à %s", EmpresaInfo[ m ][ NomeEmp ], empresa_id, EmpresaInfo[ m ][ Proprietario ] );
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, 256, "[ > ] A empresa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade );
			SendClientMessage( playerid, 0xFFF17CFF, gstring );
		}
		SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Siga o ícone com a letra D que foi colocado em seu mapa." );
		SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Ao achar digite: {FFFF00}/MercadoriaEntregar" );
		RemovePlayerMapIcon( playerid, 90 );
		SetPlayerMapIcon( playerid, 90, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 24, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é funcionário(a) de nenhuma empresa !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/mercadoriaentregar", true ))
{
	if( bateu_ponto[ playerid ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não bateu o ponto na empresa que você trabalha e não pegou a mercadoria !" );
		return 1;
	}
	new
	m = bateu_ponto[ playerid ]
	;
	if( !IsPlayerInRangeOfPoint( playerid, 2.0, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
	{
		format( gStr, 128, "[ x ] Você não está na empresa ID %d !", m );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	if( bateu_ponto1[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já entregou a mercadoria !" );
		format( gStr, 128, "[ > ] %s você deve voltar para empresa que você trabalha para dar baixa na entrega.", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		return 1;
	}
	if( bateu_ponto[ playerid ] == 2000 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pegou a mercadoria na àrea de descarga de caminhoneiros em Las Venturas !" );
		return 1;
	}
	GameTextForPlayer( playerid, "~y~~h~mercadoria entregue.", 2000, 1 );

	bateu_ponto1[ playerid ] = 1;

	format( gStr, sizeof( gStr ), "Empresas/Empresa%d.ini", EmpresaInfo[ m ][ Numero ] );
	new
	recebidos_atual = dini_Int( gStr, "PRecebidas" )
	;
	dini_IntSet( gStr, "PRecebidas", (recebidos_atual + 1));

	format( gStr, 128, "[ > ] {FFFFFF}%s {FFFF00}você entregou a mercadoria.", PlayerName( playerid ));
	SendClientMessage( playerid, COLOR_AMARELO, gStr );

	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você deve voltar para empresa que você trabalha para dar baixa na entrega." );
	SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Ao chegar a empresa que você trabalha digite: {FFFF00}/Empresa BaixaEntrega" );

	RemovePlayerMapIcon( playerid, 90 );

	return 1;
}
if( !strcmp( cmd, "/aceitar", true ))
{
	if( AceitarMorador[ playerid ] > 0 )
	{
		if( !IsPlayerConnected( MoradorCasaID[ playerid ] ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O(A) jogador(a) que ofereceu moradia para você desconectou-se !" );
			return 1;
		}
		KillTimer( T_Morador[ playerid ] );
		format( gStr, sizeof( gStr ), "[ > ] %s aceitou morar em sua casa.", PlayerName( playerid ));
		SendClientMessage( MoradorCasaID[ playerid ], COLOR_AMARELO, gStr );
		format( gstring, sizeof( gstring ), "[ > ] Você aceitou morar com %s", PlayerName( MoradorCasaID[ playerid ] ));
		SendClientMessage( playerid, COLOR_AMARELO, gstring );
		format( hFile, sizeof( hFile ), "Casas/casa%d.ini", AceitarMorador[ playerid ] );
		if( !strcmp( CasaInfo[ AceitarMorador[ playerid ] ][ Morador ], "Ninguem", true ))
		{
			format( CasaInfo[ AceitarMorador[ playerid ] ][ Morador ], 24, PlayerName( playerid ));
			dini_Set( hFile, "Morador", PlayerName( playerid ));
		}
		else if( !strcmp( CasaInfo[ AceitarMorador[ playerid ] ][ Morador2 ], "Ninguem", true ))
		{
			format( CasaInfo[ AceitarMorador[ playerid ] ][ Morador2 ], 24, PlayerName( playerid ));
			dini_Set( hFile, "Morador2", PlayerName( playerid ));
		}
		else if( !strcmp( CasaInfo[ AceitarMorador[ playerid ] ][ Morador3 ], "Ninguem", true ))
		{
			format( CasaInfo[ AceitarMorador[ playerid ] ][ Morador3 ], 24, PlayerName( playerid ));
			dini_Set( hFile, "Morador3", PlayerName( playerid ));
		}
		dini_IntSet( f( playerid ), "MorandoID", AceitarMorador[ playerid ] );
		MoradorCasaID[ playerid ] = 0;
		AceitarMorador[ playerid ] = 0;
		pInfo[ playerid ][ Spawn ] = 1;
		return 1;
	}
	if( AceitarContrato[ playerid ] == 1 )
	{
		ContratoMsg[ playerid ] = 0;
		AceitarContrato[ playerid ] = 0;
		KillTimer( T_Contratado[ playerid ] );
		if( !IsPlayerConnected( DonoEmpresa[ playerid ] ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O(A) jogador(a) que lhe ofereceu trabalho desconectou-se do servidor." );
			DonoEmpresa[ playerid ] = -1;
			return 1;
		}
		format( gStr, sizeof( gStr ), "Contas/%s.ini", PlayerName( playerid ));
		format( pFile, sizeof( pFile ), "Contas/%s.ini", PlayerName( DonoEmpresa[ playerid ] ));
		format( gstring, sizeof( gstring ), "Empresas/Empresa%d.ini", dini_Int( pFile, "EmpresaID" ));

		dini_IntSet( gStr, "Contratado", dini_Int( pFile, "EmpresaID" ));

		if( !strcmp( dini_Get( gstring, "Funcionario1" ), "Ninguem", true ))
		{
			format( EmpresaInfo[ dini_Int( pFile, "EmpresaID" ) ][ Funcionario1 ], 24, PlayerName( playerid ));
			dini_Set( gstring, "Funcionario1", PlayerName( playerid ));
		}
		else if( !strcmp( dini_Get( gstring, "Funcionario2" ), "Ninguem", true ))
		{
			format( EmpresaInfo[ dini_Int( pFile, "EmpresaID" ) ][ Funcionario2 ], 24, PlayerName( playerid ));
			dini_Set( gstring, "Funcionario2", PlayerName( playerid ));
		}
		else if( !strcmp( dini_Get( gstring, "Funcionario3" ), "Ninguem", true ))
		{
			format( EmpresaInfo[ dini_Int( pFile, "EmpresaID" ) ][ Funcionario3 ], 24, PlayerName( playerid ));
			dini_Set( gstring, "Funcionario3", PlayerName( playerid ));
		}
		format( gstring, sizeof( gstring ), "[ > ] Você aceitou trabalhar na empresa do(a) jogador(a) {FFFFFF}%s", PlayerName( DonoEmpresa[ playerid ] ));
		SendClientMessage( playerid, COLOR_AMARELOCLARO, gstring );
		format( gstring, sizeof( gstring ), "[ > ] O(A) jogador(a) %s aceitou o contrato para trabalhar em sua empresa !", PlayerName( playerid ));
		SendClientMessage( DonoEmpresa[ playerid ], 0xFFD39BAA, gstring );
		DonoEmpresa[ playerid ] = -1;
		return 1;
	}
	if( msgconvi[ playerid ] == 1 )
	{
		KillTimer( timercou[ playerid ] );
		format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", playerClan[ convidou[ playerid ] ] );
		format( gstring, sizeof( gstring ), "Clans/MembrosClans/%s.ini", PlayerName( playerid ));
		if( !fexist( gstring ))
		{
			dini_Create( gstring );
			dini_Set( gstring, "Clan", playerClan[ convidou[ playerid ] ] );
		}
		format( playerClan[ playerid ], MAX_PLAYER_NAME+1, playerClan[ convidou[ playerid ] ] );
		clanColor[ playerid ] = clanColor[ convidou[ playerid ] ];
		if( !strcmp( dini_Get( gFile, "Membro1" ), "Ninguem", true )) { dini_Set( gFile, "Membro1", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro2" ), "Ninguem", true )) { dini_Set( gFile, "Membro2", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro3" ), "Ninguem", true )) { dini_Set( gFile, "Membro3", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro4" ), "Ninguem", true )) { dini_Set( gFile, "Membro4", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro5" ), "Ninguem", true )) { dini_Set( gFile, "Membro5", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro6" ), "Ninguem", true )) { dini_Set( gFile, "Membro6", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro7" ), "Ninguem", true )) { dini_Set( gFile, "Membro7", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro8" ), "Ninguem", true )) { dini_Set( gFile, "Membro8", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro9" ), "Ninguem", true )) { dini_Set( gFile, "Membro9", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro10" ), "Ninguem", true )) { dini_Set( gFile, "Membro10", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro11" ), "Ninguem", true )) { dini_Set( gFile, "Membro11", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro12" ), "Ninguem", true )) { dini_Set( gFile, "Membro12", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro13" ), "Ninguem", true )) { dini_Set( gFile, "Membro13", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro14" ), "Ninguem", true )) { dini_Set( gFile, "Membro14", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro15" ), "Ninguem", true )) { dini_Set( gFile, "Membro15", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro16" ), "Ninguem", true )) { dini_Set( gFile, "Membro16", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro17" ), "Ninguem", true )) { dini_Set( gFile, "Membro17", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro18" ), "Ninguem", true )) { dini_Set( gFile, "Membro18", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro19" ), "Ninguem", true )) { dini_Set( gFile, "Membro19", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro20" ), "Ninguem", true )) { dini_Set( gFile, "Membro20", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro21" ), "Ninguem", true )) { dini_Set( gFile, "Membro21", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro22" ), "Ninguem", true )) { dini_Set( gFile, "Membro22", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro23" ), "Ninguem", true )) { dini_Set( gFile, "Membro23", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro24" ), "Ninguem", true )) { dini_Set( gFile, "Membro24", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro25" ), "Ninguem", true )) { dini_Set( gFile, "Membro25", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro26" ), "Ninguem", true )) { dini_Set( gFile, "Membro26", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro27" ), "Ninguem", true )) { dini_Set( gFile, "Membro27", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro28" ), "Ninguem", true )) { dini_Set( gFile, "Membro28", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro29" ), "Ninguem", true )) { dini_Set( gFile, "Membro29", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro30" ), "Ninguem", true )) { dini_Set( gFile, "Membro30", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro31" ), "Ninguem", true )) { dini_Set( gFile, "Membro31", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro32" ), "Ninguem", true )) { dini_Set( gFile, "Membro32", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro33" ), "Ninguem", true )) { dini_Set( gFile, "Membro33", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro34" ), "Ninguem", true )) { dini_Set( gFile, "Membro34", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro35" ), "Ninguem", true )) { dini_Set( gFile, "Membro35", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro36" ), "Ninguem", true )) { dini_Set( gFile, "Membro36", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro37" ), "Ninguem", true )) { dini_Set( gFile, "Membro37", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro38" ), "Ninguem", true )) { dini_Set( gFile, "Membro38", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro39" ), "Ninguem", true )) { dini_Set( gFile, "Membro39", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro40" ), "Ninguem", true )) { dini_Set( gFile, "Membro40", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro41" ), "Ninguem", true )) { dini_Set( gFile, "Membro41", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro42" ), "Ninguem", true )) { dini_Set( gFile, "Membro42", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro43" ), "Ninguem", true )) { dini_Set( gFile, "Membro43", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro44" ), "Ninguem", true )) { dini_Set( gFile, "Membro44", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro45" ), "Ninguem", true )) { dini_Set( gFile, "Membro45", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro46" ), "Ninguem", true )) { dini_Set( gFile, "Membro46", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro47" ), "Ninguem", true )) { dini_Set( gFile, "Membro47", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro48" ), "Ninguem", true )) { dini_Set( gFile, "Membro48", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro49" ), "Ninguem", true )) { dini_Set( gFile, "Membro49", PlayerName( playerid )); }
		else if( !strcmp( dini_Get( gFile, "Membro50" ), "Ninguem", true )) { dini_Set( gFile, "Membro50", PlayerName( playerid )); }
		MensagemFormatada( convidou[ playerid ], COLOR_AMARELO, "[ > ] %s aceitou ser membro do seu clan !", PlayerName( playerid ));
		MensagemFormatada( playerid, COLOR_AMARELO, "[ > ] %s você aceitou ser membro do clan %s", PlayerName( playerid ), playerClan[ convidou[ playerid ] ] );
		msgcount[ playerid ] = -1;
		msgconvi[ playerid ] = 0;
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/recusar", true ))
{
	if( AceitarMorador[ playerid ] < 0 && AceitarContrato[ playerid ] != 1 && msgconvi[ playerid ] != 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está lhe oferecendo nada !" );
		return 1;
	}
	if( AceitarMorador[ playerid ] > 0 )
	{
		MensagemFormatada( MoradorCasaID[ playerid ], 0xFFD39BAA, "[ > ] %s recusou a moradia !", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_AMARELOCLARO, "* Você recusou o convite de moradia !" );
		KillTimer( T_Morador[ playerid ] );
		AceitarMorador[ playerid ] = 0;
		MoradorCasaID[ playerid ] = 0;
		return 1;
	}
	if( AceitarContrato[ playerid ] == 1 )
	{
		ContratoMsg[ playerid ] = 0;
		AceitarContrato[ playerid ] = 0;
		KillTimer( T_Contratado[ playerid ] );
		if( IsPlayerConnected( DonoEmpresa[ playerid ] ))
		{
			format( gstring, sizeof( gstring ), "[ x ] Você recusou trabalhar na empresa do(a) jogador(a) {FFFFFF}%s", PlayerName( DonoEmpresa[ playerid ] ));
			SendClientMessage( playerid, COLOR_ERRO, gstring );
			format( gstring, sizeof( gstring ), "[ > ] O(A) jogador(a) %s recusou o contrato para trabalhar em sua empresa !", PlayerName( playerid ));
			SendClientMessage( DonoEmpresa[ playerid ], COLOR_ERRO, gstring );
			DonoEmpresa[ playerid ] = -1;
			return 1;
		}
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você recusou o convite de trabalho !" );
		DonoEmpresa[ playerid ] = -1;
		return 1;
	}
	if( msgconvi[ playerid ] == 1 )
	{
		format( pFile, sizeof( pFile ), "Clans/MembrosClans/%s.ini", PlayerName( convidou[ playerid ] ));
		format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", dini_Get( pFile, "Clan" ));
		MensagemFormatada( convidou[ playerid ], COLOR_ERRO, "[ x ] %s recusou ser membro do seu Clan!", PlayerName( playerid ));
		MensagemFormatada( playerid, COLOR_BRANCO, "[ > ] %s você recusou ser membro do Clan %s", PlayerName( playerid ), dini_Get( pFile, "Clan" ));
		KillTimer( timercou[ playerid ] );
		msgcount[ playerid ] = -1;
		msgconvi[ playerid ] = 0;
		convidou[ playerid ] = -1;
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/abastecer", true ))
{
	if( AreaPosto[ playerid ] == true )
	{
		ShowPlayerDialog( playerid, D_GASOL, DIALOG_STYLE_LIST, "Posto de Combustivel", "\t100 Litros {3DB134}$150", "Abastecer", "Sair" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um posto de combustível !" );
	}
	/*format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	if( AreaPosto[ playerid ] == true )
	{
		new
		quantidade
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_AZULCLARO, "[ x ] Uso correto: /Abastecer [ Litros ]" );
			return 1;
		}
		quantidade = strval( tmp );
		if( quantidade > 100 || quantidade < 1 )
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Quantidade inválida !" );
		if( pInfo[ playerid ][ Gas ] == 100 )
			return SendClientMessage( playerid, COLOR_AZULCLARO, "~ Seu tanque já está completo !" );
		if( GetPlayerCash( playerid ) >= quantidade )
		{
			new
			Anterior = pInfo[ playerid ][ Gas ]
			;
			if( quantidade + pInfo[ playerid ][ Gas ] < 100 )
			{
				new
				gas = pInfo[ playerid ][ Gas ]
				;
				format( gStr, sizeof( gStr ), "[ > ] Seu tanque estava com %d litros, foram colocados + %d litros de combustível, total de %d. ( Tanque Incompleto )", Anterior, quantidade, quantidade+gas );
				SendClientMessage( playerid, COLOR_SISTEMA, gStr );
				sGivePlayerCash( playerid, -quantidade );
				pInfo[ playerid ][ Gas ] = gas+quantidade;
				return 1;
			}
			else if( quantidade + pInfo[ playerid ][ Gas ] >= 100 )
			{
				new
				quantia
				;
				quantia = 100 - pInfo[ playerid ][ Gas ];
				pInfo[ playerid ][ Gas ] = 100;
				format( gStr, sizeof( gStr ), "[ > ] Seu tanque estava com %d litros, foram colocados + %d litros de combustível, total de 100. ( Tanque Completo )", Anterior, quantia );
				SendClientMessage( playerid, COLOR_SISTEMA, gStr );
				sGivePlayerCash( playerid, -quantia );
				pInfo[ playerid ][ Gas ] = 100;
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um posto de combustível !" );
		return 1;
	}*/
	return 1;
}
if( !strcmp( cmd, "/ab", true ))
{
	if( pInfo[ playerid ][ Prof ] == FRENTISTA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		new
		id,
		quantidade
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /ab [ ID ] [ Litros ]" );
			return 1;
		}
		id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Jogador jogador não conectado !" );
			return 1;
		}
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /ab [ ID ] [ Litros ]" );
			return 1;
		}
		quantidade = strval( tmp );
		if( quantidade > 100 || quantidade < 1 )
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Quantidade inválida !" );
		if( pInfo[ id ][ Gas ] >= 100 )
			return SendClientMessage( playerid, COLOR_AZULCLARO, "~ Seu tanque já está completo !" );
		format( gStr, sizeof( gStr ), "[ > ] O(A) Administrador(a) ou Frentista '%s' colocou para você '%d' litros de combustivel.", PlayerName( playerid ), quantidade );
		SendClientMessage( id, COLOR_AMARELO, gStr );
		format( gStr, sizeof( gStr ), "[ > ] Você colocou '%d' litros de combustivel para '%s'.", quantidade, PlayerName( id ));
		SendClientMessage( playerid, COLOR_SISTEMA, gStr );
		pInfo[ id ][ Gas ] = quantidade;
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/passagem", true ))
{
	if( pInfo[ playerid ][ Prof ] == MOTORISTA_ONIBUS )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Passagem [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		{
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 431 )
			{
				if( GetPlayerVehicleID( id ) == GetPlayerVehicleID( playerid ))
				{
					if( GetPlayerCash( id ) >= 50 )
					{
						MensagemFormatada( playerid, COLOR_AZULBEBE, "[ > ] Você recebeu $50 da passagem do jogador(a) %d.", PlayerName( id ));
						MensagemFormatada( id, COLOR_AZULBEBE, "[ > ] O motorista %s cobrou $50 pela passagem.", PlayerName( playerid ));
					}
					else
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ > ] O passageiro não tinha o dinheiro da passagem e foi deixado neste local !" );
						SendClientMessage( id, COLOR_ERRO, "[ > ] Você não tinha dinheiro suficiente para passagem e foi deixado aqui !" );
						RemovePlayerFromVehicle( id );
					}
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Este jogador não está no Ônibus." );
					return 1;
				}
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um Ônibus." );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dirigindo um Ônibus." );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Motorista de Ônibus." );
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/taximetro", true ))
{
	if( Taxista_P[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode iniciar o taximetro novamente, pois você já está com um cliente no veículo !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		if( pInfo[ playerid ][ Prof ] == TAXISTA )
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taximetro Carro" );
		if( pInfo[ playerid ][ Prof ] == MOTO_TAXISTA )
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taximetro Moto" );
		if( pInfo[ playerid ][ Prof ] == TAXI_AEREO )
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taximetro Aereo" );
	}
	else if( !strcmp( tmp, "carro", true ))
	{
		if( pInfo[ playerid ][ Prof ] == TAXISTA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taximetro Carro [ ID ]" );
				return 1;
			}
			new
			id = strval( tmp )
			;
			if( !IsPlayerConnected( id ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
				return 1;
			}
			if( playerid == id )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode iniciar o taximetro para você mesmo !" );
				return 1;
			}
			if( GetPlayerCash( id ) < 20 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] O(A) jogador(a) selecionado(a) não tem em mãos o valor de $20 para iniciar o taximetro !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 420 )
			{
				if( GetPlayerVehicleID( playerid ) == GetPlayerVehicleID( id ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O taxímetro foi iniciado já com o valor de $20 na bandeirada inicial !" );
					SendClientMessage( id, COLOR_AMARELO, "[ > ] O taxímetro foi iniciado já com o valor de $20 na bandeirada inicial !" );
					Taxista_P[ playerid ] = 1;
					Taximetro[ id ][ 1 ] = 1;
					Taximetro[ id ][ 2 ] = playerid;
					T_Taximetro[ id ] = SetTimerEx( "RodarTaximetro", 10000, true, "d", id );
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] O passageiro não está em seu veículo ou você não está em um táxi !" );
				}
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa estar em um táxi para poder iniciar o taximetro !" );
			}
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Taxista !" );
		}
		return 1;
	}
	else if( !strcmp( tmp, "moto", true ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTO_TAXISTA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taximetro Moto [ ID ]" );
				return 1;
			}
			new
			id = strval( tmp )
			;
			if( !IsPlayerConnected( id ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
				return 1;
			}
			if( playerid == id )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode iniciar o taximetro para você mesmo !" );
				return 1;
			}
			if( GetPlayerCash( id ) < 20 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] O(A) jogador(a) selecionado(a) não tem em mãos o valor de $20 para iniciar o taximetro !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vMotoTaxista[ 0 ] || GetPlayerVehicleID( playerid ) == vMotoTaxista[ 1 ] || GetPlayerVehicleID( playerid ) == vMotoTaxista[ 2 ] )
			{
				if( GetPlayerVehicleID( playerid ) == GetPlayerVehicleID( id ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O taxímetro foi iniciado já com o valor de $20 na bandeirada inicial !" );
					SendClientMessage( id, COLOR_AMARELO, "[ > ] O taxímetro foi iniciado já com o valor de $20 na bandeirada inicial !" );
					Taxista_P[ playerid ] = 1;
					Taximetro[ id ][ 1 ] = 1;
					Taximetro[ id ][ 2 ] = playerid;
					T_Taximetro[ id ] = SetTimerEx( "RodarTaximetro", 10000, true, "d", id );
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] O passageiro não está em seu veículo ou você não está em uma moto táxi !" );
				}
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa estar em uma moto táxi para poder iniciar o taximetro !" );
			}
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Moto Taxista !" );
		}
		return 1;
	}
	else if( !strcmp( tmp, "aereo", true ))
	{
		if( pInfo[ playerid ][ Prof ] == TAXI_AEREO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taximetro Aereo [ ID ]" );
				return 1;
			}
			new
			id = strval( tmp )
			;
			if( !IsPlayerConnected( id ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
				return 1;
			}
			if( playerid == id )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode iniciar o taximetro para você mesmo !" );
				return 1;
			}
			if( GetPlayerCash( id ) < 20 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] O(A) jogador(a) selecionado(a) não tem em mãos o valor de $20 para iniciar o taximetro !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vMotoAereo[ 0 ] || GetPlayerVehicleID( playerid ) == vMotoAereo[ 1 ] )
			{
				if( GetPlayerVehicleID( playerid ) == GetPlayerVehicleID( id ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				{
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O taxímetro foi iniciado já com o valor de $20 na bandeirada inicial !" );
					SendClientMessage( id, COLOR_AMARELO, "[ > ] O taxímetro foi iniciado já com o valor de $20 na bandeirada inicial !" );
					Taxista_P[ playerid ] = 1;
					Taximetro[ id ][ 1 ] = 1;
					Taximetro[ id ][ 2 ] = playerid;
					T_Taximetro[ id ] = SetTimerEx( "RodarTaximetro", 10000, true, "d", id );
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] O passageiro não está em seu veículo ou você não está em um heli táxi !" );
				}
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa estar em um heli táxi para poder iniciar o taximetro !" );
			}
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Taxista Aéreo !" );
		}
		return 1;
	}
	return 1;
}
if( !strcmp( cmdtext, "/jogarrede", true ))
{
	if( pInfo[ playerid ][ Prof ] == PESCADOR || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !IsPlayerInPlace( playerid, 385.345092, -2512.000000, 529.345092, -2368.000000 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área de pesca !" );
			return 1;
		}
		if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 453 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve estar dentro de um Reefer para poder pescar !" );
			return 1;
		}
		if( JaPescando[ playerid ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está pescando !" );
			return 1;
		}
		new
		pxQuantia = dini_Int( f( playerid ), "Peixes" )
		;
		if( pxQuantia >= 15 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já atingiu o limite máximo de peixes !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O limite máximo de peixes é de 15 !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_VERDECLARO, "[ > ] Rede de pesca lançada." );
		SendClientMessage( playerid, COLOR_VERDECLARO, "[ > ] Espere a rede voltar para lançá-la novamente..." );
		JaPescando[ playerid ] = 1;
		bpopCount[ playerid ] = 30;
		Pescando[ playerid ] = SetTimerEx( "Pescou", 1000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) pescador(a) !" );
	}
	return 1;
}
if( !strcmp( cmd, "/venderpescas", true ))
{
	if( pInfo[ playerid ][ Prof ] == PESCADOR || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !PlayerToPoint( 2.0, playerid, 446.9114, -1875.3275, 4.3723 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na cooperativa de pesca !" );
			return 1;
		}
		new
		pxQuantia = dini_Int( f( playerid ), "Peixes" )
		;
		if( pxQuantia <= 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem nenhuma pesca !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter o total de 15 pescas para poder vende-las !" );
			return 1;
		}
		if( pxQuantia > 0 && pxQuantia < 15 )
		{
			format( gStr, sizeof( gStr ), "[ x ] Você só tem apenas %d peixes !", pxQuantia );
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter o total de 15 pescas para poder vende-las !" );
			return 1;
		}
		if( pxQuantia >= 15 )
		{
			format( gstring, sizeof( gstring ), "{00CCFF}• {FFFFFF}\tCooperativa de Pescas\n\nTotal de peixes: {48F600}15\nPreço por peixe: {48F600}$100\nValor total: {48F600}$1500\nPago: {48F600}Sim" );
			ShowPlayerDialog( playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}•»{FFFFFF} Info venda pesca", gstring, "OK", "" );
			sGivePlayerCash( playerid, 1200 );
			dini_IntSet( f( playerid ), "Peixes", 0 );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) pescador(a) !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/cacar", true ))
{
	if( pInfo[ playerid ][ Prof ] == CACADOR || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !IsPlayerInPlace( playerid, -746.633666, -2122.113037, -474.633666, -1874.113037 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área de caça !" );
			return 1;
		}
		if( GetPlayerVehicleID( playerid ) == vCacadores[ 0 ] || GetPlayerVehicleID( playerid ) == vCacadores[ 1 ] || GetPlayerVehicleID( playerid ) == vCacadores[ 2 ] || GetPlayerVehicleID( playerid ) == vCacadores[ 3 ] )
		{
			if( JaCascando[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está caçando !" );
				return 1;
			}
			new
			cxQuantia = dini_Int( f( playerid ), "Caca" )
			;
			if( cxQuantia >= 10 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já atingiu o limite máximo de caças !" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] O limite máximo de caças é de 10 !" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_VERDECLARO, "[ > ] Você iniciou uma caça diante um animal." );
			SendClientMessage( playerid, COLOR_VERDECLARO, "[ > ] Aguarde ele morrer..." );
			JaCascando[ playerid ] = 1;
			bpopCount[ playerid ] = 30;
			Cascando[ playerid ] = SetTimerEx( "Cascou", 1000, false, "d", playerid );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve estar do veículo Walton para caçadores para caçar !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) caçador(a) !" );
	}
	return 1;
}
if( !strcmp( cmd, "/vendercacas", true ))
{
	if( pInfo[ playerid ][ Prof ] == CACADOR || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !PlayerToPoint( 2.0, playerid, 23.0700,-2646.6870,40.4645 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na cooperativa de caça !" );
			return 1;
		}
		new
		cxQuantia = dini_Int( f( playerid ), "Caca" )
		;
		if( cxQuantia <= 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem nenhuma caça !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter o total de 10 caças para poder vende-las !" );
			return 1;
		}
		if( cxQuantia > 0 && cxQuantia < 10 )
		{
			format( gStr, sizeof( gStr ), "[ x ] Você só tem apenas %d caças !", cxQuantia );
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter o total de 10 caças para poder vende-las !" );
			return 1;
		}
		if( cxQuantia >= 10 )
		{
			format( gstring, sizeof( gstring ), "{00CCFF}• {FFFFFF}\tCooperativa de Caças\n\nTotal de caças: {FFFFFF}10\nPreço por caça: {FFFFFF}$100\nValor total: {FFFFFF}$1000\nPago: {FFFFFF}Sim" );
			ShowPlayerDialog( playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}•»{FFFFFF} Info venda caça", gstring, "OK", "" );
			sGivePlayerCash( playerid, 2000 );
			dini_IntSet( f( playerid ), "Caca", 0 );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) caçador(a) !" );
		return 1;
	}
}
if( !strcmp( cmd, "/PegarEntrega", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_53 ))
	{
		if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
		{
			if( CargaAeroLS[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já pegou as entregas !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 553 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Entregue a mercadoria em Las Venturas, ao chegar lá digite: /EntregarLV" );
				SetPlayerMapIcon( playerid, 90, 1539.5107, 1668.8561, 12.1522, 3, 0, MAPICON_GLOBAL_CHECKPOINT );
				CargaAeroLS[ playerid ] = 1;
				CargaAeroLV[ playerid ] = 0;
				CargaAeroSF[ playerid ] = 0;
				CargaAeroAB[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um avião de mercadorias !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) PILOTO !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/EntregarLV", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_54 ))
	{
		if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
		{
			if( CargaAeroLS[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída em Los Santos !" );
				return 1;
			}
			if( CargaAeroLV[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já iniciou a saída de sua mercadoria em Las Venturas !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 553 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Vá até estação de San Fierro, ao chegar lá digite: /EntregarSF" );
				SetPlayerMapIcon( playerid, 90, -1479.0670, -196.2580, 15.4729, 3, 0, MAPICON_GLOBAL_CHECKPOINT );
				CargaAeroLS[ playerid ] = 1;
				CargaAeroLV[ playerid ] = 1;
				CargaAeroSF[ playerid ] = 0;
				CargaAeroAB[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um avião de entregas !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) PILOTO !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/entregarSF", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_55 ))
	{
		if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
		{
			if( CargaAeroLV[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída em Los Santos !" );
				return 1;
			}
			if( CargaAeroSF[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já iniciou a saída de sua mercadoria em Las Venturas !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 553 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Vá até o Aeroporto abandonado, ao chegar lá digite: /EntregarAB" );
				SetPlayerMapIcon( playerid, 90, 364.7593, 2539.1553, 17.9467, 3, 0, MAPICON_GLOBAL_CHECKPOINT );
				CargaAeroLS[ playerid ] = 1;
				CargaAeroLV[ playerid ] = 1;
				CargaAeroSF[ playerid ] = 1;
				CargaAeroAB[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um avião de entregas !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) PILOTO !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/entregarAB", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_56 ))
	{
		if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
		{
			if( CargaAeroSF[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída em San Fierro !" );
				return 1;
			}
			if( CargaAeroAB[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já iniciou a saída de sua mercadoria no Aeroporto Abandonado !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 553 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Vá até o aeroporto de Los Santos, ao chegar lá digite: /TerminarEntrega" );
				SetPlayerMapIcon( playerid, 90, 1895.0381, -2626.3516, 14.8857, 3, 0, MAPICON_GLOBAL_CHECKPOINT );
				RemovePlayerMapIcon( playerid, 90 );
				CargaAeroLS[ playerid ] = 1;
				CargaAeroLV[ playerid ] = 1;
				CargaAeroSF[ playerid ] = 1;
				CargaAeroAB[ playerid ] = 1;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um avião de entregas !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) PILOTO !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/TerminarEntrega", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_57 ))
	{
		if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
		{
			if( CargaAeroLS[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu avião em Los Santos !" );
				return 1;
			}
			if( CargaAeroLV[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu avião em Las Ventura !" );
				return 1;
			}
			if( CargaAeroSF[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu avião em San Fierro !" );
				return 1;
			}
			if( CargaAeroAB[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu avião no Aeroporto Abandonado !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 553 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
				SendClientMessage( playerid, COLOR_BRANCO,  "• Você recebe $3.000 pelo serviço prestato." );
				SendClientMessage( playerid, COLOR_SISTEMA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~• )" );
				CargaAeroLS[ playerid ] = 0;
				CargaAeroLV[ playerid ] = 0;
				CargaAeroSF[ playerid ] = 0;
				CargaAeroAB[ playerid ] = 0;
				sGivePlayerCash( playerid, 3000 );
				RemovePlayerFromVehicle( playerid );
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um avião de entregas !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) PILOTO !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( IsPlayerInDynamicCP( playerid, CP_53 ))
{
	if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Caso você queira começar uma jornada digite: '/PegarEntrega'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• E você irá fazer uma entrega em Las Venturas." );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
}
if( IsPlayerInDynamicCP( playerid, CP_54 ))
{
	if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Aeroporto de Las Venturas - Confirme sua chegada digite: '/entregarLV'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• E você irá fazer uma entrega em San Fierro." );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
}
if( IsPlayerInDynamicCP( playerid, CP_55 ))
{
	if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Aeroporto de San Fierro - Confirme sua chegada digite: '/entregarSF'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• E você irá fazer uma entrega no Aeroporto Abandonado." );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
}
if( IsPlayerInDynamicCP( playerid, CP_56 ))
{
	if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Aeroporto Abandonado - Confirme sua chegada digite: '/entregarAB'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• E você irá retornar para Los Santos, e receber seu pagamento." );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
}
if( IsPlayerInDynamicCP( playerid, CP_57 ))
{
	if( pInfo[ playerid ][ Prof ] == PILOTO || aInfo[ playerid ][ Dono ] == 1 )
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Aeroporto de Los Santos - Confirme sua chegada digite: '/TerminarEntrega'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Dos Pilotos ~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
}
if( !strcmp( cmd, "/sairestacao", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_55 ))
	{
		if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
		{
			if( CargaEstacaoLS[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já iniciou a saída de seu trem !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 538 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Vá até estação de Las Venturas, ao chegar lá digite: /chegadalv" );
				CargaEstacaoLS[ playerid ] = 1;
				CargaEstacaoLV[ playerid ] = 0;
				CargaEstacaoSF[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um trem streak !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) maquinista !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/chegadalv", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_56 ))
	{
		if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
		{
			if( CargaEstacaoLS[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu trem em Los Santos !" );
				return 1;
			}
			if( CargaEstacaoLV[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já iniciou a saída de seu trem de Las Venturas !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 538 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Vá até estação de San Fierro, ao chegar lá digite: /chegadasf" );
				CargaEstacaoLS[ playerid ] = 1;
				CargaEstacaoLV[ playerid ] = 1;
				CargaEstacaoSF[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um trem streak !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) maquinista !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/chegadasf", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_57 ))
	{
		if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
		{
			if( CargaEstacaoLS[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu trem em Los Santos !" );
				return 1;
			}
			if( CargaEstacaoLV[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu trem em Las Ventura !" );
				return 1;
			}
			if( CargaEstacaoSF[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já iniciou a saída de seu trem de San Fierro !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 538 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Vá até estação de Los Santos, ao chegar lá digite: /chegadafinal" );
				CargaEstacaoLS[ playerid ] = 1;
				CargaEstacaoLV[ playerid ] = 1;
				CargaEstacaoSF[ playerid ] = 1;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um trem streak !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) maquinista !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/chegadafinal", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_9 ))
	{
		if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
		{
			if( CargaEstacaoLS[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu trem em Los Santos !" );
				return 1;
			}
			if( CargaEstacaoLV[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu trem em Las Ventura !" );
				return 1;
			}
			if( CargaEstacaoSF[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou a saída de seu trem em San Fierro !" );
				return 1;
			}
			if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 538 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
				SendClientMessage( playerid, COLOR_BRANCO,  "• Você recebe $3.000 pelo serviço prestato." );
				SendClientMessage( playerid, COLOR_SISTEMA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~• )" );
				CargaEstacaoLS[ playerid ] = 0;
				CargaEstacaoLV[ playerid ] = 0;
				CargaEstacaoSF[ playerid ] = 0;
				sGivePlayerCash( playerid, 3000 );
				RemovePlayerFromVehicle( playerid );
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um trem streak !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) maquinista !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está dentro da área vermelha !" );
		return 1;
	}
}
if( !strcmp( cmd, "/carregar", true ))
{
	if( !IsPlayerInPlace( playerid, 2691.561, -2522.731, 2782.829, -2412.194 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na area de carregamento !" );
		return 1;
	}
	if( Carga[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu caminhão já está carregado !" );
		return 1;
	}
	if( Carregou[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Aguarde 30 segundos para carregar o seu caminhão novamente !" );
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 515 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um Roadtrain." );
		return 1;
	}
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve estar dirigindo o caminhão para poder carregar !" );
		return 1;
	}
	if( pInfo[ playerid ][ Prof ] != CAMINHONEIRO )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Caminhoneiro !" );
		return 1;
	}
	ShowPlayerDialog( playerid, D_CARGA, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} BPO Cargas LTDA ®", "{FFFFFF}Escolha o local que para que deseja transportar a carga:\n\n- {FAF65D}Las Venturas {0000DD}( LV ) {FFFFFF}ou {FAF65D}San Fierro {0000DD}( SF )", "LV", "SF" );
	return 1;
}
if( !strcmp( cmd, "/descarregar", true ))
{
	if( InDescargaSF[ playerid ] == false && InDescargaLV[ playerid ] == false )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na area de descarregamento !" );
		return 1;
	}
	if( pInfo[ playerid ][ Prof ] != CAMINHONEIRO )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) caminhoneiro(a) !" );
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 515 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um Roadtrain." );
		return 1;
	}
	if( Carga[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu caminhão não está carregado !" );
		return 1;
	}
	if( Carregou[ playerid ] == 0 )
	{
		if( InDescargaSF[ playerid ] == true )
		{
			Carga[ playerid ] = 0;
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] Caminhão descarregado com sucesso !" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] A empresa de cargas de San Fierro lhe pagou $1.000 pelo frete !" );
			if( IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid )) )
			{
				SendClientMessage( playerid, -1, "[ > ] Você entregou ( 100 por cento da carga ) e recebe + $400 !" );
				SetVehicleToRespawn( GetVehicleTrailer( GetPlayerVehicleID( playerid )) );
				sGivePlayerCash( playerid, 1400 );
			}
			else
			{
				sGivePlayerCash( playerid, 1000 );
			}
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			GameTextForPlayer( playerid, "~y~~h~descarregado", 1000, 0 );
		}
		else if( InDescargaLV[ playerid ] == true )
		{
			Carga[ playerid ] = 0;
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] Caminhão descarregado com sucesso !" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] A empresa de cargas de Las Venturas lhe pagou $1.000 pelo frete !" );
			if( IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid )) )
			{
				SendClientMessage( playerid, -1, "[ > ] Você entregou ( 100 por cento da carga ) e recebe + $400 !" );
				SetVehicleToRespawn( GetVehicleTrailer( GetPlayerVehicleID( playerid )) );
				sGivePlayerCash( playerid, 1400 );
			}
			else
			{
				sGivePlayerCash( playerid, 1000 );
			}
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			GameTextForPlayer( playerid, "~y~~h~descarregado", 1000, 0 );
		}
		RemovePlayerMapIcon( playerid, 90 );
	}
	else if( Carregou[ playerid ] == 1 )
	{
		foreach(Player, a)
		{
			if( aInfo[ a ][ Dono ] == 1 || aInfo[ a ][ Admin ] == 1 ) // Suspeita de teleporte
			{
				format( gStr, sizeof( gStr ), "[ BPO AD ] - o jogador(a) %s [ id: %d ] entregou a carga muito rapido. Suspeita: Teleporte.", PlayerName( playerid ), playerid );
				SendClientMessage( a, COLOR_ERRO, gStr );
				SendClientMessage( a, COLOR_BRANCO, "- Vá checar este jogador ! ( OBS: Use '/espiar' para ter certeza, isso pode ser um BUG, ou não ..." );
			}
		}
		if( InDescargaSF[ playerid ] == true )
		{
			Carga[ playerid ] = 0;
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] Caminhão descarregado com sucesso!" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] A empresa de cargas de San Fierro lhe pagou $ 2.000 pelo frete !" );
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			GameTextForPlayer( playerid, "~y~~h~descarregado", 1000, 0 );
			RemovePlayerMapIcon( playerid, 90 );
		}
		else if( InDescargaLV[ playerid ] == true )
		{
			Carga[ playerid ] = 0;
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] Caminhão descarregado com sucesso!" );
			SendClientMessage( playerid, 0xFFA4A4AA, "[ > ] A empresa de cargas de Las Venturas lhe pagou $ 1.500 pelo frete !" );
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~[ Área de Descarregamento ]~~~~~~~~~~~~~~~~~•" );
			GameTextForPlayer( playerid, "~y~~h~descarregado", 1000, 0 );
			RemovePlayerMapIcon( playerid, 90 );
		}
	}
	return 1;
}
if( !strcmp( cmd, "/skin", true ))
{
	if( pInfo[ playerid ][ fardado ] == 1 && aInfo[ playerid ][ Admin ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está fardado(a) !" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode trocar de skin fardado(a) !" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_5 ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Bem vindo(a) à loja de roupas {FFFFFF}Binco." );
		ShowModelSelectionMenu( playerid, skins_binco, "Skins ~w~~h~Binco" );
	}
	else if( IsPlayerInDynamicCP( playerid, CP_41 ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Bem vindo(a) à loja de roupas {FFFFFF}ZIP." );
		ShowModelSelectionMenu( playerid, skins_zip, "Skins ~w~~h~ZIP" );
	}
	else if( IsPlayerInDynamicCP( playerid, CP_42 ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Bem vindo(a) à loja de roupas {FFFFFF}VICTIM." );
		ShowModelSelectionMenu( playerid, skins_victim, "Skins ~w~~h~Victim" );
	}
	else if( IsPlayerInDynamicCP( playerid, CP_43 ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Bem vindo(a) à loja de roupas {FFFFFF}TRAINHARD e PROLAPS." );
		ShowModelSelectionMenu( playerid, skins_prolaps, "~w~~h~Train Hard e Pro Laps" );
	}
	else if( IsPlayerInDynamicCP( playerid, CP_44 ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Bem vindo(a) à loja de roupas {FFFFFF}DIDIERSACHS." );
		ShowModelSelectionMenu( playerid, skins_didiersachs, "Skins ~w~~h~DidierSachs" );
	}
	else if( IsPlayerInDynamicCP( playerid, CP_45 ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Bem vindo(a) à loja de roupas {FFFFFF}SUB URBAN." );
		ShowModelSelectionMenu( playerid, skins_suburban, "Skins ~w~~h~Sub Urban" );
	}
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Escolha a SKIN(Personagem) que deseja usar clique nele(a)." );
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Lembrando que a SKIN custa $500, ao clicar você irá está comprando a SKIN." );
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Portanto só clique na SKIN caso você quiser realmente compra-lá." );
	return 1;
}
if( !strcmp( cmd, "/procurar", true ))
{
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para procurar um(a) jogador(a) !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /procurar [ ID ] [ motivo ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Procurar [ ID ] [ Motivo ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( Procurou[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para poder procurar um(a) jogador(a) !", Procurou[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		if( playerid == id )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode colocar você mesmo na lista de procurados !" );
			return 1;
		}
		if( GetPlayerWantedLevel( id ) > 0 )
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ x ] o jogador(a) %s já está na lista de procurados !", PlayerName( id ));
			return 1;
		}
		GameTextForPlayer( id, "~y~PROCURADO!", 3000, 0 );
		MensagemFormatada( id, 0x33FF33AA, "[ PROCURADO ] %s colocou você na lista de procurados pelo Motivo: {FFFFFF}%s", PlayerName( playerid ), result );
		MensagemFormatada( playerid, 0xFFFFFFAA, "[ PROCURADO ] Você colocou %s na lista de procurados pelo Motivo: {FFFFFF}%s", PlayerName( id ), result );
		format( s5Doze, sizeof( s5Doze ), "[ PROCURADO ] O(A) jogador(a) %s colocou na de lista de procurados o(a) jogador(a) %s pelo Motivo: {FFFFFF}%s", PlayerName( playerid ), PlayerName( id ), result );
		SendClientMessageToAll( 0x0199FFFF, s5Doze );
		new
		L_Estrela
		;
		L_Estrela = GetPlayerWantedLevel( id );
		SetPlayerWantedLevel( id, L_Estrela + 1 );
		Procurou[ playerid ] = gettime() + 60;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmd, "/removerlistap", true ))
{
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para remover um(a) jogador(a) da lista de procurados(as) !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /RemoverlistaP [ ID ] [ Motivo ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if(( playerid == id ) != ( aInfo[ playerid ][ Dono ] == 1 )) // EXCETO DONO
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode remover você mesmo da lista de procurados(as) !" );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /RemoverlistaP [ ID ] [ Motivo ]" );
			return 1;
		}
		if( GetPlayerWantedLevel( id ) <= 0 )
		{
			format( gStr, sizeof( gStr ), "[ x ] O(A) jogador(a) %s não está sendo procurado(a) !", PlayerName( id ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		format( gStr, sizeof( gStr ), "[ REMOÇÃO ] Você removeu uma estrela de procurado(a) do(a) jogador(a) %s - Motivo: %s", PlayerName( id ), result );
		SendClientMessage( playerid, 0x33FF33AA, gStr );
		GameTextForPlayer( id, "~y~~h~REMOVIDO!", 1000, 0 );
		format( gStr, sizeof( gStr ), "[ REMOÇÃO ] %s removeu uma estrela de procurado(a) sua, Motivo: %s.", PlayerName( playerid ), result );
		SendClientMessage( id, 0x33FF33AA, gStr );
		SetPlayerWantedLevel( id, GetPlayerWantedLevel( id ) -1 );
		if( GetPlayerWantedLevel( id ) > 0 )
		{
			format( gstring, sizeof( gstring ), "[ REMOÇÃO ] %s teve uma estrela de procurado(a) removida pelo(a) policial %s - Motivo: %s", PlayerName( id ), PlayerName( playerid ), result );
			SendClientMessageToAll( 0x33FF33AA, gstring );
		}
		if( GetPlayerWantedLevel( id ) <= 0 )
		{
			format( gstring, sizeof( gstring ), "[ REMOÇÃO ] %s foi removido(a) da lista de procurados(as) pelo(a) policial %s - Motivo: %s", PlayerName( id ), PlayerName( playerid ), result );
			SendClientMessageToAll( 0x33FF33AA, gstring );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmd, "/algemar", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para algemar um(a) jogador(a) !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Algemar [ ID ] [ Motivo ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Algemar [ ID ] [ Motivo ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( Algemou[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para poder algemar um(a) jogador(a) !", Algemou[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		if( playerid == id )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode algemar você mesmo !" );
			return 1;
		}
		if( Algemado[ id ] == 1 )
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ x ] O(A) jogador(a) %s já está algemado(a) !", PlayerName( id ));
			return 1;
		}
		if( IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode algemar de dentro de um veículo !" );
			return 1;
		}
		if( IsPlayerInAnyVehicle( id ))
		{
			MensagemFormatada( playerid, COLOR_ERRO, "[ x ] Você não pode algemar %s pois ele(a) está dentro de um veículo !", PlayerName( id ));
			return 1;
		}
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
			return 1;
		}
		TogglePlayerControllable( id, true );
		GameTextForPlayer( id, "~w~ALGEMADO!", 3000, 0 );
		format( gStr, sizeof( gStr ), "[ ALGEMAS ] %s algemou você pelo Motivo: {FFFFFF}%s", PlayerName( playerid ), result );
		SendClientMessage( id, 0x3366FFAA, gStr );
		format( gstring, sizeof( gstring ), "[ ALGEMAS ] Você algemou o jogador(a)(a) %s pelo Motivo: {FFFFFF}%s", PlayerName( id ), result );
		SendClientMessage( playerid, 0x33CCFFAA, gStr );
		Algemou[ playerid ] = gettime() + 60;
		Algemado[ id ] = 1;
		P_Liberado[ id ] = SetTimerEx( "LiberadoParaAndar", 30000, false, "d", id );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmd, "/desalgemar", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para desalgemar um(a) jogador(a) !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Desalgemar [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( playerid == id )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode algemar você mesmo !" );
			return 1;
		}
		if( Algemado[ id ] == 0 )
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ x ] o jogador(a) %s não está algemado !", PlayerName( id ));
			return 1;
		}
		if( GetPlayerWantedLevel( id ) > 0 )
		{
			MensagemFormatada( playerid, COLOR_ERRO, "[ x ] o jogador(a) %s está sendo procurado tem certeza que vai desalgema-lo?", PlayerName( id ));
			return 1;
		}
		if( IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode desalgemar de dentro de um veículo !" );
			return 1;
		}
		if( IsPlayerInAnyVehicle( id ))
		{
			MensagemFormatada( playerid, COLOR_ERRO, "[ x ] Você não pode desalgemar %s pois ele está dentro de um veículo !", PlayerName( id ));
			return 1;
		}
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
			return 1;
		}
		GameTextForPlayer( id, "~w~DESALGEMADO!", 3000, 0 );
		MensagemFormatada( id, 0x3366FFAA, "[ ALGEMAS ] %s desalgemou você.", PlayerName( playerid ));
		MensagemFormatada( playerid, 0x33CCFFAA, "[ ALGEMAS ] Você desalgemou o(a) jogador(a) %s", PlayerName( id ));
		TogglePlayerControllable( id, true );
		KillTimer( P_Liberado[ id ] );
		Algemado[ id ] = 0;
	}
	else
	{
 	SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmd, "/multar", true ))
{
	if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
	    if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{

			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para multar um(a) jogador(a) !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{

			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /multar [ ID ] [ Quantia ] [ Motivo ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{

			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /multar [ ID ] [ Quantia ] [ Motivo ]" );
			return 1;
		} // MOTIVO DA MULTA
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{

			idx++;
		}
		new offset = idx;
		new motivo[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( motivo ) - 1 )) )
		{

			motivo[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		motivo[ idx - offset ] = EOS;
		if( !strlen( motivo ))
		{

			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /multar [ ID ] [ Quantia ] [ Motivo ]" );
			return 1;
		} // VALOR DA MULTA
		new valormulta = strval( tmp );
		if( valormulta < 1000 || valormulta > 5000 )
		{

			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O Valor da multa deve ser entre: 1000 a 5000 R$" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{

			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		MensagemFormatada( playerid, 0x33CCFFAA, "[ > ] Voce aplicou uma multa em %s no valor de R$ %d ( Motivo: %s )", PlayerName( id ), valormulta, motivo);
		format( s5Doze, sizeof( s5Doze ), "[ MULTA ] O(A) PRF %s mutou %s em R$ %d ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), valormulta, motivo);
		SendClientMessageToAll( 0x3366FFAA, s5Doze );
		MensagemFormatada( id, COLOR_AMARELO, "[ MULTADO ] Voce foi multado por: %s. Foi descontado R$ %d de sua conta bancaria para a quitacao da multa.", PlayerName( playerid ), valormulta);
		dini_IntSet( f( id ), "SaldoBanco", dini_Int( f( id ), "SaldoBanco" ) - valormulta );
	}
	else
	{

		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmd, "/prender", true ))
{
		if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
		{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para prender um(a) jogador(a) !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /prender [ ID ] [ motivo ]" );
			return 1;
		}
		new id = strval( tmp );
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Prender [ ID ] [ Motivo ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( Prendeu[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para poder prender um(a) jogador(a) !", Prendeu[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		if( playerid == id && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode prender você mesmo !" );
			return 1;
		}
		if( pInfo[ id ][ Preso ] > 0 )
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ x ] O(A) jogador(a) %s já está preso(a) !", PlayerName( id ));
			return 1;
		}
		if( GetPlayerWantedLevel( id ) <= 0 )
		{
			format( gStr, 128, "[ x ] O(A) jogador(a) %s não está na lista de procurados(as) !", PlayerName( id ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		if( IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode prender de dentro de um veículo !" );
			return 1;
		}
		if( IsPlayerInAnyVehicle( id ))
		{
			MensagemFormatada( playerid, COLOR_ERRO, "[ x ] Você não pode prender %s com ele(a) dentro de um veículo !", PlayerName( id ));
			return 1;
		}
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
			return 1;
		}
		if( Algemado[ id ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode prender um(a) jogador(a) sem algema-lo primeiro !" );
			return 1;
		}
		if( pInfo[ id ][ procMorto ] == true )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode prender um(a) jogador(a) morto(a) !" );
			return 1;
		}
		GivePlayerCash( playerid, 350 );
		MensagemFormatada( id, 0x3366FFAA, "[ PRISÃO ] %s prendeu você pelo Motivo: {FFFFFF}%s", PlayerName( playerid ), result );
		MensagemFormatada( playerid, 0x33CCFFAA, "[ PRISÃO ] Você prendeu %s pelo Motivo: {FFFFFF}%s", PlayerName( id ), result );
		format( s5Doze, sizeof( s5Doze ), "[ PRISÃO ] O(A) jogador(a) %s prendeu o(a) jogador(a) %s pelo Motivo: {FFFFFF}%s", PlayerName( playerid ), PlayerName( id ), result );
		SendClientMessageToAll( 0x0199FFFF, s5Doze );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você recebe R$350 pelo serviço prestado." );
		Algemado[ id ] = 0;
		Prender( id );
		if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 )
			{
            	Prendeu[ playerid ] = gettime() + 60;
         	}
		}
		else
		{
		    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
		}
	    return 1;
}
if( !strcmp( cmd, "/soltar", true ))
{
		if( pInfo[ playerid ][ Prof ] == ADVOGADO || pInfo[ playerid ][ Prof ] == JUIZ || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
		{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Soltar [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguem online com esse ID !" );
			return 1;
		}
		if( Soltou[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para poder soltar um(a) jogador(a) !", Soltou[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( id ));
		if( dini_Int( gFile, "Abuser" ) == 1 )
		{
			SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Esse jogador é abuser e foi preso por um Administrador !" );
			SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Somente um adminstrador pode pagar fiança para ele !" );
			return 1;
		}
		if( playerid == id )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode soltar você mesmo !" );
			return 1;
		}
		if( pInfo[ id ][ Preso ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) não está preso(a) !" );
			return 1;
		}
		if( cAdvogadop[ id ] < gettime( ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) não pediu um(a) advogado(a) !" );
			return 1;
		}
		MensagemFormatada( id, 0x3366FFAA, "[ INFO ] O(A) advogado(a) %s soltou você. Não cometa mais nenhum crime ou será preso novamente !", PlayerName( playerid ));
		SendClientMessage( id, COLOR_BRANCO, "[ > ] Foi retirado de sua conta bancaria $3000 para pagar o advogado." );
		MensagemFormatada( playerid, 0x33CCFFAA, "[ INFO ] Você soltou da prisão o(a) jogador(a) %s", PlayerName( id ));
		SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Você recebe $5000 pelo serviço prestado, o dinheiro foi depositado em sua conta bancaria." );
		pInfo[ id ][ Preso ] = 0;
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		format( pFile, sizeof( pFile ), "Contas/%s.ini", PlayerName( id ));
		dini_IntSet( gFile, "SaldoBanco", dini_Int( gFile, "SaldoBanco" ) +5000 );
		dini_IntSet( pFile, "SaldoBanco", dini_Int( pFile, "SaldoBanco" ) -3000 );
		SetPlayerPos( id, 265.9714, 83.1550, 1001.0391 );
		SetPlayerInterior( id, 6 );
		if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] )
		{
			Soltou[ playerid ] = gettime() + 60;
		}
		}
		else
		{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) advogado(a) !" );
		}
		return 1;
}
if( !strcmp( cmd, "/aprender", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /aPrender [ ID ] [ Tempo ] [ Motivo ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /aPrender [ ID ] [ Tempo ] [ Motivo ]" );
			return 1;
		}
		new
		iTempo = strval( tmp )
		;
		if( iTempo < 1 || iTempo > 1200 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Tempo somente de 1 à 1200 minutos !" );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /aPrender [ ID ] [ Tempo ] [ Motivo ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode prender um Dono !");
        return 1;
        }
		if( pInfo[ id ][ Preso ] == 1 )
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ x ] o jogador(a) %s já está preso !", PlayerName( id ));
			return 1;
		}
		GameTextForPlayer( id, "~w~~h~SE FUDEU !", 3000, 0 );
		MensagemFormatada( id, 0x3366FFAA, "[ BPO ] Você foi preso pelo(A) Administrador(a) %s ( Motivo: %s, Tempo: %d Minutos )", PlayerName( playerid ), result, iTempo );
		MensagemFormatada( playerid, 0x33CCFFAA, "[ BPO ] Você prendeu o(a) jogador(a) %s ( Motivo: %s, Tempo: %d Minutos )", PlayerName( id ), result, iTempo );
		MensagemFormatadaAll( COLOR_AMARELOCLARO, "[ BPO ] O(A) Administrador(a) %s prendeu %s ( Motivo: %s, Tempo: %d Minutos )", PlayerName( playerid ), PlayerName( id ), result, iTempo );
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( id ));
		dini_IntSet( gFile, "Abuser", 1 );
		Algemado[ id ] = 0;
		SetPlayerWantedLevel( id, 0 );
		pInfo[ id ][ Preso ] = iTempo*60;
		ResetPlayerWeapons( id );
		SetPlayerInterior( id, 6 );
		SetPlayerPos( id, 264.5996, 77.7367, 1001.0391 );
		KillTimer( T_Preso[ id ] );
		T_Preso[ id ] = SetTimerEx( "LiberarPrisao", 1000, false, "d", id );
		pInfo[ playerid ][ Abuser ] = 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/aprenderoff", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso: correto /aPrenderOFF [ Nick ] [ Tempo ] [ Motivo ]" );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", tmp );
		if( !fexist( gFile ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não existe nenhuma conta com esse nick !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( ! strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /aPrenderOFF [ Nick ] [ Tempo ] [ Motivo ]" );
			return 1;
		}
		new
		iTempo = strval( tmp )
		;
		if( iTempo < 1 || iTempo > 1200 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Tempo somente de 1 à 1200 minutos ! " );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /aPrenderOFF [ Nick ] [ Tempo ] [ Motivo ]" );
			return 1;
  	      }
        SendClientMessage( playerid, 0x33CCFFAA, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} Conta punida com sucesso !" );
		dini_IntSet( gFile, "Abuser", 1 );
		dini_IntSet( gFile, "Preso", iTempo*60 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/asoltar", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /aSoltar [ ID ]" ) ;
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
            return 1;
		}
/*		if( playerid == id )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode soltar você mesmo !" );
			return 1;
		} */
		if( pInfo[ id ][ Preso ] == 0 )
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ x ] o jogador(a) %s não está preso !", PlayerName( id ));
			return 1;
		}
		GameTextForPlayer( id, "~w~A LIBERDADE CANTOU!", 3000, 0 );
		MensagemFormatada( id, 0x3366FFAA, "[ INFO ] O(A) Administrador(a) %s soltou você. Não cometa mais nenhum abuser ou será preso por mais tempo !", PlayerName( playerid ));
		MensagemFormatada( playerid, 0x33CCFFAA, "[ INFO ] Você soltou da prisão o(a) jogador(a) %s ( Abuser )", PlayerName( id ));
		pInfo[ id ][ Preso ] = 0;
		pInfo[ id ][ Abuser ] = 0;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/armasdisponiveis", true ))
{
	if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_SISTEMA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, COLOR_BRANCO, "• 1 = Faca || - 2 = Desert Eagle || - 3 = Sawn-off Shotgun" );
		SendClientMessage( playerid, COLOR_BRANCO, "• 4 = Micro SMG || - 5 = MP5 || - 6 = AK-47" );
		SendClientMessage( playerid, COLOR_BRANCO, "• 7 = M4 || - 8 = Tec9 || - 9 = Country Rifle" );
		SendClientMessage( playerid, COLOR_BRANCO, "• 10 = Sniper Rifle || - 11 = Silenced 9mm || - 12 = Katana" );
		SendClientMessage( playerid, COLOR_SISTEMA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é traficante nem chefe da máfia !" );
	}
	return 1;
}
if( !strcmp( cmd, "/sabores", true ))
{
	if( pInfo[ playerid ][ Prof ] == PIZZABOY || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_PIZZABOY, "( . )~~~~~~~~~~~~~~~~~( . )" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Sabores disponíveis:" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Calabresa = 1" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Musarela = 2" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Frango = 3" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) 4 Queijos = 4" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Atum = 5" );
		SendClientMessage( playerid, COLOR_PIZZABOY, "( . )~~~~~~~~~~~~~~~~~( . )" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Pizza Boy/Girl !" );
	}
	return 1;
}
if( !strcmp( cmd, "/Hotdogs", true )) // Cachorro Quente
{
	if( pInfo[ playerid ][ Prof ] == HOTDOG || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_HOTDOG, "( . )~~~~~~~~~~~~~~~~~( . )" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Sabores disponíveis:" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Salsicha = 1" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Frango = 2" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Linguiça = 3" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Completo = 4" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Da casa = 5" );
		SendClientMessage( playerid, COLOR_HOTDOG, "( . )~~~~~~~~~~~~~~~~~( . )" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) vendedor(a) de Hotdog !" );
	}
	return 1;
}
if( !strcmp( cmd, "/Sorvetes", true )) // Sorveteiro
{
	if( pInfo[ playerid ][ Prof ] == SORVETEIRO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_SORVETEIRO, "( . )~~~~~~~~~~~~~~~~~( . )" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Sabores disponíveis:" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Chocolate = 1" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Morango = 2" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Coco = 3" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Baunilha = 4" );
		SendClientMessage( playerid, COLOR_BRANCO, "( › ) Napolitano = 5" );
		SendClientMessage( playerid, COLOR_SORVETEIRO, "( . )~~~~~~~~~~~~~~~~~( . )" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Sorveteiro(a) !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharprincipal", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Admin ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão Principal da Ilha." );
		MoveDynamicObject( PortaoPrincipalIlha, 842.22674560547, -2066.8491210938, 14.515581130981, 3.0 );
		MoveDynamicObject( PortaoPrincipalIlha2, 829.22412109375, -2066.8715820313, 14.515581130981, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrirprincipal", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Admin ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, 0x4169FFAA, "[ > ] Abrindo o portão principal da Ilha." );
		MoveDynamicObject( PortaoPrincipalIlha, 842.2265625, -2066.8486328125, 20.340564727783, 3.0 );
		MoveDynamicObject( PortaoPrincipalIlha2, 829.2236328125, -2066.87109375, 20.390579223633, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrircentral", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão Central da Ilha." );
		MoveDynamicObject( PortaoCentralIlha, 842.0546875, -2525.3544921875, 35.312438964844, 3.0 );
		MoveDynamicObject( PortaoCentralIlha2, 822.474609375, -2525.1650390625, 35.312438964844, 3.0 );
		//MoveDynamicObject( PortaoCentralIlha3, 843.0498046875, -2486.181640625, 32.11222076416, 3.0 );
		//MoveDynamicObject( PortaoCentralIlha4, 824.388671875, -2486.587890625, 31.5622215271, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcentral", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão central da Ilha." );
		MoveDynamicObject( PortaoCentralIlha, 842.05523681641, -2525.3549804688, 30.437261581421, 3.0 ) ;
		MoveDynamicObject( PortaoCentralIlha2, 822.47497558594, -2525.1655273438, 30.437261581421, 3.0 );
		//MoveDynamicObject( PortaoCentralIlha3, 843.05059814453, -2486.181640625, 26.887292861938, 3.0 );
		//MoveDynamicObject( PortaoCentralIlha4, 824.388671875, -2486.5883789063, 26.587297439575, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abriresquerda", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da Ilha esquerda." );
		MoveDynamicObject( PortaoEsquerdolIlha, 1006.8694458008, -2437.3645019531, 24.122547149658, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharesquerda", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da Ilha esquerda." );
		MoveDynamicObject( PortaoEsquerdolIlha, 1006.8930664063, -2437.3747558594, 19.597616195679, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrirdireita", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da Ilha da direita." );
		MoveDynamicObject( PortaoDireitolIlha, 580.04577636719, -2410.4799804688, 70.444198608398, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fechardireita", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA || pInfo[ playerid ][ Prof ] == PORT_ILHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaIlha( DCasaID ) || IsCasaIlha( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da Ilha da direita." );
		MoveDynamicObject( PortaoDireitolIlha, 580.05853271484, -2410.4584960938, 65.493896484375, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da ilha é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Ilha !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/apv1", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_VILA || pInfo[ playerid ][ Prof ] == PORT_VILA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaVila( DCasaID ) || IsCasaVila( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão 1 da vila." );
		MoveDynamicObject( PortaoVila1, -562.27630615234, -1102.6555175781, 24.631956100464, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da vila é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Vila !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/apv2", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_VILA || pInfo[ playerid ][ Prof ] == PORT_VILA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaVila( DCasaID ) || IsCasaVila( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão 2 da vila." );
		MoveDynamicObject( PortaoVila2, -525.7392578125, -1044.3818359375, 25.976963043213, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da vila é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Vila !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fpv1", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_VILA || pInfo[ playerid ][ Prof ] == PORT_VILA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaVila( DCasaID ) || IsCasaVila( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão 1 da vila." );
		MoveDynamicObject( PortaoVila1, -568.07818603516, -1113.6315917969, 24.631956100464, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da vila é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Vila !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fpv2", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( pInfo[ playerid ][ Prof ] == SEG_VILA || pInfo[ playerid ][ Prof ] == PORT_VILA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaVila( DCasaID ) || IsCasaVila( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão 2 da vila." );
		MoveDynamicObject( PortaoVila2, -518.78344726563, -1034.3872070313, 25.976963043213, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir os portões da vila é preciso ser Dono(a) ou morador(a) de uma das casas !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ou ser Porteito ou Segurança da Vila !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/selevador", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Subindo o elevador da delegacia LSDP." );
		MoveDynamicObject( Elevador, 1548.2231445313, -1611.4571533203, 2.7968420982361, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/delevador", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Descendo o elevador da delegacia LSDP." );
		MoveDynamicObject( Elevador, 1548.22265625, -1611.45703125, -6.2531590461731, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abpd1", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão número 1 da delegacia LSDP." );
		MoveDynamicObject( pd1, 1548.46484375, -1627.279296875, 19.581174850464, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbpd1", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão número 1 da delegacia LSDP." );
		MoveDynamicObject( pd1, 1548.4649658203, -1627.2800292969, 15.131185531616, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abpd2", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão número 2 da delegacia LSDP." );
		MoveDynamicObject( pd2, 1598.4259033203, -1637.9779052734, 14.965435028076, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbpd2", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, -1, "[ > ] Fechando o portão número 2 da delegacia LSDP." );
		MoveDynamicObject( pd2, 1588.3426513672, -1638.1104736328, 14.906204223633, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/ap1", true ))
{
	if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.5, 49.0849, -1530.9667, 5.3143))
		{
			SendClientMessage(playerid, COLOR_ERRO, "[ x ] Você não está perto do Pedagio!");
			return 1;
		}
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão número 1 do Pedágio." );
		MoveDynamicObject( pp1, 45, -1530.3, 6, 3.0 ); /*( pp1, 45.6, -1525.8, 2, 3.0 ); // Caso queira colocar o portão para abrir pra baixo*/
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fp1", true ))
{
	if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.5, 49.0849, -1530.9667, 5.3143))
		{
			SendClientMessage(playerid, COLOR_ERRO, "[ x ] Você não está perto do Pedagio!");
			return 1;
		}
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão número 1 do Pedágio." );
		MoveDynamicObject( pp1, 45.6,-1525.8,6, 3.0 ); /*( pp1, 45.6, -1525.8, 2, 3.0 ); // Caso queira colocar o portão para abrir pra baixo*/
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/ap2", true ))
{
	if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.5, 49.0849, -1530.9667, 5.3143))
		{
			SendClientMessage(playerid, COLOR_ERRO, "[ x ] Você não está perto do Pedagio!");
			return 1;
		}
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão número 2 do Pedágio." );
		MoveDynamicObject( pp2, 52.7, -1531.7, 6, 3.0 ); /*( pp1, 45.6, -1525.8, 2, 3.0 ); // Caso queira colocar o portão para abrir pra baixo*/
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fp2", true ))
{
	if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.5, 49.0849, -1530.9667, 5.3143))
		{
			SendClientMessage(playerid, COLOR_ERRO, "[ x ] Você não está perto do Pedagio!");
			return 1;
		}
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão número 2 do Pedágio." );
		MoveDynamicObject( pp2, 52, -1536.7998, 6, 3.0 ); /*( pp1, 45.6, -1525.8, 2, 3.0 ); // Caso queira colocar o portão para abrir pra baixo*/
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa302", true ))
{
	if( !strcmp( CasaInfo[ 302 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 302 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 302 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 302 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua Casa" );
		MoveDynamicObject( P_S, -220.89999390, 2615.00000000, 64.50000000, 5.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} // BASE 1 // ENTRADA LV
if( !strcmp( cmdtext, "/abase1", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaVilaCSI( DCasaID ) || IsCasaVilaCSI( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da Vila." );
		MoveDynamicObject( PortaoVilaCSI, 2287.1000977,606.5000000,18.7000008, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para abrir o portão da Vila é preciso ser Dono(a) ou morador(a) de uma das casas !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase1", true ))
{
	new
	DCasaID = dini_Int( f( playerid ), "Casa" ), MCasaID = dini_Int( f( playerid ), "MorandoID" )
	;
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || IsCasaVilaCSI( DCasaID ) || IsCasaVilaCSI( MCasaID ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da Vila." );
		MoveDynamicObject( PortaoVilaCSI, 2287.6000977,606.5000000,12.3999996, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para fechar o portão da Vila é preciso ser Dono(a) ou morador(a) de uma das casas !" );
	}
	return 1;
} // BASE 2 // INDO FORTCARSON
if( !strcmp( cmdtext, "/abase2", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 2", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão do seu Clan ." );
		MoveDynamicObject( P_USC, -75.30000305,-352.89999390,7.00000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase2", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 2", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão do seu Clan." );
		MoveDynamicObject( P_USC, -75.30000305,-352.89999390,3.20000005, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} // BASE 3 // AGENCIA
if( !strcmp( cmdtext, "/abase3", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 3", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão do seu Clan." );
		MoveDynamicObject( P_ELITE, 1283.39941406,-1651.39941406,20.10000038, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase3", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 3", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão do seu Clan." );
		MoveDynamicObject( P_ELITE, 1283.39941406,-1651.39941406,15.30000019, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} // BASE 4 // SUBTERRANEO
if( !strcmp( cmdtext, "/abase4", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 4", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão do seu Clan." );
		MoveDynamicObject( pElite[ 0 ], 2295.11132812,-2204.07006836,7.83589125, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase4", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 4", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão do seu Clan." );
		MoveDynamicObject( pElite[ 0 ], 2299.21850586,-2193.67041016,7.83589125, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} // BASE 5 // ILHA
if( !strcmp( cmdtext, "/abase5", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 2", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 3", true ))
	{
		if( statusCSI == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] A ilha do seu Clan já está aberta !" );
			return 1;
		}
		if( statusCSI == 2 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] A ilha do seu Clan já está sendo aberta !" );
			return 1;
		}
		if( statusCSI == 3 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] A ilha de seu Clan está sendo fechada aguarde para poder abri-la !" );
			return 1;
		}
		statusCSI = 2;
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo a ilha do seu Clan." );
		//
		CSImoveapont();
		CSImoveasubm();
		SetTimer( "CSImoveaports", 15000, false );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase5", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 2", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 3", true ))
	{
		if( statusCSI == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] A ilha do seu Clan já está fechada !" );
			return 1;
		}
		if( statusCSI == 2 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] A ilha do seu Clan está sendo aberta aguarde para poder fecha-la !" );
			return 1;
		}
		if( statusCSI == 3 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] A ilha de seu Clan já está sendo fechada !" );
			return 1;
		}
		statusCSI = 3;
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando a ilha do seu Clan." );
		//
		CSImovefpont();
		CSImovefsubm();
		SetTimer( "CSIfechaports", 15000, false );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abase5p2", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 2", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 3", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo a caveira da ilha do seu Clan." );
		MoveDynamicObject( pCSIcave, 82.800003051758,-2288.6999511719,-10.39999961853, 2.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase5p2", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 2", true ) ||
	!strcmp( playerClan[ playerid ], "BASE 5 CLAN 3", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando a caveira da ilha do seu Clan." );
		MoveDynamicObject( pCSIcave, 82.7998046875,-2288.69921875,5.0999999046326, 2.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
} // BASE 6 // DILLIMORE
if( !strcmp( cmdtext, "/abase6", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 6", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão do seu Clan." );
		MoveDynamicObject( pFury, 652.09997558594,-455.20001220703,23.39999961853, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase6", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 6", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão do seu Clan." );
		MoveDynamicObject( pFury, 652.09997558594,-455.20001220703,18.10000038147, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} // Base 7 // PERTO DO AERO
if( !strcmp( cmdtext, "/abase7", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 7", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão do seu Clan." );
		MoveDynamicObject( pbasea, 1840.69995117, -2781.89990234, 25, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase7", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 7", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão do seu Clan." );
		MoveDynamicObject( pbasea, 1840.69995117, -2781.89990234, 18.20000076, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} // Base 8 // NAVIO
if( !strcmp( cmdtext, "/abase8", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 8", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão principal do seu Clan." );
		MoveDynamicObject( pUSAp, 2868.59960938,-1783.39941406,18.80000114, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase8", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 8", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão principal do seu Clan." );
		MoveDynamicObject( pUSAp, 2868.59960938,-1783.39941406,12.80000114, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Base 8 // NAVIO // PORTÔES BARCO
if( !strcmp( cmdtext, "/abase8p2", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 8", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão dos barcos do seu Clan." );
		MoveDynamicObject( pUSAb, 2914.69995117,-1842.59997558,11.50000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase8p2", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 8", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão dos barcos do seu Clan." );
		MoveDynamicObject( pUSAb, 2914.69995117,-1840.19995117,1.50000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Base 8 // NAVIO // PORTÔES ELEVADOR
if( !strcmp( cmdtext, "/abase8p3", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 8", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Subindo elevador do seu Clan." );
		MoveDynamicObject( pUSAe, 2915.50000000,-1831.09960938,16.89999962, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fbase8p3", true ))
{
	if( !strcmp( playerClan[ playerid ], "STAFF BPO", true ) || !strcmp( playerClan[ playerid ], "BASE 8", true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Descendo elevador do seu Clan." );
		MoveDynamicObject( pUSAe, 2915.50000000,-1831.09960938,9.89999962, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrircasa27", true ))
{
	if( !strcmp( CasaInfo[ 27 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 27 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 27 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 27 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da casa." );
		MoveDynamicObject( C_MILITO, 310.70001221, -1175.90002441, 88.40000153, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa27", true ))
{
	if( !strcmp( CasaInfo[ 27 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 27 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 27 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 27 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da casa." );
		MoveDynamicObject( C_MILITO, 310.70001221,-1175.90002441,82.40000153, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa ID 21
if( !strcmp( cmdtext, "/abrircasa21", true ))
{
	if( !strcmp( CasaInfo[ 21 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 21 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 21 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 21 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da sua casa." );
		MoveDynamicObject( pcasa21, 1003.5, -643.70001220703, 115.59999847412, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa21", true ))
{
	if( !strcmp( CasaInfo[ 21 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 21 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 21 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 21 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua casa." );
		MoveDynamicObject( pcasa21, 1003.5100097656, -643.65997314453, 123.86000061035, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa ID 185
if( !strcmp( cmdtext, "/abrircasa185", true ))
{
	if( !strcmp( CasaInfo[ 185 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 185 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 185 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 185 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da sua casa." );
		MoveDynamicObject( pcasa185, 2747.55, -1177.49, 76.81, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa185", true ))
{
	if( !strcmp( CasaInfo[ 185 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 185 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 185 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 185 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua casa." );
		MoveDynamicObject( pcasa185, 2747.67, -1177.51, 71.35, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 285 Portão
if( !strcmp( cmdtext, "/fecharcasa285", true ))
{
	if( !strcmp( CasaInfo[ 285 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 285 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 285 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 285 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua casa." );
		MoveDynamicObject( pcasa285, 345.96, -1193.28, 78.31, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrircasa285", true ))
{
	if( !strcmp( CasaInfo[ 285 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 285 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 285 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 285 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da sua casa." );
		MoveDynamicObject( pcasa285, 353.33, -1187.60, 78.31, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 338 Portão
if( !strcmp( cmdtext, "/abrircasa338", true ))
{
	if( !strcmp( CasaInfo[ 338 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 338 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 338 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 338 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da sua casa." );
		MoveDynamicObject( pcasa338, 2194.01, -1290.33, 23.00, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa338", true ))
{
	if( !strcmp( CasaInfo[ 338 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 338 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 338 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 338 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua casa." );
		MoveDynamicObject( pcasa338, 2199.92, -1290.48, 23.00, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 334 Portão
if( !strcmp( cmdtext, "/fecharcasa334", true ))
{
	if( !strcmp( CasaInfo[ 334 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 334 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 334 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 334 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua casa." );
		MoveDynamicObject( pcasa334, 2096.16, -1312.73, 24.20, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrircasa334", true ))
{
	if( !strcmp( CasaInfo[ 334 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 334 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 334 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 334 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da sua casa." );
		MoveDynamicObject( pcasa334, 2101.07, -1312.85, 24.20, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 331 Portão
if( !strcmp( cmdtext, "/abrircasa331", true ))
{
	if( !strcmp( CasaInfo[ 331 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 331 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 331 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 331 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da sua casa." );
		MoveDynamicObject( pcasa331, 2112.1999512,-1230.9000244,24.2000008, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa331", true ))
{
	if( !strcmp( CasaInfo[ 331 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 331 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 331 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 331 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua casa." );
		MoveDynamicObject( pcasa331, 2105.1999512,-1230.9000244,24.2000008, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrircasa289", true ))
{
	if( !strcmp( CasaInfo[ 289 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 289 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 289 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 289 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão !" );
		MoveDynamicObject( pcasa289, 827.19885254,-868.33825684,69.24628448, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa289", true ))
{
	if( !strcmp( CasaInfo[ 289 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 289 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 289 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 289 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão !" );
		MoveDynamicObject( pcasa289, 833.45507812,-866.12628174,69.24628448, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrircasa274", true ))
{
	if( !strcmp( CasaInfo[ 274 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 274 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 274 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 274 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão !" );
		MoveDynamicObject( pcasa274, 203.30130005,-1384.00366211,48.33274841, 3.0, 359.74731445,357.74780273,44.48913574 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa274", true ))
{
	if( !strcmp( CasaInfo[ 274 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 274 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 274 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 274 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão !" );
		MoveDynamicObject( pcasa274, 197.62548828,-1389.62084961,48.03273010, 3.0, 359.75018311,357.74996948,44.49017334 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}

if( !strcmp( cmdtext, "/abrircasa2", true ))
{
	if( !strcmp( CasaInfo[ 2 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 2 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 2 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 2 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão !" );
		MoveDynamicObject( pCasa2, 1496.8000488281,-701.79998779297,103.50000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
//----------------------------------------------------------------------------
if( !strcmp( cmdtext, "/fecharcasa2", true ))
{
	if( !strcmp( CasaInfo[ 2 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 2 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 2 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 2 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão !" );
		MoveDynamicObject( pCasa2, 1497.4000244141,-700.00000000,96.50000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
//-------------------- | CASA 33 | --------------------
if( !strcmp( cmdtext, "/abrircasa33", true ))
{
	if( !strcmp( CasaInfo[ 33 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 33 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 33 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 33 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão da sua casa." );
		MoveDynamicObject( pCasaGolf, 785.5,-1152.5,19.39999961853, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
//----------------------------------------------------------------------------
if( !strcmp( cmdtext, "/fecharcasa33", true ))
{
	if( !strcmp( CasaInfo[ 33 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 33 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 33 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 33 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão da sua casa." );
		MoveDynamicObject( pCasaGolf, 785.5,-1152.5,25.39999961853, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
//-------------------- | Mad Dog | --------------------
if( !strcmp( cmdtext, "/amad1", true ))
{
	if( !strcmp( CasaInfo[ 36 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão de cima da Mad Dog." );
		MoveDynamicObject( pMad[ 0 ], 1245.47277832,-766.79766846,98.19992065, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fmad1", true ))
{
	if( !strcmp( CasaInfo[ 36 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão de cima da Mad Dog." );
		MoveDynamicObject( pMad[ 0 ], 1245.47277832,-766.79357910,93.63903046, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/amad2", true ))
{
	if( !strcmp( CasaInfo[ 36 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão de baixo da Mad Dog." );
		MoveDynamicObject( pMad[ 1 ], 1364.63183594,-846.78204346,51.67854309, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fmad2", true ))
{
	if( !strcmp( CasaInfo[ 36 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 36 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão de baixo da Mad Dog." );
		MoveDynamicObject( pMad[ 1 ], 1364.70019531,-846.83117676,46.62973404, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
//-------------------- | CASA 49 | --------------------
if( !strcmp( cmdtext, "/abrircasa49", true ))
{
	if( !strcmp( CasaInfo[ 49 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 49 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 49 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 49 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa49, 1800.40, -2125.64, 14.20, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa49", true ))
{
	if( !strcmp( CasaInfo[ 49 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 49 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 49 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 49 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa49, 1794.20, -2125.80, 14.20, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 29
if( !strcmp( cmdtext, "/abrircasap29", true ))
{
	if( !strcmp( CasaInfo[ 29 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa29[ 1 ], 247.5000000,-1266.4000244,66.5000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasap29", true ))
{
	if( !strcmp( CasaInfo[ 29 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa29[ 1 ], 247.5000000,-1266.3994141,74.9000015, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrircasa29", true ))
{
	if( !strcmp( CasaInfo[ 29 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa29[ 0 ], 283.3999939,-1262.5999756,70.6999969, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa29", true ))
{
	if( !strcmp( CasaInfo[ 29 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 29 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa29[ 0 ], 283.3999939,-1262.5999756,74.5999985, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 32
if( !strcmp( cmdtext, "/abrircasa32", true ))
{
	if( !strcmp( CasaInfo[ 32 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 32 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 32 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 32 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa32, 159.0000000,-1349.5000000,71.0999985, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa32", true ))
{
	if( !strcmp( CasaInfo[ 32 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 32 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 32 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 32 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa32, 169.5000000,-1350.0999756,71.0999985, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 292
if( !strcmp( cmdtext, "/abrircasa292", true ))
{
	if( !strcmp( CasaInfo[ 292 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 292 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 292 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 292 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pdody, 960.76953125,-942.17089844,46.23084641, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa292", true ))
{
	if( !strcmp( CasaInfo[ 292 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 292 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 292 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 292 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pdody, 960.77038574,-942.17126465,41.73073959, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
//
if( !strcmp( cmdtext, "/abrircasa31", true ))
{
	if( !strcmp( CasaInfo[ 31 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 31 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 31 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 31 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa31, 282.6279296875, -1320.3671875, 60.453666687012, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa ID 31 portão
if( !strcmp( cmdtext, "/fecharcasa31", true ))
{
	if( !strcmp( CasaInfo[ 31 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 31 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 31 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 31 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa31, 282.62796020508, -1320.3673095703, 55.703666687012, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa ID 30 portão
if( !strcmp( cmdtext, "/abrircasa30", true ))
{
	if( !strcmp( CasaInfo[ 30 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 30 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 30 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 30 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa30, 266.96453857,-1331.17370605,52.51494980, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa30", true ))
{
	if( !strcmp( CasaInfo[ 30 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 30 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 30 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 30 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa30, 260.49185181,-1335.74426270,52.46945953, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fcasa1", true ))
{
	if( !strcmp( CasaInfo[ 1 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão 1 da sua casa." );
		MoveDynamicObject( pVito[ 0 ], -693.70001220703, 961.40002441406, 11.39999961853, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/acasa1", true ))
{
	if( !strcmp( CasaInfo[ 1 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão 1 da sua casa." );
		MoveDynamicObject( pVito[ 0 ], -693.59997558594, 970.19024658203, 11.39999961853, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fcasa2", true ))
{
	if( !strcmp( CasaInfo[ 1 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão 2 da sua casa." );
		MoveDynamicObject( pVito[ 1 ], -656.09997558594, 871, 0, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/acasa2", true ))
{
	if( !strcmp( CasaInfo[ 1 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 1 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão 2 da sua casa." );
		MoveDynamicObject( pVito[ 1 ], -656.09997558594, 871, 4.3000001907349, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Portão casa pcasa 137
if( !strcmp( cmdtext, "/abrircasa137", true ))
{
	if( !strcmp( CasaInfo[ 137 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 137 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 137 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 137 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa137, 801.58000000,-2508.10000000,25.29000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa137", true ))
{
	if( !strcmp( CasaInfo[ 137 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 137 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 137 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 137 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa137, 801.67000000,-2500.45000000,25.29000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
/*
// Portão casa 354 // Festa - Praia
if( !strcmp( cmdtext, "/abrircasa354", true ))
{
	if( !strcmp( CasaInfo[ 354 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 354 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 354 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 354 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa354, 268.1200000,-1809.0400000,10.9100000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa354", true ))
{
	if( !strcmp( CasaInfo[ 354 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 354 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 354 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 354 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa354, 267.4400000,-1809.2900000,5.9000000, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} */
// Portão casa 353
if( !strcmp( cmdtext, "/abrircasa353", true ))
{
	if( !strcmp( CasaInfo[ 353 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 353 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 353 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 353 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa352, 932.79998779297,-837.79998779297,94.800003051758, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa353", true ))
{
	if( !strcmp( CasaInfo[ 353 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 353 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 353 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 353 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa352, 937.90002441406,-834.79998779297,94.800003051758, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Comandos portão casa Ryder ID 35
if( !strcmp( cmdtext, "/abrircasa35", true ))
{
	if( !strcmp( CasaInfo[ 35 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 35 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 35 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 35 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa35, 2465.93896484, -1693.91613770, 12.43754196, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa35", true ))
{
	if( !strcmp( CasaInfo[ 35 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 35 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 35 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 35 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( pcasa35, 2473.17529297, -1690.15417480, 12.43366241, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa ID 22
if( !strcmp( cmdtext, "/abrircasa22", true ))
{
	if( !strcmp( CasaInfo[ 22 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 22 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 22 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 22 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa22, 937.65, -685.76, 126.55, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa22", true ))
{
	if( !strcmp( CasaInfo[ 22 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 22 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 22 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 22 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( pcasa22, 937.72, -685.92, 120.64, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
// Casa 28
if( !strcmp( cmdtext, "/abrircasa28", true ))
{
	if( !strcmp( CasaInfo[ 28 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo portão da sua casa." );
		MoveDynamicObject( openGate[ 0 ], 262.17840576172, -1231.7677001953, 79.870956420898, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharcasa28", true ))
{
	if( !strcmp( CasaInfo[ 28 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando portão da sua casa." );
		MoveDynamicObject( openGate[ 0 ], 262.0749206543, -1231.8627929688, 74.457061767578, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrirgaragem", true ))
{
	if( !strcmp( CasaInfo[ 28 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo a garagem da sua casa." );
		MoveDynamicObject( openGate[ 1 ], 238.01281738281, -1180.1846923828, 70.840240478516, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fechargaragem", true ))
{
	if( !strcmp( CasaInfo[ 28 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando a garagem da sua casa." );
		MoveDynamicObject( openGate[ 1 ], 238.00971984863, -1180.1965332031, 74.090240478516, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrirpiscina", true ))
{
	if( !strcmp( CasaInfo[ 28 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo a piscina da sua casa." );
		MoveDynamicObject( openGate[ 2 ], 241.08712768555, -1203.6058349609, 74.082534790039, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fecharpiscina", true ))
{
	if( !strcmp( CasaInfo[ 28 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 28 ][ Morador3 ], PlayerName( playerid ), true ))
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando a piscina da sua casa." );
		MoveDynamicObject( openGate[ 2 ], 229.79539489746, -1185.8768310547, 74.13111114502, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/apc", true ))
{
	if( !strcmp( CasaInfo[ 156 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 156 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 156 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 156 ][ Morador3 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Morador3 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Morador3 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Abrindo o portão do condominio." );
		MoveDynamicObject( pVilinha, 905.40, -1664.45, 20.58, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fpc", true ))
{
	if( !strcmp( CasaInfo[ 156 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 156 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 156 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 156 ][ Morador3 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 153 ][ Morador3 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 157 ][ Morador3 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Proprietario ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Morador ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Morador2 ], PlayerName( playerid ), true ) ||
	!strcmp( CasaInfo[ 158 ][ Morador3 ], PlayerName( playerid ), true ) || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Fechando o portão do condominio." );
		MoveDynamicObject( pVilinha, 905.41, -1664.45, 15.39, 3.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/versaldo", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Administrador(a) !" );
	tmp = strtok( cmdtext, idx );
	new
	id = strval( tmp )
	;
	if( !strlen( tmp ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /versaldo [ ID ]" );
	if( !IsPlayerConnected( id ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
	format( gstring, sizeof( gstring ), "[ > ] O saldo de %s em mãos é: $ %d", PlayerName( id ), GetPlayerCash( id ));
	SendClientMessage( playerid, COLOR_AMARELO, gstring );
	return 1;
}
if( !strcmp( cmd, "/versaldoB", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Administrador(a) !" );
	tmp = strtok( cmdtext, idx );
	new
	id = strval( tmp )
	;
	if( !strlen( tmp ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /versaldoB [ ID ]" );
	if( !IsPlayerConnected( id ))
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( id ));
	format( gstring, sizeof( gstring ), "[ > ] O saldo de %s é: $ %d", PlayerName( id ), dini_Int( gFile, "SaldoBanco" ));
	SendClientMessage( playerid, COLOR_AMARELO, gstring );
	return 1;
}
if( !strcmp( cmd, "/localizar", true ))
{
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	if( dini_Int( gFile, "GPSPlayer" ) == 1 || aInfo[ playerid ][ Dono ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Localizar [ ID/OFF ]" );
			return 1;
		}
		if( !strcmp( tmp, "off", true ))
		{
			if( GPS[ playerid ] )
			{
				KillTimer( T_GPS[ playerid ] );
				GPS[ playerid ] = false;
				T_GPS[ playerid ] = 0;
				DisablePlayerCheckpoint( playerid );
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O GPSPlayer foi desabilitado." );
			}
			else SendClientMessage( playerid, COLOR_ERRO, "[ x ] O GPSPlayer não está ligado !" );
			return 1;
		}
		if( IsPlayerConnected( strval( tmp )) )
		{
			if( aInfo[ strval( tmp ) ][ Dono ] == 0 && aInfo[ strval( tmp ) ][ Admin ] == 0 && aInfo[ strval( tmp ) ][ Moderador ] == 0 && aInfo[ strval( tmp ) ][ Ajudante ] == 0 )
			{
				if( strval( tmp ) != playerid )
				{
					if( GPS[ playerid ] )
					{
						KillTimer( T_GPS[ playerid ] );
						GPS[ playerid ] = false;
						T_GPS[ playerid ] = 0;
					}
					T_GPS[ playerid ] = SetTimerEx( "AtualizaGPS", 500, true, "dd", playerid, strval( tmp ));
					GPS[ playerid ] = true;
					new
					nick[ 24 ]
					;
					GetPlayerName( strval( tmp ), nick, 24 );
					format( str, 128, "[ > ] Você está localizando: %s ( ID: %d )", nick, strval( tmp ));
					SendClientMessage( playerid, COLOR_AMARELO, str );
				}
				else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode localizar você mesmo !" );
			}
			else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode localizar membros da STAFF !" );
		}
		else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um GPSPlayer !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/criartapete", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para criar tapetes !" );
			return 1;
		}
		if( Crioutapete[ playerid ] != 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de criar um tapete aguarde !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_AZULCLARO, "[ > ] Tapete criado com sucesso !" );
		new
		Float:x, Float:y, Float:z, Float:a
		;
		GetPlayerPos( playerid, x, y, z );
		GetPlayerFacingAngle( playerid, a );
		SetTimerEx( "Novotapete", 30000, false, "d", playerid );
		new
		i = 1
		;
		for( ; i < sizeof( SpikeInfo ); i++ )
		{
			if( SpikeInfo[ i ][ sCreated ] == 0 )
			{
				SpikeInfo[ i ][ sCreated ] = 1;
				SpikeInfo[ i ][ sX ] = x;
				SpikeInfo[ i ][ sY ] = y;
				SpikeInfo[ i ][ sZ ] = z-0.7;
				SpikeInfo[ i ][ sObject ] = CreateDynamicObject( 2899, x, y, z-0.9, 0, 0, a-90 );
				printf( "tapete %d criado", i );
				Crioutapete[ playerid ] = i;
				return 1;
			}
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permisão !" );
		return 1;
	}
}
else if( !strcmp( cmd," /removertapete", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para remover tapetes !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_AZULCLARO, "[ > ] Tapete removido com sucesso !" );
		DeleteClosestStrip( playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permisão !" );
	}
	return 1;
}
if( !strcmp( cmd, "/plantarbomba", true ))
{
	if( pInfo[ playerid ][ Prof ] == TERRORISTA || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( PlantouBomba[ playerid ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de plantar uma bomba, aguarde um pouco ..." );
			return 1;
		}
		new
		Bomba,
		Float:x,
		Float:y,
		Float:z
		;
		if( IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você nao pode plantar uma bomba dentro de um veículo !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Sua bomba foi plantada com sucesso, irá explodir em 10 segundos !" );
		GetPlayerPos( playerid, x, y, z );
		GetXYInFrontOfPlayer( playerid, x, y, 0.7 );
		Bomba = CreateDynamicObject( 1252, x, y, z-0.8, 0, 0, 0 );
		PlantouBomba[ playerid ] = 1;
		ClearAnimations( playerid );
		ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0 );
		SetTimerEx( "CriarExplosao", 10000, false, "fffdf", x, y, z, 2, 50.0 );
		SetTimerEx( "DestruirObjeto", 10000, false, "d", Bomba );
		SetTimerEx( "NovaBomba", 60000, false, "i", playerid );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) terrorista nem chefé da máfia !" );
		return 1;
	}
}
if( !strcmp( cmd, "/beijar", true ))
{
	if( pInfo[ playerid ][ Prof ] == PROSTITUTA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /beijar [ 1 à 15 ]" );
		new
		beijo = strval( tmp )
		;
		if( beijo < 1 || beijo > 15 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Tipos de beijos de 1 à 15 !" );
			return 1;
		}
		if( beijo == 1 )
		{
			ApplyAnimation( playerid,"KISSING", "Grlfrd_Kiss_02", 4.1,0,1,1,1,1 );
			} else if( beijo == 2 ) {
			ApplyAnimation( playerid,"KISSING","Playa_Kiss_01", 4.1,0,1,1,1,1 );
			} else if( beijo == 3 ) {
			ApplyAnimation( playerid,"KISSING","Playa_Kiss_02", 4.1,0,1,1,1,1 );
			} else if( beijo == 4 ) {
			ApplyAnimation( playerid,"KISSING","Playa_Kiss_03", 4.1,0,1,1,1,1 );
			} else if( beijo == 5 ) {
			ApplyAnimation( playerid,"KISSING","Grlfrd_Kiss_03", 4.1,0,1,1,1,1 );
			} else if( beijo == 6 ) {
			ApplyAnimation( playerid,"KISSING","Grlfrd_Kiss_01", 4.1,0,1,1,1,1 );
			} else if( beijo == 7 ) {
			ApplyAnimation( playerid,"KISSING","gift_give", 4.1,0,1,1,1,1 );
			} else if( beijo == 8 ) {
			ApplyAnimation( playerid,"KISSING","gift_get", 4.1,0,1,1,1,1 );
			} else if( beijo == 9 ) {
			ApplyAnimation( playerid,"KISSING","GF_StreetArgue_02", 4.1,0,1,1,1,1 );
			} else if( beijo == 10 ) {
			ApplyAnimation( playerid,"KISSING","GF_StreetArgue_01", 4.1,0,1,1,1,1 );
			} else if( beijo == 11 ) {
			ApplyAnimation( playerid,"KISSING","GF_CarSpot", 4.1,0,1,1,1,1 );
			} else if( beijo == 12 ) {
			ApplyAnimation( playerid,"KISSING","GF_CarArgue_02", 4.1,0,1,1,1,1 );
			} else if( beijo == 13 ) {
			ApplyAnimation( playerid,"KISSING","GF_CarArgue_01", 4.1,0,1,1,1,1 );
			} else if( beijo == 14 ) {
			ApplyAnimation( playerid,"KISSING","gfwave2", 4.1,0,1,1,1,1 );
			} else if( beijo == 15 ) {
			ApplyAnimation( playerid,"KISSING","BD_GF_Wave", 4.1,0,1,1,1,1 );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é uma prostituta !" );
	}
	return 1;
}
if( !strcmp( cmd, "/vpizza", true ))
{
	if( pInfo[ playerid ][ Prof ] == PIZZABOY || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Pizza_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de vender uma pizza aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vPizza [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vPizza [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new saborid = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vPizza [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new valor = strval( tmp );
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer pizza para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender pizza não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 100 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 100." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu pizza sabor %s para %s por $%d.", PizzaNome( saborid ), PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu pra você uma pizza sabor %s por $%d. ( /pAceitar | /pRecusar )", PlayerName( playerid ), PizzaNome( saborid ), valor );
		SendClientMessage( id, -1, gStr );
		Pizza_ID[ id ] = playerid;
		Pizza_SID[ id ] = saborid;
		Pizza_PID[ id ] = playerid;
		Pizza_VALOR[ id ] = valor;
		Pizza_Oferecido[ playerid ] = 1;
		Pizza_Recebido[ id ] = 1;
		Pizza_IID[ playerid ] = id;
		Pizza_Timer[ id ] = SetTimerEx( "MsgPizza", 4000, false, "d", id );
		Pizza_Timer[ playerid ] = SetTimerEx( "LiberarPizza", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é vendedor de pizza !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/pAceitar", true ))
{
	if( Pizza_Recebido[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo pizza para você !" );
	KillTimer( Pizza_Timer[ playerid ] );
	MensagemFormatada( Pizza_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, pizza vendida com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou a pizza, oferta feita por %s.", PlayerName( Pizza_PID[ playerid ] ));
	sGivePlayerCash( playerid, -Pizza_VALOR[ playerid ] );
	sGivePlayerCash( Pizza_ID[ playerid ], Pizza_VALOR[ playerid ] );
	//
	SetPlayerHoldingObject( playerid, 2702, 6, 0.1, 0.03, 0, 90, 270, -1 );
	ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 1, 1 );
	SetTimerEx( "PizzaObjetoff", 10000, false, "d", playerid );
	//
	SetPlayerHealth( playerid, 100.0 );
	Pizza_Oferecido[ Pizza_PID[ playerid ] ] = 0;
	Pizza_IID[ Pizza_PID[ playerid ] ] = -1;
	Pizza_Recebido[ playerid ] = 0;
	Pizza_Mensagem[ playerid ] = 0;
	Pizza_VALOR[ playerid ] = 0;
	Pizza_PID[ playerid ] = -1;
	Pizza_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/pRecusar", true ))
{
	if( Pizza_Recebido[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo pizza para você !" );
	KillTimer( Pizza_Timer[ playerid ] ); KillTimer( Pizza_Timer[ Pizza_PID[ playerid ] ] );
	MensagemFormatada( Pizza_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, a pizza não foi vendida, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou a pizza, oferta feita por %s, você não comprou a pizza.", PlayerName( Pizza_PID[ playerid ] ));
	Pizza_Oferecido[ Pizza_PID[ playerid ] ] = 0;
	Pizza_IID[ Pizza_PID[ playerid ] ] = -1;
	Pizza_Recebido[ playerid ] = 0;
	Pizza_Mensagem[ playerid ] = 0;
	Pizza_VALOR[ playerid ] = 0;
	Pizza_PID[ playerid ] = -1;
	Pizza_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmd, "/vHotdog", true ))
{
	if( pInfo[ playerid ][ Prof ] == HOTDOG || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Hotdog_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de vender uma Hotdog aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vHotdog [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vHotdog [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new saborid = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vHotdog [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new valor = strval( tmp );
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer Hotdog para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender Hotdog não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 100 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 100." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu Hotdog sabor %s para %s por $%d.", HotdogNome( saborid ), PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu pra você uma Hotdog sabor %s por $%d. ( /HotAceitar | /HotRecusar )", PlayerName( playerid ), HotdogNome( saborid ), valor );
		SendClientMessage( id, -1, gStr );
		Hotdog_ID[ id ] = playerid;
		Hotdog_SID[ id ] = saborid;
		Hotdog_PID[ id ] = playerid;
		Hotdog_VALOR[ id ] = valor;
		Hotdog_Oferecido[ playerid ] = 1;
		Hotdog_Recebido[ id ] = 1;
		Hotdog_IID[ playerid ] = id;
		Hotdog_Timer[ id ] = SetTimerEx( "MsgHotdog", 4000, false, "d", id );
		Hotdog_Timer[ playerid ] = SetTimerEx( "LiberarHotdog", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é vendedor de Hotdog !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/HotAceitar", true ))
{
	if( Hotdog_Recebido[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo Hotdog para você !" );
	KillTimer( Hotdog_Timer[ playerid ] );
	MensagemFormatada( Hotdog_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, Hotdog vendida com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou a Hotdog, oferta feita por %s.", PlayerName( Hotdog_PID[ playerid ] ));
	sGivePlayerCash( playerid, -Hotdog_VALOR[ playerid ] );
	sGivePlayerCash( Hotdog_ID[ playerid ], Hotdog_VALOR[ playerid ] );
	//
	SetPlayerHoldingObject( playerid, 2702, 6, 0.1, 0.03, 0, 90, 270, -1 );
	ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 1, 1 );
	SetTimerEx( "HotdogObjetoff", 10000, false, "d", playerid );
	//
	SetPlayerHealth( playerid, 100.0 );
	Hotdog_Oferecido[ Hotdog_PID[ playerid ] ] = 0;
	Hotdog_IID[ Hotdog_PID[ playerid ] ] = -1;
	Hotdog_Recebido[ playerid ] = 0;
	Hotdog_Mensagem[ playerid ] = 0;
	Hotdog_VALOR[ playerid ] = 0;
	Hotdog_PID[ playerid ] = -1;
	Hotdog_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/HotRecusar", true ))
{
	if( Hotdog_Recebido[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo Hotdog para você !" );
	KillTimer( Hotdog_Timer[ playerid ] ); KillTimer( Hotdog_Timer[ Hotdog_PID[ playerid ] ] );
	MensagemFormatada( Hotdog_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, a Hotdog não foi vendida, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou a Hotdog, oferta feita por %s, você não comprou a Hotdog.", PlayerName( Hotdog_PID[ playerid ] ));
	Hotdog_Oferecido[ Hotdog_PID[ playerid ] ] = 0;
	Hotdog_IID[ Hotdog_PID[ playerid ] ] = -1;
	Hotdog_Recebido[ playerid ] = 0;
	Hotdog_Mensagem[ playerid ] = 0;
	Hotdog_VALOR[ playerid ] = 0;
	Hotdog_PID[ playerid ] = -1;
	Hotdog_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmd, "/vSorvete", true ))
{
	if( pInfo[ playerid ][ Prof ] == SORVETEIRO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Sorvete_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de vender um Sorvete aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vSorvete [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vSorvete [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new saborid = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vSorvete [ ID ] [ id sabor ] [ valor ]" );
			return 1;
		}
		new valor = strval( tmp );
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer Sorvete para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender Sorvete não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 100 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 100." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu Sorvete sabor %s para %s por $%d.", PlayerNome( saborid ), PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu pra você um Sorvete sabor %s por $%d. ( /SoAceitar | /SoRecusar )", PlayerName( playerid ), PlayerNome( saborid ), valor );
		SendClientMessage( id, -1, gStr );
		Sorvete_ID[ id ] = playerid;
		Sorvete_SID[ id ] = saborid;
		Sorvete_PID[ id ] = playerid;
		Sorvete_VALOR[ id ] = valor;
		Sorvete_Oferecido[ playerid ] = 1;
		Sorvete_Recebido[ id ] = 1;
		Sorvete_IID[ playerid ] = id;
		Sorvete_Timer[ id ] = SetTimerEx( "MsgSorveteiro", 4000, false, "d", id );
		Sorvete_Timer[ playerid ] = SetTimerEx( "LiberarSorvete", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é vendedor de Sorveteiro !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/SoAceitar", true ))
{
	if( Sorvete_Recebido[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo Sorvete para você !" );
	KillTimer( Sorvete_Timer[ playerid ] );
	MensagemFormatada( Sorvete_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, Sorvete vendida com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou o Sorvete, oferta feita por %s.", PlayerName( Sorvete_PID[ playerid ] ));
	sGivePlayerCash( playerid, -Sorvete_VALOR[ playerid ] );
	sGivePlayerCash( Sorvete_ID[ playerid ], Sorvete_VALOR[ playerid ] );
	//
	SetPlayerHoldingObject( playerid, 2702, 6, 0.1, 0.03, 0, 90, 270, -1 );
	ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 1, 1 );
	SetTimerEx( "SorveteObjetoff", 10000, false, "d", playerid );
	//
	SetPlayerHealth( playerid, 100.0 );
	Sorvete_Oferecido[ Sorvete_PID[ playerid ] ] = 0;
	Sorvete_IID[ Sorvete_PID[ playerid ] ] = -1;
	Sorvete_Recebido[ playerid ] = 0;
	Sorvete_Mensagem[ playerid ] = 0;
	Sorvete_VALOR[ playerid ] = 0;
	Sorvete_PID[ playerid ] = -1;
	Sorvete_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/SoRecusar", true ))
{
	if( Sorvete_Recebido[ playerid ] == 0 )
		return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo Sorvete para você !" );
	KillTimer( Sorvete_Timer[ playerid ] ); KillTimer( Sorvete_Timer[ Sorvete_PID[ playerid ] ] );
	MensagemFormatada( Sorvete_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, o Sorvete não foi vendida, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou o Sorvete, oferta feita por %s, você não comprou o Sorvete.", PlayerName( Sorvete_PID[ playerid ] ));
	Sorvete_Oferecido[ Sorvete_PID[ playerid ] ] = 0;
	Sorvete_IID[ Sorvete_PID[ playerid ] ] = -1;
	Sorvete_Recebido[ playerid ] = 0;
	Sorvete_Mensagem[ playerid ] = 0;
	Sorvete_VALOR[ playerid ] = 0;
	Sorvete_PID[ playerid ] = -1;
	Sorvete_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmd, "/vCura", true ))
{
	if( pInfo[ playerid ][ Prof ] == MEDICO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Cura_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de curar alguém aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCura [ ID ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCura [ ID ] [ valor ]" );
			return 1;
		}
		new valor = strval( tmp );
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer cura para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja curar não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 100 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 100." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu cura para %s por $%d.", PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu cura pra você por $%d. ( /cuAceitar | /cuRecusar )", PlayerName( playerid ), valor );
		SendClientMessage( id, -1, gStr );
		Cura_ID[ id ] = playerid; Cura_PID[ id ] = playerid;	Cura_VALOR[ id ] = valor; Cura_Oferecido[ playerid ] = 1; Cura_Recebido[ id ] = 1;
		Cura_IID[ playerid ] = id;
		Cura_Timer[ id ] = SetTimerEx( "Curar", 4000, false, "d", id );
		Cura_Timer[ playerid ] = SetTimerEx( "LiberarCura", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) médico(a) !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/cuAceitar", true ))
{
	if( Cura_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo cura para você !" );
	KillTimer( Cura_Timer[ playerid ] );
	MensagemFormatada( Cura_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, cura vendida com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou a cura, oferta feita por %s. ( Você está curado '100 por cento de vida' )", PlayerName( Cura_PID[ playerid ] ));
	sGivePlayerCash( playerid, -Cura_VALOR[ playerid ] );
	sGivePlayerCash( Cura_ID[ playerid ], Cura_VALOR[ playerid ] );
	SetPlayerHealth( playerid, 100.0 );
	Cura_Oferecido[ Cura_PID[ playerid ] ] = 0;
	Cura_IID[ Cura_PID[ playerid ] ] = -1;
	Cura_Recebido[ playerid ] = 0;
	Cura_Mensagem[ playerid ] = 0;
	Cura_VALOR[ playerid ] = 0;
	Cura_PID[ playerid ] = -1;
	return 1;
}
if( !strcmp( cmdtext, "/cuRecusar", true ))
{
	if( Cura_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo cura para você !" );
	KillTimer( Cura_Timer[ playerid ] ); KillTimer( Cura_Timer[ Cura_PID[ playerid ] ] );
	MensagemFormatada( Cura_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, a cura não foi vendida, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou a cura, oferta feita por %s, você não aceitou ser curado.", PlayerName( Cura_PID[ playerid ] ));
	Cura_Oferecido[ Cura_PID[ playerid ] ] = 0;
	Cura_IID[ Cura_PID[ playerid ] ] = -1;
	Cura_Recebido[ playerid ] = 0;
	Cura_Mensagem[ playerid ] = 0;
	Cura_VALOR[ playerid ] = 0;
	Cura_PID[ playerid ] = -1;
	return 1;
}
if( !strcmp( cmd, "/vskin", true ))
{
	if( pInfo[ playerid ][ Prof ] == VENDEDOR_SKINS || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( _SKIN_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de vender skin aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vSkin [ ID ] [ skin id ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vSkin [ ID ] [ skin id ] [ valor ]" );
			return 1;
		}
		new idskin = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vSkin [ ID ] [ skin id ] [ valor ]" );
			return 1;
		}
		new valor = strval( tmp );
		if( idskin < 1 || idskin > 299 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] ID de skin invalido !" );
			return 1;
		}
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( pInfo[ id ][ fardado ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode vender skin para um(a) jogador(a) fardado(a) !" );
			return 1;
		}
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer skin para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja skin não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 5000 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 5000." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu a skin ID %d para %s por $%d.", idskin, PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu pra você a skin ID %d por $%d. ( /sAceitar | /sRecusar )", PlayerName( playerid ), idskin, valor );
		SendClientMessage( id, -1, gStr );
		_SKIN_ID[ id ] = playerid; _SKIN_SID[ id ] = idskin; _SKIN_PID[ id ] = playerid;	_SKIN_VALOR[ id ] = valor; _SKIN_Oferecido[ playerid ] = 1; _SKIN_Recebido[ id ] = 1;
		_SKIN_IID[ playerid ] = id;
		_SKIN_Timer[ id ] = SetTimerEx( "Skin", 4000, false, "d", id );
		_SKIN_Timer[ playerid ] = SetTimerEx( "LiberarSKin", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é vendedor de roupas !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/sAceitar", true ))
{
	if( _SKIN_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo skin para você !" );
	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa estar sobre o chão para aceitar a skin !" );
	KillTimer( _SKIN_Timer[ playerid ] );
	MensagemFormatada( _SKIN_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, skin vendida com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou a skin, oferta feita por %s.", PlayerName( _SKIN_PID[ playerid ] ));
	sGivePlayerCash( playerid, -_SKIN_VALOR[ playerid ] );
	sGivePlayerCash( _SKIN_ID[ playerid ], _SKIN_VALOR[ playerid ] );
	/* Setar a skin no player e no arquivo dele */
	SetPlayerSkin( playerid, _SKIN_SID[ playerid ] );
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	dini_IntSet( gFile, "Skin", _SKIN_SID[ playerid ] );
	/*				*/
	_SKIN_Oferecido[ _SKIN_PID[ playerid ] ] = 0;
	_SKIN_IID[ _SKIN_PID[ playerid ] ] = -1;
	_SKIN_Recebido[ playerid ] = 0;
	_SKIN_Mensagem[ playerid ] = 0;
	_SKIN_VALOR[ playerid ] = 0;
	_SKIN_PID[ playerid ] = -1;
	_SKIN_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/sRecusar", true ))
{
	if( _SKIN_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo skin para você !" );
	KillTimer( _SKIN_Timer[ playerid ] ); KillTimer( _SKIN_Timer[ _SKIN_PID[ playerid ] ] );
	MensagemFormatada( _SKIN_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, a skin não foi vendida, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou a skin, oferta feita por %s, você não comprou a skin.", PlayerName( _SKIN_PID[ playerid ] ));
	_SKIN_Oferecido[ _SKIN_PID[ playerid ] ] = 0;
	_SKIN_IID[ _SKIN_PID[ playerid ] ] = -1;
	_SKIN_Recebido[ playerid ] = 0;
	_SKIN_Mensagem[ playerid ] = 0;
	_SKIN_VALOR[ playerid ] = 0;
	_SKIN_PID[ playerid ] = -1;
	_SKIN_SID[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmd, "/vmaconha", true ))
{
	if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Maconha_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de vender maconha aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vMaconha [ ID ] [ parangas ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vMaconha [ ID ] [ parangas ] [ valor ]" );
			return 1;
		}
		new quantia = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vMaconha [ ID ] [ parangas ] [ valor ]" );
			return 1;
		}
		if( quantia > 10 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode vender 10 parangas por jogador !" );
			return 1;
		}
		new valor = strval( tmp );
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer maconha para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender maconha não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 1000 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 1000." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu %d parangas de maconha para %s por $%d.", quantia, PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu pra você %d parangas de maconha por $%d. ( /mAceitar | /mRecusar )", PlayerName( playerid ), quantia, valor );
		SendClientMessage( id, -1, gStr );
		Maconha_ID[ id ] = playerid; Maconha_QTD[ id ] = quantia; Maconha_PID[ id ] = playerid;	Maconha_VALOR[ id ] = valor; Maconha_Oferecido[ playerid ] = 1; Maconha_Recebido[ id ] = 1;
		Maconha_IID[ playerid ] = id;
		Maconha_Timer[ id ] = SetTimerEx( "Maconha", 4000, false, "d", id );
		Maconha_Timer[ playerid ] = SetTimerEx( "LiberarMaconha", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é traficante nem chefe da máfia !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/mAceitar", true ))
{
	if( Maconha_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo maconha para você !" );
	KillTimer( Maconha_Timer[ playerid ] );
	MensagemFormatada( Maconha_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, maconha vendida com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou a maconha, oferta feita por %s.", PlayerName( Maconha_PID[ playerid ] ));
	sGivePlayerCash( playerid, -Maconha_VALOR[ playerid ] );
	sGivePlayerCash( Maconha_ID[ playerid ], Maconha_VALOR[ playerid ] );
	pInfo[ playerid ][ PT_Maconha ] += Maconha_QTD[ playerid ];
	pInfo[ Maconha_ID[ playerid ] ][ Pego_QtaMaco ] -= Maconha_QTD[ playerid ];
	Maconha_Oferecido[ Maconha_PID[ playerid ] ] = 0;
	Maconha_IID[ Maconha_PID[ playerid ] ] = -1;
	Maconha_Recebido[ playerid ] = 0;
	Maconha_Mensagem[ playerid ] = 0;
	Maconha_VALOR[ playerid ] = 0;
	Maconha_PID[ playerid ] = -1;
	Maconha_QTD[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/mRecusar", true ))
{
	if( Maconha_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo maconha para você !" );
	KillTimer( Maconha_Timer[ playerid ] ); KillTimer( Maconha_Timer[ Maconha_PID[ playerid ] ] );
	MensagemFormatada( Maconha_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, a maconha não foi vendida, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou a maconha, oferta feita por %s, você não comprou a droga.", PlayerName( Maconha_PID[ playerid ] ));
	Maconha_Oferecido[ Maconha_PID[ playerid ] ] = 0;
	Maconha_IID[ Maconha_PID[ playerid ] ] = -1;
	Maconha_Recebido[ playerid ] = 0;
	Maconha_Mensagem[ playerid ] = 0;
	Maconha_VALOR[ playerid ] = 0;
	Maconha_PID[ playerid ] = -1;
	Maconha_QTD[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmd, "/vCocaina", true ))
{
	if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Farinha_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de vender cocaína aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCocaina [ ID ] [ pinos ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCocaina [ ID ] [ pinos ] [ valor ]" );
			return 1;
		}
		new quantia = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCocaina [ ID ] [ pinos ] [ valor ]" );
			return 1;
		}
		new valor = strval( tmp );
		if( quantia > 10 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode vender 10 pinos de cocaína por jogador !" );
			return 1;
		}
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer cocaína para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender cocaína não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 1500 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 1500." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu %d pinos de cocaína para %s por $%d.", quantia, PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu pra você %d pinos de cocaína por $%d. ( /fAceitar | /fRecusar )", PlayerName( playerid ), quantia, valor );
		SendClientMessage( id, -1, gStr );
		Farinha_ID[ id ] = playerid; Farinha_QTD[ id ] = quantia; Farinha_PID[ id ] = playerid;	Farinha_VALOR[ id ] = valor; Farinha_Oferecido[ playerid ] = 1; Farinha_Recebido[ id ] = 1;
		Farinha_IID[ playerid ] = id;
		Farinha_Timer[ id ] = SetTimerEx( "Farinha", 4000, false, "d", id );
		Farinha_Timer[ playerid ] = SetTimerEx( "LiberarFarinha", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é traficante nem chefe da máfia !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/fAceitar", true ))
{
	if( Farinha_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo cocaína para você !" );
	KillTimer( Farinha_Timer[ playerid ] );
	MensagemFormatada( Farinha_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, cocaína vendido com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou a cocaína, oferta feita por %s.", PlayerName( Farinha_PID[ playerid ] ));
	sGivePlayerCash( playerid, -Farinha_VALOR[ playerid ] );
	sGivePlayerCash( Farinha_ID[ playerid ], Farinha_VALOR[ playerid ] );
	pInfo[ playerid ][ PT_Cocaina ] += Farinha_QTD[ playerid ];
	pInfo[ Farinha_ID[ playerid ] ][ Pego_QtaCoca ] -= Farinha_QTD[ playerid ];
	Farinha_Oferecido[ Farinha_PID[ playerid ] ] = 0;
	Farinha_IID[ Farinha_PID[ playerid ] ] = -1;
	Farinha_Recebido[ playerid ] = 0;
	Farinha_Mensagem[ playerid ] = 0;
	Farinha_VALOR[ playerid ] = 0;
	Farinha_PID[ playerid ] = -1;
	Farinha_QTD[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/fRecusar", true ))
{
	if( Farinha_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo cocaína para você !" );
	KillTimer( Farinha_Timer[ playerid ] ); KillTimer( Farinha_Timer[ Farinha_PID[ playerid ] ] );
	MensagemFormatada( Farinha_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, a cocaína não foi vendido, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou a cocaína, oferta feita por %s, você não comprou a droga.", PlayerName( Farinha_PID[ playerid ] ));
	Farinha_Oferecido[ Farinha_PID[ playerid ] ] = 0;
	Farinha_IID[ Farinha_PID[ playerid ] ] = -1;
	Farinha_Recebido[ playerid ] = 0;
	Farinha_Mensagem[ playerid ] = 0;
	Farinha_VALOR[ playerid ] = 0;
	Farinha_PID[ playerid ] = -1;
	Farinha_QTD[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmd, "/vCrack", true ))
{
	if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Crack_Oferecido[ playerid ] == 1 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você acabou de vender crack aguarde um pouco !" );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCrack [ ID ] [ Quantia ] [ valor ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCrack [ ID ] [ Quantia ] [ valor ]" );
			return 1;
		}
		new quantia = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vCrack [ ID ] [ Quantia ] [ valor ]" );
			return 1;
		}
		new valor = strval( tmp );
		if( quantia > 10 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode vender 10 crack por jogador !" );
			return 1;
		}
		if( !IsPlayerConnected( id )) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );
		if( playerid == id ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode oferecer crack para você mesmo !" );
		if( GetPlayerCash( id ) < valor ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] o jogador(a) que você deseja vender crack não tem dinheiro suficiente !" );
		if( valor < 1 || valor > 2000 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente valores de 1 à 2000." );
		format( gstring, sizeof( gstring ), "[ > ] Você ofereceu %d pedras de crack para %s por $%d.", quantia, PlayerName( id ), valor );
		SendClientMessage( playerid, -1, gstring );
		format( gStr, sizeof( gStr ), "[ > ] %s ofereceu pra você %d pedras de crack por $%d. ( /cAceitar | /cRecusar )", PlayerName( playerid ), quantia, valor );
		SendClientMessage( id, -1, gStr );
		Crack_ID[ id ] = playerid; Crack_QTD[ id ] = quantia; Crack_PID[ id ] = playerid;	Crack_VALOR[ id ] = valor; Crack_Oferecido[ playerid ] = 1; Crack_Recebido[ id ] = 1;
		Crack_IID[ playerid ] = id;
		Crack_Timer[ id ] = SetTimerEx( "Crack", 4000, false, "d", id );
		Crack_Timer[ playerid ] = SetTimerEx( "LiberarCrack", 30000, false, "d", playerid );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é traficante nem chefe da máfia !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/cAceitar", true ))
{
	if( Crack_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo crack para você !" );
	KillTimer( Crack_Timer[ playerid ] );
	MensagemFormatada( Crack_PID[ playerid ], 0xFFFF00AA, "( + ) %s aceitou sua oferta, crack vendido com sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você aceitou o crack, oferta feita por %s.", PlayerName( Crack_PID[ playerid ] ));
	sGivePlayerCash( playerid, -Crack_VALOR[ playerid ] );
	sGivePlayerCash( Crack_ID[ playerid ], Crack_VALOR[ playerid ] );
	pInfo[ playerid ][ PT_Crack ] += Crack_QTD[ playerid ];
	pInfo[ Crack_ID[ playerid ] ][ Pego_QtaCrac ] -= Crack_QTD[ playerid ];
	Crack_Oferecido[ Crack_PID[ playerid ] ] = 0;
	Crack_IID[ Crack_PID[ playerid ] ] = -1;
	Crack_Recebido[ playerid ] = 0;
	Crack_Mensagem[ playerid ] = 0;
	Crack_VALOR[ playerid ] = 0;
	Crack_PID[ playerid ] = -1;
	Crack_QTD[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/cRecusar", true ))
{
	if( Crack_Recebido[ playerid ] == 0 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém está oferecendo crack para você !" );
	KillTimer( Crack_Timer[ playerid ] ); KillTimer( Crack_Timer[ Crack_PID[ playerid ] ] );
	MensagemFormatada( Crack_PID[ playerid ], 0xFFCC00AA, "[ x ] %s recusou sua oferta, o crack não foi vendido, sua venda não obteve sucesso !", PlayerName( playerid ));
	MensagemFormatada( playerid, 0xFFFF00AA, "( ~ ) Você recusou o crack, oferta feita por %s, você não comprou a droga.", PlayerName( Crack_PID[ playerid ] ));
	Crack_Oferecido[ Crack_PID[ playerid ] ] = 0;
	Crack_IID[ Crack_PID[ playerid ] ] = -1;
	Crack_Recebido[ playerid ] = 0;
	Crack_Mensagem[ playerid ] = 0;
	Crack_VALOR[ playerid ] = 0;
	Crack_PID[ playerid ] = -1;
	Crack_QTD[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmd, "/pegardroga", true ))
{
	if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( PlayerToPoint( 1.1, playerid, 2205.2078, -989.1382, 63.9297 ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Opções: ( Maconha, Cocaina, Crack )" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /PegarDroga [ Opção ] [ Quantia ]" );
				return 1;
			}
			else if( !strcmp( tmp, "maconha", true ))
			{
				tmp = strtok( cmdtext, idx );
				if( !strlen( tmp ))
					return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /PegarDroga Maconha [ Quantia ]" );
				new
				quantia = strval( tmp )
				;
				if( dini_Int( "Drogas.ini", "Maconha" ) < quantia )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem essa quantia de maconha aqui na biqueira !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Os aviãozinhos tem que pegar mais drogas na fazenda !" );
					return 1;
				}
				new
				money = quantia * 15
				;
				new
				Anterior = pInfo[ playerid ][ Pego_QtaMaco ]
				;
				if( quantia < 1 || quantia > 15 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode pegar de 1 à 15 maconhas !" );
					return 1;
				}
				if( pInfo[ playerid ][ Pego_QtaMaco ] >= 15 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem o suficiente de maconha e não pode pegar mais !" );
					return 1;
				}
				if( GetPlayerCash( playerid ) < money )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para pegar essa quantia de maconha !" );
					return 1;
				}
				if( quantia + pInfo[ playerid ][ Pego_QtaMaco ] < 15 )
				{
					format( gStr, sizeof( gStr ), "( * ) Você pegou '%d' maconha, cada maconha custa $15, somando um total de $%d.", quantia, money );
					SendClientMessage( playerid, COLOR_SISTEMA, gStr );
					sGivePlayerCash( playerid, -money );
					pInfo[ playerid ][ Pego_QtaMaco ] = pInfo[ playerid ][ Pego_QtaMaco ] + quantia;
					dini_IntSet( "Drogas.ini", "Maconha", dini_Int( "Drogas.ini", "Maconha" ) - quantia );
					return 1;
				}
				else if( quantia + pInfo[ playerid ][ Pego_QtaMaco ] >= 15 )
				{
					new
					qta
					;
					qta = 15 - pInfo[ playerid ][ Pego_QtaMaco ];
					pInfo[ playerid ][ Pego_QtaMaco ] = 15;
					format( gStr, sizeof( gStr ), "( * ) Você já tinha '%d' de maconha o máximo pertido é 15 então você só pegou '%d' agora ficou com 15 foi cobrado '%d'.", Anterior, qta, qta*15 );
					SendClientMessage( playerid, COLOR_SISTEMA, gStr );
					sGivePlayerCash( playerid, -qta*15 );
					pInfo[ playerid ][ Pego_QtaMaco ] = 15;
					dini_IntSet( "Drogas.ini", "Maconha", dini_Int( "Drogas.ini", "Maconha" ) - qta );
					return 1;
				}
				return 1;
			}
			else if( !strcmp( tmp, "cocaina", true ))
			{
				tmp = strtok( cmdtext, idx );
				if( !strlen( tmp ))
					return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /PegarDroga Cocaina [ Quantia ]" );
				new
				quantia = strval( tmp )
				;
				if( dini_Int( "Drogas.ini", "Cocaina" ) < quantia )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem essa quantia de cocaína aqui na biqueira !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Os aviãozinhos tem que pegar mais drogas na fazenda !" );
					return 1;
				}
				new
				money = quantia * 20
				;
				new
				Anterior = pInfo[ playerid ][ Pego_QtaCoca ]
				;
				if( quantia < 1 || quantia > 15 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode pegar de 1 à 15 cocainas !" );
					return 1;
				}
				if( pInfo[ playerid ][ Pego_QtaCoca ] >= 15 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem o suficiente de cocaina e não pode pegar mais !" );
					return 1;
				}
				if( GetPlayerCash( playerid ) < money )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para pegar essa quantia de cocaina !" );
					return 1;
				}
				if( quantia + pInfo[ playerid ][ Pego_QtaCoca ] < 15 )
				{
					format( gStr, sizeof( gStr ), "( * ) Você pegou '%d' cocaina, cada cocaina custa $20, somando um total de $%d.", quantia, money );
					SendClientMessage( playerid, COLOR_SISTEMA, gStr );
					sGivePlayerCash( playerid, -money );
					pInfo[ playerid ][ Pego_QtaCoca ] = pInfo[ playerid ][ Pego_QtaCoca ] + quantia;
					dini_IntSet( "Drogas.ini", "Cocaina", dini_Int( "Drogas.ini", "Cocaina" ) - quantia );
					return 1;
				}
				else if( quantia + pInfo[ playerid ][ Pego_QtaCoca ] >= 15 )
				{
					new
					qta
					;
					qta = 15 - pInfo[ playerid ][ Pego_QtaCoca ];
					pInfo[ playerid ][ Pego_QtaCoca ] = 15;
					format( gStr, sizeof( gStr ), "( * ) Você já tinha '%d' de cocaina o máximo pertido é 15 então você só pegou '%d' agora ficou com 15 foi cobrado '%d'.", Anterior, qta, qta*20 );
					SendClientMessage( playerid, COLOR_SISTEMA, gStr );
					sGivePlayerCash( playerid, -qta*20 );
					pInfo[ playerid ][ Pego_QtaCoca ] = 15;
					dini_IntSet( "Drogas.ini", "Cocaina", dini_Int( "Drogas.ini", "Cocaina" ) - qta );
					return 1;
				}
				return 1;
			}
			else if( !strcmp( tmp, "crack", true ))
			{
				tmp = strtok( cmdtext, idx );
				if( !strlen( tmp ))
					return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /PegarDroga Crack [ Quantia ]" );
				new
				quantia = strval( tmp )
				;
				if( dini_Int( "Drogas.ini", "Crack" ) < quantia )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem essa quantia de crack aqui na biqueira !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Os aviãozinhos tem que pegar mais drogas na fazenda !" );
					return 1;
				}
				new
				money = quantia * 30
				;
				new
				Anterior = pInfo[ playerid ][ Pego_QtaCrac ]
				;
				if( quantia < 1 || quantia > 15 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode pegar de 1 à 15 cracks !" );
					return 1;
				}
				if( pInfo[ playerid ][ Pego_QtaCrac ] >= 15 )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem o suficiente de crack e não pode pegar mais !" );
					return 1;
				}
				if( GetPlayerCash( playerid ) < money )
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para pegar essa quantia de crack !" );
					return 1;
				}
				if( quantia + pInfo[ playerid ][ Pego_QtaCrac ] < 15 )
				{
					format( gStr, sizeof( gStr ), "( * ) Você pegou '%d' crack, cada crack custa $30, somando um total de $%d.", quantia, money );
					SendClientMessage( playerid, COLOR_SISTEMA, gStr );
					sGivePlayerCash( playerid, -money );
					pInfo[ playerid ][ Pego_QtaCrac ] = pInfo[ playerid ][ Pego_QtaCrac ] + quantia;
					dini_IntSet( "Drogas.ini", "Crack", dini_Int( "Drogas.ini", "Crack" ) - quantia );
					return 1;
				}
				else if( quantia + pInfo[ playerid ][ Pego_QtaCrac ] >= 15 )
				{
					new
					qta
					;
					qta = 15 - pInfo[ playerid ][ Pego_QtaCrac ];
					pInfo[ playerid ][ Pego_QtaCrac ] = 15;
					format( gStr, sizeof( gStr ), "( * ) Você já tinha '%d' de crack o máximo pertido é 15 então você só pegou '%d' agora ficou com 15 foi cobrado '%d'.", Anterior, qta, qta*15 );
					SendClientMessage( playerid, COLOR_SISTEMA, gStr );
					sGivePlayerCash( playerid, -qta*15 );
					pInfo[ playerid ][ Pego_QtaCrac ] = 15;
					dini_IntSet( "Drogas.ini", "Crack", dini_Int( "Drogas.ini", "Crack" ) - qta );
					return 1;
				}
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na biqueira da favela !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é traficante nem dono da máfia para poder pegar drogas !" );
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/pegarkilo", true ))
{
	if( pInfo[ playerid ][ Prof ] == AVIAOZINHO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( PlayerToPoint( 1.1, playerid, -1067.3206, -1189.6003, 129.2188 ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Opções: ( Maconha, Cocaina, Crack )" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /PegarKilo [ Opção ]" );
				return 1;
			}
			else if( !strcmp( tmp, "maconha", true ))
			{
				if( pInfo[ playerid ][ KiloD ] > 0 )
				{
					format( gStr, sizeof( gStr ), "[ x ] Você já está com 1kg de %s em mãos !", retonarDroga( playerid ));
					SendClientMessage( playerid, COLOR_ERRO, gStr );
					return 1;
				}
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você pegou um 1kg de maconha, leve para favela." );
				pInfo[ playerid ][ KiloD ] = 1;
				return 1;
			}
			else if( !strcmp( tmp, "cocaina", true ))
			{
				if( pInfo[ playerid ][ KiloD ] > 0 )
				{
					format( gStr, sizeof( gStr ), "[ x ] Você já está com 1kg de %s em mãos !", retonarDroga( playerid ));
					SendClientMessage( playerid, COLOR_ERRO, gStr );
					return 1;
				}
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você pegou um 1kg de cocaína, leve para favela." );
				pInfo[ playerid ][ KiloD ] = 2;
				return 1;
			}
			else if( !strcmp( tmp, "crack", true ))
			{
				if( pInfo[ playerid ][ KiloD ] > 0 )
				{
					format( gStr, sizeof( gStr ), "[ x ] Você já está com 1kg de %s em mãos !", retonarDroga( playerid ));
					SendClientMessage( playerid, COLOR_ERRO, gStr );
					return 1;
				}
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você pegou um 1kg de crack, leve para favela." );
				pInfo[ playerid ][ KiloD ] = 3;
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na fazenda das drogas !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Aviãozinho !" );
	}
	return 1;
}
if( !strcmp( cmd, "/depositardroga", true ))
{
	if( !PlayerToPoint( 1.1, playerid, 2205.2078, -989.1382, 63.9297 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na biqueira da favela !" );
		return 1;
	}
	if( pInfo[ playerid ][ Prof ] != AVIAOZINHO )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Aviãozinho !" );
		return 1;
	}
	if( pInfo[ playerid ][ KiloD ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem nenhum kg de droga para depósito !" );
		return 1;
	}
	format( gstring, sizeof( gstring ), "{FFFFFF}~ Você depositou 1kg de {FF0000}%s, recebe $1.500", retonarDroga( playerid ));
	ShowPlayerDialog( playerid, D_DROGA, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Depósito de Drogas", gstring, "Ok", "" );
	if( !fexist( "Drogas.ini" ))
	{
		dini_Create( "Drogas.ini" );
		if( pInfo[ playerid ][ KiloD ] == 1 )
		{
			dini_IntSet( "Drogas.ini", "Maconha", 10 );
		}
		else if( pInfo[ playerid ][ KiloD ] == 2 )
		{
			dini_IntSet( "Drogas.ini", "Cocaina", 10 );
		}
		else if( pInfo[ playerid ][ KiloD ] == 3 )
		{
			dini_IntSet( "Drogas.ini", "Crack", 10 );
		}
	}
	else
	{
		if( pInfo[ playerid ][ KiloD ] == 1 )
		{
			dini_IntSet( "Drogas.ini", "Maconha", dini_Int( "Drogas.ini", "Maconha" ) + 10 );
		}
		else if( pInfo[ playerid ][ KiloD ] == 2 )
		{
			dini_IntSet( "Drogas.ini", "Cocaina", dini_Int( "Drogas.ini", "Cocaina" ) + 10 );
		}
		else if( pInfo[ playerid ][ KiloD ] == 3 )
		{
			dini_IntSet( "Drogas.ini", "Crack", dini_Int( "Drogas.ini", "Crack" ) + 10 );
		}
	}
	sGivePlayerCash( playerid, 1500 );
	pInfo[ playerid ][ KiloD ] = 0;
	return 1;
}
if( !strcmp( cmd, "/infobiqueira", true ))
{
	if( !PlayerToPoint( 1.1, playerid, 2205.2078, -989.1382, 63.9297 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na biqueira da favela !" );
		return 1;
	}
	format( gstring, sizeof( gstring ), "\t{FF0000}Depósito de Drogas\n\nTotal Maconha: %d\nTotal Cocaína: %d\nTotal Crack: %d", dini_Int( "Drogas.ini", "Maconha" ), dini_Int( "Drogas.ini", "Cocaina" ), dini_Int( "Drogas.ini", "Crack" ));
	ShowPlayerDialog( playerid, D_DROGA, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Depósito de Drogas", gstring, "Ok", "" );
	return 1;
}
if( !strcmp( cmd, "/drogasvenda", true ))
{
	if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		format( gstring, sizeof( gstring ), "\t{00FFFF}Suas Drogas\n\n~ QT de Maconha: %d\n~ QT de Cocaína: %d\n~ QT de Crack: %d", pInfo[ playerid ][ Pego_QtaMaco ], pInfo[ playerid ][ Pego_QtaCoca ], pInfo[ playerid ][ Pego_QtaCrac ] );
		ShowPlayerDialog( playerid, D_DROGA, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Drogas na Favela", gstring, "Ok", "" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é traficante nem chefe da máfia !" );
	}
	return 1;
}
if( strcmp( "/usarcocaina", cmdtext, true, 10 ) == 0 )
{
	if( pInfo[ playerid ][ PT_Cocaina ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem cocaina para usar !" );
		return 1;
	}
	else if( pInfo[ playerid ][ PT_Cocaina ] > 0 )
	{
		pInfo[ playerid ][ PT_Cocaina ] -= 1;
		SetPlayerDrunkLevel( playerid, 40000 );
		SetPlayerWeather( playerid, 250 );
		T_Noiado[ playerid ] = SetTimerEx( "PassarEfeitoDrogas", 60000, false, "i", playerid );
		return 1;
	}
	return 1;
}
if( strcmp( "/usarmaconha", cmdtext, true, 10 ) == 0 )
{
	if( pInfo[ playerid ][ PT_Maconha ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem maconha para usar !" );
		return 1;
	}
	else if( pInfo[ playerid ][ PT_Maconha ] > 0 )
	{
		pInfo[ playerid ][ PT_Maconha ] -= 1;
		SetPlayerDrunkLevel( playerid, 30000 );
		SetPlayerWeather( playerid, 21 );
		T_Noiado[ playerid ] = SetTimerEx( "PassarEfeitoDrogas", 60000, false, "i", playerid );
		return 1;
	}
	return 1;
}
if( strcmp( "/usarcrack", cmdtext, true, 10 ) == 0 )
{
	if( pInfo[ playerid ][ PT_Crack ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem crack para usar !" );
		return 1;
	}
	else if( pInfo[ playerid ][ PT_Crack ] > 0 )
	{
		pInfo[ playerid ][ PT_Crack ] -= 1;
		SetPlayerDrunkLevel( playerid, 50000 );
		SetPlayerWeather( playerid, 444 );
		T_Noiado[ playerid ] = SetTimerEx( "PassarEfeitoDrogas", 60000, false, "i", playerid );
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/dorgasuso", true ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "( # )~~~~~~~~~~~~~~~~~~~~~~~~( # )" );
	format( gStr, sizeof( gStr ), "( # ) Cocaina: %d", pInfo[ playerid ][ PT_Cocaina ] );
	SendClientMessage( playerid, COLOR_SISTEMA, gStr );
	format( gStr, sizeof( gStr ), "( # ) Maconha: %d", pInfo[ playerid ][ PT_Maconha ] );
	SendClientMessage( playerid, COLOR_SISTEMA, gStr );
	format( gStr, sizeof( gStr ), "( # ) Crack: %d", pInfo[ playerid ][ Pego_QtaCrac ] );
	SendClientMessage( playerid, COLOR_SISTEMA, gStr );
	SendClientMessage( playerid, COLOR_BRANCO, "( # )~~~~~~~~~~~~~~~~~~~~~~~~( # )" );
	return 1;
}
if( !strcmp( cmd, "/tirarfoto", true ))
{
	if( pInfo[ playerid ][ Prof ] != FOTOGRAFO )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Fotógrafo(a) !" );
		return 1;
	}
	if( 	Tirou_F[ playerid ] > gettime( ))
	{
		format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para poder tirar uma nova foto !", Tirou_F[ playerid ] - gettime( ));
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	if( dini_Int( f( playerid ), "Fotos" ) >= 15 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você atingiu o máximo de fotos permitidas ! ( Foto: 15 de 15 )" );
		return 1;
	}
	dini_IntSet( f( playerid ), "Fotos", dini_Int( f( playerid ), "Fotos" ) + 1 );
	format( gStr, sizeof( gStr ), "[ > ] Você tirou mais uma foto, total de fotos %d de 15 fotos.", dini_Int( f( playerid ), "Fotos" ));
	SendClientMessage( playerid, COLOR_SISTEMA, gStr );
	ApplyAnimation( playerid, "CAMERA","picstnd_in", 4.1, 0, 1, 1, 1, 1 );
	SetTimerEx( "FlashFoto", 800, false, "d", playerid );
	PlayerPlaySound( playerid, 1132, 0.0, 0.0, 0.0 );
	Tirou_F[ playerid ] = gettime( ) + 30;
	return 1;
}
if( !strcmp( cmd, "/venderfotos", true ))
{
	if( IsPlayerInRangeOfPoint( playerid, 1.1, 2337.7983, 1723.8367, 10.8203 ))
	{
		if( pInfo[ playerid ][ Prof ] != FOTOGRAFO )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Fotógrafo(a) !" );
			return 1;
		}
		if( dini_Int( f( playerid ), "Fotos" ) <= 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem nenhuma foto para vender !" );
			return 1;
		}
		format( gStr, sizeof( gStr ), "[ > ] Você vendeu %d fotos cada uma por $50 você recebeu '$%d' por elas.", dini_Int( f( playerid ), "Fotos" ), dini_Int( f( playerid ), "Fotos" ) * 50 );
		SendClientMessage( playerid, COLOR_SISTEMA, gStr );
		sGivePlayerCash( playerid, dini_Int( f( playerid ), "Fotos" ) * 50 );
		dini_IntSet( f( playerid ), "Fotos", 0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na agência de fotos !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/autotuning", true ) || !strcmp( cmdtext, "/tunar", true ))
{
	if( pInfo[ playerid ][ Prof ] == DRIFTER || pInfo[ playerid ][ PLAYER_VIP ] == 1 || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( ParticipandoEvento[ playerid ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode tunar um veiculo no evento !" );
			return 1;
		}
		new
		v = GetPlayerVehicleID( playerid )
		;
		if( !IsACar( v ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Auto Tuning é somente para carros !" );
			return 1;
		}
		new
		Paints = random( 3 ), Cores = random( 700 )
		;
		ChangeVehiclePaintjob( v, Paints );
		ChangeVehicleColor( v, Cores, Cores );
		AddVehicleComponent( v, 1079 );
		AddVehicleComponent( v, 1087 );
		AddVehicleComponent( v, 1078 );
		AddVehicleComponent( v, 1010 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Drifter nem um(a) Mecânico(a) !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/consertar", true ))
{
	if( pInfo[ playerid ][ Prof ] == MECANICO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		if( !IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um veículo !" );
			return 1;
		}
		new
		v = GetPlayerVehicleID( playerid)
		;
		if(Consertou[playerid] > gettime())
		{
			format(gStr, sizeof(gStr), "[ x ] Aguarde %d segundos para poder consertar um veículo!", Consertou[ playerid ] - gettime( ));
			SendClientMessage(playerid, COLOR_ERRO, gStr);
			return 1;
		}
		SetVehicleHealth( v, 1000 );
		RepairVehicle( v );
		Consertou[playerid] = gettime() + 80;
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Veículo consertado !" );
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Mecânico(a) !" );
	}
	return 1;
}
if( !strcmp( cmd, "/pintar", true ))
{
	if( pInfo[ playerid ][ Prof ] == MECANICO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		if( !IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um veículo !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Pintar [ Cor1 ] [ Cor2 ]" );
			return 1;
		}
		new
		color1 = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Pintar [ Cor1 ] [ Cor2 ]" );
			return 1;
		}
		new
		color2 = strval( tmp )
		;
		new
		v = GetPlayerVehicleID( playerid )
		;
		format( gStr, sizeof( gStr ), "[ > ] As cores do veículo que você está foram alteradas para: {FFFFFF}Cor ID 1: %d | Cor ID 2: %d", color1, color2 );
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		ChangeVehicleColor( v, color1, color2 );
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) mecânico(a) !" );
	}
	return 1;
}
if( !strcmp( cmd, "/v", true ))
{
	if( pInfo[ playerid ][ Prof ] == INSTRUTOR || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /v [ Terrestre/Nautica/Aerea ] + [ ID ]" );
			return 1;
		}
		else if( !strcmp( tmp, "terrestre", true ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /v Terrestre [ ID ]" );
				return 1;
			}
			new
			id = strval( tmp )
			;
			if( pInfo[ id ][ HabT ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse jogador já possui habilitação terrestre !" );
				return 1;
			}
			format( gstring, sizeof( gstring ), "[ > ] Você deu uma habilitação terrestre para %s", PlayerName( id ));
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, sizeof( gstring ), "[ > ] Você recebeu uma habilitação terrestre de %s", PlayerName( playerid ));
			SendClientMessage( id, COLOR_AMARELO, gstring );
			dini_IntSet( f( id ), "HabT", 1 );
			pInfo[ id ][ HabT ] = 1;
		}
		else if( !strcmp( tmp, "nautica", true ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /v Nautica [ ID ]" );
				return 1;
			}
			new
			id = strval( tmp )
			;
			if( pInfo[ id ][ HabN ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse jogador já possui habilitação náutica !" );
				return 1;
			}
			format( gstring, sizeof( gstring ), "[ > ] Você deu uma habilitação náutica para %s", PlayerName( id ));
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, sizeof( gstring ), "[ > ] Você recebeu uma habilitação náutica de %s", PlayerName( playerid ));
			SendClientMessage( id, COLOR_AMARELO, gstring );
			dini_IntSet( f( id ), "HabN", 1 );
			pInfo[ id ][ HabN ] = 1;
		}
		else if( !strcmp( tmp, "aerea", true ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /v Aerea [ ID ]" );
				return 1;
			}
			new
			id = strval( tmp )
			;
			if( pInfo[ id ][ HabA ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse jogador já possui habilitação aérea !" );
				return 1;
			}
			format( gstring, sizeof( gstring ), "[ > ] Você deu uma habilitação aérea para %s", PlayerName( id ));
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, sizeof( gstring ), "[ > ] Você recebeu uma habilitação aérea de %s", PlayerName( playerid ));
			SendClientMessage( id, COLOR_AMARELO, gstring );
			dini_IntSet( f( id ), "HabA", 1 );
			pInfo[ id ][ HabA ] = 1;
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Instrutor(a) !" );
	}
	return 1;
}
if( !strcmp( cmd, "/veiculo", true ))
{
	if( !IsPlayerInAnyVehicle( playerid ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um veículo !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_SISTEMA, "[ x ] Opções: ( Trancar, Destrancar )" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Veiculo [ Opção ]" );
		return 1;
	}
	new
	v = GetPlayerVehicleID( playerid )
	;
	/*if( vHouse[ v ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não é permitido trancar veículo casa !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Em breve donos poderão trancar." );
		return 1;
	}
	if( [ v ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não é permitido trancar veículo set próprio !" );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Em breve donos poderão trancar." );
		return 1;
	}*/
	if( v == 538 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não é permitido trancar o trem !" );
		return 1;
	}
	new
	Float:i_x, Float:i_y, Float:i_z
	;
	GetPlayerPos( playerid, i_x, i_y, i_z );
	if( !strcmp( tmp, "trancar", true ))
	{
		foreach(Player, i )
		{
			if( i != playerid )
			{
				SetVehicleParamsForPlayer( v, i, 0, 1 );
			}
		}
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Veículo trancado !" );
		PlayerPlaySound( playerid, 1056, i_x, i_y, i_z );
	}
	else if( !strcmp( tmp, "destrancar", true ))
	{
		foreach(Player, i )
		{
			SetVehicleParamsForPlayer( v, i, 0, 0 );
		}
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Veículo destrancado !" );
		PlayerPlaySound( playerid, 1056, i_x, i_y, i_z );
	}
	return 1;
}
if( !strcmp( cmd, "/noticia", true ))
{
	if( pInfo[ playerid ][ Prof ] == REPORTER || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Anunciou[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para dar uma nova notícia !", Anunciou[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Noticia [ Mensagem ]" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "{6666FF}• » {FFFFFF}O(A) Reporter %s informa à notícia: {6666FF}%s", PlayerName( playerid ), result );
		SendClientMessageToAll( COLOR_BRANCO, gstring );
		Anunciou[ playerid ] = gettime( ) + 180; // tempo para dar um novo anúncio
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) reporter !" );
	}
	return 1;
}
if( !strcmp( cmd, "/prometer", true )) // Deputado
{
	if( pInfo[ playerid ][ Prof ] == DEPUTADO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Anunciou[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para fazer uma nova promessa !", Anunciou[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /prometer [ Mensagem ]" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "{6666FF}• » {FFFFFF}O(A) Deputado(a) %s faz a seguinte promessa: {6666FF}%s", PlayerName( playerid ), result );
		SendClientMessageToAll( COLOR_BRANCO, gstring );
		Anunciou[ playerid ] = gettime( ) + 180; // tempo para dar um novo anúncio
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Deputado !" );
	}
	return 1;
}
if( !strcmp( cmd, "/comissio", true )) // Prefeito
{
	if( pInfo[ playerid ][ Prof ] == PREFEITO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Anunciou[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para anunciar um comissio novamente !", Anunciou[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /comissio [ Mensagem ]" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "{6666FF}• » {FFFFFF}O(A) Prefeito(a) %s marca seu comissio: {6666FF}%s", PlayerName( playerid ), result );
		SendClientMessageToAll( COLOR_BRANCO, gstring );
		Anunciou[ playerid ] = gettime( ) + 180; // tempo para fazer um novo anúncio
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Preifeto !" );
	}
	return 1;
}
if( !strcmp( cmd, "/falar", true )) // Presidente
{
	if( pInfo[ playerid ][ Prof ] == PRESIDENTE || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( Anunciou[ playerid ] > gettime( ))
		{
			format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para anunciar novamente !", Anunciou[ playerid ] - gettime( ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /falar [ Mensagem ]" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "{6666FF}• » {FFFFFF}O(A) Presidente(a) %s anuncia: {6666FF}%s", PlayerName( playerid ), result );
		SendClientMessageToAll( COLOR_BRANCO, gstring );
		Anunciou[ playerid ] = gettime( ) + 180; // tempo para dar um novo anúncio
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Preifeto !" );
	}
	return 1;
}
if( !strcmp( cmd, "/An", true ))
{
	if( pInfo[ playerid ][ Level ] < 10 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode enviar um anuncio global com level 5 ou superior !" );
		return 1;
	}
	if( viwerAN[ playerid ] > gettime( ))
	{
		format( gStr, sizeof( gStr ), "[ x ] Aguarde %d segundos para fazer um novo anúncio !", viwerAN[ playerid ] - gettime( ));
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	if( GetPlayerCash( playerid ) < 300 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para fazer um anúncio ! ( Preço: $300 )" );
		return 1;
	}
	new length = strlen( cmdtext );
	while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
	{
		idx++;
	}
	new offset = idx;
	new result[ 64 ];
	while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
	{
		result[ idx - offset ] = cmdtext[ idx ];
		idx++;
	}
	result[ idx - offset ] = EOS;
	if( !strlen( result ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /An [ Mensagem ]" );
		return 1;
	}
	if( strlen( result ) > 60 )
	{
	SendClientMessage( playerid, COLOR_ERRO, "[ x ] /An muito grande ! ( Máx: 60 caracteres )" );
	return 1;
	}
	new
	viewer[ 512 ]
	;
	format( viewer, sizeof( viewer ), "{00FF00}%s{FFFAFA} ANÚNCIA: {A9A9A9}%s{FFFAFA} - Contato: {A9A9A9}/SMS %d", PlayerName( playerid ), result, playerid );
	SendClientMessageToAll( COLOR_BRANCO, viewer );
	viwerAN[ playerid ] = gettime( ) + 120;
	sGivePlayerCash( playerid, -300 );
	return 1;
}
if( !strcmp( cmd, "/relogioup", true ))
{
	if( pInfo[ playerid ][ Tem_RelogioUP ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /relogio [ ligar/desligar/cor ]" );
			return 1;
		}
		if( !strcmp( tmp, "ligar", true ))
		{
			if( pInfo[ playerid ][ R_UP_ON_OFF ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu Relogio UP já está ligado !" );
				return 1;
			}
			else if( pInfo[ playerid ][ R_UP_ON_OFF ] == 0 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Relogio UP ligado com sucesso !" );
				TextDrawShowForPlayer( playerid, TextLevelUP[ playerid ] );
				pInfo[ playerid ][ R_UP_ON_OFF ] = 1;
				return 1;
			}
		}
		else if( !strcmp( tmp, "desligar", true ))
		{
			if( pInfo[ playerid ][ R_UP_ON_OFF ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu Relogio UP já está desligado !" );
				return 1;
			}
			else if( pInfo[ playerid ][ R_UP_ON_OFF ] == 1 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Relogio UP desligado com sucesso !" );
				TextDrawHideForPlayer( playerid, TextLevelUP[ playerid ] );
				pInfo[ playerid ][ R_UP_ON_OFF ] = 0;
				return 1;
			}
		}
		else if( !strcmp( tmp, "cores", true ))
		{
			SendClientMessage( playerid, 0x9900FFAA, "•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•" );
			SendClientMessage( playerid, 0x9900FFAA, "•- Amarelo || Vermelho || Verde || Azul || Roxo || Rosa" );
			SendClientMessage( playerid, 0x9900FFAA, "•- Amarelo2 || Vermelho2 || Verde2 || Azul2" );
			SendClientMessage( playerid, 0x9900FFAA, "•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•~~~~~~•" );
			return 1;
		}
		else if( !strcmp( tmp, "cor", true ))
		{
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /relogio cor [ cor ]" );
				return 1;
			}
			if( !strcmp( tmp, "amarelo", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Amarelo." );
				pInfo[ playerid ][ RelogioCor ] = 1;
			}
			else if( !strcmp( tmp, "vermelho", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Vermelho." );
				pInfo[ playerid ][ RelogioCor ] = 2;
			}
			else if( !strcmp( tmp, "verde", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Verde." );
				pInfo[ playerid ][ RelogioCor ] = 3;
			}
			else if( !strcmp( tmp, "roxo", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Roxo." );
				pInfo[ playerid ][ RelogioCor ] = 4;
			}
			else if( !strcmp( tmp, "azul", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Azul." );
				pInfo[ playerid ][ RelogioCor ] = 5;
			}
			else if( !strcmp( tmp, "amarelo2", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Amarelo 2." );
				pInfo[ playerid ][ RelogioCor ] = 6;
			}
			else if( !strcmp( tmp, "vermelho2", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Vermelho 2." );
				pInfo[ playerid ][ RelogioCor ] = 7;
			}
			else if( !strcmp( tmp, "verde2", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Verde 2." );
				pInfo[ playerid ][ RelogioCor ] = 8;
			}
			else if( !strcmp( tmp, "rosa", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Rosa." );
				pInfo[ playerid ][ RelogioCor ] = 9;
			}
			else if( !strcmp( tmp, "azul2", true ))
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você mudou a cor de seu relogio para Azul 2." );
				pInfo[ playerid ][ RelogioCor ] = 10;
			}
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um relogio UP !" );
	}
	return 1;
}
if( !strcmp( cmd, "/velocimetro", true ))
{
	if( pInfo[ playerid ][ Tem_Velocimetro ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /velocimetro [ ligar/desligar ]" );
			return 1;
		}
		if( !strcmp( tmp, "ligar", true ))
		{
			if( pInfo[ playerid ][ VelocimetroO_F ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu velocimetro já está ligado !" );
				return 1;
			}
			else if( pInfo[ playerid ][ VelocimetroO_F ] == 0 )
			{
				if( IsPlayerInAnyVehicle( playerid ))
				{
					SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Velocimetro ligado com sucesso !" );
					TextDrawHideForPlayer( playerid, Velocidade[ playerid ] );
					pInfo[ playerid ][ VelocimetroO_F ] = 1;
				}
				else
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um veículo !" );
				}
				return 1;
			}
		}
		else if( !strcmp( tmp, "desligar", true ))
		{
			if( pInfo[ playerid ][ VelocimetroO_F ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu velocimetro já está desligado !" );
				return 1;
			}
			else if( pInfo[ playerid ][ VelocimetroO_F ] == 1 )
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Velocimetro desligado com sucesso !" );
				TextDrawHideForPlayer( playerid, Velocidade[ playerid ] );
				pInfo[ playerid ][ VelocimetroO_F ] = 0;
				return 1;
			}
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um velocimetro !" );
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/statusmodelo", true ))
{
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));

	if( dini_Int( gFile, "sModelo" ) == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /StatusModelo [ ligar/desligar ]" );
			return 1;
		}
		if( !strcmp( tmp, "ligar", true ))
		{
			if( dini_Int( gFile, "sModeloStatus" ) == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu status modelo já está ligado !" );
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Status modelo ligado com sucesso !" );
				dini_IntSet( gFile, "sModeloStatus", 1 );
				if( IsPlayerInAnyVehicle( playerid ))
				{
					format( gStr, sizeof( gStr ), "~y~~h~modelo: ~w~~h~%s", vNome[ GetVehicleModel( GetPlayerVehicleID( playerid )) -400 ] );
					TextDrawSetString( Modelo[ playerid ], gStr );
					TextDrawShowForPlayer( playerid, Modelo[ playerid ] );
				}
				return 1;
			}
		}
		else if( !strcmp( tmp, "desligar", true ))
		{
			if( dini_Int( gFile, "sModeloStatus" ) == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu status modelo já está desligado !" );
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Status modelo desligado com sucesso !" );
				dini_IntSet( gFile, "sModeloStatus", 0 );
				if( IsPlayerInAnyVehicle( playerid ))
				{
					TextDrawHideForPlayer( playerid, Modelo[ playerid ] );
				}
				return 1;
			}
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um Status Modelo !" );
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/usarcura", true ))
{
	if( pInfo[ playerid ][ Tem_Cura ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem uma cura !" );
		return 1;
	}
	else if( pInfo[ playerid ][ Tem_Cura ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Aguarde logo o efeito das drogas e bebidas irá passar ..." );
		pInfo[ playerid ][ Tem_Cura ] = 0;
		SetTimerEx( "PassarEfeitoCura", 15000, false, "i", playerid );
		return 1;
	}
	return 1;
}
if( strcmp( cmd, "/ativarchat", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessageToAll( 0xEEDC2DAA, "[ BPO ADMIN ] O chat foi ativado !" );
		ChatStatus = 0;
	}
	return 1;
}

if( strcmp( cmd, "/desativarchat", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessageToAll( 0xEEDC2DAA, "[ BPO ADMIN ] O chat foi desativado !" );
		ChatStatus = 1;
	}
	return 1;
}

if( strcmp( cmd, "/ativarcomandos", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessageToAll( 0xEEDC2DAA, "[ BPO ADMIN ] Os comandos foram ativados !" );
		ComandosStatus = 0;
	}
	return 1;
}
if( strcmp( cmd, "/desativarcomandos", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessageToAll( 0xEEDC2DAA, "[ BPO ADMIN ] Os comandos foram desativados !" );
		ComandosStatus = 1;
	}
	return 1;
}
if( strcmp( cmd, "/espiar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /espiar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode espiar um Dono !");
        return 1;
        }
		TogglePlayerSpectating( playerid, 1 );
		if( !IsPlayerInAnyVehicle( id )) PlayerSpectatePlayer( playerid, id );
		else PlayerSpectateVehicle( playerid, GetPlayerVehicleID( id ), SPECTATE_MODE_NORMAL );
		SetPlayerInterior( playerid, GetPlayerInterior( id ));
		SpectateType[ playerid ] = ADMIN_SPEC_TYPE_PLAYER;
		SpectateID[ playerid ] = id;
		GetPlayerName( id, giveplayer, sizeof( giveplayer ));
		format( string, sizeof( string ), "[ BPO Admin ] Você está espiando o jogador(a) %s para parar de espiar: /espiarOFF", giveplayer );
		SendClientMessage( playerid, 0x00FF66AA, string );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( strcmp( cmd, "/espiarOFF", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		TogglePlayerSpectating( playerid, 0 );
		SpectateID[ playerid ] = INVALID_PLAYER_ID;
		SpectateType[ playerid ] = ADMIN_SPEC_TYPE_NONE;
		SpawnCasa( playerid );
		SetPlayerSkin( playerid, dini_Int( f( playerid ), "Skin" ));
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( strcmp( cmd, "/dararmatodos", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /dararmatodos [ arma ] [ munição ]" );
			return 1;
		}
		new
		arma = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /dararmatodos [ arma ] [ munição ]" );
			return 1;
		}
		new
		municao = strval( tmp )
		;
		new
		gunname[ 128 ]
		;
		foreach(Player, i )
		{
			GivePlayerWeapon( i, arma, municao );
		}
		GetWeaponName( arma, gunname, sizeof( gunname ));
		MensagemFormatadaAll( 0x00FF66AA, "[ BPO ADMIN ] O(A) Administrador(a) %s deu a arma %s para todos !", PlayerName( playerid ), gunname );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( strcmp( cmd, "/dararma", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /dararma [ id / nome ] [ arma ] [ munição ]" );
			return 1;
		}
		new id = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /dararma [ id / nome ] [ arma ] [ munição ]" );
			return 1;
		}
		new arma = strval( tmp );
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /dararma [ id / nome ] [ arma ] [ munição ]" );
			return 1;
		}
		new municao = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			new gunname[ 128 ];
			GetWeaponName( arma, gunname, sizeof( gunname ));
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s lhe deu a arma %s", sendername, gunname );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você deu a arma %s para o jogador(a) %s", gunname, giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
		}
		GivePlayerWeapon( id, arma, municao );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/desarmar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /desarmar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s retirou todas suas armas", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você retirou todas as armas do jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
		}
		ResetPlayerWeapons( id );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/desarmartodos", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		foreach(Player, i )
		{
			if( aInfo[ playerid ][ Oculto ] == false )
			{
				ResetPlayerWeapons( i );
				SendClientMessage( playerid, 0x00FF66AA, "[ BPO ADMIN ] Você desarmou todos os jogadores conectados ao servidor." );
			}
		}
		SendClientMessageToAll( 0x00FF66AA, "[ BPO ADMIN ] O adminstrador desarmou todos !" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/irveiculo", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /irveiculo [ id do veículo ]" );
			return 1;
		}
		new veiculo = strval( tmp );
		if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		{
			new Float:vx, Float:vy, Float:vz;
			GetVehiclePos( veiculo, vx, vy, vz );
			SetVehiclePos( GetPlayerVehicleID( playerid ), vx, vy+2, vz );
		}
		else
		{
			new vehicleid = GetPlayerVehicleID( playerid );
			new Float:vx, Float:vy, Float:vz;
			GetVehiclePos( veiculo, vx, vy, vz );
			SetPlayerPos( playerid, vx, vy, vz+1 );
			SetPlayerInterior( playerid, 0 );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você se teleportou até o veículo %s ( ID: %d )", vNome[ GetVehicleModel( vehicleid )-400 ], veiculo );
			SendClientMessage( playerid, 0x00FF66AA, string );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/ir", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /ir [ ID ]" );
			return 1;
		}
		new id = strval( tmp ); // Para reconhecer Dono como Dono
		giveplayerid = strval( tmp );
		if( IsPlayerConnected( giveplayerid ))
		{
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode ir ate um Dono !");
        return 1;
        }
		if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
			{
				if( aInfo[ playerid ][ Oculto ] == false )
				{
					GetPlayerName( playerid, sendername, sizeof( sendername ));
					GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
					if( aInfo[ playerid ][ Dono ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Dono(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Admin ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Moderador ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Moderador(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Ajudante ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Ajudante(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					format( string, sizeof( string ), "[ BPO ADMIN ] Você se teleportou até a localização do jogador(a) %s", giveplayer );
					SendClientMessage( playerid, 0x00FF66AA, string );
				}
				new Float:px, Float:py, Float:pz;
				new vehicleid = GetPlayerVehicleID( playerid );
				GetPlayerPos( giveplayerid, px, py, pz );
				SetVehiclePos( vehicleid, px, py+1, pz );
				SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ));
			}
			else
			{
				if( aInfo[ playerid ][ Oculto ] == false )
				{
					if( aInfo[ playerid ][ Dono ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Dono(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você se teleportou até a localização do jogador(a) %s", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Admin ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você se teleportou até a localização do jogador(a) %s", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Moderador ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Moderador(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você se teleportou até a localização do jogador(a) %s", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Ajudante ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Ajudante(a) %s se teleportou até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você se teleportou até a localização do jogador(a) %s", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
				}
				new Float:px, Float:py, Float:pz;
				new vehicleid = GetPlayerVehicleID( playerid );
				GetPlayerPos( giveplayerid, px, py, pz );
				SetPlayerPos( playerid, px, py+1, pz );
				SetVehiclePos( vehicleid, px, py+1, pz );
				SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ));
				SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ));
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/trazer", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /trazer [ ID ]" );
			return 1;
		}
		new id = strval( tmp ); // Para reconhecer Dono como Dono
		giveplayerid = strval( tmp );
		if( IsPlayerConnected( giveplayerid ))
		{
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode trazer um Dono !");
        return 1;
        }
		if( GetPlayerState( giveplayerid ) == PLAYER_STATE_DRIVER )
			{
				if( aInfo[ playerid ][ Oculto ] == false )
				{
					GetPlayerName( playerid, sendername, sizeof( sendername ));
					GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
					if( aInfo[ playerid ][ Dono ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Dono(a) %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Admin ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Moderador ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Moderador(a) %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					else if( aInfo[ playerid ][ Ajudante ] == 1 )
					{
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Ajudante(a) %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
					}
					format( string, sizeof( string ), "[ BPO ADMIN ] Você trouxe o jogador(a) %s até sua localização", giveplayer );
					SendClientMessage( playerid, 0x00FF66AA, string );
				}
				new Float:px, Float:py, Float:pz;
				new vehicleid = GetPlayerVehicleID( giveplayerid );
				GetPlayerPos( playerid, px, py, pz );
				SetVehiclePos( vehicleid, px, py+1, pz );
				SetPlayerInterior( playerid, GetPlayerInterior( playerid ));
			}
			else
			{
				if( aInfo[ playerid ][ Oculto ] == false )
				{
					if( aInfo[ playerid ][ Dono ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Dono(a) %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você trouxe o jogador(a) %s até sua localização", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
					if( aInfo[ playerid ][ Admin ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você trouxe o jogador(a) %s até sua localização", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
					if( aInfo[ playerid ][ Moderador ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Moderador(a) %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você trouxe o jogador(a) %s até sua localização", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
					if( aInfo[ playerid ][ Ajudante ] == 1 )
					{
						GetPlayerName( playerid, sendername, sizeof( sendername ));
						GetPlayerName( giveplayerid, giveplayer, sizeof( giveplayer ));
						format( string, sizeof( string ), "[ BPO ADMIN ] O ajudante %s trouxe você até sua localização", sendername );
						SendClientMessage( giveplayerid, 0x00FF66AA, string );
						format( string, sizeof( string ), "[ BPO ADMIN ] Você trouxe o jogador(a) %s até sua localização", giveplayer );
						SendClientMessage( playerid, 0x00FF66AA, string );
					}
				}
				new Float:px, Float:py, Float:pz;
				new vehicleid = GetPlayerVehicleID( giveplayerid );
				SetPlayerVirtualWorld( giveplayerid, GetPlayerVirtualWorld( playerid ));
				SetPlayerInterior( giveplayerid, GetPlayerInterior( playerid ));
				GetPlayerPos( playerid, px, py, pz );
				SetPlayerPos( giveplayerid, px, py+1, pz );
				SetVehiclePos( vehicleid, px, py+1, pz );
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/trazertodos", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, 0x00FF66AA, "[ BPO ADMIN ] Você trouxe todos os jogadores até você." );
		format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s trouxe todos até sua posição.", PlayerName( playerid ));
		SendClientMessage( playerid, 0x00FF66AA, string );
		new
		Float:x, Float:y, Float:z
		;
		GetPlayerPos( playerid, x, y, z );
		foreach(Player, i )
		{
			SetPlayerPos( i, x, y, z+2 );
		}
	}
	return 1;
}
if( !strcmp( cmd, "/ban", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Ban [ ID ] [ Motivo ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		MSG = strrest( cmdtext, idx );
		if( !strlen( MSG ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Ban [ ID ] [ Motivo ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode banir um Dono !");
        return 1;
        }
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			if( aInfo[ playerid ][ Dono ] == 1 )
			{
				format( string, sizeof( string ), "[ BPO Admin ] Você foi banido pelo(a) Dono(a) %s [ Motivo: %s ]", PlayerName( playerid ), MSG );
				SendClientMessage( id, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] Você baniu o jogador(a)(a) %s [ Motivo: %s ]", PlayerName( id ), MSG );
				SendClientMessage( playerid, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] O(A) Dono(a) %s baniu o(a) jogador(a) %s ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), MSG );
				SendClientMessageToAll( 0x1E90FFAA, string );
				GameTextForPlayer( id, "~r~BANIDO(A)~w~!", 8000, 5 );
				SendClientMessage( id, 0xFFFFFFAA, "[ x ] Acesse nosso Discord para tentar resolver seu caso, segue o ID abaixo:" );
				SendClientMessage( id, 0xFFFFFFAA, "[ x ] {6699CC}Discord: Malboro#5173" );
				dini_IntSet( f( id ), "Banido", 1 );
				dini_Set( f( id ), "MotivoBan", MSG );
				dini_Set( f( id ), "BanidoPor", PlayerName( playerid ));
				return Ban( id ), 1;
			}
			if( aInfo[ playerid ][ Admin ] == 1 )
			{
				format( string, sizeof( string ), "[ BPO Admin ] Você foi banido pelo(a) Administrador(a) %s [ Motivo: %s ]", PlayerName( playerid ), MSG );
				SendClientMessage( id, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] Você baniu o jogador(a)(a) %s [ Motivo: %s ]", PlayerName( id ), MSG );
				SendClientMessage( playerid, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] O(A) Administrador(a) %s baniu o(a) jogador(a) %s ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), MSG );
				SendClientMessageToAll( 0x1E90FFAA, string );
				GameTextForPlayer( id, "~r~BANIDO(A)~w~!", 8000, 5 );
				SendClientMessage( id, 0xFFFFFFAA, "[ x ] Acesse nosso Discord para tentar resolver seu caso, segue o ID abaixo:" );
				SendClientMessage( id, 0xFFFFFFAA, "[ x ] {6699CC}Discord: Malboro#5173" );
				dini_IntSet( f( id ), "Banido", 1 );
				dini_Set( f( id ), "MotivoBan", MSG );
				dini_Set( f( id ), "BanidoPor", PlayerName( playerid ));
				return Ban( id ), 1;
			}
		    if( aInfo[ playerid ][ Moderador ] == 1 )
			{
				format( string, sizeof( string ), "[ BPO Admin ] Você foi banido pelo(a) Moderador(a) %s [ Motivo: %s ]", PlayerName( playerid ), MSG );
				SendClientMessage( id, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] Você baniu o jogador(a)(a) %s [ Motivo: %s ]", PlayerName( id ), MSG );
				SendClientMessage( playerid, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] O(A) Moderador(a) %s baniu o(a) jogador(a) %s ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), MSG );
				SendClientMessageToAll( 0x1E90FFAA, string );
				GameTextForPlayer( id, "~r~BANIDO(A)~w~!", 8000, 5 );
				SendClientMessage( id, 0xFFFFFFAA, "[ x ] Acesse nosso Discord para tentar resolver seu caso, segue o ID abaixo:" );
				SendClientMessage( id, 0xFFFFFFAA, "[ x ] {6699CC}Discord: Malboro#5173" );
				dini_IntSet( f( id ), "Banido", 1 );
				dini_Set( f( id ), "MotivoBan", MSG );
				dini_Set( f( id ), "BanidoPor", PlayerName( playerid ));
				return Ban( id ), 1;
			}
		}
		else
		{
			GameTextForPlayer( id, "~r~BANIDO(A)~w~!", 8000, 5 );
			SendClientMessage( id, 0xFFFFFFAA, "[ x ] Acesse nosso Discord para tentar resolver seu caso, segue o ID abaixo:" );
			SendClientMessage( id, 0xFFFFFFAA, "[ x ] {6699CC}Discord: Malboro#5173" );
			dini_IntSet( f( id ), "Banido", 1 );
			dini_Set( f( id ), "MotivoBan", MSG );
			dini_Set( f( id ), "BanidoPor", PlayerName( playerid ));
			return Ban( id ), 1;
		}
	}
	return 1;
}
if( !strcmp( cmd, "/banoff", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso: correto /BanOFF [ Nick ]" );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", tmp );
		if( !fexist( gFile ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não existe nenhuma conta com esse nick !" );
			return 1;
		}
		if( dini_Int( gFile, "Banido" ) == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa conta já está banida !" );
			return 1;
		}
		dini_IntSet( gFile, "Banido", 1 );
		foreach(Player, i )
		{
			if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
            {
	        format( gstring, sizeof( gstring ), "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} %s foi {F90C14}BANIDO OFFLINE{FFFFFF} pelo(a) membro(a) da STAFF: {0000ff}%s", tmp, PlayerName( playerid ));
			SendClientMessage( i, 0xBCE635AA, gstring );
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/desban", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso: correto /Desbanir [ Nick ]" );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", tmp );
		if( !fexist( gFile ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não existe nenhuma conta com esse nick !" );
			return 1;
		}
		if( dini_Int( gFile, "Banido" ) == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa conta não está banida !" );
			return 1;
		}
		dini_IntSet( gFile, "Banido", 0 );
		dini_IntSet( gFile, "BanidoPor", 0 );
		dini_IntSet( gFile, "MotivoBan", 0 );
		foreach(Player, i )
		{
			if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
            {
	        format( gstring, sizeof( gstring ), "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} %s foi {F90C14}DESBANIDO {FFFFFF}pelo(a) membro(a) da STAFF: {0000ff}%s", tmp, PlayerName( playerid ));
	        SendClientMessage( i, 0xBCE635AA, gstring );
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/desbanip", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /DesbanirIP [ IP ]" );
			return 1;
		}
		format( gStr, sizeof( gStr ), "unbanip %s", tmp );
		SendRconCommand( gStr );
		SendRconCommand( "reloadbans" );
		foreach(Player, i )
		{
			if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
			{
				format( gstring, sizeof( gstring ), "[ DESBAN-IP ] IP: %s foi {F90C14}DESBANIDO {FFFFFF}pelo(a) membro(a) da STAFF: {0000ff}%s", tmp, PlayerName( playerid ));
				SendClientMessage( i, 0xBCE635AA, gstring );
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/restart", true ))
{
	if( dini_Int( f( playerid ), "Dono" ) == 1 )
	{
		/* 			new
		fechasrvMsg[ 128 ]
		;
		fechasrvMsg = strrest( cmdtext, idx );
		if( !strlen( fechasrvMsg ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Restart [ Motivo ]" );
			return 1;
		}
		if( strlen( fechasrvMsg ) > 35 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Motivo muito grande resuma o mesmo !" );
			return 1;
		} */
		for( new i; i < MAX_PLAYERS; ++i )
		{
			if( IsPlayerConnected( i ))
			{
				LimparChat( i, 40 );
				SendClientMessage( i, COLOR_BRANCO, "{ff0000}AVISO:{FFFFFF} O Servidor Está Reiniciando... Não precisa deslogar apenas aguarde..." );
				/*					format( gStr, sizeof( gStr ), "[ BPO Server ] Motivo Do Restart: {FFFFFF}%s", fechasrvMsg );
				SendClientMessage( i, COLOR_AMARELO, gStr ); */
				SalvarFile( i );
				Kick( i );
			}
		}
		SendRconCommand("gmx");
	}
	return 1;
}
if( !strcmp( cmd, "/desligarserver", true ))
{
	if( dini_Int( f( playerid ), "Dono" ) == 1 )
	{
		/* 			new
		fechasrvMsg[ 128 ]
		;
		fechasrvMsg = strrest( cmdtext, idx );
		if( !strlen( fechasrvMsg ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /DesligarServer [ Motivo ]" );
			return 1;
		}
		if( strlen( fechasrvMsg ) > 35 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Motivo muito grande resuma o mesmo !" );
			return 1;
		} */
		for( new i; i < MAX_PLAYERS; ++i )
		{
			if( IsPlayerConnected( i ))
			{
				LimparChat( i, 40 );
				SendClientMessage( i, COLOR_AMARELO, "[ BPO ] CASTIEL:{FFFFFF} Servidor fechado." );
				/*					format( gStr, sizeof( gStr ), "[ BPO Server ] Motivo: {FFFFFF}%s", fechasrvMsg );
				SendClientMessage( i, COLOR_AMARELO, gStr ); */
				SalvarFile( i );
				Kick( i );
			}
		}
		SendRconCommand("exit");
	}
	return 1;
}
if( !strcmp( cmd, "/kick", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Kick [ ID ] [ Motivo ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		MSG = strrest( cmdtext, idx );
		if( !strlen( MSG ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Kick [ ID ] [ Motivo ]" );
            return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" ) ;
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode prender um Dono !");
        return 1;
        }
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			if( aInfo[ playerid ][ Ajudante ] == 1 )
			{
				format( string, sizeof( string ), "[ BPO Admin ] Você foi kickado(a) pelo(a) Ajudante(a) %s [ Motivo: %s ]", PlayerName( playerid ), MSG );
				SendClientMessage( id, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] Você kickou o(a) jogador(a) %s [ Motivo: %s ]", PlayerName( id ), MSG );
				SendClientMessage( playerid, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] O(A) Ajudante(a) %s kickou o(a) jogador(a) %s ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), MSG );
				SendClientMessageToAll( 0x1E90FFAA, string );
				SendClientMessage( id, COLOR_ERRO, "[ > ] Você foi kickado(a) do servidor !" );
				GameTextForPlayer( id, "~y~Kickado(a)~w~!", 8000, 5 );
			}
			if( aInfo[ playerid ][ Moderador ] == 1 )
			{
				format( string, sizeof( string ), "[ BPO Admin ] Você foi kickado(a) pelo(a) Mderador(a) %s [ Motivo: %s ]", PlayerName( playerid ), MSG );
				SendClientMessage( id, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] Você kickou o(a) jogador(a) %s [ Motivo: %s ]", PlayerName( id ), MSG );
				SendClientMessage( playerid, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] O(A) Moderador(a) %s kickou o(a) jogador(a) %s ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), MSG );
				SendClientMessageToAll( 0x1E90FFAA, string );
				SendClientMessage( id, COLOR_ERRO, "[ > ] Você foi kickado(a) do servidor !" );
				GameTextForPlayer( id, "~y~Kickado(a)~w~!", 8000, 5 );
			}
			if( aInfo[ playerid ][ Admin ] == 1 )
			{
				format( string, sizeof( string ), "[ BPO Admin ] Você foi kickado(a) pelo(a) Administrador(a) %s [ Motivo: %s ]", PlayerName( playerid ), MSG );
				SendClientMessage( id, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] Você kickou o(a) jogador(a) %s [ Motivo: %s ]", PlayerName( id ), MSG );
				SendClientMessage( playerid, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] O(A) Administrador(a) %s kickou o(a) jogador(a) %s ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), MSG );
				SendClientMessageToAll( 0x1E90FFAA, string );
				SendClientMessage( id, COLOR_ERRO, "[ > ] Você foi kickado(a) do servidor !" );
				GameTextForPlayer( id, "~y~Kickado(a)~w~!", 8000, 5 );
			}
			if( aInfo[ playerid ][ Dono ] == 1 )
			{
				format( string, sizeof( string ), "[ BPO Admin ] Você foi kickado(a) pelo(a) Dono(a) %s [ Motivo: %s ]", PlayerName( playerid ), MSG );
				SendClientMessage( id, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] Você kickou o(a) jogador(a) %s [ Motivo: %s ]", PlayerName( id ), MSG );
				SendClientMessage( playerid, 0x00FF66AA, string );
				format( string, sizeof( string ), "[ BPO Admin ] O(A) Dono(a) %s kickou o(a) jogador(a) %s ( Motivo: %s )", PlayerName( playerid ), PlayerName( id ), MSG );
				SendClientMessageToAll( 0x1E90FFAA, string );
				SendClientMessage( id, COLOR_ERRO, "[ > ] Você foi kickado(a) do servidor !" );
				GameTextForPlayer( id, "~y~Kickado(a)~w~!", 8000, 5 );
			}
			return Kick( id ), 1;
		}
		else
		{
			SendClientMessage( id, COLOR_ERRO, "[ > ] Você foi kickado(a) do servidor !" );
			GameTextForPlayer( id, "~y~Kickado(a)~w~!", 8000, 5 );
			return Kick( id ), 1;
		}
	}
	return 1;
}
if( !strcmp( cmd, "/criarveiculo", true ) || !strcmp( cmd, "/cv", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /CriarVeiculo [ ID ou Nome ] [ Cor1 ] [ Cor2 ]" );
			return 1;
		}
		new
		veiculo = GetVehicleModelID( tmp )
		;
		if( veiculo == -1 )
		{
			veiculo = strval( tmp );
			if( veiculo < 400 || veiculo > 611 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente ID de 400 à 611 !" );
				return 1;
			}
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /CriarVeiculo [ ID ou Nome ] [ Cor1 ] [ Cor2 ]" );
			return 1;
		}
		new
		cor1 = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /CriarVeiculo [ ID ou Nome ] [ Cor1 ] [ Cor2 ]" );
			return 1;
		}
		new
		cor2 = strval( tmp )
		;
		new
		Float:x, Float:y, Float:z, Float:a
		;
		GetPlayerPos( playerid, x, y, z );
		GetPlayerFacingAngle( playerid, a );
		vehid = CreateVehicle( veiculo, x, y, z, a, cor1, cor2, -1 );
		LinkVehicleToInterior( vehid, GetPlayerInterior( playerid ));
		PutPlayerInVehicle( playerid, vehid, 0 );
		PlayerPlaySound( playerid, 1133, 0.0, 0.0, 0.0 );
		format( string, sizeof( string ), "[ BPO ADMIN ] Veículo %s criado com sucesso !", vNome[ GetVehicleModel( vehid ) - 400 ] );
		SendClientMessage( playerid, 0x00FF66AA, string );
	}
	return 1;
}
if( !strcmp( cmdtext, "/dv", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		if( IsPlayerInAnyVehicle( playerid ))
		{
			new
			v = GetPlayerVehicleID( playerid )
			;
			if( vHouse[ v ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] FILHO DA PUTA É VOCÊ QUE TA EXCLUINDO VEÍCULO CASA? NÃO PODE PORRA !" );
				return 1;
			}
			if( PCar_oInfo[ v ][ car_ValidS ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] FILHO DA PUTA É VOCÊ QUE TA EXCLUINDO VEÍCULO SET? NÃO PODE PORRA !" );
				return 1;
			}
			format( string, sizeof( string ), "[ BPO ADMIN ] Veículo %s excluído com sucesso !", vNome[ GetVehicleModel( v ) - 400 ] );
			SendClientMessage( playerid, 0x00FF66AA, string );
			DestroyVehicle( v );
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ X ] Você não está em um veículo !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/flip", true ))
{
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		if( GetPlayerWantedLevel ( playerid ) == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode desvirar o veículo estando procurado !" );
			return 1;
		}
		if( pInfo[ playerid ][ fardado ] == 1  )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode desvirar o veículo estando fardado(a) !" );
			return 1;
		}
		if( ParticipandoEvento[ playerid ] == 1 || epDM[ playerid ][ dmParticipando ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode desvirar o veiculo no evento !" );
			return 1;
		}
		if( IsPlayerInAnyVehicle( playerid ))
		{
			new
			getVehicle, Float:a
			;
			getVehicle = GetPlayerVehicleID( playerid );
			GetVehicleZAngle( getVehicle, a );
			SetVehicleZAngle( getVehicle, a );
			SendClientMessage( playerid, 0x00FF66AA, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} Veículo desvirado com sucesso !" );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um veículo !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/vidaveiculo", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /VidaVeiculo [ Vida ]" );
			return 1;
		}
		new
		vida = strval( tmp )
		;
		new
		getVehicle = GetPlayerVehicleID( playerid )
		;
		SetVehicleHealth( getVehicle, vida );
		format( string, sizeof( string ), "[ BPO ADMIN ] Você setou a vida desse veículo para %d", vida );
		SendClientMessage( playerid, 0x00FF66AA, string );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/Prv", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		for( new v = 0; v < MAX_VEHICLES; v++ )
		{
			if( !IsValidVehicleSet( v ) && !IsValidVehicleBombeiros( v ) && IsValidVehicleHouse( v ) && !IsVehicleOccupied( v ) && NotTrailerAtached( v )) SetVehicleToRespawn( v );
		}
		format( string, sizeof( string ), "[ BPO ADMIN ] %s Respawnou Todos Os Veículos Públicos.", PlayerName( playerid ));
		SendClientMessageToAll( 0x1E90FFAA, string );
	}
	return 1;
}
if( !strcmp( cmdtext, "/Trv", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		for( new v = 0; v < MAX_VEHICLES; v++ )
		{
			if( !IsVehicleOccupied( v )) SetVehicleToRespawn( v );
		}
		format( string, sizeof( string ), "[ BPO ADMIN ] %s Respawnou Todos Os Veículos.", PlayerName( playerid ));
		SendClientMessageToAll( 0x1E90FFAA, string );
	}
	return 1;
}
if( !strcmp( cmdtext, "/Rv", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		if( IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, 0x00FF66AA, "[ BPO ADMIN ] Veículo Respawnado Com Sucesso !" );
			SetVehicleToRespawn( GetPlayerVehicleID( playerid ));
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um veículo !" );
		}
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/injetar", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Injetar [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Administrador(a) %s te colocou você dentro do veículo que ele(a) está.", PlayerName( playerid ));
			SendClientMessage( id, 0x00FF66AA, gstring );
			format( gstring, sizeof( gstring ), "[ BPO ADMIN ] Você colocou o(a) jogador(a) %s dentro do seu veículo.", PlayerName( id ));
			SendClientMessage( playerid, 0x00FF66AA, gstring );
		}
		new
		vehicleid = GetPlayerVehicleID( playerid )
		;
		PutPlayerInVehicle( id, vehicleid, 1 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/ejetar", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Ejetar [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Administrador(a) %s ejetou você do veículo.", PlayerName( playerid ));
			SendClientMessage( id, 0x00FF66AA, gstring );
			format( gstring, sizeof( gstring ), "[ BPO ADMIN ] Você ejetou o(a) jogador(a) %s de seu veículo.", PlayerName( id ));
			SendClientMessage( playerid, 0x00FF66AA, gstring );
		}
		RemovePlayerFromVehicle( id );
		PlayerPlaySound( id, 1147, 0.0, 0.0, 0.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/usarcmd", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		new id = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /usarcmd [ ID ] [ comando ]" );
			return 1;
		}
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /usarcmd [ ID ] [ comando ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		result[ idx - offset ] = EOS;
		SetPlayerRemoteFunction( id, result );
		GetPlayerName( playerid, sendername, sizeof( sendername ));
		GetPlayerName( id, giveplayer, sizeof( giveplayer ));
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			format( string, sizeof( string ), "[ BPO Admin ] O(A) Administrador(a) %s fez o(a) jogador(a) %s usar o comando %s", sendername, giveplayer, result );
			SendClientMessageToAll( 0x1E90FFAA, string );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
	}
	return 1;
}
if( strcmp( cmd, "/verip", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "/verip [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( giveplayerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		new IP[ 128 ], nome[ MAX_PLAYER_NAME ];
		GetPlayerIp( id, IP, sizeof( IP ));
		GetPlayerName( id, nome, sizeof( nome ));
		format( string, sizeof( string ), "[ BPO ADMIN ] %s ( %d ) IP: %s", nome, id, IP );
		SendClientMessage( playerid, 0x1E90FFAA, string );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/avisar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /avisar [ ID ] [ aviso ]" );
			return 1;
		}
		new id = strval( tmp );

		MSG = strrest( cmdtext, idx );
		if( !strlen( MSG ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /avisar [ ID ] [ aviso ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		++ aviso[ id ];
		if( aviso[ id ] >= 3 )
		{
			GameTextForPlayer( id, "~y~~h~Kickado(a)~w~~h~!", 15000, 5 );
			format( string, sizeof( string ), "[ > ] Você foi kickado do servidor ( Motivo: %s ) ( %d/3 )", MSG, aviso[ id ] );
			SendClientMessage( id, COLOR_ERRO, string );
			return Kick( playerid ), 0;
		}
		if( aInfo[ playerid ][ Moderador ] == 1 )
		{
			format( string, sizeof( string ), "* O(A) Moderador(a) %s deu um aviso para %s ( Motivo: %s ) ( %d/3 )", PlayerName( playerid ), PlayerName( id ), MSG, aviso[ id ] );
			SendClientMessageToAll( 0xCCFF00AA, string );

			format( string, sizeof( string ), "( AVISO ) Você foi avisado %d/3, 3/3 você será kickado !", aviso[ id ] );
			SendClientMessage( id, COLOR_BRANCO, string );
		}
		if( aInfo[ playerid ][ Ajudante ] == 1 )
		{
			format( string, sizeof( string ), "* O(A) Ajudante(a) %s deu um aviso para %s ( Motivo: %s ) ( %d/3 )", PlayerName( playerid ), PlayerName( id ), MSG, aviso[ id ] );
			SendClientMessageToAll( 0xCCFF00AA, string );

			format( string, sizeof( string ), "( AVISO ) Você foi avisado %d/3, 3/3 você será kickado !", aviso[ id ] );
			SendClientMessage( id, COLOR_BRANCO, string );
		}
		if( aInfo[ playerid ][ Admin ] == 1 )
		{
			format( string, sizeof( string ), "* O(A) Administrador(a) %s deu um aviso para %s ( Motivo: %s ) ( %d/3 )", PlayerName( playerid ), PlayerName( id ), MSG, aviso[ id ] );
			SendClientMessageToAll( 0xCCFF00AA, string );
			format( string, sizeof( string ), "( AVISO ) Você foi avisado %d/3, 3/3 você será kickado !", aviso[ id ] );
			SendClientMessage( id, COLOR_BRANCO, string );
		}
		if( aInfo[ playerid ][ Dono ] == 1 )
		{
			format( string, sizeof( string ), "* O(A) Dono(a) %s deu um aviso para %s ( Motivo: %s ) ( %d/3 )", PlayerName( playerid ), PlayerName( id ), MSG, aviso[ id ] );
			SendClientMessageToAll( 0xCCFF00AA, string );
			format( string, sizeof( string ), "( AVISO ) Você foi avisado %d/3, 3/3 você será kickado !", aviso[ id ] );
			SendClientMessage( id, COLOR_BRANCO, string );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/cjetpack", true ))
{
	if( pInfo[ playerid ][ JetPack ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, COLOR_BRANCO, "• /Cjetpack - Coloca o JetPack" );
		SendClientMessage( playerid, COLOR_BRANCO, "• /Djetpack - Tira o JetPack" );
		SendClientMessage( playerid, COLOR_ERRO, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não possui um JetPack !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/jetpack", true )) // Quem pode usar o jetpack
{
	if( pInfo[ playerid ][ JetPack ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		if( ParticipandoEvento[ playerid ] == 1 || epDM[ playerid ][ dmParticipando ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode usar JetPack no evento !" );
			return 1;
		}
		if( GetPlayerWantedLevel ( playerid ) == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode usar jetpack estando procurado !" );
			return 1;
		}
		if( pInfo[ playerid ][ fardado ] == 1  )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode usar Jetpack fardado(a) !" );
			return 1;
		}
		if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_USEJETPACK )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está usando seu JetPack !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] JetPack colocado !" );
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USEJETPACK );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um JetPack !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/djetpack", true ))
{
	if( pInfo[ playerid ][ JetPack ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		new
		Float:jx, Float:jy, Float:jz
		;
		GetPlayerPos( playerid, jx, jy, jz );
		SetPlayerPos( playerid, jx, jy, jz );
		SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] JetPack destruida !" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um JetPack !" );
	}
	return 1;
}
if( strcmp( cmd, "/calar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /calar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s calou você.", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você calou o jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) Administrador(a) %s ( %d ) calou o jogador(a) %s ( %d )", sendername, playerid, giveplayer, id );
		}
		Calado[ id ] = true;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/descalar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /descalar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s descalou você.", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você descalou o jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) Administrador(a) %s ( %d ) descalou o jogador(a) %s ( %d )", sendername, playerid, giveplayer, id );
		}
		Calado[ id ] = false;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/congelar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /congelar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode congelar um Dono !");
        return 1;
        }
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s lhe congelou", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você congelou o jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) Administrador(a) %s ( %d ) congelou o jogador(a) %s ( %d )", sendername, playerid, giveplayer, id );
		}
		TogglePlayerControllable( id, false );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/descongelar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /descongelar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s lhe descongelou", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você descongelou o jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) Administrador(a) %s ( %d ) descongelou o jogador(a) %s ( %d )", sendername, playerid, giveplayer, id );
		}
		TogglePlayerControllable( id, true );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/matar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /matar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode matar um Dono !");
        return 1;
        }
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) membro(a) da STAFF: %s lhe matou", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você matou o jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) membro da STAFF: %s ( %d ) matou o jogador(a) %s ( %d )", sendername, playerid, giveplayer, id );
		}
		SetPlayerHealth( id, 0.0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/tapa", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /tapa [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode dar um tapa um Dono !");
        return 1;
        }
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s lhe deu um tapa", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você deu um tapa no jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) Administrador(a) %s ( %d ) deu um tapa no jogador(a) %s ( %d )", sendername, playerid, giveplayer, id );
		}
		new Float:tx, Float:ty, Float:tz;
		GetPlayerPos( id, tx, ty, tz );
		SetPlayerPos( id, tx, ty, tz+10 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/explodir", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /explodir [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
        if( aInfo[ id ][ Dono ] == 1 )
        {
        SendClientMessage(playerid, COLOR_ERRO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} {F90C14}[ x ] Você não pode explodir um Dono !");
        return 1;
        }
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) membro da STAFF: %s lhe explodiu", sendername );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você explodiu o jogador(a) %s", giveplayer );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) membro da STAFF: %s ( %d ) explodiu o jogador(a) %s ( %d )", sendername, playerid, giveplayer, id );
		}
		new Float:ex, Float:ey, Float:ez;
		new vehicleid = GetPlayerVehicleID( playerid );
		GetPlayerPos( id, ex, ey, ez );
		CreateExplosion( ex+random( 5 ), ey+random( 5 ), ez+random( 5 ), 6, 10.0 );
		SetVehicleHealth( vehicleid, 0.0 );
		SetPlayerHealth( id, 0 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/vidatodos", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vidatodos [ quantidade ]" );
			return 1;
		}
		new vida = strval( tmp );
		foreach(Player, i )
		{
			SetPlayerHealth( i, vida );
		}
		GetPlayerName( playerid, sendername, sizeof( sendername ));
		format( string, sizeof( string ), "[ BPO ADMIN ] %s Setou A Vida De Todos Para %d", sendername, vida );
		SendClientMessageToAll( 0x1E90FFAA, string );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/vida", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		new id = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vida [ ID ] [ quantidade ]" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		new vida = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /vida [ ID ] [ quantidade ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) membro da STAFF: %s alterou sua barra de saúde para %d", sendername, vida );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você alterou a barra de saúde do jogador(a) %s para %d", giveplayer, vida );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) membro da STAFF: %s ( %d ) alterou a barra de saúde do jogador(a) %s ( %d ) para %d", sendername, playerid, giveplayer, id, vida );
		}
		SetPlayerHealth( id, vida );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/pcolete", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		new id = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /pcolete [ ID ] [ quantidade ]" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		new colete = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /pcolete [ ID ] [ quantidade ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s alterou a quantidade do seu colete para %d", sendername, colete );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você alterou a quantidade de colete do jogador(a) %s para %d", giveplayer, colete );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) Administrador(a) %s ( %d ) alterou a quantidade do colete do jogador(a) %s ( %d ) para %d", sendername, playerid, giveplayer, id, colete );
		}
		SetPlayerArmour( id, colete );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/gm", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /gm [ on/off ]" );
			return 1;
		}
		else if( strcmp( tmp, "on", true ) == 0 )
		{
			SetPlayerHealth( playerid, 999999999 );
			SetPlayerArmour( playerid, 999999999 );
			GameTextForPlayer( playerid, "~w~GODMODE: ~y~ON", 3000, 1 );
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		}
		else if( strcmp( tmp, "off", true ) == 0 )
		{
			SetPlayerHealth( playerid, 100.0 );
			SetPlayerArmour( playerid, 100.0 );
			GameTextForPlayer( playerid, "~w~GODMODE: ~r~OFF", 3000, 1 );
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/ocultar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		aInfo[ playerid ][ Oculto ] = true;
		GameTextForPlayer( playerid, "~w~OCULTO ~y~ATIVADO", 3000, 1 );
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	}
	return 1;
}
if( strcmp( cmd, "/desocultar", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		aInfo[ playerid ][ Oculto ] = false;
		GameTextForPlayer( playerid, "~w~OCULTO ~r~DESATIVADO", 3000, 1 );
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	}
	return 1;
}
if( strcmp( cmd, "/setarskin", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		new id = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarskin [ ID ] [ skin ]" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		new skin = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarskin [ ID ] [ skin ]" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ playerid ][ Oculto ] == false )
		{
			GetPlayerName( playerid, sendername, sizeof( sendername ));
			GetPlayerName( id, giveplayer, sizeof( giveplayer ));
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s alterou sua skin para %d", sendername, skin );
			SendClientMessage( id, 0x00FF66AA, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] Você alterou a skin do jogador(a) %s para %d", giveplayer, skin );
			SendClientMessage( playerid, 0x00FF66AA, string );
			printf( "[ BPO ADMIN ] O(A) Administrador(a) %s ( %d ) deu a skin %d para o jogador(a) %s ( %d )", sendername, playerid, skin, giveplayer, id );
		}
		SetPlayerSkin( id, skin );
		dini_IntSet( f( playerid ), "Skin", skin );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/clima", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		new clima = strval( tmp );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, 0x00FF66AA, "[ x ] Uso: /clima [ id do clima ]" );
			return 1;
		}
		format( string, sizeof( string ), "[ BPO ADMIN ] Você alterou o clima para o ID %d", clima );
		SendClientMessage( playerid, 0xBCE635AA, string );
		SetWeather( clima );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( strcmp( cmd, "/limparchat", true ) == 0 || strcmp( cmd, "/lchat", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		LimparChatTodos( 150 );
	}
	return 1;
}
if( !strcmp( cmd, "/admins", true ) || !strcmp( cmd, "/adms", true ) || !strcmp( cmd, "/mods", true ))
{
	SendClientMessage( playerid, 0x96D742AA, "[ BPO ADMIN ] Membros da Staff online:" );
	foreach(Player, i )
	{
		if( aInfo[ i ][ Dono ] == 1 )
		{
			if( aInfo[ i ][ Oculto ] == false )
			{
				d_o_n_o ++;
				format( string, sizeof( string ), "Dono(a) {FFFFFF}%s ( %d )", PlayerName( i ), i );
				SendClientMessage( playerid, 0xFF0000AA, string );
			}
		}
		if( aInfo[ i ][ Admin ] == 1 )
		{
			if( aInfo[ i ][ Oculto ] == false )
			{
				a_d_m ++;
				format( string, sizeof( string ), "Administrador(a) {FFFFFF}%s ( %d )", PlayerName( i ), i );
				SendClientMessage( playerid, 0x0000FFAA, string );
			}
		}
		if( aInfo[ i ][ Moderador ] == 1 )
		{
			if( aInfo[ i ][ Oculto ] == false )
			{
				m_d_r ++;
				format( string, sizeof( string ), "Moderador(a) {FFFFFF}%s ( %d )", PlayerName( i ), i );
				SendClientMessage( playerid, 0x00CCFFAA, string );
			}
		}
		if( aInfo[ i ][ Ajudante ] == 1 )
		{
			if( aInfo[ i ][ Oculto ] == false )
			{
				a_j_d ++;
				format( string, sizeof( string ), "Ajudante(a) {FFFFFF}%s ( %d )", PlayerName( i ), i );
				SendClientMessage( playerid, 0x33FF99AA, string );
			}
		}
	}
	if( d_o_n_o == 0 ) return SendClientMessage( playerid, 0x66FF00AA, "[ BPO ADMIN ] Nenhum Dono conectado no momento !" );
	if( a_d_m == 0 ) return SendClientMessage( playerid, 0x66FF00AA, "[ BPO ADMIN ] Nenhum Administrador conectado no momento !" );
	if( m_d_r == 0 ) return SendClientMessage( playerid, 0x66FF00AA, "[ BPO ADMIN ] Nenhum Moderador conectado no momento !" );
	if( a_j_d == 0 ) return SendClientMessage( playerid, 0x66FF00AA, "[ BPO ADMIN ] Nenhum Ajudante conectado no momento !" );
	return 1;
}
if( !strcmp( cmd, "/dcmds", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 )
	{
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Dono BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Staff [ Dono/Adm/Mod/Ajd ] [ ID ] • /Restart • /DesligarServer" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Desbugarbanco • /Desbugarsenha • /Desbugarcasa • /irb1 a irb8 ( Ir Bases )" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /casa liberar • /empresa liberar • /criarset [ Publico ] • /pinglimite" );
		SendClientMessage( playerid, 0x2CFF00FF, "• Prefeitura: /abrirvotacao • /fecharvotacao • /apurar" );
		SendClientMessage( playerid, 0x2CFF00FF, "• LOJA: /setarvip • /tirarvip • /setarveiculo • /setarjetpack • /setarneon " );
		SendClientMessage( playerid, 0x2CFF00FF, "• LOJA: /colocarshop • /retirarshop • /liberarEMP ( Liberar Comprar Empresa )" );
		SendClientMessage( playerid, 0x2CFF00FF, "• Para ver mais comandos digite: /acmds • /acmds2" );
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Dono BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	return 1;
}
if( !strcmp( cmd, "/acmds", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Admin BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0x2CFF00FF, "• ( @ , - ) = Anunciar ( # ) = Chat STAFF • /Rv (Resp. 1 Veic) • /Prv (Resp. Veic.) • /Trv (Resp. Todos Veic.)" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /cv ( Criar Veic. ) • /dv ( Dest.Veic ) • /ab ( Abastecer Carro ) • /vnome ( Ver Nome Veic. ) • /vid ( Ver ID Veic. )" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Ajudar ou /par ( Msg Privada ) • /aprender • /aprenderoff • /asoltar • /liberarcasa • /liberarclan  • /verchat" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /kick • /ban • /banoff • /desban • /desbanip • /verip • /baninfo • /versaldo • /versaldoB • /modop ( Prisão ON/OFF )");
		SendClientMessage( playerid, 0x2CFF00FF, "• /setarlevel • /setargrana • /setarsaldo • /setarskin • /setarsms • /bloquearsms • /gm (GodMode) • /jetpack • /djetpack " );
		SendClientMessage( playerid, 0x2CFF00FF, "• /espiar • /espiarOff • /ocultar • /desocultar • /evento • /evdm • /Ecmds • TELEPORTES: /aTps" );
		SendClientMessage( playerid, 0x2CFF00FF, "• Para ver a lista número 2 de comandos digite: /acmds2" );
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Admin BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	return 1;
}
if( !strcmp( cmd, "/acmds2", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Admin BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /novatos • /setnb • /enquete • /contar • /limparchat • /calar • /descalar • /pconectado" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /ativarchat • /desativarchat • /ativarcomandos • /desativarcomandos • /vercomandos" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /dararma • /dararmatodos • /desarmar • /desarmartodos • /clima • /tempo • /evento • /irevento" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /ir • /ircasa • /irempresa • /irveiculo • /trazer • /trazertodos • /usarcmd [ID][cmd]" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /ejetar • /injetar • /flip • /pflip • /vida • /vidatodos • /pcolete • /vidaveiculo • /vidaveiculos" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /tapa • /matar • /explodir  • /congelar • /descongelar • /pcolete • /Giroflex" );
		SendClientMessage( playerid, 0x2CFF00FF, "• LOTERIA: /loterica [ ON / OFF ] • /sorteio • -> Para ver a lista TELEPORTES digite: /aTps <-" );
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Admin BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	return 1;
}
if( !strcmp( cmd, "/mcmds", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Mod BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0x2CFF00FF, "• ( @ , - ) = Anunciar ( # ) = Chat STAFF • /Avisar • /Ban • /BanOFF • /desban • /desbanIP • /verip • /pconectado" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Kick • /Ir • /Trazer • /ircasa • /espiar • /espiarOff • /liberarcasa • /LiberarClan • /evento • /vidatodos" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Aprender • /aprenderoff • /Asoltar • /congelar • /descongelar • /calar • /descalar • /tapa • /matar • /explodir" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Ajudar ou /par • /novatos • /Setnb (Hab.+ Caminhoneiro) • /setarskin • /versaldo • /versaldoB • /verchat • /Giroflex" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /cv ( Criar Veic. ) • /dv ( Dest.Veic ) • /Rv (Resp. 1 Veic.) • /Prv (Resp. Veic. Publico) • /Trv (Resp. Todos Veic.)" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /vidaveiculos • /Consertar • /flip • /pflip • /ab ( Abast.Carro ) • /vid ( Ver ID Veic. ) • /gm (GodeMode) • /tps" );
		SendClientMessage( playerid, 0x2CFF00FF, "• -> Para ver a lista TELEPORTES digite: /aTps <-" );
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Mod BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	return 1;
}
if( !strcmp( cmd, "/ajcmds", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Ajudantes BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0x2CFF00FF, "• ( @ , - ) = Anunciar ( # ) = Chat STAFF • /Kick • /Ajudar ou /Par • /Novatos • /Setnb (Hab.+ Caminhoneiro) • /v" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Avisar • /Espiar • /EspiarOff • /Ir • /Trazer • /Jetpack • /Djetpack • /pconectado • /Flip • /Pflip • TELEPORTES: /aTps" );
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ Ajudantes BPO Comandos ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	return 1;
}
if( !strcmp( cmd, "/aTps", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ TELEPORTES ADMIN ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Agencia • /LV • /SF • /LC • /Pref • /Dp • /Pd • /Posto • /Favela • /Loteria" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Ilha • /Predio • /AeroLS • /BancoLS • /UtiLS • /Binco • /Ammu • /Alhambra" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Ircasa [ ID ] • /Irempresa [ ID ] • /Estadio Corrida • /Estadio BateBate" );
		SendClientMessage( playerid, 0x2CFF00FF, "• /Estadio Stunt • /Estadio Rally • /Predio Evento /Andromeda • /Jatinho" );
		SendClientMessage( playerid, 0xFF001DFF, "•~~~~~~~~~~~~~~~~~~~~~~~~~~[ TELEPORTES ADMIN ]~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	return 1;
}
if( !strcmp( cmd, "/staff", true )) // Setar Admin
{
	if( dini_Int( f( playerid ), "Dono" ) == 0 )
	{
		return 0;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Staff [ Dono/Adm/Mod/Ajd ] [ ID ]" );
		return 1;
	}
	else if( !strcmp( tmp, "Dono", true ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Staff [ Dono ] [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ id ][ Dono ] == 0 )
		{
			format( gstring, sizeof( gstring ), "[ > ] Você tornou um Dono o jogador(a) '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "( PARABÉNS ) Você recebeu privilegios de Dono por '%s'.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Dono ] = 1;
			dini_IntSet( f( id ), "Dono", 1 );  // Faz Salvar No INI
		}
		else if( aInfo[ id ][ Dono ] == 1 )
		{
			format( gstring, sizeof( gstring ), "[ > ] Você removeu os privilégios de Dono de '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "[ INFO ] '%s' removeu os privilégios de Dono de você.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Dono ] = 0;
			dini_IntSet( f( id ), "Dono", 0 );  // Faz Salvar No INI
		}
		return 1;
	}
	else if( !strcmp( tmp, "Adm", true ))
	{

		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Staff [ Adm ] [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ id ][ Admin ] == 0 )
		{
			format( gstring, sizeof( gstring ), "[ > ] Você tornou um Administrador o jogador(a) '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "( PARABÉNS ) Você recebeu privilegios de Administrador por '%s'.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Admin ] = 1;
			dini_IntSet( f( id ), "Administrador", 1 );  // Faz Salvar No INI
		}
		else if( aInfo[ id ][ Admin ] == 1 )
		{
			format( gstring, sizeof( gstring ), "[ > ] Você removeu os privilégios de Adminstrador de '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "[ INFO ] '%s' removeu os privilégios de Adminstrador de você.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Admin ] = 0;
			dini_IntSet( f( id ), "Administrador", 0 );  // Faz Salvar No INI
		}
		return 1;
	}
	else if( !strcmp( tmp, "Mod", true ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Staff [ Mod ] [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ id ][ Moderador ] == 0 )
		{
			format( gstring, sizeof( gstring ), "[ > ] Você tornou um Moderador o jogador(a) '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "( PARABÉNS ) Você recebeu privilegios de Moderador por '%s'.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Moderador ] = 1;
			dini_IntSet( f( id ), "Moderador", 1 );  // Faz Salvar No INI
		}
		else if( aInfo[ id ][ Moderador ] == 1 )
		{
			format( gstring, sizeof( gstring ), "[ > ] Você removeu os privilégios de Moderador de '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "[ INFO ] '%s' removeu os privilégios de Moderador de você.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Moderador ] = 0;
			dini_IntSet( f( id ), "Moderador", 0 );  // Faz Salvar No INI
		}
		return 1;
	}
	else if( !strcmp( tmp, "Ajd", true ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Staff [ Ajd ] [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( aInfo[ id ][ Ajudante ] == 0 )
		{
			format( gstring, sizeof( gstring ) , "[ > ] Você tornou um Ajudante o jogador(a) '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "( PARABÉNS ) Você recebeu privilegios de Ajudante por '%s'.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Ajudante ] = 1;
			dini_IntSet( f( id ), "Ajudante", 1 );  // Faz Salvar No INI
		}
		else if( aInfo[ id ][ Ajudante ] == 1 )
		{
			format( gstring, sizeof( gstring ) , "[ > ] Você removeu os privilégios de Ajudante de '%s'.", PlayerName( id ));
			SendClientMessage( playerid, 0x66FF00AA, gstring );
			format( gstring, sizeof( gstring ), "[ INFO ] '%s' removeu os privilégios de Ajudante de você.", PlayerName( playerid ));
			SendClientMessage( id, 0x66FF00AA, gstring );
			aInfo[ id ][ Ajudante ] = 0;
			dini_IntSet( f( id ), "Ajudante", 0 );  // Faz Salvar No INI
		}
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/setarlevel", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarlevel [ ID ] [ Level ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarlevel [ ID ] [ Level ]" );
			return 1;
		}
		new
		level = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		format( gStr, sizeof( gStr ), "%s level %d recebeu %d LEVEL do(a) Administrador(a) %s", PlayerName( id ), pInfo[ id ][ Level ], level, PlayerName( playerid ));
		log_setados_level( gStr );
		format( gstring, sizeof( gstring ), "[ > ] Você setou %d level para %s - Level anterior %d", level, PlayerName( id ), pInfo[ id ][ Level ] );
		SendClientMessage( playerid, 0x00FF66AA, gstring );
		format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou %d level pra você.", PlayerName( playerid ), level );
		SendClientMessage( id, 0x00FF66AA, gstring );
		dini_IntSet( f( id ), "Level", level );
		pInfo[ id ][ Level ] = level;
		SetPlayerScore( id, level );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/dargrana", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /dargrana [ ID ] [ Quantia ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /dargrana [ ID ] [ Quantia ]" );
			return 1;
		}
		new
		grana = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "[ > ] Você deu $%d de grana para %s", grana, PlayerName( id ));
		SendClientMessage( playerid, 0x00FF00AA, gstring );
		format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Administrador(a) %s deu $%d de grana para você.", PlayerName( playerid ), grana );
		SendClientMessage( id, 0x00FF00AA, gstring );
		sGivePlayerCash( id, grana );
		format( gstring, sizeof( gstring ), "* %s deu $%d de grana para %s", PlayerName( playerid ), grana, PlayerName( id ));
		LogSetGrana( gstring );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/setargrana", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setargrana [ ID ] [ Quantia ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setargrana [ ID ] [ Quantia ]" );
			return 1;
		}
		new
		grana = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "[ > ] Você setou $%d de grana para %s - Grana anterior %d ", grana, PlayerName( id ), GetPlayerCash( id ));
		SendClientMessage( playerid, 0x00FF00AA, gstring );
		format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou $%d de grana para você.", PlayerName( playerid ), grana );
		SendClientMessage( id, 0x00FF00AA, gstring );
		sResetPlayerCash( id );
		sGivePlayerCash( id, grana );
		format( gstring, sizeof( gstring ), "[ Admin ] '%s' setou a grana de '%s'para '$%d'", PlayerName( playerid ), PlayerName( id ), grana );
		LogSetGrana( gstring );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/setarsaldo", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarsaldo [ ID ] [ Quantia ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarsaldo [ ID ] [ Quantia ]" );
			return 1;
		}
		new
		quantia = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "[ > ] Você setou o saldo de %s para: $%d", PlayerName( id ), quantia );
		SendClientMessage( playerid, 0x00FF00AA, gstring );
		format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou seu saldo para: $%d", PlayerName( playerid ), quantia );
		SendClientMessage( id, 0x00FF00AA, gstring );
		dini_IntSet( f( id ), "SaldoBanco", quantia );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/meulevel", true ))
{
	new
	ano, mes, dia, hora, minuto, segundo
		;
	getdate( ano, mes, dia );
	gettime( hora, minuto, segundo );
	new
	linha_t[ ] = "{46E75D}---------------------{FFFFFF}",
	stg[ 512 ]
	;
	format( stg, sizeof( stg ), "%s\nNick / Nome\n%s\nLevel Atual\n%d\nUP Experiência\n[ %d/6 ]\nData Atual\n%d/%d/%d\nHorário\n%d:%d:%d\n%s", linha_t, PlayerName( playerid ), pInfo[ playerid ][ Level ], pInfo[ playerid ][ Exp ], dia, mes, ano, hora, minuto, segundo, linha_t );
	ShowPlayerDialog( playerid, 1457, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Seu Level", stg, "Fechar", "" );
	return 1;
}
if( !strcmp( cmd, "/infoplayer", true ))
{
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /InfoPlayer [ ID ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;
	if( !IsPlayerConnected( id ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		return 1;
	}
	SendClientMessage( playerid, -1, "•~~~~~~~~~~~~~~ Info Player ~~~~~~~~~~~~~~" );
	format( gStr, sizeof( gStr ), "• Nick: %s - Level: %d", PlayerName( id ), pInfo[ id ][ Level ] );
	SendClientMessage( playerid, -1, gStr );
	SendClientMessage( playerid, -1, "•~~~~~~~~~~~~~~ Info Player ~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmd, "/revistar", true ))
{
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( pInfo[ playerid ][ fardado ] == 0 && aInfo[ playerid ][ Admin ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para revistar um(a) jogador(a) !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Revistar [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( GetDistanceBetweenPlayers( playerid, id ) > 15 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O(A) jogador(a) que você deseja revistar está muito distânte de você !" );
			return 1;
		}
		new
		rname[ 24 ]
		;
		format( rname, sizeof( rname ), "> REVISTANDO %s", PlayerName( id ));
		SendClientMessage( playerid, COLOR_AZULCLARO, rname );

		format( gStr, sizeof( gStr ), "• Level: {6666CC}%d {FFFFFF}| Dinheiro em mão: {22F900}${FFFFFF}%d", pInfo[ id ][ Level ], GetPlayerCash( id ));
		SendClientMessage( playerid, COLOR_BRANCO, gStr );

		format( gstring, sizeof( gstring ), "• Drogas: {599100}Maconha %d parangas {FFFFFF}|{A0FFF7} Cocaína %d pinos {FFFFFF}| {B0AED9}Crack %d pedras", pInfo[ id ][ PT_Maconha ], pInfo[ id ][ PT_Cocaina ], pInfo[ id ][ PT_Crack ] );
		SendClientMessage( playerid, COLOR_BRANCO, gstring );

		if( trafcArma[ id ] == -1 )
		{
			SendClientMessage( playerid, COLOR_BRANCO, "• Arma ilegal: {FFFF00}Nenhuma" );
		}
		else
		{
			format( gStr, 128, "• Arma ilegal: {FF0000}%s", GetWeaponNameByID( trafcArma[ id ] ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/taxi", true ))
{
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taxi [ Carro/Moto/Aereo ]" );
		return 1;
	}
	else if( !strcmp( tmp, "carro", true ))
	{
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taxi Carro [ Local ]" );
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Os(As) taxistas online foram informados(as) !" );
			foreach(Player, i )
			{
				if( pInfo[ i ][ Prof ] == TAXISTA || aInfo[ i ][ Admin ] == 1 )
				{
					format( gStr, sizeof( gStr ), "[ > ] %s está precisando de um táxi no local: %s", PlayerName( playerid ), result );
					SendClientMessage( i, COLOR_AMARELO, gStr );
				}
			}
		}
	}
	else if( !strcmp( tmp, "moto", true ))
	{
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taxi Moto [ Local ]" );
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_MOTOTAXI, "[ > ] Os(As) motos taxistas foram informados(as) !" );
			foreach(Player, i )
			{
				if( pInfo[ i ][ Prof ] == MOTO_TAXISTA || aInfo[ i ][ Admin ] == 1 )
				{
					format( gStr, sizeof( gStr ), "[ > ] %s está pedindo uma moto táxi no local: %s", PlayerName( playerid ), result );
					SendClientMessage( i, COLOR_AMARELO, gStr );
				}
			}
		}
	}
	else if( !strcmp( tmp, "aereo", true ))
	{
		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Taxi Aereo [ Local ]" );
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_TAXIAEREO, "[ > ] Os(As) taxistas aéreo foram informados(as) !" );
			foreach(Player, i )
			{
				if( pInfo[ i ][ Prof ] == TAXI_AEREO || aInfo[ i ][ Admin ] == 1 )
				{
					format( gStr, sizeof( gStr ), "[ > ] %s está pedindo um heli táxi no local: %s", PlayerName( playerid ), result );
					SendClientMessage( i, COLOR_AMARELO, gStr );
				}
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/190", true ))
{
	new length = strlen( cmdtext );
	while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
	{
		idx++;
	}
	new offset = idx;
	new result[ 64 ];
	while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
	{
		result[ idx - offset ] = cmdtext[ idx ];
		idx++;
	}
	result[ idx - offset ] = EOS;
	if( !strlen( result ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /190 [ Denúncia ]" );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Os(As) policiais online foram informados !" );
		foreach(Player, i )
		{
			if( pInfo[ i ][ Prof ] == GUARDA_TRANSITO || pInfo[ i ][ Prof ] == POL_CIVIL || pInfo[ i ][ Prof ] == POL_MILITAR || pInfo[ i ][ Prof ] == DELEGADO || pInfo[ i ][ Prof ] == BOPE || pInfo[ i ][ Prof ] == EXERCITO || pInfo[ i ][ Prof ] == POL_RODOVIARIA )
			{
				format( gstring, sizeof( gstring ), ">~> DENÚNCIA feita por: {FFFFFF}%s (ID %d)", PlayerName( playerid ), playerid );
				SendClientMessage( i, COLOR_AMARELO, gstring );
				format( gstring, sizeof( gstring ), ">~> MOTIVO: {0199FF}%s", result );
				SendClientMessage( i, 0x00FF00AA, gstring );
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/192", true ))
{
	new length = strlen( cmdtext );
	while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
	{
		idx++;
	}
	new offset = idx;
	new result[ 64 ];
	while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
	{
		result[ idx - offset ] = cmdtext[ idx ];
		idx++;
	}
	result[ idx - offset ] = EOS;
	if( !strlen( result ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /192 [ Seu Problema ]" );
		return 1;
	}
	else
	{
		new
		zone[ MAX_ZONE_NAME ]
		;
		GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
		SendClientMessage( playerid, COLOR_MEDICO, "[ > ] Os(As) médicos(as) foram informados !" );
		foreach(Player, i )
		{
			if( pInfo[ i ][ Prof ] == MEDICO || aInfo[ i ][ Admin ] == 1 )
			{
				SendClientMessage( i, 0x00FF00AA, "	" );
				format( gstring, sizeof( gstring ), ">~> EMERGÊNCIA sofredor(a): {FFFFFF}%s (ID %d)", PlayerName( playerid ), playerid );
				SendClientMessage( i, COLOR_AMARELO, gstring );
				format( gstring, sizeof( gstring ), ">~> MOTIVO: {FF0000}%s", result );
				SendClientMessage( i, 0x00FF00AA, gstring );
				format( gstring, sizeof( gstring ), ">~> LOCAL: {FFFFFF}%s", zone );
				SendClientMessage( i, COLOR_AMARELO, gstring );
				SendClientMessage( i, 0x00FF00AA, "	" );
			}
		}
	}
	return 1;
}
if( !strcmp( cmd, "/reportar", true ))
{
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Reportar [ ID ] [ Motivo ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;
	new length = strlen( cmdtext );
	while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
	{
		idx++;
	}
	new offset = idx;
	new result[ 64 ];
	while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
	{
		result[ idx - offset ] = cmdtext[ idx ];
		idx++;
	}
	result[ idx - offset ] = EOS;
	if( !strlen( result ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Reportar [ ID ] [ Motivo ]" );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, 0xCCFFFFAA, "[ > ] Os Administradores e moderadores onlines foram informados !" );
		format( string, sizeof( string ), "| REPORT | %s[ %d ] reportou ~> %s[ %d ] | Motivo: %s", PlayerName( playerid ), playerid, PlayerName( id ), id, result );
		Reports( string );
		foreach(Player, i )
		{
			if( aInfo[ i ][ Dono ] == 1 || aInfo[ i ][ Admin ] == 1 || aInfo[ i ][ Moderador ] == 1 )
			{
				SendClientMessage( i, COLOR_AMARELO, string );
			}
		}
		return 1;
	}
}
if( !strcmp( cmd, "/comandos", true )) // Comandos do /comandos
{
	new
	stg[ 1500 ]
	;
	format( gStr, sizeof( gStr ), "\t{FF0000}[ COMANDOS BÁSICOS DO SERVIDOR ]{00FF00}\n" );
	strcat( stg, gStr );
	format( gStr, sizeof( gStr ), "\n\t• /Regras \n\t• /Tutorial \n\t• /Profissao \n\t• /MeuStatus \n\t• /MeuLevel" );
	strcat( stg, gStr );
	format( gStr, sizeof( gStr ), "\n\t• /Mudarsenha \n\t• /Mudarpchave \n\t• /Admins ou /Mods \n\t• /Infochat" );
	strcat( stg, gStr );
	format( gStr, sizeof( gStr ), "\n\t• /Sos ou /Help [ Pergunta ] \n\t• /Reportar [ ID ] [ Motivo ] \n\t• /An \n\t• /MeusSets" );
	strcat( stg, gStr );
	format( gStr, sizeof( gStr ), "\n\t• /Vips \n\t• /ListaAFK \n\t• /Transferir \n\t• /GPS \n\t• /Radios \n\t• /Comandosclan" );
	strcat( stg, gStr );
	format( gStr, sizeof( gStr ), "\n\t• /Carrocmds \n\t• /Veiculo Trancar \n\t• /Veiculo Destrancar \n\t• /An \n\t• /Taxi" );
	strcat( stg, gStr );
	format( gStr, sizeof( gStr ), "\n\t• /190 \n\t• /192 \n\t• /Animes \n\t• /Casa \n\t• /Casa comandos \n\t• /Casa veiculo" );
	strcat( stg, gStr );
	format( gStr, sizeof( gStr ), "\n\t• /Empresa \n\t• /Empresa comandos \n\t• /Veiculos a ou b,c,d..." );
	strcat( stg, gStr );
	ShowPlayerDialog( playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Brasil Play Online", stg, "Fechar", "" );
	return 1;
}
if( !strcmp( cmdtext, "/ajuda", true )) // Lista de opções do /ajuda
{
	ShowPlayerDialog( playerid, D_AJUDA, DIALOG_STYLE_LIST, "• AJUDA •", "Servidor\nCreditos\nAdministração e Moderação\nRegras\nComandos\nLevel\nEmprego\nSalário\nEventos", "Ver", "Sair" );
	return 1;
}
if( !strcmp( cmdtext, "/regras", true ))
{
	new
	stg[ 1500 ]
	;
	format( gstring, sizeof( gstring ), "\t\t{5FFF00}[ Regras Gerais - [RPG] Brasil Play Online ]" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não cometa Death-Match/DM ( atirar ou matar ) dentro de interiores e em locais" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\npúblicos, tais como: Agências de empregos, bancos, prefeituras, lojas de utilitários, etc;" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFE583}• Não cometa Drive-By/DB ( para quem não sabe, DB ( Drive-By ) é atirar de dentro de" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\num veículo contra a skin do jogador(a), atropelar ou atirar de jetpack;" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• É extremamente proibido qualquer tipo de preconceito, tais como: Racismo, opção sexual ou qualquer outro tipo de preconceito;" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFE583}• Não desrespeite o próximo, respeite para ser respeitado;" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não peça para ser moderador ou Administrador pois não é pedindo que se ganha, é merecendo. E também não pergunte o que tem que" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\nfazer para virar um, isso é ser falso para conseguir o que quer. Tem que ser você mesmo e se o seu caráter, sua honestidade e" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\na sua vontade de ajudar o servidor no que puder merecer, você vira;" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFE583}• É extremamente proibido o uso de cheaters ou qualquer modificação que faça com que você tenha vantagem sobre os outros jogadores;" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não acuse um jogador de ter feito algo fora das regras, de cheat ou algo parecido no chat, para isso existe o /Reportar [ ID do jogador(a) ] [ Motivo ] ou" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\no tópico de denúncias no nosso fórum ( precisa ter provas ( prints ou vídeos ));" );
	strcat( stg, gstring );
	ShowPlayerDialog( playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Regras Gerais - [RPG] Brasil Play Online «", stg, "OK", "Avançar" );
	return 1;
}
if( !strcmp( cmd, "/vercomandos", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /VerComandos [ ON/OFF ]" );
			return 1;
		}
		if( !strcmp( tmp, "on", true ))
		{
			if( vercmds[ playerid ] == 0 )
			{
				SendClientMessage( playerid, 0x00FF66AA, "( BPO ADMIN ) Agora você pode visualizar os comandos que os jogadores digitam." );
				vercmds[ playerid ] = 1;
				return 1;
			}
		}
		else if( !strcmp( tmp, "off", true ))
		{
			if( vercmds[ playerid ] == 1 )
			{
				SendClientMessage( playerid, 0x00FF66AA, "( BPO ADMIN ) Você ocultou a visualização de comandos." );
				vercmds[ playerid ] = 0;
				return 1;
			}
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmd, "/transferir", true ))
{
	if( pInfo[ playerid ][ Level ] < 10 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para fazer transferências ! ( Level mínimo: 10 )" );
		return 1;
	}
	tmp = strtok( cmdtext, idx ) ;
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Transferir [ ID ] [ Quantia ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Transferir [ ID ] [ Quantia ]" );
		return 1;
	}
	new
	moneys = strval( tmp )
	;
	if( id == playerid )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode fazer transferência para você mesmo(a) !" );
		return 1;
	}
	if( GetDistanceBetweenPlayers( playerid, id ) > 20 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe da pessoa que deseja trânsferir, chegue mais perto !" );
		return 1;
	}
	if( !IsPlayerConnected( id ))
	{
		SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Ninguém online com esse ID !" );
		return 1;
	}
	if( GetPlayerCash( playerid ) < moneys )
	{
		SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Você não tem essa quantia em mãos !" );
		return 1;
	}
	if( moneys < 1 || GetPlayerCash( playerid ) < moneys )
	{
		SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Quantia inválida !" );
		return 1;
	}
	format( gstring, sizeof( gstring ), "[ > ] Você transferiu para o(a) jogador(a) %s o valor de $%d", PlayerName( id ), moneys );
	SendClientMessage( playerid, COLOR_SISTEMA, gstring );
	format( gstring, sizeof( gstring ), "[ > ] Você recebeu do(a) jogador(a) %s o valor de $%d", PlayerName( playerid ), moneys );
	SendClientMessage( id, COLOR_AMARELO, gstring );
	format( gstring, sizeof( gstring ), "~ %s transferiu para %s um valor de %d", PlayerName( playerid ), PlayerName( id ), moneys );
	sGivePlayerCash( playerid, -moneys );
	sGivePlayerCash( id, moneys );
	Transferencias( gstring );
	return 1;
}
if( strcmp( cmd, "/liberarcasa", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /liberarcasa [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( IsPlayerConnected( id ))
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ BPO ADMIN ] Você liberou '%s' para poder comprar uma casa.", PlayerName( id ));
			GameTextForPlayer( id, "~y~Liberado para comprar~r~ casa !", 10000, 0 );
			SetTimerEx( "LiberadoCasaID", 60000, false, "i", id );
			LiberadoCasa[ id ] = 1;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/liberarEMP", true ))
{
	if( dini_Int( f( playerid ), "Dono" ) == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /liberarEMP [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( IsPlayerConnected( id ))
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ BPO ADMIN ] Você liberou '%s' para poder comprar uma empresa.", PlayerName( id ));
			GameTextForPlayer( id, "~y~~h~Liberado para comprar ~y~Empresa !", 10000, 0 );
			LiberadoEmpresa[ id ] = 1;
			SetTimerEx( "desliberarEmpresa", 60000, false, "d", playerid );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( strcmp( cmd, "/liberarclan", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /liberarclan [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( IsPlayerConnected( id ))
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ BPO ADMIN ] Você liberou '%s' para poder criar um Clan.", PlayerName( id ));
			GameTextForPlayer( id, "~y~Voce Esta Liberado para criar~p~ Clan !", 10000, 0 );
			SetTimerEx( "TempoCriarGangue", 60000, false, "i", id );
			LiberadoGG[ id ] = 1;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/colocarshop", true ))
{
	for( new c; c < MAX_CASAS; ++c )
	{
		if( dini_Int( f( playerid ), "Dono" ) == 1 )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
				DestroyPickup( CasaPickup[ c ] );
				dini_IntSet( hFile, "Shopping", 1 );
				CasaPickup[ c ] = CreatePickup( 1274, 23, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] );
				format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {FF0000}Shopping", CasaInfo[ c ][ Numero ] );
				Update3DTextLabelText( CasaLabel[ c ], COLOR_BRANCO, gStr );
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Casa reservada para o shopping." );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
			return 1;
		}
	}
}
if( !strcmp( cmd, "/retirarshop", true ))
{
	for( new c; c < MAX_CASAS; ++c )
	{
		if( dini_Int( f( playerid ), "Dono" ) == 1 )
		{
			if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
				DestroyPickup( CasaPickup[ c ] );
				dini_IntSet( hFile, "Shopping", 0 );
				CasaPickup[ c ] = CreatePickup( 1273, 23, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] );
				format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {00FF00}Liberada", CasaInfo[ c ][ Numero ] );
				Update3DTextLabelText( CasaLabel[ c ], COLOR_BRANCO, gStr );
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Casa retirada do Shopping." );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
			return 1;
		}
	}
}
if( !strcmp( cmdtext, "/tunarveiculo", true ))
{
	if( PlayerToPoint( 10.0, playerid, 1665.1106, -1716.3702, 20.0626 ))
	{
		//SendClientMessage( playerid, COLOR_ERRO, "[ x ] Oficina de tuning em atualização." );

		if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsACar( GetPlayerVehicleID( playerid )))
		{
			for( new c; c < sizeof( cInfo ); c++ )
			{
				if( GetPlayerVehicleID( playerid ) == cInfo[ c ][ HouseCar ] )
				{
					if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
					{
						new vStr[ 128 ];
						format( vStr, sizeof( vStr ), "CarrosTunados/vCasa%d.ini", CasaInfo[ c ][ Numero ] );
						if( !fexist( vStr )) dini_Create( vStr );
						new vehiclemodel = GetVehicleModel( GetPlayerVehicleID( playerid ));
						new stringbig[ 2048 ], component;
						ccount[ playerid ] = 1;

						while( GetVehicleCompatibleUpgrades( vehiclemodel, ccount[ playerid ], component ))
						{
							if( ccount[ playerid ] <= MAX_COMP )
							{
								if( ccount[ playerid ] == 1 )
								{
									if( dini_Int( vStr, componenteNome( component )) == component )
									{
										format( stringbig, sizeof( stringbig ), "%s\n%s {A8FF00}ADICIONADO", stringbig, GetComponentName( component ));
									}
									else
									{
										format( stringbig, sizeof( stringbig ), "%s", GetComponentName( component ));
									}
								}
								else
								{
									if( dini_Int( vStr, componenteNome( component )) == component )
									{
										format( stringbig, sizeof( stringbig ), "%s\n%s {A8FF00}ADICIONADO", stringbig, GetComponentName( component ));
									}
									else
									{
										format( stringbig, sizeof( stringbig ), "%s\n%s", stringbig, GetComponentName( component ));
									}
								}
								componentsid[ playerid ][ ccount[ playerid ] - 1 ] = component;
								ccount[ playerid ] ++;
							}
							else break;
						}
						new
						title[ 80 ]
						;
						format( title, sizeof( title ), "Tunings para {FF6400}%s", vNome[ vehiclemodel - 400 ] );
						ShowPlayerDialog( playerid, DIALOGID, DIALOG_STYLE_LIST, title, stringbig, "Tunar", "Sair" );
					}
				}
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um carro !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está Oficina de Tuning !" );
	}
	return 1;
}

if( !strcmp( cmdtext, "/destunarveiculo", true ))
{
	if( PlayerToPoint( 10.0, playerid, 1665.1106, -1716.3702, 20.0626 ))
	{
		if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsACar( GetPlayerVehicleID( playerid )))
		{
			for( new c; c < sizeof( cInfo ); c++ )
			{
				if( GetPlayerVehicleID( playerid ) == cInfo[ c ][ HouseCar ] )
				{
					if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
					{
						new vStr[ 128 ];
						format( vStr, sizeof( vStr ), "CarrosTunados/vCasa%d.ini", CasaInfo[ c ][ Numero ] );
						if( !fexist( vStr )) dini_Create( vStr );
						new vehiclemodel = GetVehicleModel( GetPlayerVehicleID( playerid ));
						new stringbig[ 2048 ], component;
						ccount[ playerid ] = 1;

						while( GetVehicleCompatibleUpgrades( vehiclemodel, ccount[ playerid ], component ))
						{
							if( ccount[ playerid ] <= MAX_COMP )
							{
								if( ccount[ playerid ] == 1 )
								{
									if( dini_Int( vStr, componenteNome( component )) == component )
									{
										format( stringbig, sizeof( stringbig ), "%s\n%s {00FF00}REMOVER", stringbig, GetComponentName( component ));
									}
									else
									{
										format( stringbig, sizeof( stringbig ), "%s", GetComponentName( component ));
									}
								}
								else
								{
									if( dini_Int( vStr, componenteNome( component )) == component )
									{
										format( stringbig, sizeof( stringbig ), "%s\n%s {00FF00}REMOVER", stringbig, GetComponentName( component ));
									}
									else
									{
										format( stringbig, sizeof( stringbig ), "%s\n%s", stringbig, GetComponentName( component ));
									}
								}
								componentsid[ playerid ][ ccount[ playerid ] - 1 ] = component;
								ccount[ playerid ] ++;
							}
							else break;
						}
						new
						title[ 80 ]
						;
						format( title, sizeof( title ), "Tunings para {FF6400}%s", vNome[ vehiclemodel - 400 ] );
						ShowPlayerDialog( playerid, DIALOGID+1, DIALOG_STYLE_LIST, title, stringbig, "Remover", "Sair" );
					}
				}
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um carro !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está Oficina de Tuning !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/veiculoestacionar", true ))
{
	if( IsPlayerInAnyVehicle( playerid ))
	{
		if( Estacionou[ playerid ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já estacionou uma vez, somente relogando para estacionar novamente !" );
			return 1;
		}
		for( new c; c < sizeof( cInfo ); c++ )
		{
			if( GetPlayerVehicleID( playerid ) == cInfo[ c ][ HouseCar ] )
			{
				if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
				{
					format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
					new
					Float:cHousex, Float:cHousey, Float:cHousez, Float:cHousea
					;
					GetPlayerPos( playerid, cHousex, cHousey, cHousez );
					GetVehicleZAngle( GetPlayerVehicleID( playerid ), cHousea );

					dini_FloatSet( hFile, "newCarX", cHousex );
					dini_FloatSet( hFile, "newCarY", cHousey );
					dini_FloatSet( hFile, "newCarZ", cHousez );
					dini_FloatSet( hFile, "newCarAng", cHousea );
					dini_IntSet( hFile, "newSpawn", 1 );
					cInfo[ CasaInfo[ c ][ Numero ] ][ NewCar ] = 1;
					SetTimerEx( "NewCarH", 2000, false, "d", CasaInfo[ c ][ Numero ] );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você definiu o veículo de sua casa para dar spawn neste local." );
					Estacionou[ playerid ] = 1;
				}
				else if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é Dono(a) deste veículo !" );
				}
				return 1;
			}
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu veículo !" );
	}
	return 1;
}
if( !strcmp( cmd, "/duelo", true ))
{

	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Duelo [ Entrar/Sair ]" );
		return 1;
	}
	if( !strcmp( tmp, "entrar", true ))
	{
		new
		Float:health
		;
		GetPlayerHealth( playerid, health );
		if( health < 50.0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode entrar no duelo com a vida acima de 50 !" );
			return 1;
		}
		if( ArenaDuelo[ playerid ] == true )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está dentro da arena de duelos !" );
			return 1;
		}
		if( !IsPlayerInRangeOfPoint( playerid, 2.0, 2188.9343, -1081.6875, 43.8327 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na entrada do duelo localizado na Área de DM !" );
			return 1;
		}
		if( DentroDuelo == 2 )
		{
			format( gStr, sizeof( gStr ), "( Arena DM ) Arena já ocupada por '%s' e '%s' espere o duelo entre eles terminar.", PlayerName( p1_ ), PlayerName( p2_ ));
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
			return 1;
		}
		new
		Float:d_Life
		;
		GetPlayerHealth( playerid, d_Life );
		if( ArenaDuelo[ playerid ] == false )
		{
			ResetPlayerWeapons( playerid );
			if( DentroDuelo == 0 )
			{
				DentroDuelo = 1;
				IDX1 = playerid;
				p1_ = playerid;
				ArenaDuelo[ playerid ] = true;
				SetPlayerHealth( playerid, 100 );
				SetPlayerPos( playerid, 1468.1580,-1085.3899,213.3828 );
				SetPlayerFacingAngle( playerid, 40.4450 );
				SetCameraBehindPlayer( playerid );
				TogglePlayerControllable( playerid, false );
				LifeDuelo[ playerid ] = d_Life;
				return 1;
			}
			else if( DentroDuelo == 1 )
			{
				ArenaDuelo[ playerid ] = true;
				DentroDuelo = 2;
				p2_ = playerid;
				SetPlayerHealth( playerid, 100 );
				TogglePlayerControllable( playerid, false );
				SetPlayerPos( playerid, 1436.1406,-1050.2604,213.3828 );
				SetPlayerFacingAngle( playerid, 222.4934 );
				SetCameraBehindPlayer( playerid );
				TempoCounTD[ playerid ] = 5;
				TempoCounTD[ IDX1 ] = 5;
				TimerDuelo[ playerid ] = SetTimerEx( "ContagemDuelo", 1000, true, "i", playerid );
				TimerDuelo[ IDX1 ] = SetTimerEx( "ContagemDuelo", 1000, true, "i", IDX1 );
				LifeDuelo[ playerid ] = d_Life;
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está na arena de duelos !" );
			return 1;
		}
	}
	else if( !strcmp( tmp, "sair", true ))
	{
		if( ArenaDuelo[ playerid ] == true )
		{
			if( playerid == p1_ )
			{
				if( ArenaDuelo[ p2_ ] == true )
				{
					format( gStr, sizeof( gStr ), "( Arena DM ) Você desistiu de duelar com '%s'.", PlayerName( p2_ ));
					SendClientMessage( p1_, COLOR_AMARELO, gStr );
					format( gStr, sizeof( gStr ), "( Arena DM ) '%s' desistiu de duelar com você.", PlayerName( p1_ ));
					SendClientMessage( p2_, COLOR_AMARELO, gStr );
				}
				else
				{
					SendClientMessage( p2_, COLOR_SISTEMA, "[ > ] Você desistiu de duelar !" );
				}
				DentroDuelo = 0;
				IDX1 = -1;
				KillTimer( TimerDuelo[ p1_ ] );
				SetPlayerPos( p1_, 2188.9343, -1081.6875, 43.8327 );
				SetPlayerFacingAngle( p1_, 2.1799 );
				SetCameraBehindPlayer( p1_ );
				ArenaDuelo[ p1_ ] = false;
				TogglePlayerControllable( p1_, true );
				ResetPlayerWeapons( p1_ );
				SetPlayerHealth( playerid, LifeDuelo[ playerid ] );
				if( ArenaDuelo[ p2_ ] == true )
				{
					SetPlayerPos( p2_, 2188.9343, -1081.6875, 43.8327 );
					SetPlayerFacingAngle( p2_, 2.1799 );
					SetCameraBehindPlayer( p2_ );
					ArenaDuelo[ p2_ ] = false;
					TogglePlayerControllable( p2_, true );
					KillTimer( TimerDuelo[ p2_ ] );
					ResetPlayerWeapons( p2_ );
					SetPlayerHealth( playerid, LifeDuelo[ p2_ ] );
					return 1;
				}
			}
			else if( playerid == p2_ )
			{
				if( ArenaDuelo[ p1_ ] == true )
				{
					format( gStr, sizeof( gStr ), "( Arena DM ) Você desistiu de duelar com '%s'.", PlayerName( p1_ ));
					SendClientMessage( p2_, 0xCCCC99FF, gStr );
					format( gStr, sizeof( gStr ), "( Arena DM ) '%s' desistiu de duelar com você.", PlayerName( p2_ ));
					SendClientMessage( p1_, 0xCCCC99FF, gStr );
				}
				else
				{
					SendClientMessage( p2_, COLOR_SISTEMA, "[ > ] Você desistiu de duelar !" );
				}
				DentroDuelo = 0;
				IDX1 = -1;
				KillTimer( TimerDuelo[ p2_ ] );
				SetPlayerPos( p2_, 2188.9343, -1081.6875, 43.8327 );
				SetPlayerFacingAngle( p2_, 2.1799 );
				SetCameraBehindPlayer( p2_ );
				ArenaDuelo[ p2_ ] = false;
				TogglePlayerControllable( p2_, true );
				ResetPlayerWeapons( p2_ );
				SetPlayerHealth( playerid, LifeDuelo[ playerid ] );
				if( ArenaDuelo[ p1_ ] == true )
				{
					SetPlayerPos( p1_, 2188.9343, -1081.6875, 43.8327 );
					SetPlayerFacingAngle( p1_, 2.1799 );
					SetCameraBehindPlayer( p1_ );
					ArenaDuelo[ p1_ ] = false;
					TogglePlayerControllable( p1_, true );
					KillTimer( TimerDuelo[ p1_ ] );
					ResetPlayerWeapons( p1_ );
					SetPlayerHealth( playerid, LifeDuelo[ p1_ ] );
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na arena de duelos !" );
			return 1;
		}
	}
	SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sistema em manutenção, remoção de bugs e melhorias :)" );
	return 1;
}
if( !strcmp( cmd, "/pinglimite", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 )
	{
		new
		P_LIMITE
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /PingLimite [ Limite ]" );
			return 1;
		}
		P_LIMITE = strval( tmp );
		foreach(Player, i )
		{
			format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Dono(a) %s o limite de ping para %d", PlayerName( playerid ), P_LIMITE );
			SendClientMessageToAll( 0x00FF66AA, gstring );
			LIMITE_PING = P_LIMITE;
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/mudarsenha", true ))
{
	if( pInfo[ playerid ][ Logado ] == true )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /MudarSenha [ Nova Senha ]" );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		dini_IntSet( gFile, "Senha", pass_hash( tmp ));
		format( gFile, sizeof( gFile ), "[ > ] Senha alterada com sucesso para: {FF0000}%s{FFFFFF}", tmp );
		SendClientMessage( playerid, COLOR_BRANCO, gFile );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não esqueça da sua nova senha !" );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Simplismente você se fudeu otário ! Tente novamente." );
		return 1;
	}
}
if( !strcmp( cmd, "/mudarpchave", true ))
{
	if( pInfo[ playerid ][ Logado ] == true )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /MudarpChave [ Nova Palavra ]" );
			return 1;
		}
		if( !IsValidFrase( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua palavra chave só pode conter letras !" );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		dini_IntSet( gFile, "Chave", pass_hash( tmp ));
		format( gFile, sizeof( gFile ), "[ > ] Palavra chave alterada com sucesso para: {FF0000}%s{FFFFFF}", tmp );
		SendClientMessage( playerid, COLOR_BRANCO, gFile );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não esqueça da sua nova palavra chave !" );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Simplismente você se fudeu otário ! Tente novamente." );
		return 1;
	}
}
if( !strcmp( cmdtext, "/pagaestrela", true ))
{
	if( PlayerToPoint( 1.1, playerid, 358.9193, 166.1699, 1008.3828 ))
	{
		if( GetPlayerCash( playerid ) < 1000 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa de no mínimo $1000 para remover uma estrela de procurado !" );
			return 1;
		}
		if( GetPlayerWantedLevel( playerid ) <= 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem estrela de procurado !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você removeu uma estrela por $1000 !" );
		SetPlayerWantedLevel( playerid, ( GetPlayerWantedLevel( playerid ) - 1 ));
		sGivePlayerCash( playerid, -1000 );
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura !" );
	return 1;
}
if( strcmp( cmdtext, "/animloop", true ) == 0 )
{
	if( Loop[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Animes com repetição automatica ativado." );
		Loop[ playerid ] = 1;
	}
	else if( Loop[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Animes com repetição automatica desatiavado." );
		Loop[ playerid ] = 0;
	}
	return 1;
}
if( strcmp( cmdtext, "/animes", true ) == 0 )
{
	SendClientMessage( playerid, 0xFF99FFAA, "•~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~• Animes Lista 1 •~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~•" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animped /dance /handsup /animclothes /animcoach /animcolt /animcopa /animcod /animcrack" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animbp /animinf /animbiked /animbh /animfood /animbikelp /animms /animbikes /animcar" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animbikev /animbmx /animbikedbz /animchase /animbox /animbomber /animbsp /animcamera " );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animgym /animpara /animgangs /animlookers /animcarchat /animcasino /animbuddy /animbus" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animairport /animat /animbar /animball /animfire /animbeach /animsmoking" );
	SendClientMessage( playerid, 0x99FF00AA, "• /Animes2 - Para ver a lista número 2 de animes. ( /AnimLoop Liga/Desliga repetição automatica )" );
	SendClientMessage( playerid, 0xFF99FFAA, "•~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~• Animes Lista 1 •~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~•" );
	return 1;
}
if( strcmp( cmdtext, "/animes2", true ) == 0 )
{
	SendClientMessage( playerid, 0xFF99FFAA, "•~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~• Animes Lista 1 •~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~•" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animhaircut /animheist  /animinthouse /animintoffice /animplayerdbf /animplayidles /animpolice" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animbath /animBOPE /animsweet /animswim /animsword /animtank /animtruck /animuzi  /animvan" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animflowers /animghands /animfw /animghetto /animgog /animgraffity /animgreya /animgren" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animcrib /animjump /animdealer /animdildo /animdodge /animdozer  /animdrivebys /animfat" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animvortex /animtec /animtrain /animsil /animtattoo /animsniper /animspray /animstrip" );
	SendClientMessage( playerid, 0x99FF00AA, "• /Animes3 - Para ver a lista número 3 de animes. ( /AnimLoop Liga/Desliga repetição automatica )" );
	SendClientMessage( playerid, 0xFF99FFAA, "•~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~• Animes Lista 2 •~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~•" );
	return 1;
}
if( strcmp( cmdtext, "/animes3", true ) == 0 )
{
	SendClientMessage( playerid, 0xFF99FFAA, "•~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~• Animes Lista 3 •~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~•" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animfightb /animfightc /animfightd /animfighte /animfinale /animfinale2 /animflamef /animway" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animrocket /animrustler /animryder /animscrat /animshamal /animshop /animskate /animshotgun" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animpool /animpoor /animpython /animquad /animquadbz /animrapping  /animrifle /animriot" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animcarry /animintshop /animjst /animkart /animkissing /animknife /animlapdan /animdend" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animmedic /animmtb /animmusc /animotb /animnevada /animpark /animsaw /animchoppa /animweap" );
	SendClientMessage( playerid, 0xFFFFFFAA, "• /animrobbank /animvending /renderse /fumar /bebado /mijar( /AnimLoop Liga/Desliga repetição automatica )" );
	SendClientMessage( playerid, 0xFF99FFAA, "•~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~• Animes Lista 3 •~~~~~~~~~~~~•~~~~~~~~~~~~•~~~~~~~~~~~~•" );
	return  1;
}

if( strcmp( cmdtext, "/animloop", true ) == 0 )
{
	if( Loop[ playerid ] == 0 )
	{
		SendClientMessage( playerid, 0xABCDEF01, "[ > ] Animes com repetição automatica atiavado." );
		Loop[ playerid ] = 1;
	}
	else if( Loop[ playerid ] == 1 )
	{
		SendClientMessage( playerid, 0xABCDEF01, "[ > ] Animes com repetição automatica desatiavado." );
		Loop[ playerid ] = 0;
	}
	return 1;
}

if( strcmp( "/renderse", cmdtext, true ) == 0 )
{
	SetPlayerSpecialAction( playerid,SPECIAL_ACTION_HANDSUP );
	return 1;
}
if( strcmp( "/fumar", cmdtext, true ) == 0 )
{
	SetPlayerSpecialAction( playerid,SPECIAL_ACTION_SMOKE_CIGGY );
	return 1;
}
if( strcmp( "/bebado", cmd, true ) == 0 )
{
	ApplyAnimation( playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1 );
	return 1;
}
if( strcmp( "/mijar", cmd, true ) == 0 )
{
	SetPlayerSpecialAction( playerid, 68 );
	return 1;
}

if( strcmp( cmd, "/animbar", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbar [ 1-12 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 12 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbar [ 1-12 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BAR","Barcustom_get",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BAR","Barcustom_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BAR","Barcustom_order",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BAR","Barserve_bottle",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BAR","Barserve_give",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BAR","Barserve_glass",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BAR","Barserve_in",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BAR","Barserve_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BAR","Barserve_order",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BAR","dnk_stndF_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BAR","dnk_stndM_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BAR","BARman_idle",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animball", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animball [ 1-11 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 11 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animball [ 1-11 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_4",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_block",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_Hit_1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_Hit_2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_Hit_3",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BASEBALL","Bat_M",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BASEBALL","BAT_PART",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfire", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfire [ 1-13 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 13 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfire [ 1-13 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Fire1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Fire2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Fire3",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_GF_Wave",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Panic_01",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Panic_02",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Panic_03",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Panic_04",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BD_FIRE","BD_Panic_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BD_FIRE","M_smklean_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BD_FIRE","M_smklean_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BD_FIRE","Playa_Kiss_03",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BD_FIRE","wash_up",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbeach", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbeach [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbeach [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BEACH","bather",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BEACH","Lay_Bac_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BEACH","BD_Fire3",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BEACH","ParkSit_W_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BEACH","SitnWait_loop_W",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animinf", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animinf [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animinf [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BF_injection","BF_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BF_injection","BF_getin_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BF_injection","BF_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BF_injection","BF_getout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbiked", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbiked [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbiked [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_drivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_drivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_passenger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_shuffle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbp", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbp [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbp [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"benchpress","gym_bp_celebrate",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"benchpress","gym_bp_down",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"benchpress","gym_bp_getoff",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"benchpress","gym_bp_geton",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"benchpress","gym_bp_up_A",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"benchpress","gym_bp_up_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"benchpress","gym_bp_up_smooth",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbh", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbh [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbh [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_drivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_drivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_passenger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animms", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animms [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animms [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_drivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_drivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BIKEH","BIKEh_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfood", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfood [ 1-33 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 33 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfood [ 1-33 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FOOD","EAT_Burger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FOOD","EAT_Chicken",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FOOD","EAT_Pizza",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FOOD","EAT_Vomit_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"FOOD","EAT_Vomit_SK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"FOOD","FF_Dam_Bkw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"FOOD","FF_Dam_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"FOOD","FF_Dam_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"FOOD","FF_Dam_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"FOOD","FF_Die_Bkw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"FOOD","FF_Die_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"FOOD","FF_Die_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"FOOD","FF_Die_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Eat1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Eat2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Eat3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_In_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_In_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Look",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Out_180",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Out_L_180",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"FOOD","FF_Sit_Out_R_180",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Thank",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 26 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 27 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_Lift",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 28 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_Lift_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 29 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_Lift_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 30 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_Lift_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 31 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 32 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_Pose",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 33 ) {
		ApplyAnimation( playerid,"FOOD","SHP_Tray_Return",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animms", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animms [ 1-41 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 41 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animms [ 1-41 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"MISC","bitchslap",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"MISC","BMX_celebrate",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"MISC","BMX_comeon",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"MISC","bmx_idleloop_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"MISC","bmx_idleloop_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"MISC","bmx_talkleft_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"MISC","bmx_talkleft_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"MISC","bmx_talkleft_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"MISC","bmx_talkright_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"MISC","bmx_talkright_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"MISC","bmx_talkright_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"MISC","bng_wndw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"MISC","bng_wndw_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"MISC","Case_pickup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"MISC","door_jet",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"MISC","GRAB_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"MISC","GRAB_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"MISC","Hiker_Pose",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"MISC","Hiker_Pose_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"MISC","Idle_Chat_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"MISC","KAT_Throw_K",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"MISC","KAT_Throw_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"MISC","KAT_Throw_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"MISC","PASS_Rifle_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"MISC","PASS_Rifle_Ped",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 26 ) {
		ApplyAnimation( playerid,"MISC","PASS_Rifle_Ply",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 27 ) {
		ApplyAnimation( playerid,"MISC","pickup_box",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 28 ) {
		ApplyAnimation( playerid,"MISC","Plane_door",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 29 ) {
		ApplyAnimation( playerid,"MISC","Plane_exit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 30 ) {
		ApplyAnimation( playerid,"MISC","Plane_hijack",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 31 ) {
		ApplyAnimation( playerid,"MISC","Plunger_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 32 ) {
		ApplyAnimation( playerid,"MISC","Plyrlean_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 33 ) {
		ApplyAnimation( playerid,"MISC","plyr_shkhead",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 34 ) {
		ApplyAnimation( playerid,"MISC","Run_Dive",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 35 ) {
		ApplyAnimation( playerid,"MISC","Scratchballs_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 36 ) {
		ApplyAnimation( playerid,"MISC","SEAT_LR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 37 ) {
		ApplyAnimation( playerid,"MISC","Seat_talk_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 38 ) {
		ApplyAnimation( playerid,"MISC","Seat_talk_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 39 ) {
		ApplyAnimation( playerid,"MISC","SEAT_watch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 40 ) {
		ApplyAnimation( playerid,"MISC","smalplane_door",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 41 ) {
		ApplyAnimation( playerid,"MISC","smlplane_door",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbikelp", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikelp [ 1-9 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 9 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikelp [ 1-9 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKELEAP","bk_blnce_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKELEAP","bk_blnce_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKELEAP","bk_jmp",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKELEAP","bk_rdy_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BIKELEAP","bk_rdy_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BIKELEAP","struggle_cesar",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BIKELEAP","struggle_driver",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BIKELEAP","truck_driver",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BIKELEAP","truck_getin",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbikes", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikes [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikes [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_Back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_drivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_drivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_passenger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"BIKES","BIKEs_Still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbikev", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikev [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikev [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_Back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_drivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_drivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_passenger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"BIKEV","BIKEv_Still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbmx", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbmx [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbmx [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BMX","BMX_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BMX","BMX_bunnyhop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BMX","BMX_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BMX","BMX_driveby_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BMX","BMX_driveby_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BMX","BMX_fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BMX","BMX_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BMX","BMX_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BMX","BMX_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BMX","BMX_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BMX","BMX_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BMX","BMX_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BMX","BMX_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"BMX","BMX_pedal",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"BMX","BMX_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"BMX","BMX_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"BMX","BMX_sprint",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"BMX","BMX_still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbikedbz", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikedbz [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbikedbz [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKE_DBZ","Pass_Driveby_BWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKE_DBZ","Pass_Driveby_FWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKE_DBZ","Pass_Driveby_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKE_DBZ","Pass_Driveby_RHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animchase", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animchase [ 1-25 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 25 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animchase [ 1-25 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"MD_CHASE","Carhit_Hangon",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"MD_CHASE","Carhit_Tumble",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"MD_CHASE","donutdrop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"MD_CHASE","Fen_Choppa_L1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"MD_CHASE","Fen_Choppa_L2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"MD_CHASE","Fen_Choppa_L3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"MD_CHASE","Fen_Choppa_R1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"MD_CHASE","Fen_Choppa_R2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"MD_CHASE","Fen_Choppa_R3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"MD_CHASE","Hangon_Stun_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"MD_CHASE","Hangon_Stun_Turn",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_2_HANG",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Jmp_BL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Jmp_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Lnd_BL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Lnd_Die_BL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Lnd_Die_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Lnd_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Lnd_Roll_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Punch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Punch_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_BIKE_Shot_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"MD_CHASE","MD_HANG_Loop",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbox", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbox [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbox [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BOX","boxhipin",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BOX","boxhipup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BOX","boxshdwn",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BOX","boxshup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BOX","bxhipwlk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BOX","bxhwlki",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BOX","bxshwlk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BOX","bxshwlki",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BOX","bxwlko",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BOX","catch_box",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbomber", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbomber [ 1-6 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 6 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbomber [ 1-6 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BOMBER","BOM_Plant",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BOMBER","BOM_Plant_2Idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BOMBER","BOM_Plant_Crouch_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BOMBER","BOM_Plant_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BOMBER","BOM_Plant_Loop",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbsp", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbsp [ 1-41 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 41 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbsp [ 1-41 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_def_jump_shot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_def_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_def_stepL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_def_stepR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk_Gli",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk_Gli_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk_Lnch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk_Lnch_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk_Lnd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_idle2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_idle2_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_idleloop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_idleloop_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_idle_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Jump_Cancel",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Jump_Cancel_0",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Jump_End",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Jump_Shot_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Net_Dnk_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_pickup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_pickup_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 26 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_react_miss",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 27 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_react_score",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 28 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_run",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 29 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_run_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 30 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_SkidStop_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 31 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_SkidStop_L_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 32 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_SkidStop_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 33 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_SkidStop_R_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 34 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_walk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 35 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_WalkStop_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 36 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_WalkStop_L_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 37 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_WalkStop_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 38 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_WalkStop_R_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 39 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_walk_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 40 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_walk_start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 41 ) {
		ApplyAnimation( playerid,"BSKTBALL","BBALL_walk_start_O",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcamera", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcamera [ 1-14 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 14 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcamera [ 1-14 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CAMERA","camcrch_cmon",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CAMERA","camcrch_idleloop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CAMERA","camcrch_stay",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CAMERA","camcrch_to_camstnd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CAMERA","camstnd_cmon",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CAMERA","camstnd_idleloop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CAMERA","camstnd_lkabt",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CAMERA","camstnd_to_camcrch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CAMERA","piccrch_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"CAMERA","piccrch_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"CAMERA","piccrch_take",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"CAMERA","picstnd_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"CAMERA","picstnd_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"CAMERA","picstnd_take",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animgym", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgym [ 1-24 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 24 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgym [ 1-24 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_celebrate",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_fast",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_faster",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_getoff",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_geton",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_pedal",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_bike_still",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_jog_falloff",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_shadowbox",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_celebrate",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_falloff",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_getoff",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_geton",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_jog",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_sprint",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_tired",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_tread_walk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"GYMNASIUM","gym_walk_falloff",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"GYMNASIUM","Pedals_fast",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"GYMNASIUM","Pedals_med",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"GYMNASIUM","Pedals_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"GYMNASIUM","Pedals_still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animpara", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpara [ 1-22 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 22 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpara [ 1-22 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"PARACHUTE","FALL_skyDive",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"PARACHUTE","FALL_SkyDive_Accel",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"PARACHUTE","FALL_skyDive_DIE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"PARACHUTE","FALL_SkyDive_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"PARACHUTE","FALL_SkyDive_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_decel",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_decel_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_float",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_float_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_Land",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_Land_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_Land_Water",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_Land_Water_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_open",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_open_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_Rip_Land_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_Rip_Loop_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_Rip_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_steerL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_steerL_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_steerR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"PARACHUTE","PARA_steerR_O",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animgangs", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgangs [ 1-22 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 22 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgangs [ 1-22 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"GANGS","DEALER_DEAL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"GANGS","DEALER_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"GANGS","drnkbr_prtl",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"GANGS","drnkbr_prtl_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"GANGS","DRUGS_BUY",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"GANGS","hndshkaa",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"GANGS","hndshkba",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"GANGS","hndshkca",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"GANGS","hndshkcb",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"GANGS","hndshkda",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"GANGS","hndshkea",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"GANGS","hndshkfa",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"GANGS","hndshkfa_swt",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"GANGS","Invite_No",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"GANGS","Invite_Yes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"GANGS","leanIDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"GANGS","leanIN",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"GANGS","leanOUT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkA",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkCt",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkF",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkG",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 26 ) {
		ApplyAnimation( playerid,"GANGS","prtial_gngtlkH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 27 ) {
		ApplyAnimation( playerid,"GANGS","prtial_hndshk_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 28 ) {
		ApplyAnimation( playerid,"GANGS","prtial_hndshk_biz_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 29 ) {
		ApplyAnimation( playerid,"GANGS","shake_cara",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 30 ) {
		ApplyAnimation( playerid,"GANGS","shake_carK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 31 ) {
		ApplyAnimation( playerid,"GANGS","shake_carSH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 32 ) {
		ApplyAnimation( playerid,"GANGS","smkcig_prtl",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 33 ) {
		ApplyAnimation( playerid,"GANGS","smkcig_prtl_F",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animlowrider", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animlowrider [ 1-39 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 39 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animlowrider [ 1-39 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"LOWRIDER","F_smklean_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_bdBPOe",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_hair",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_hurry",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_idleloop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_idle_to_l0",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l0_BPOe",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l0_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l12_to_l0",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l1_BPOe",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l1_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l1_to_l2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l2_BPOe",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l2_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l2_to_l3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l345_to_l1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l3_BPOe",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l3_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l3_to_l4",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l4_BPOe",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l4_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l4_to_l5",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l5_BPOe",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"LOWRIDER","lrgirl_l5_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 26 ) {
		ApplyAnimation( playerid,"LOWRIDER","M_smklean_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 27 ) {
		ApplyAnimation( playerid,"LOWRIDER","M_smkstnd_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 28 ) {
		ApplyAnimation( playerid,"LOWRIDER","prtial_gngtlkB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 29 ) {
		ApplyAnimation( playerid,"LOWRIDER","prtial_gngtlkC",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 30 ) {
		ApplyAnimation( playerid,"LOWRIDER","prtial_gngtlkD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 31 ) {
		ApplyAnimation( playerid,"LOWRIDER","prtial_gngtlkE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 32 ) {
		ApplyAnimation( playerid,"LOWRIDER","prtial_gngtlkF",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 33 ) {
		ApplyAnimation( playerid,"LOWRIDER","prtial_gngtlkG",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 34 ) {
		ApplyAnimation( playerid,"LOWRIDER","prtial_gngtlkH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 35 ) {
		ApplyAnimation( playerid,"LOWRIDER","RAP_A_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 36 ) {
		ApplyAnimation( playerid,"LOWRIDER","RAP_B_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 37 ) {
		ApplyAnimation( playerid,"LOWRIDER","RAP_C_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 38 ) {
		ApplyAnimation( playerid,"LOWRIDER","Sit_relaxed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 39 ) {
		ApplyAnimation( playerid,"LOWRIDER","Tap_hand",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animlookers", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animlookers [ 1-25 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 25 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animlookers [ 1-25 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","lkaround_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","lkaround_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","lkaround_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","lkup_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","lkup_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","lkup_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","lkup_point",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","panic_cower",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","panic_hide",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","panic_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","panic_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","panic_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","panic_point",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","panic_shout",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","Pointup_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","Pointup_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","Pointup_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","Pointup_shout",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","point_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","point_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","point_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","shout_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","shout_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","shout_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","shout_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 26 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","shout_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 27 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","wave_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 28 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","wave_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"ON_LOOKERS","wave_out",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcarchat", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcarchat [ 1-20 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 20 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcarchat [ 1-20 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CAR_CHAT","carfone_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CAR_CHAT","carfone_loopA",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CAR_CHAT","carfone_loopA_to_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CAR_CHAT","carfone_loopB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CAR_CHAT","carfone_loopB_to_A",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CAR_CHAT","carfone_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc1_BR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc1_FL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc1_FR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc2_FL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc3_BR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc3_FL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc3_FR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc4_BL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc4_BR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc4_FL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"CAR_CHAT","CAR_Sc4_FR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"CAR_CHAT","car_talkm_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"CAR_CHAT","car_talkm_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"CAR_CHAT","car_talkm_out",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcasino", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcasino [ 1-23 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 23 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcasino [ 1-23 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CASINO","cards_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CASINO","cards_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CASINO","cards_lose",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CASINO","cards_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CASINO","cards_pick_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CASINO","cards_pick_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CASINO","cards_raise",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CASINO","cards_win",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CASINO","manwinb",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"CASINO","manwind",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"CASINO","Roulette_bet",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"CASINO","Roulette_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"CASINO","Roulette_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"CASINO","Roulette_lose",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"CASINO","Roulette_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"CASINO","Roulette_win",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"CASINO","Slot_bet_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"CASINO","Slot_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"CASINO","Slot_lose_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"CASINO","Slot_Plyr",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"CASINO","Slot_wait",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"CASINO","Slot_win_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"CASINO","wof",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbuddy", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbuddy [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbuddy [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BUDDY","buddy_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BUDDY","buddy_crouchreload",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BUDDY","buddy_fire",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BUDDY","buddy_fire_poor",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BUDDY","buddy_reload",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbus", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbus [ 1-9 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 9 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbus [ 1-9 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BUS","BUS_close",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BUS","BUS_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BUS","BUS_getin_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BUS","BUS_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BUS","BUS_getout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BUS","BUS_jacked_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BUS","BUS_open",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BUS","BUS_open_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BUS","BUS_pullout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcar", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcar [ 1-11 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 11 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcar [ 1-11 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CAR","Fixn_Car_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CAR","Fixn_Car_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CAR","flag_drop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CAR","Sit_relaxed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CAR","Tap_hand",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CAR","Tyd2car_bump",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CAR","Tyd2car_high",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CAR","Tyd2car_low",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CAR","Tyd2car_med",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"CAR","Tyd2car_TurnL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"CAR","Tyd2car_TurnR",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcarry", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcarry [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcarry [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CARRY","crry_prtial",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CARRY","liftup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CARRY","liftup05",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CARRY","liftup105",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CARRY","putdwn",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CARRY","putdwn05",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CARRY","putdwn105",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animintshop", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animintshop [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animintshop [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_cashier",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_lookA",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_lookB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_pay",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"INT_SHOP","shop_shelf",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animjst", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animjst [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animjst [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"JST_BUISNESS","girl_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"JST_BUISNESS","girl_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"JST_BUISNESS","player_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"JST_BUISNESS","smoke_01",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animkart", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animkart [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animkart [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"KART","KART_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"KART","KART_getin_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"KART","KART_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"KART","KART_getout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animkissing", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animkissing [ 1-14 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 14 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animkissing [ 1-14 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"KISSING","BD_GF_Wave",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"KISSING","gfwave2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"KISSING","GF_CarArgue_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"KISSING","GF_CarArgue_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"KISSING","GF_CarSpot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"KISSING","GF_StreetArgue_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"KISSING","GF_StreetArgue_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"KISSING","gift_give",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"KISSING","Grlfrd_Kiss_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"KISSING","Grlfrd_Kiss_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"KISSING","Grlfrd_Kiss_03",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"KISSING","Playa_Kiss_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"KISSING","Playa_Kiss_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"KISSING","Playa_Kiss_03",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animknife", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animknife [ 1-14 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 14 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animknife [ 1-14 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"KNIFE","KILL_Knife_Ped_Damage",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"KNIFE","KILL_Knife_Player",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"KNIFE","KILL_Partial",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"KNIFE","knife_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"KNIFE","knife_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"KNIFE","knife_4",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"KNIFE","Knife_G",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"KNIFE","knife_hit_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"KNIFE","knife_hit_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"KNIFE","knife_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"KNIFE","knife_hit_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"KNIFE","knife_part",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"KNIFE","WEAPON_knifeidle",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animlapdan", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animlapdan [ 1-6 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 6 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animlapdan [ 1-6 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"LAPDAN1","LAPDAN_D",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"LAPDAN1","LAPDAN_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"LAPDAN2","LAPDAN_D",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"LAPDAN2","LAPDAN_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"LAPDAN3","LAPDAN_D",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"LAPDAN3","LAPDAN_P",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animdend", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdend [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdend [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"MD_END","END_SC1_PLY",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"MD_END","END_SC1_RYD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"MD_END","END_SC1_SMO",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"MD_END","END_SC1_SWE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"MD_END","END_SC2_PLY",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"MD_END","END_SC2_RYD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"MD_END","END_SC2_SMO",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"MD_END","END_SC2_SWE",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}

if( strcmp( cmd, "/animmedic", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animmedic [ 1 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 1 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animmedic [ 1 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"MEDIC","CPR",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animmtb", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animmtb [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animmtb [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"MTB","MTB_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"MTB","MTB_bunnyhop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"MTB","MTB_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"MTB","MTB_driveby_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"MTB","MTB_driveby_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"MTB","MTB_fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"MTB","MTB_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"MTB","MTB_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"MTB","MTB_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"MTB","MTB_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"MTB","MTB_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"MTB","MTB_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"MTB","MTB_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"MTB","MTB_pedal",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"MTB","MTB_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"MTB","MTB_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"MTB","MTB_sprint",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"MTB","MTB_still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animmusc", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animmusc [ 1-17 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 17 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animmusc [ 1-17 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"MUSCULAR","MscleWalkst_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"MUSCULAR","MscleWalkst_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"MUSCULAR","Mscle_rckt_run",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"MUSCULAR","Mscle_rckt_walkst",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"MUSCULAR","Mscle_run_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleIdle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleIdle_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleIdle_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleIdle_rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleRun",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleRun_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleSprint",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleWalk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleWalkstart",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"MUSCULAR","MuscleWalk_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"MUSCULAR","Musclewalk_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"MUSCULAR","Musclewalk_rocket",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animotb", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animotb [ 1-11 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 11 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animotb [ 1-11 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"OTB","betslp_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"OTB","betslp_lkabt",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"OTB","betslp_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"OTB","betslp_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"OTB","betslp_tnk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"OTB","wtchrace_cmon",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"OTB","wtchrace_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"OTB","wtchrace_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"OTB","wtchrace_lose",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"OTB","wtchrace_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"OTB","wtchrace_win",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animnevada", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animnevada [ 1-2 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 2 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animnevada [ 1-2 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"NEVADA","NEVADA_getin",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"NEVADA","NEVADA_getout",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animpark", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpark [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpark [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"PARK","Tai_Chi_in",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"PARK","Tai_Chi_Loop",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 3 ) {
			ApplyAnimation( playerid,"PARK","Tai_Chi_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animpaul", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpaul [ 1-12 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 12 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpaul [ 1-12 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"PAULNMAC","Piss_in",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"PAULNMAC","Piss_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"PAULNMAC","Piss_out",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"PAULNMAC","PnM_Argue1_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"PAULNMAC","PnM_Argue1_B",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"PAULNMAC","PnM_Argue2_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"PAULNMAC","PnM_Argue2_B",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"PAULNMAC","PnM_Loop_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"PAULNMAC","PnM_Loop_B",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"PAULNMAC","wank_in",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"PAULNMAC","wank_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"PAULNMAC","wank_out",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animsaw", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsaw [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 12 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsaw [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CHAINSAW","CSAW_1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CHAINSAW","CSAW_2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CHAINSAW","CSAW_3",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CHAINSAW","CSAW_G",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CHAINSAW","CSAW_Hit_1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CHAINSAW","CSAW_Hit_2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CHAINSAW","CSAW_Hit_3",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CHAINSAW","IDLE_csaw",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CHAINSAW","WEAPON_csaw",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"CHAINSAW","WEAPON_csawlo",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animchoppa", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animchoppa [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animchoppa [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_bunnyhop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_driveby_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_driveby_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_pedal",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_Pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_sprint",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"CHOPPA","CHOPPA_Still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}

if( strcmp( cmd, "/animclothes", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animclothes [ 1-13 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 13 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animclothes [ 1-13 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Buy",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_In",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Out",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Hat",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_In",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_In_O",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Legs",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Out",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Out_O",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Shoes",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Torso",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 13 ) {
		ApplyAnimation( playerid,"CLOTHES","CLO_Pose_Watch",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcoach", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcoach [ 1-6 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 6 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcoach [ 1-6 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"COACH","COACH_inL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"COACH","COACH_inR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"COACH","COACH_opnL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"COACH","COACH_opnR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"COACH","COACH_outL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"COACH","COACH_outR",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}

if( strcmp( cmd, "/animcolt", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcolt [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcolt [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"COLT45","2guns_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"COLT45","colt45_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"COLT45","colt45_crouchreload",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"COLT45","colt45_fire",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"COLT45","colt45_fire_2hands",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"COLT45","colt45_reload",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"COLT45","sawnoff_reload",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcopa", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcopa [ 1-12 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 12 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcopa[ 1-12 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Copbrowse_in",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Copbrowse_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Copbrowse_nod",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Copbrowse_out",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Copbrowse_shake",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Coplook_in",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Coplook_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Coplook_nod",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Coplook_out",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Coplook_shake",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Coplook_think",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"COP_AMBIENT","Coplook_watch",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcod", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcod [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcod [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"COP_DVBYZ","COP_Dvby_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"COP_DVBYZ","COP_Dvby_FT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"COP_DVBYZ","COP_Dvby_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"COP_DVBYZ","COP_Dvby_R",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcrack", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcrack[ 1-9 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 9 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcrack [ 1-9 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CRACK","Bbalbat_Idle_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CRACK","Bbalbat_Idle_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CRACK","crckdeth1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CRACK","crckdeth2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CRACK","crckdeth3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"CRACK","crckdeth4",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"CRACK","crckidle1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"CRACK","crckidle2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"CRACK","crckidle3",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animcrib", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcrib [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animcrib [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"CRIB","CRIB_Console_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"CRIB","CRIB_Use_Switch",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"CRIB","PED_Console_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"CRIB","PED_Console_Loose",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"CRIB","PED_Console_Win",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animjump", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animjump [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animjump [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"DAM_JUMP","DAM_Dive_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"DAM_JUMP","DAM_Land",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"DAM_JUMP","DAM_Launch",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"DAM_JUMP","Jump_Roll",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"DAM_JUMP","SF_JumpWall",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animdance", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdance [ 1-13 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 13 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdance [ 1-13 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"DANCING","bd_clap",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"DANCING","bd_clap1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"DANCING","dance_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"DANCING","DAN_Down_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"DANCING","DAN_Left_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"DANCING","DAN_Loop_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"DANCING","DAN_Right_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"DANCING","DAN_Up_A",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"DANCING","dnce_M_a",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"DANCING","dnce_M_b",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"DANCING","dnce_M_c",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"DANCING","dnce_M_d",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 13 ) {
		ApplyAnimation( playerid,"DANCING","dnce_M_e",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animdealer", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdealer [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdealer [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"DEALER","DEALER_DEAL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"DEALER","DEALER_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"DEALER","DEALER_IDLE_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"DEALER","DEALER_IDLE_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"DEALER","DEALER_IDLE_03",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"DEALER","DRUGS_BUY",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"DEALER","shop_pay",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animdildo", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdildo [ 1-9 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 9 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdildo [ 1-9 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_block",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_G",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_Hit_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_Hit_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_Hit_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"DILDO","DILDO_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animdodge", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdodge [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdodge [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"DODGE","Cover_Dive_01",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"DODGE","Cover_Dive_02",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"DODGE","Crushed",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"DODGE","Crush_Jump",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animdozer", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdozer [ 1-9 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 9 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdozer [ 1-9 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_Align_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_Align_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_getin_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_getout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_Jacked_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_Jacked_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"DOZER","DOZER_pullout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animdrivebys", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdrivebys [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animdrivebys [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyLHS_Bwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyLHS_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyRHS_Bwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyRHS_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyTop_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"DRIVEBYS","Gang_DrivebyTop_RHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfat", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfat [ 1-17 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 17 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfat [ 1-17 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FAT","FatIdle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"FAT","FatIdle_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FAT","FatIdle_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FAT","FatIdle_Rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FAT","FatRun",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"FAT","FatRun_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"FAT","FatRun_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"FAT","FatRun_Rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"FAT","FatSprint",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"FAT","FatWalk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"FAT","FatWalkstart",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"FAT","FatWalkstart_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"FAT","FatWalkSt_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"FAT","FatWalkSt_Rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"FAT","FatWalk_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"FAT","FatWalk_Csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"FAT","FatWalk_Rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"FAT","IDLE_tired",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfightb", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfightb [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfightb [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FIGHT_B","FightB_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FIGHT_B","FightB_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FIGHT_B","FightB_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FIGHT_B","FightB_block",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"FIGHT_B","FightB_G",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"FIGHT_B","FightB_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"FIGHT_B","FightB_M",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"FIGHT_B","HitB_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"FIGHT_B","HitB_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"FIGHT_B","HitB_3",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfightc", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfightc [ 1-12 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 12 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfightc [ 1-12 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_3",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_block",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_blocking",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_G",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_M",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"FIGHT_C","FightC_Spar",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"FIGHT_C","HitC_1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"FIGHT_C","HitC_2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"FIGHT_C","HitC_3",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfightd", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfightd [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfightd [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FIGHT_D","FightD_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FIGHT_D","FightD_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FIGHT_D","FightD_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FIGHT_D","FightD_block",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"FIGHT_D","FightD_G",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"FIGHT_D","FightD_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"FIGHT_D","FightD_M",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"FIGHT_D","HitD_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"FIGHT_D","HitD_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"FIGHT_D","HitD_3",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}

if( strcmp( cmd, "/animfighte", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfighte [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfighte [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FIGHT_E","FightKick",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FIGHT_E","FightKick_B",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FIGHT_E","Hit_fightkick",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FIGHT_E","Hit_fightkick_B",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfinale", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfinale [ 1-15 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 15 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfinale [ 1-15 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Climb_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Cop1_ClimbOut2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Cop1_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Cop1_Stomp",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Hang_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Hang_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Hang_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Hang_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Jump_On",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Land_Car",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Land_Die",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"FINALE","FIN_LegsUp",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"FINALE","FIN_LegsUp_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"FINALE","FIN_LegsUp_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"FINALE","FIN_LegsUp_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"FINALE","FIN_Let_Go",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfinale2", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfinale2 [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfinale2 [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Cop1_ClimbOut",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Cop1_Fall",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Cop1_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Cop1_Shot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Cop1_Swing",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Cop2_ClimbOut",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Switch_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"FINALE2","FIN_Switch_S",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animflamef", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animflamef [ 1-1 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 1 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animflamef [ 1-1 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"FLAME","FLAME_fire",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animflowers", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animflowers [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animflowers [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"Flowers","Flower_attack",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"Flowers","Flower_attack_M",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 3 ) {
			ApplyAnimation( playerid,"Flowers","Flower_Hit",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animghands", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animghands [ 1-20 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 20 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animghands [ 1-20 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"GHANDS","gsign1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"GHANDS","gsign1LH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"GHANDS","gsign2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"GHANDS","gsign2LH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"GHANDS","gsign3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"GHANDS","gsign3LH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"GHANDS","gsign4",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"GHANDS","gsign4LH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"GHANDS","gsign5",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"GHANDS","gsign5LH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"GHANDS","LHGsign1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"GHANDS","LHGsign2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"GHANDS","LHGsign3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"GHANDS","LHGsign4",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"GHANDS","LHGsign5",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"GHANDS","RHGsign1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"GHANDS","RHGsign2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"GHANDS","RHGsign3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"GHANDS","RHGsign4",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"GHANDS","RHGsign5",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animfw", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfw [ 1-9 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 9 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animfw [ 1-9 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"Freeweights","gym_barbell",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_A",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_celebrate",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_down",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_pickup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_putdown",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"Freeweights","gym_free_up_smooth",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animghetto", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animghetto [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animghetto [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"GHETTO_DB","GDB_Car2_PLY",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"GHETTO_DB","GDB_Car2_SMO",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"GHETTO_DB","GDB_Car2_SWE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"GHETTO_DB","GDB_Car_PLY",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"GHETTO_DB","GDB_Car_RYD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"GHETTO_DB","GDB_Car_SMO",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"GHETTO_DB","GDB_Car_SWE",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animgog", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgog [ 1-1 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 1 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgog [ 1-1 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"goggles","goggles_put_on",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animgraffity", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgraffity [ 1-2 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 2 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgraffity [ 1-2 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"GRAFFITI","graffiti_Chkout",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"GRAFFITI","spraycan_fire",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animgreya", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgreya [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgreya [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"GRAVEYARD","mrnF_loop",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"GRAVEYARD","mrnM_loop",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 3 ) {
			ApplyAnimation( playerid,"GRAVEYARD","prst_loopa",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animgren", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgren [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animgren [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"GRENADE","WEAPON_start_throw",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"GRENADE","WEAPON_throw",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 3 ) {
			ApplyAnimation( playerid,"GRENADE","WEAPON_throwu",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animhaircut", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animhaircut [ 1-13 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 13 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animhaircut [ 1-13 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Beard_01",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Buy",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Cut",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Cut_In",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Cut_Out",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Hair_01",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Hair_02",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_In",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Out",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Sit_In",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Sit_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 13 ) {
		ApplyAnimation( playerid,"HAIRCUTS","BRB_Sit_Out",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animheist", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animheist [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animheist [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"HEIST9","CAS_G2_GasKO",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllpk_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllpk_L_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllpk_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllpk_R_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllshoot_in_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllshoot_in_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllshoot_out_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"HEIST9","swt_wllshoot_out_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"HEIST9","Use_SwipeCard",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animinthouse", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animinthouse [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animinthouse [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"INT_HOUSE","BED_In_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"INT_HOUSE","BED_In_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"INT_HOUSE","BED_Loop_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"INT_HOUSE","BED_Loop_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"INT_HOUSE","BED_Out_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"INT_HOUSE","BED_Out_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"INT_HOUSE","LOU_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"INT_HOUSE","LOU_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"INT_HOUSE","LOU_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"INT_HOUSE","wash_up",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animintoffice", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animintoffice [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animintoffice [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"INT_OFFICE","FF_Dam_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_2Idle_180",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_Bored_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_Crash",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_Drink",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_Idle_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_Read",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"INT_OFFICE","OFF_Sit_Watch",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animplayerdbf", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animplayerdbf [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animplayerdbf [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"PLAYER_DVBYS","Plyr_DrivebyBwd",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"PLAYER_DVBYS","Plyr_DrivebyFwd",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"PLAYER_DVBYS","Plyr_DrivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"PLAYER_DVBYS","Plyr_DrivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animplayidles", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animplayidles [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animplayidles [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"PLAYIDLES","shift",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"PLAYIDLES","shldr",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"PLAYIDLES","stretch",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"PLAYIDLES","strleg",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"PLAYIDLES","time",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animpolice", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpolice [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpolice [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"POLICE","CopTraf_Away",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"POLICE","CopTraf_Come",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"POLICE","CopTraf_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"POLICE","CopTraf_Stop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"POLICE","COP_getoutcar_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"POLICE","Cop_move_FWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"POLICE","crm_drgbst_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"POLICE","Door_Kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"POLICE","plc_drgbst_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"POLICE","plc_drgbst_02",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animpool", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpool [ 1-21 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 21 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpool [ 1-21 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"POOL","POOL_ChalkCue",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"POOL","POOL_Idle_Stance",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"POOL","POOL_Long_Shot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"POOL","POOL_Long_Shot_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"POOL","POOL_Long_Start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"POOL","POOL_Long_Start_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"POOL","POOL_Med_Shot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"POOL","POOL_Med_Shot_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"POOL","POOL_Med_Start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"POOL","POOL_Med_Start_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"POOL","POOL_Place_White",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"POOL","POOL_Short_Shot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"POOL","POOL_Short_Shot_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"POOL","POOL_Short_Start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"POOL","POOL_Short_Start_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"POOL","POOL_Walk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"POOL","POOL_Walk_Start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"POOL","POOL_XLong_Shot",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"POOL","POOL_XLong_Shot_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"POOL","POOL_XLong_Start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"POOL","POOL_XLong_Start_O",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animpoor", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpoor [ 1-2 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 2 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpoor [ 1-2 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"POOR","WINWASH_Start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"POOR","WINWASH_Wash2Beg",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animpython", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpython [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animpython [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"PYTHON","python_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"PYTHON","python_crouchreload",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"PYTHON","python_fire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"PYTHON","python_fire_poor",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"PYTHON","python_reload",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animquad", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animquad [ 1-17 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 17 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animquad [ 1-17 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_driveby_FT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_driveby_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_driveby_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_FWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_getoff_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_getoff_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_getoff_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_geton_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_geton_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_passenger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_reverse",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"QUAD","QUAD_Right",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animquadbz", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animquadbz [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animquadbz [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"QUAD_DBZ","Pass_Driveby_BWD",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"QUAD_DBZ","Pass_Driveby_FWD",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"QUAD_DBZ","Pass_Driveby_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"QUAD_DBZ","Pass_Driveby_RHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animrapping", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrapping [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrapping [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"RAPPING","Laugh_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"RAPPING","RAP_A_IN",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"RAPPING","RAP_A_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"RAPPING","RAP_A_OUT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"RAPPING","RAP_B_IN",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"RAPPING","RAP_B_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"RAPPING","RAP_B_OUT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"RAPPING","RAP_C_Loop",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animrifle", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrifle [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrifle [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"RIFLE","RIFLE_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"RIFLE","RIFLE_crouchload",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"RIFLE","RIFLE_fire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"RIFLE","RIFLE_fire_poor",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"RIFLE","RIFLE_load",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animriot", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animriot [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animriot [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"RIOT","RIOT_ANGRY",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"RIOT","RIOT_ANGRY_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"RIOT","RIOT_challenge",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"RIOT","RIOT_CHANT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"RIOT","RIOT_FUKU",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"RIOT","RIOT_PUNCHES",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"RIOT","RIOT_shout",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animrobbank", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrobbank [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrobbank [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"ROB_BANK","CAT_Safe_End",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"ROB_BANK","CAT_Safe_Open",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"ROB_BANK","CAT_Safe_Open_O",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"ROB_BANK","CAT_Safe_Rob",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"ROB_BANK","SHP_HandsUp_Scr",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animrocket", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrocket [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrocket [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"ROCKET","idle_rocket",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"ROCKET","RocketFire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"ROCKET","run_rocket",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"ROCKET","walk_rocket",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"ROCKET","WALK_start_rocket",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animrustler", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrustler [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animrustler [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"RUSTLER","Plane_align_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"RUSTLER","Plane_close",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"RUSTLER","Plane_getin",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"RUSTLER","Plane_getout",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"RUSTLER","Plane_open",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbiked", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbiked [ 1-18 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbiked [ 1-18 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_drivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_drivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_passenger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_shuffle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"BIKED","BIKEd_Still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animryder", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animryder [ 1-14 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 14 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animryder [ 1-14 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"RYDER","RYD_Beckon_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"RYDER","RYD_Beckon_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"RYDER","RYD_Beckon_03",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"RYDER","RYD_Die_PT1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"RYDER","RYD_Die_PT2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"RYDER","Van_Crate_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"RYDER","Van_Crate_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"RYDER","Van_Fall_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"RYDER","Van_Fall_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"RYDER","Van_Lean_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"RYDER","Van_Lean_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"RYDER","VAN_PickUp_S",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"RYDER","Van_Stand",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"RYDER","Van_Stand_Crate",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"RYDER","Van_Throw",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animscrat", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animscrat [ 1-12 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 12 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animscrat [ 1-12 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SCRATCHING","scdldlp",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SCRATCHING","scdlulp",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SCRATCHING","scdrdlp",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SCRATCHING","scdrulp",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"SCRATCHING","sclng_l",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"SCRATCHING","sclng_r",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"SCRATCHING","scmid_l",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"SCRATCHING","scmid_r",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"SCRATCHING","scshrtl",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"SCRATCHING","scshrtr",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"SCRATCHING","sc_ltor",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"SCRATCHING","sc_rtol",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animshamal", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animshamal [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animshamal [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SHAMAL","SHAMAL_align",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SHAMAL","SHAMAL_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SHAMAL","SHAMAL_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SHAMAL","SHAMAL_open",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animshop", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animshop [ 1-24 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 24 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animshop [ 1-24 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SHOP","ROB_2Idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SHOP","ROB_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SHOP","donutdrop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SHOP","ROB_Loop_Threat",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"SHOP","ROB_Shifty",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"SHOP","ROB_StickUp_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Duck_Fire",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Gun_Aim",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Gun_Duck",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Gun_Fire",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Gun_Grab",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Gun_Threat",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"SHOP","SHP_HandsUp_Scr",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Jump_Glide",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Jump_Land",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Jump_Launch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Rob_GiveCash",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Rob_HandsUp",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Rob_React",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Serve_End",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Serve_Idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Serve_Loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"SHOP","SHP_Serve_Start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"SHOP","Smoke_RYD",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animshotgun", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animshotgun [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animshotgun [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"SHOTGUN","shotgun_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"SHOTGUN","shotgun_fire",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 3 ) {
			ApplyAnimation( playerid,"SHOTGUN","shotgun_fire_poor",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animskate", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animskate [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animskate [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"SKATE","skate_idle",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"SKATE","skate_run",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 3 ) {
			ApplyAnimation( playerid,"SKATE","skate_sprint",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animvortex", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animvortex [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animvortex [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"VORTEX","CAR_jumpin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"VORTEX","CAR_jumpin_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"VORTEX","vortex_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"VORTEX","vortex_getout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animtec", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtec [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtec [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"TEC","TEC_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"TEC","TEC_crouchreload",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"TEC","TEC_fire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"TEC","TEC_reload",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animtrain", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtrain [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtrain [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"TRAIN","tran_gtup",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"TRAIN","tran_hng",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"TRAIN","tran_ouch",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"TRAIN","tran_stmb",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animsil", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsil [ 1-4 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 4 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsil [ 1-4 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SILENCED","CrouchReload",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SILENCED","SilenceCrouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SILENCED","Silence_fire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SILENCED","Silence_reload",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animtattoo", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtattoo [ 1-56 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 56 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtattoo [ 1-56 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_In_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_In_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_In_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_Out_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"TATTOOS","TA_ArmL_Out_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_Out_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_Pose_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_Pose_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmL_Pose_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_In_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_In_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_In_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_Out_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_Out_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_Out_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_Pose_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_Pose_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_ArmR_Pose_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_In_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_In_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 21 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_In_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 22 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Out_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 23 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Out_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 24 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Out_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 25 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Pose_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 26 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Pose_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 27 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Pose_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 28 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Sit_In_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 29 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Sit_Loop_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 30 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Back_Sit_Out_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 31 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Bel_In_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 32 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Bel_In_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 33 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Bel_Out_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 34 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Bel_Out_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 35 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Bel_Pose_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 36 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Bel_Pose_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 37 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_In_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 38 ) {
		ApplyAnimation( playerid,"TATTOOS","Sit_relaxed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 39 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_In_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 40 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_In_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 41 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_Out_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 41 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_Out_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 42 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_Out_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 43 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_Pose_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 44 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_Pose_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 45 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Che_Pose_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 46 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Idle_Loop_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 47 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Idle_Loop_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 48 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_In_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 49 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_In_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 50 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_In_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 51 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_Loop_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 52 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_Loop_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 53 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_Loop_T",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 54 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_Out_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 55 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_Out_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 56 ) {
		ApplyAnimation( playerid,"TATTOOS","TAT_Sit_Out_T",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animsmoking", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsmoking [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsmoking [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SMOKING","F_smklean_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SMOKING","M_smklean_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SMOKING","M_smkstnd_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SMOKING","M_smk_drag",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"SMOKING","M_smk_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"SMOKING","M_smk_loop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"SMOKING","M_smk_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"SMOKING","M_smk_tap",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animsniper", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsniper [ 1-1 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 1 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsniper [ 1-1 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SNIPER","WEAPON_sniper",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animspray", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animspray [ 1-2 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 2 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animspray [ 1-2 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"SPRAYCAN","spraycan_fire",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"SPRAYCAN","spraycan_full",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animstrip", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animstrip [ 1-20 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 20 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animstrip [ 1-20 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"STRIP","PLY_CASH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"STRIP","PUN_CASH",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"STRIP","PUN_HOLLER",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"STRIP","PUN_LOOP",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"STRIP","strip_A",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"STRIP","strip_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"STRIP","strip_C",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"STRIP","strip_D",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"STRIP","strip_E",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"STRIP","strip_F",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"STRIP","strip_G",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"STRIP","STR_A2B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"STRIP","STR_B2A",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"STRIP","STR_B2C",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"STRIP","STR_C1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"STRIP","STR_C2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"STRIP","STR_C2B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 18 ) {
		ApplyAnimation( playerid,"STRIP","STR_Loop_A",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 19 ) {
		ApplyAnimation( playerid,"STRIP","STR_Loop_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 20 ) {
		ApplyAnimation( playerid,"STRIP","STR_Loop_C",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animbath", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbath [ 1-17 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 18 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animbath [ 1-17 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SUNBATHE","batherdown",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"SUNBATHE","batherup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SUNBATHE","Lay_Bac_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SUNBATHE","Lay_Bac_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_M_IdleA",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_M_IdleB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_M_IdleC",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_M_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_M_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_W_idleA",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_W_idleB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_W_idleC",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_W_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"SUNBATHE","ParkSit_W_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"SUNBATHE","SBATHE_F_LieB2Sit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"SUNBATHE","SBATHE_F_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"SUNBATHE","SitnWait_in_W",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"SUNBATHE","SitnWait_out_W",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animsweet", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsweet [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsweet [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SWEET","ho_ass_slapped",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SWEET","LaFin_Player",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SWEET","LaFin_Sweet",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SWEET","plyr_hndshldr_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"SWEET","sweet_ass_slap",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"SWEET","sweet_hndshldr_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"SWEET","Sweet_injuredloop",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animswim", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animswim [ 1-7 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 7 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animswim [ 1-7 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SWIM","Swim_Breast",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SWIM","SWIM_crawl",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SWIM","Swim_Dive_Under",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SWIM","Swim_Glide",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"SWIM","Swim_jumpout",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"SWIM","Swim_Tread",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"SWIM","Swim_Under",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animsword", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsword [ 1-10 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 10 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animsword [ 1-10 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"SWORD","sword_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"SWORD","sword_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"SWORD","sword_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"SWORD","sword_4",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"SWORD","sword_block",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"SWORD","Sword_Hit_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"SWORD","Sword_Hit_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"SWORD","Sword_Hit_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"SWORD","sword_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"SWORD","sword_part",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animtank", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtank [ 1-6 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 6 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtank [ 1-6 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"TANK","TANK_align_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"TANK","TANK_close_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"TANK","TANK_doorlocked",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"TANK","TANK_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"TANK","TANK_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"TANK","TANK_open_LHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animtruck", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtruck [ 1-17 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 17 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animtruck [ 1-17 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_ALIGN_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_ALIGN_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_closedoor_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_closedoor_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_close_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_close_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_getin_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_getout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_jackedLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_jackedRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_open_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_open_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_pullout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_pullout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"TRUCK","TRUCK_Shuffle",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animuzi", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animuzi [ 1-5 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 5 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animuzi [ 1-5 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"UZI","UZI_crouchfire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"UZI","UZI_crouchreload",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"UZI","UZI_fire",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"UZI","UZI_fire_poor",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"UZI","UZI_reload",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animvan", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animvan [ 1-8 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 8 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animvan [ 1-8 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"VAN","VAN_close_back_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"VAN","VAN_close_back_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"VAN","VAN_getin_Back_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"VAN","VAN_getin_Back_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"VAN","VAN_getout_back_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"VAN","VAN_getout_back_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"VAN","VAN_open_back_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"VAN","VAN_open_back_RHS",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animvending", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animvending [ 1-6 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 6 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animvending [ 1-6 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"VENDING","VEND_Drink2_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"VENDING","VEND_Drink_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"VENDING","vend_eat1_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"VENDING","VEND_Eat_P",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"VENDING","VEND_Use",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"VENDING","VEND_Use_pt2",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animway", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animway [ 1-17 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 17 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animway [ 1-17 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_Back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 1 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_drivebyFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_drivebyLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_drivebyRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_Fwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_getoffBACK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_getoffLHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_getoffRHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_jumponL",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_jumponR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_kick",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_passenger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_pushes",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_Ride",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"WAYFARER","WF_Still",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animweap", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animweap [ 1-17 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 17 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animweap [ 1-17 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_1H_Lift",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 2 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_1H_Lift_End",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 3 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_1H_Ret",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 4 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_1H_Ret_S",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 5 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_2H_Lift",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 6 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_2H_Lift_End",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 7 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_2H_Ret",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 8 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_2H_Ret_S",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 9 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_Ar_Lift",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 10 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_Ar_Lift_End",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 11 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_Ar_Ret",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 12 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_Ar_Ret_S",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 13 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_G_Lift_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 14 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_G_Lift_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 15 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_Tray_In",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 16 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_Tray_Out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 17 ) {
		ApplyAnimation( playerid,"WEAPONS","SHP_Tray_Pose",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animwuzi", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animwuzi [ 1-12 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 12 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animwuzi [ 1-12 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"WUZI","CS_Dead_Guy",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"WUZI","CS_Plyr_pt1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"WUZI","CS_Plyr_pt2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"WUZI","CS_Wuzi_pt1",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"WUZI","CS_Wuzi_pt2",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"WUZI","Walkstart_Idle_01",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"WUZI","Wuzi_follow",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"WUZI","Wuzi_Greet_Plyr",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"WUZI","Wuzi_Greet_Wuzi",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"WUZI","Wuzi_grnd_chk",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"WUZI","Wuzi_stand_loop",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"WUZI","Wuzi_Walk",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/animat", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animat [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animat [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"Attractors","Stepsit_in",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 2 ) {
			ApplyAnimation( playerid,"Attractors","Stepsit_loop",4.1,Loop[ playerid ],1,1,1,1 );
			} else if( animeID == 3 ) {
			ApplyAnimation( playerid,"Attractors","Stepsit_out",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animairport", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animairport [ 1 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 1 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animairport [ 1 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			ApplyAnimation( playerid,"AIRPORT","thrw_barl_thrw",4.1,Loop[ playerid ],1,1,1,1 );
		}
		return 1;
	}
}
if( strcmp( cmd, "/animped", true ) == 0 ) {
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp )) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animped [ 1-295 ]" );
		return 1;
	}
	animeID = strval( tmp );
	if( animeID < 1 || animeID > 295 ) {
		SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /animped [ 1-295 ]" );
		return 1;
	}
	if( animeID == 1 ) {
		ApplyAnimation( playerid,"PED","IDLE_CHAT",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 2 ) {
		ApplyAnimation( playerid,"PED","WALK_DRUNK",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 3 ) {
		ApplyAnimation( playerid,"PED","abseil",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 4 ) {
		ApplyAnimation( playerid,"PED","ARRESTgun",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 5 ) {
		ApplyAnimation( playerid,"PED","ATM",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 6 ) {
		ApplyAnimation( playerid,"PED","BIKE_elbowL",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 7 ) {
		ApplyAnimation( playerid,"PED","BIKE_fallR",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 8 ) {
		ApplyAnimation( playerid,"PED","BIKE_fall_off",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 9 ) {
		ApplyAnimation( playerid,"PED","BIKE_pickupL",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 10 ) {
		ApplyAnimation( playerid,"PED","BIKE_pickupR",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 11 ) {
		ApplyAnimation( playerid,"PED","BIKE_pullupL",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 12 ) {
		ApplyAnimation( playerid,"PED","BIKE_pullupR",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 13 ) {
		ApplyAnimation( playerid,"PED","bomber",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 14 ) {
		ApplyAnimation( playerid,"PED","CAR_alignHI_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 15 ) {
		ApplyAnimation( playerid,"PED","CAR_alignHI_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 16 ) {
		ApplyAnimation( playerid,"PED","CAR_align_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 17 ) {
		ApplyAnimation( playerid,"PED","CAR_align_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 18 ) {
		ApplyAnimation( playerid,"PED","CAR_closedoorL_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 19 ) {
		ApplyAnimation( playerid,"PED","CAR_closedoorL_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 20 ) {
		ApplyAnimation( playerid,"PED","CAR_closedoor_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 21 ) {
		ApplyAnimation( playerid,"PED","CAR_closedoor_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 22 ) {
		ApplyAnimation( playerid,"PED","CAR_close_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 23 ) {
		ApplyAnimation( playerid,"PED","CAR_crawloutRHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 24 ) {
		ApplyAnimation( playerid,"PED","CAR_dead_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 25 ) {
		ApplyAnimation( playerid,"PED","CAR_dead_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 26 ) {
		ApplyAnimation( playerid,"PED","CAR_doorlocked_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 27 ) {
		ApplyAnimation( playerid,"PED","CAR_fallout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 28 ) {
		ApplyAnimation( playerid,"PED","CAR_fallout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 29 ) {
		ApplyAnimation( playerid,"PED","CAR_getinL_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 30 ) {
		ApplyAnimation( playerid,"PED","CAR_getinL_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 31 ) {
		ApplyAnimation( playerid,"PED","CAR_getin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 32 ) {
		ApplyAnimation( playerid,"PED","CAR_getin_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 33 ) {
		ApplyAnimation( playerid,"PED","CAR_getoutL_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 34 ) {
		ApplyAnimation( playerid,"PED","CAR_getout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 35 ) {
		ApplyAnimation( playerid,"PED","CAR_getout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 36 ) {
		ApplyAnimation( playerid,"PED","car_hookertalk",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 37 ) {
		ApplyAnimation( playerid,"PED","CAR_jackedLHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 38 ) {
		ApplyAnimation( playerid,"PED","CAR_jackedRHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 39 ) {
		ApplyAnimation( playerid,"PED","CAR_jumpin_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 40 ) {
		ApplyAnimation( playerid,"PED","CAR_LB",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 41 ) {
		ApplyAnimation( playerid,"PED","CAR_LB_pro",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 42 ) {
		ApplyAnimation( playerid,"PED","CAR_LB_weak",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 43 ) {
		ApplyAnimation( playerid,"PED","CAR_LjackedLHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 44 ) {
		ApplyAnimation( playerid,"PED","CAR_Lshuffle_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 45 ) {
		ApplyAnimation( playerid,"PED","CAR_Lsit",4.1,Loop[ playerid ],1,1,1,1 );
		} else if( animeID == 46 ) {
		ApplyAnimation( playerid,"PED","CAR_open_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 47 ) {
		ApplyAnimation( playerid,"PED","CAR_open_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 49 ) {
		ApplyAnimation( playerid,"PED","CAR_pulloutL_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 50 ) {
		ApplyAnimation( playerid,"PED","CAR_pulloutL_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 51 ) {
		ApplyAnimation( playerid,"PED","CAR_pullout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 52 ) {
		ApplyAnimation( playerid,"PED","CAR_pullout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 53 ) {
		ApplyAnimation( playerid,"PED","CAR_Qjacked",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 54 ) {
		ApplyAnimation( playerid,"PED","CAR_rolldoor",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 55 ) {
		ApplyAnimation( playerid,"PED","CAR_rolldoorLO",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 56 ) {
		ApplyAnimation( playerid,"PED","CAR_rollout_LHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 57 ) {
		ApplyAnimation( playerid,"PED","CAR_rollout_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 58 ) {
		ApplyAnimation( playerid,"PED","CAR_shuffle_RHS",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 59 ) {
		ApplyAnimation( playerid,"PED","CAR_sit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 60 ) {
		ApplyAnimation( playerid,"PED","CAR_sitp",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 61 ) {
		ApplyAnimation( playerid,"PED","CAR_sitpLO",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 62 ) {
		ApplyAnimation( playerid,"PED","CAR_sit_pro",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 63 ) {
		ApplyAnimation( playerid,"PED","CAR_sit_weak",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 64 ) {
		ApplyAnimation( playerid,"PED","CAR_tune_radio",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 65 ) {
		ApplyAnimation( playerid,"PED","CLIMB_idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 66 ) {
		ApplyAnimation( playerid,"PED","CLIMB_jump",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 67 ) {
		ApplyAnimation( playerid,"PED","CLIMB_jump2fall",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 68 ) {
		ApplyAnimation( playerid,"PED","CLIMB_jump_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 69 ) {
		ApplyAnimation( playerid,"PED","CLIMB_Pull",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 70 ) {
		ApplyAnimation( playerid,"PED","CLIMB_Stand",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 71 ) {
		ApplyAnimation( playerid,"PED","CLIMB_Stand_finish",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 72 ) {
		ApplyAnimation( playerid,"PED","cower",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 73 ) {
		ApplyAnimation( playerid,"PED","Crouch_Roll_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 74 ) {
		ApplyAnimation( playerid,"PED","Crouch_Roll_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 75 ) {
		ApplyAnimation( playerid,"PED","DAM_armL_frmBK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 76 ) {
		ApplyAnimation( playerid,"PED","DAM_armL_frmFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 77 ) {
		ApplyAnimation( playerid,"PED","DAM_armL_frmLT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 78 ) {
		ApplyAnimation( playerid,"PED","DAM_armR_frmBK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 79 ) {
		ApplyAnimation( playerid,"PED","DAM_armR_frmFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 80 ) {
		ApplyAnimation( playerid,"PED","DAM_armR_frmRT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 81 ) {
		ApplyAnimation( playerid,"PED","DAM_LegL_frmBK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 82 ) {
		ApplyAnimation( playerid,"PED","DAM_LegL_frmFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 83 ) {
		ApplyAnimation( playerid,"PED","DAM_LegL_frmLT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 84 ) {
		ApplyAnimation( playerid,"PED","DAM_LegR_frmBK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 85 ) {
		ApplyAnimation( playerid,"PED","DAM_LegR_frmFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 86 ) {
		ApplyAnimation( playerid,"PED","DAM_LegR_frmRT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 87 ) {
		ApplyAnimation( playerid,"PED","DAM_stomach_frmBK",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 88 ) {
		ApplyAnimation( playerid,"PED","DAM_stomach_frmFT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 89 ) {
		ApplyAnimation( playerid,"PED","DAM_stomach_frmLT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 90 ) {
		ApplyAnimation( playerid,"PED","DAM_stomach_frmRT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 91 ) {
		ApplyAnimation( playerid,"PED","DOOR_LHinge_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 92 ) {
		ApplyAnimation( playerid,"PED","DOOR_RHinge_O",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 93 ) {
		ApplyAnimation( playerid,"PED","DrivebyL_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 94 ) {
		ApplyAnimation( playerid,"PED","DrivebyL_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 95 ) {
		ApplyAnimation( playerid,"PED","Driveby_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 96 ) {
		ApplyAnimation( playerid,"PED","Driveby_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 97 ) {
		ApplyAnimation( playerid,"PED","DRIVE_BOAT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 98 ) {
		ApplyAnimation( playerid,"PED","DRIVE_BOAT_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 99 ) {
		ApplyAnimation( playerid,"PED","DRIVE_BOAT_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 100 ) {
		ApplyAnimation( playerid,"PED","DRIVE_BOAT_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 101 ) {
		ApplyAnimation( playerid,"PED","Drive_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 102 ) {
		ApplyAnimation( playerid,"PED","Drive_LO_l",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 103 ) {
		ApplyAnimation( playerid,"PED","Drive_LO_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 104 ) {
		ApplyAnimation( playerid,"PED","Drive_L_pro",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 105 ) {
		ApplyAnimation( playerid,"PED","Drive_L_pro_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 106 ) {
		ApplyAnimation( playerid,"PED","Drive_L_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 107 ) {
		ApplyAnimation( playerid,"PED","Drive_L_weak",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 108 ) {
		ApplyAnimation( playerid,"PED","Drive_L_weak_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 109 ) {
		ApplyAnimation( playerid,"PED","Drive_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 110 ) {
		ApplyAnimation( playerid,"PED","Drive_R_pro",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 111 ) {
		ApplyAnimation( playerid,"PED","Drive_R_pro_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 112 ) {
		ApplyAnimation( playerid,"PED","Drive_R_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 113 ) {
		ApplyAnimation( playerid,"PED","Drive_R_weak",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 114 ) {
		ApplyAnimation( playerid,"PED","Drive_R_weak_slow",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 115 ) {
		ApplyAnimation( playerid,"PED","Drive_truck",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 116 ) {
		ApplyAnimation( playerid,"PED","DRIVE_truck_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 117 ) {
		ApplyAnimation( playerid,"PED","DRIVE_truck_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 118 ) {
		ApplyAnimation( playerid,"PED","DRIVE_truck_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 119 ) {
		ApplyAnimation( playerid,"PED","Drown",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 120 ) {
		ApplyAnimation( playerid,"PED","DUCK_cower",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 121 ) {
		ApplyAnimation( playerid,"PED","endchat_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 122 ) {
		ApplyAnimation( playerid,"PED","endchat_02",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 123 ) {
		ApplyAnimation( playerid,"PED","endchat_03",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 124 ) {
		ApplyAnimation( playerid,"PED","DRIVE_truck_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 125 ) {
		ApplyAnimation( playerid,"PED","DRIVE_truck_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 126 ) {
		ApplyAnimation( playerid,"PED","EV_dive",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 127 ) {
		ApplyAnimation( playerid,"PED","EV_step",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 128 ) {
		ApplyAnimation( playerid,"PED","facanger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 129 ) {
		ApplyAnimation( playerid,"PED","facanger",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 130 ) {
		ApplyAnimation( playerid,"PED","facgum",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 131 ) {
		ApplyAnimation( playerid,"PED","facsurp",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 132 ) {
		ApplyAnimation( playerid,"PED","facsurpm",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 133 ) {
		ApplyAnimation( playerid,"PED","factalk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 134 ) {
		ApplyAnimation( playerid,"PED","facurios",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 135 ) {
		ApplyAnimation( playerid,"PED","FALL_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 136 ) {
		ApplyAnimation( playerid,"PED","FALL_collapse",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 137 ) {
		ApplyAnimation( playerid,"PED","FALL_fall",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 138 ) {
		ApplyAnimation( playerid,"PED","FALL_front",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 139 ) {
		ApplyAnimation( playerid,"PED","FALL_glide",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 140 ) {
		ApplyAnimation( playerid,"PED","FALL_land",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 141 ) {
		ApplyAnimation( playerid,"PED","FALL_skyDive",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 142 ) {
		ApplyAnimation( playerid,"PED","Fight2Idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 143 ) {
		ApplyAnimation( playerid,"PED","FightA_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 144 ) {
		ApplyAnimation( playerid,"PED","FightA_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 145 ) {
		ApplyAnimation( playerid,"PED","FightA_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 146 ) {
		ApplyAnimation( playerid,"PED","FightA_block",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 147 ) {
		ApplyAnimation( playerid,"PED","FightA_G",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 148 ) {
		ApplyAnimation( playerid,"PED","FightA_M",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 149 ) {
		ApplyAnimation( playerid,"PED","FIGHTIDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 150 ) {
		ApplyAnimation( playerid,"PED","FightShB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 151 ) {
		ApplyAnimation( playerid,"PED","FightShF",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 152 ) {
		ApplyAnimation( playerid,"PED","FightSh_BWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 153 ) {
		ApplyAnimation( playerid,"PED","FightSh_FWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 154 ) {
		ApplyAnimation( playerid,"PED","FightSh_Left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 155 ) {
		ApplyAnimation( playerid,"PED","FightSh_Right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 156 ) {
		ApplyAnimation( playerid,"PED","flee_lkaround_01",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 157 ) {
		ApplyAnimation( playerid,"PED","FLOOR_hit",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 158 ) {
		ApplyAnimation( playerid,"PED","FLOOR_hit_f",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 159 ) {
		ApplyAnimation( playerid,"PED","fucku",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 160 ) {
		ApplyAnimation( playerid,"PED","gang_gunstand",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 161 ) {
		ApplyAnimation( playerid,"PED","gas_cwr",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 162 ) {
		ApplyAnimation( playerid,"PED","getup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 163 ) {
		ApplyAnimation( playerid,"PED","getup_front",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 164 ) {
		ApplyAnimation( playerid,"PED","gum_eat",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 165 ) {
		ApplyAnimation( playerid,"PED","GunCrouchBwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 166 ) {
		ApplyAnimation( playerid,"PED","GunCrouchFwd",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 167 ) {
		ApplyAnimation( playerid,"PED","GunMove_BWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 168 ) {
		ApplyAnimation( playerid,"PED","GunMove_FWD",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 169 ) {
		ApplyAnimation( playerid,"PED","GunMove_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 170 ) {
		ApplyAnimation( playerid,"PED","GunMove_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 171 ) {
		ApplyAnimation( playerid,"PED","Gun_2_IDLE",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 172 ) {
		ApplyAnimation( playerid,"PED","GUN_BUTT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 173 ) {
		ApplyAnimation( playerid,"PED","GUN_BUTT_crouch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 174 ) {
		ApplyAnimation( playerid,"PED","Gun_stand",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 175 ) {
		ApplyAnimation( playerid,"PED","handscower",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 176 ) {
		ApplyAnimation( playerid,"PED","handsup",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 177 ) {
		ApplyAnimation( playerid,"PED","HitA_1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 178 ) {
		ApplyAnimation( playerid,"PED","HitA_2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 179 ) {
		ApplyAnimation( playerid,"PED","HitA_3",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 180 ) {
		ApplyAnimation( playerid,"PED","HIT_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 181 ) {
		ApplyAnimation( playerid,"PED","HIT_behind",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 182 ) {
		ApplyAnimation( playerid,"PED","HIT_front",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 183 ) {
		ApplyAnimation( playerid,"PED","HIT_GUN_BUTT",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 184 ) {
		ApplyAnimation( playerid,"PED","HIT_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 185 ) {
		ApplyAnimation( playerid,"PED","HIT_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 186 ) {
		ApplyAnimation( playerid,"PED","HIT_walk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 187 ) {
		ApplyAnimation( playerid,"PED","HIT_wall",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 188 ) {
		ApplyAnimation( playerid,"PED","Idlestance_fat",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 189 ) {
		ApplyAnimation( playerid,"PED","idlestance_old",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 190 ) {
		ApplyAnimation( playerid,"PED","IDLE_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 191 ) {
		ApplyAnimation( playerid,"PED","IDLE_chat",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 192 ) {
		ApplyAnimation( playerid,"PED","IDLE_csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 193 ) {
		ApplyAnimation( playerid,"PED","Idle_Gang1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 194 ) {
		ApplyAnimation( playerid,"PED","IDLE_HBHB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 195 ) {
		ApplyAnimation( playerid,"PED","IDLE_ROCKET",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 196 ) {
		ApplyAnimation( playerid,"PED","IDLE_stance",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 197 ) {
		ApplyAnimation( playerid,"PED","IDLE_taxi",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 198 ) {
		ApplyAnimation( playerid,"PED","IDLE_tired",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 199 ) {
		ApplyAnimation( playerid,"PED","Jetpack_Idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 200 ) {
		ApplyAnimation( playerid,"PED","JOG_femaleA",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 201 ) {
		ApplyAnimation( playerid,"PED","JOG_maleA",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 202 ) {
		ApplyAnimation( playerid,"PED","JUMP_glide",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 203 ) {
		ApplyAnimation( playerid,"PED","JUMP_land",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 204 ) {
		ApplyAnimation( playerid,"PED","JUMP_launch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 205 ) {
		ApplyAnimation( playerid,"PED","JUMP_launch_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 206 ) {
		ApplyAnimation( playerid,"PED","KART_drive",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 207 ) {
		ApplyAnimation( playerid,"PED","KART_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 208 ) {
		ApplyAnimation( playerid,"PED","KART_LB",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 209 ) {
		ApplyAnimation( playerid,"PED","KART_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 210 ) {
		ApplyAnimation( playerid,"PED","KD_left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 211 ) {
		ApplyAnimation( playerid,"PED","KD_right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 212 ) {
		ApplyAnimation( playerid,"PED","KO_shot_face",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 213 ) {
		ApplyAnimation( playerid,"PED","KO_shot_front",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 214 ) {
		ApplyAnimation( playerid,"PED","KO_shot_stom",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 215 ) {
		ApplyAnimation( playerid,"PED","KO_skid_back",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 216 ) {
		ApplyAnimation( playerid,"PED","KO_skid_front",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 217 ) {
		ApplyAnimation( playerid,"PED","KO_spin_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 218 ) {
		ApplyAnimation( playerid,"PED","KO_spin_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 219 ) {
		ApplyAnimation( playerid,"PED","pass_Smoke_in_car",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 220 ) {
		ApplyAnimation( playerid,"PED","phone_in",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 221 ) {
		ApplyAnimation( playerid,"PED","phone_out",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 222 ) {
		ApplyAnimation( playerid,"PED","phone_talk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 223 ) {
		ApplyAnimation( playerid,"PED","Player_Sneak",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 224 ) {
		ApplyAnimation( playerid,"PED","Player_Sneak_walkstart",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 225 ) {
		ApplyAnimation( playerid,"PED","roadcross",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 226 ) {
		ApplyAnimation( playerid,"PED","roadcross_female",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 227 ) {
		ApplyAnimation( playerid,"PED","roadcross_gang",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 228 ) {
		ApplyAnimation( playerid,"PED","roadcross_old",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 229 ) {
		ApplyAnimation( playerid,"PED","run_1armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 230 ) {
		ApplyAnimation( playerid,"PED","run_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 231 ) {
		ApplyAnimation( playerid,"PED","run_civi",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 232 ) {
		ApplyAnimation( playerid,"PED","run_csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 233 ) {
		ApplyAnimation( playerid,"PED","run_fat",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 234 ) {
		ApplyAnimation( playerid,"PED","run_fatold",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 235 ) {
		ApplyAnimation( playerid,"PED","run_gang1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 236 ) {
		ApplyAnimation( playerid,"PED","run_left",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 237 ) {
		ApplyAnimation( playerid,"PED","run_old",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 238 ) {
		ApplyAnimation( playerid,"PED","run_player",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 239 ) {
		ApplyAnimation( playerid,"PED","run_right",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 240 ) {
		ApplyAnimation( playerid,"PED","run_rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 241 ) {
		ApplyAnimation( playerid,"PED","Run_stop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 242 ) {
		ApplyAnimation( playerid,"PED","Run_stopR",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 243 ) {
		ApplyAnimation( playerid,"PED","Run_Wuzi",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 244 ) {
		ApplyAnimation( playerid,"PED","SEAT_down",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 245 ) {
		ApplyAnimation( playerid,"PED","SEAT_idle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 246 ) {
		ApplyAnimation( playerid,"PED","SEAT_up",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 247 ) {
		ApplyAnimation( playerid,"PED","SHOT_leftP",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 248 ) {
		ApplyAnimation( playerid,"PED","SHOT_partial",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 249 ) {
		ApplyAnimation( playerid,"PED","SHOT_partial_B",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 250 ) {
		ApplyAnimation( playerid,"PED","SHOT_rightP",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 251 ) {
		ApplyAnimation( playerid,"PED","Shove_Partial",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 252 ) {
		ApplyAnimation( playerid,"PED","Smoke_in_car",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 253 ) {
		ApplyAnimation( playerid,"PED","sprint_civi",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 254 ) {
		ApplyAnimation( playerid,"PED","sprint_panic",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 255 ) {
		ApplyAnimation( playerid,"PED","Sprint_Wuzi",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 256 ) {
		ApplyAnimation( playerid,"PED","BOPE_run",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 257 ) {
		ApplyAnimation( playerid,"PED","Swim_Tread",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 258 ) {
		ApplyAnimation( playerid,"PED","Tap_hand",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 259 ) {
		ApplyAnimation( playerid,"PED","Tap_handP",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 260 ) {
		ApplyAnimation( playerid,"PED","turn_180",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 261 ) {
		ApplyAnimation( playerid,"PED","Turn_L",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 262 ) {
		ApplyAnimation( playerid,"PED","Turn_R",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 263 ) {
		ApplyAnimation( playerid,"PED","WALK_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 264 ) {
		ApplyAnimation( playerid,"PED","WALK_civi",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 265 ) {
		ApplyAnimation( playerid,"PED","WALK_csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 266 ) {
		ApplyAnimation( playerid,"PED","Walk_DoorPartial",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 267 ) {
		ApplyAnimation( playerid,"PED","WALK_drunk",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 268 ) {
		ApplyAnimation( playerid,"PED","WALK_fat",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 269 ) {
		ApplyAnimation( playerid,"PED","WALK_fatold",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 270 ) {
		ApplyAnimation( playerid,"PED","WALK_gang1",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 271 ) {
		ApplyAnimation( playerid,"PED","WALK_gang2",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 272 ) {
		ApplyAnimation( playerid,"PED","WALK_old",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 273 ) {
		ApplyAnimation( playerid,"PED","WALK_player",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 274 ) {
		ApplyAnimation( playerid,"PED","WALK_rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 275 ) {
		ApplyAnimation( playerid,"PED","WALK_shuffle",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 276 ) {
		ApplyAnimation( playerid,"PED","WALK_start",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 277 ) {
		ApplyAnimation( playerid,"PED","WALK_start_armed",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 278 ) {
		ApplyAnimation( playerid,"PED","WALK_start_csaw",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 279 ) {
		ApplyAnimation( playerid,"PED","WALK_start_rocket",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 280 ) {
		ApplyAnimation( playerid,"PED","Walk_Wuzi",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 281 ) {
		ApplyAnimation( playerid,"PED","WEAPON_crouch",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 282 ) {
		ApplyAnimation( playerid,"PED","woman_idlestance",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 283 ) {
		ApplyAnimation( playerid,"PED","woman_run",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 284 ) {
		ApplyAnimation( playerid,"PED","WOMAN_runbusy",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 285 ) {
		ApplyAnimation( playerid,"PED","WOMAN_runfatold",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 286 ) {
		ApplyAnimation( playerid,"PED","woman_runpanic",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 287 ) {
		ApplyAnimation( playerid,"PED","WOMAN_runsexy",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 288 ) {
		ApplyAnimation( playerid,"PED","WOMAN_walkbusy",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 289 ) {
		ApplyAnimation( playerid,"PED","WOMAN_walkfatold",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 290 ) {
		ApplyAnimation( playerid,"PED","WOMAN_walknorm",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 291 ) {
		ApplyAnimation( playerid,"PED","WOMAN_walkold",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 292 ) {
		ApplyAnimation( playerid,"PED","WOMAN_walkpro",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 293 ) {
		ApplyAnimation( playerid,"PED","WOMAN_walksexy",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 294 ) {
		ApplyAnimation( playerid,"PED","WOMAN_walkshop",4.1,Loop[ playerid ],1,1,1,1 );
		}else if( animeID == 295 ) {
		ApplyAnimation( playerid,"PED","XPRESSscratch",4.1,Loop[ playerid ],1,1,1,1 );
	}
	return 1;
}
if( strcmp( cmd, "/handsup", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		SetPlayerSpecialAction( playerid,SPECIAL_ACTION_HANDSUP );
		return 1;
	}
}
if( strcmp( cmd, "/dance", true ) == 0 ) {
	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp )) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /dance [ 1-3 ]" );
			return 1;
		}
		animeID = strval( tmp );
		if( animeID < 1 || animeID > 3 ) {
			SendClientMessage( playerid,0xFF0000FF, "[ x ] Uso correto: /dance [ 1-3 ]" );
			return 1;
		}
		if( animeID == 1 ) {
			SetPlayerSpecialAction( playerid,SPECIAL_ACTION_DANCE1 );
			} else if( animeID == 2 ) {
			SetPlayerSpecialAction( playerid,SPECIAL_ACTION_DANCE2 );
			} else if( animeID == 3 ) {
			SetPlayerSpecialAction( playerid,SPECIAL_ACTION_DANCE3 );
		}
		return 1;
	}
}
if( !strcmp( cmd, "/desbugarcasa", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /DesbugarCasa [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		format( gStr, sizeof( gStr ), "[ > ] Você desbugou a conta de %s que agora pode comprar casa.", PlayerName( id ));
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		dini_IntSet( f( id ), "Casa", -1 );
		dini_IntSet( f( id ), "MorandoID", -1 );
		return 1;
	}
}
if( !strcmp( cmd, "/contar", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Contar [ Tempo ]" );
			return 1;
		}
		new
		CountTimer = strval( tmp )
		;
		if( NumeroCount > 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já está sendo feita uma contagem, aguarde !" );
			return 1;
		}
		NumeroCount = CountTimer;
		Contagem( );
		return 1;
	}
}
if( !strcmp( cmd, "/capacete", true ))
{
	if( pInfo[ playerid ][ Tem_Capacete ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um capacete !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Capacete [ Ativar/Desativar ]" );
		return 1;
	}
	else if( !strcmp( tmp, "ativar", true ))
	{
		if( pInfo[ playerid ][ StatusCapacete ] == 0 )
		{
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu capacete foi ativado com sucesso !" );
			if( IsPlayerInAnyVehicle( playerid ) && IsABike( GetPlayerVehicleID( playerid )) )
			{
				SetPlayerAttachedObject( playerid, 5, 18645, 2, 0.07, 0, 0, 88, 75, 0 );
			}
			pInfo[ playerid ][ StatusCapacete ] = 1;
		}
		else if( pInfo[ playerid ][ StatusCapacete ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu capacete já está ativado !" );
		}
		return 1;
	}
	else if( !strcmp( tmp, "desativar", true ))
	{
		if( pInfo[ playerid ][ StatusCapacete ] == 1 )
		{
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu capacete foi desativado com sucesso !" );
			RemovePlayerAttachedObject( playerid, 5 );
			pInfo[ playerid ][ StatusCapacete ] = 0;
		}
		else if( pInfo[ playerid ][ StatusCapacete ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu capacete já está desativado !" );
		}
		return 1;
	}
	return 1;
}
if( !strcmp( cmdtext, "/estacionar", true ))
{
	if( pInfo[ playerid ][ Prof ] == FRENTISTA )
	{
		if( Estacionado[ GetPlayerVehicleID( playerid ) ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse veículo já foi estacionado !" );
			return 1;
		}
		Estacionado[ GetPlayerVehicleID( playerid ) ] = 1;
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Veículo estacionado !" );
		GameTextForPlayer( playerid, "~w~~h~VEICULO ~r~ESTACIONADO~w~!", 3000, 5 );
		sGivePlayerCash( playerid, 50 );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Frentista !" );
	}
	return 1;
}
if( !strcmp( cmd, "/bloquearsms", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		new
		plid
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /bloquearsms [ ID ]" );
			return 1;
		}
		plid = strval( tmp );
		if( IsPlayerConnected( plid ))
		{
			format( string, sizeof( string ), "[ BPO ADMIN ] Você bloqueou %s de receber SMS.", PlayerName( plid ));
			SendClientMessage( playerid, COLOR_AMARELO, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s bloqueou você de receber SMS.", PlayerName( playerid ));
			SendClientMessage( plid, COLOR_AMARELO, string );
			PMBLOQUEADO[ plid ] = 1;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}

if( strcmp( cmd, "/desbloquearsms", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		new
		plid
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /desbloquearsms [ ID ]" );
			return 1;
		}
		plid = strval( tmp );
		if( IsPlayerConnected( plid ))
		{
			format( string, sizeof( string ), "[ BPO ADMIN ] Você desbloqueou %s de receber SMS.", PlayerName( plid ));
			SendClientMessage( playerid, COLOR_AMARELO, string );
			format( string, sizeof( string ), "[ BPO ADMIN ] O(A) Administrador(a) %s desbloqueou você de receber SMS.", PlayerName( playerid ));
			SendClientMessage( plid, COLOR_AMARELO, string );
			PMBLOQUEADO[ plid ] = 0;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}

if( !strcmp( cmd, "/pegarmercadoria", true ))
{
	if( IsPlayerInPlace( playerid, 1071.939819, -1279.053710, 1135.939819, -1223.053710 ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTOBOY )
		{
			if( Mercadoria[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já pegou a mercadoria !" );
				return 1;
			}
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você pegou a mercadoria vá fazer as entregas !" );
			SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até o disco que foi setado no mapa para fazer a entrega !" );
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino é Bayside próximo a San Fierro !" );
			RemovePlayerMapIcon( playerid, 90 );
			SetPlayerMapIcon( playerid, 90, -2185.4077, 2416.3906, 5.1841, 48, 0, MAPICON_GLOBAL_CHECKPOINT );
			Mercadoria[ playerid ] = 1;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) MotoBoy/Girl !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área dos Moto Boy's/Girl's !" );
		return 1;
	}
}

if( !strcmp( cmd, "/emercadoria1", true ))
{
	if( PlayerToPoint( 2.1, playerid, -2194.0046,2408.4163,4.5277 ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTOBOY )
		{
			if( Mercadoria[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com mercadoria !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vMotoBoys[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 9 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 10 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 11 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 12 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 13 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 14 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Mercadoria entregue com sucesso, vá até a próxima entrega !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até disco que foi setado no mapa para fazer a entrega !" );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino é no deserto próximo à Bayside !" );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, -1940.3506, 2380.0898, 49.6953, 48, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Mercadoria1[ playerid ] = 1;
				Mercadoria2[ playerid ] = 0;
				Mercadoria3[ playerid ] = 0;
				Mercadoria4[ playerid ] = 0;
				Mercadoria5[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de Moto Boy/Girl !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Moto Boy/Girl !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local da primeira entrega !" );
		return 1;
	}
}

if( !strcmp( cmd, "/emercadoria2", true ))
{
	if( PlayerToPoint( 2.1, playerid, -1940.3506, 2380.0898, 49.6953 ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTOBOY )
		{
			if( Mercadoria[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com mercadoria !" );
				return 1;
			}
			if( Mercadoria1[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vMotoBoys[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 9 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 10 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 11 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 12 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 13 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 14 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Mercadoria entregue com sucesso, vá até a próxima entrega !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até disco que foi setado no mapa para fazer a entrega !" );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino é Las Venturas na Ammu Nation !" );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, 2158.3745, 943.2244, 10.8203, 48, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Mercadoria1[ playerid ] = 1;
				Mercadoria2[ playerid ] = 1;
				Mercadoria3[ playerid ] = 0;
				Mercadoria4[ playerid ] = 0;
				Mercadoria5[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de Moto Boy/Girl !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Moto Boy/Girl !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local da segunda entrega !" );
		return 1;
	}
}

if( !strcmp( cmd, "/emercadoria3", true ))
{
	if( PlayerToPoint( 2.1, playerid, 2158.3745, 943.2244, 10.8203 ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTOBOY )
		{
			if( Mercadoria[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com mercadoria !" );
				return 1;
			}
			if( Mercadoria1[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria2[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a segunda entrega, volte e faça !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vMotoBoys[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 9 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 10 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 11 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 12 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 13 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 14 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Mercadoria entregue com sucesso, vá até a próxima entrega !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até disco que foi setado no mapa para fazer a entrega !" );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino continua sendo em Las Venturas agora no prédio da Policia !" );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, 2387.9214, 2466.0737, 10.8203, 48, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Mercadoria1[ playerid ] = 1;
				Mercadoria2[ playerid ] = 1;
				Mercadoria3[ playerid ] = 1;
				Mercadoria4[ playerid ] = 0;
				Mercadoria5[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de Moto Boy/Girl !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Moto Boy/Girl !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local da terceira entrega !" );
		return 1;
	}
}

if( !strcmp( cmd, "/emercadoria4", true ))
{
	if( PlayerToPoint( 2.1, playerid, 2387.9214, 2466.0737, 10.8203 ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTOBOY )
		{
			if( Mercadoria[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com mercadoria !" );
				return 1;
			}
			if( Mercadoria1[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria2[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a segunda entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria3[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a terceira entrega, volte e faça !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vMotoBoys[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 9 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 10 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 11 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 12 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 13 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 14 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Mercadoria entregue com sucesso, vá até a próxima entrega !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até o disco que foi setado no mapa para fazer a entrega !" );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino agora é Los Santos, sua entrega é no prédio perto da Grove !" );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, 2781.6829, -1813.9617, 11.8438, 48, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Mercadoria1[ playerid ] = 1;
				Mercadoria2[ playerid ] = 1;
				Mercadoria3[ playerid ] = 1;
				Mercadoria4[ playerid ] = 1;
				Mercadoria5[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de Moto Boy/Girl !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Moto Boy/Girl !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local da quarta entrega !" );
		return 1;
	}
}

if( !strcmp( cmd, "/emercadoria5", true ))
{
	if( PlayerToPoint( 2.1, playerid, 2781.6829, -1813.9617, 11.8438 ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTOBOY )
		{
			if( Mercadoria[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com mercadoria !" );
				return 1;
			}
			if( Mercadoria1[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria2[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a segunda entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria3[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a terceira entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria4[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a quarta entrega, volte e faça !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vMotoBoys[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 9 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 10 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 11 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 12 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 13 ] ||
			GetPlayerVehicleID( playerid ) == vMotoBoys[ 14 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Mercadoria entregue com sucesso, volte para área de Moto Boy's/Girl's !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Foi setado no mapa um disco na área de Moto Boy's/Girl's." );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino agora é voltar para sua empresa de Moto Boy/Girl." );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, 1087.2679, -1225.2441, 15.8203, 48, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Mercadoria1[ playerid ] = 1;
				Mercadoria2[ playerid ] = 1;
				Mercadoria3[ playerid ] = 1;
				Mercadoria4[ playerid ] = 1;
				Mercadoria5[ playerid ] = 1;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de Moto Boy/Girl !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Moto Boy/Girl !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local da quinta entrega !" );
		return 1;
	}
}

if( !strcmp( cmd, "/ecomprovantes", true ))
{
	if( PlayerToPoint( 2.1, playerid, 1083.9559, -1226.6875, 15.8203 ))
	{
		if( pInfo[ playerid ][ Prof ] == MOTOBOY )
		{
			if( Mercadoria1[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria2[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a segunda entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria3[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a terceira entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria4[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a quarta entrega, volte e faça !" );
				return 1;
			}
			if( Mercadoria5[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a quinta entrega, volte e faça !" );
				return 1;
			}
			SendClientMessage( playerid, 0x66FF66AA, "[ > ] Você concluiu todas as entregas e recebe $4.000 !" );
			SendClientMessage( playerid, 0x9999FFAA, "[ > ] Caso você queria, continue trabalhando." );
			GameTextForPlayer( playerid, "~n~~n~~y~~h~TAREFA CONCLUIDA!", 5000, 5 );
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
			RemovePlayerMapIcon( playerid, 90 );
			sGivePlayerCash( playerid, 4000 );
			Mercadoria[ playerid ] = 0;
			Mercadoria1[ playerid ] = 0;
			Mercadoria2[ playerid ] = 0;
			Mercadoria3[ playerid ] = 0;
			Mercadoria4[ playerid ] = 0;
			Mercadoria5[ playerid ] = 0;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Moto Boy/Girl !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local para entregar os comprovantes !" );
		return 1;
	}
}
if( !strcmp( cmd, "/IniciarObra", true ))
{
	if( !PlayerToPoint( 80.0, playerid, 822.0108, 1.9151, 1004.1797 ))
	{
		if( pInfo[ playerid ][ Prof ] == PEDREIRO )
		{
			if( Material[ playerid ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já pegou uma obra!" );
				return 1;
			}
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você pegou uma obra va ate o local para completa-la !" );
			SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até o caminhãozinho que foi setado no mapa para fazer a obra !" );
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino é uma construção em Las Venturas perto do descarregar !" );
			SendClientMessage( playerid, COLOR_AZUL, "[ > ] Observação: Vá com o Caminhão !" );
			RemovePlayerMapIcon( playerid, 90 );
			SetPlayerMapIcon( playerid, 90, 2624.1807,834.7396,5.3158, 51, 0, MAPICON_GLOBAL_CHECKPOINT );
			Material[ playerid ] = 1;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um pedreiro !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área dos pedreiros !" );
		return 1;
	}
}
if( !strcmp( cmd, "/MaterialObra1", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_50 ))
	{
		if( pInfo[ playerid ][ Prof ] == PEDREIRO )
		{
			if( Material[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com o material !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vPedreiro[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 9 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Material entregue com sucesso, vá até a próxima obra !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até o caminhãozinho que foi setado no mapa para levar o material !" );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino é Los Santos na Construção perto do hospital de Market !" );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, 1248.4409,-1258.4224,13.1609, 51, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Material1[ playerid ] = 1;
				Material2[ playerid ] = 0;
				Material3[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de pedreiro !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um pedreiro !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local de entregar o materia !" );
		return 1;
	}
}
if( !strcmp( cmd, "/MaterialObra2", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_51 ))
	{
		if( pInfo[ playerid ][ Prof ] == PEDREIRO )
		{
			if( Material[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com o Material da Obra !" );
				return 1;
			}
			if( Material[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vPedreiro[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 9 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Material entregue com sucesso, vá até a próxima obra !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até o caminhãozinho que foi setado no mapa para levar o material !" );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino é San Fierro na Construção perto da estação de trem !" );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, -2115.0127,242.0457,35.5022, 51, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Material1[ playerid ] = 1;
				Material2[ playerid ] = 1;
				Material3[ playerid ] = 0;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de pedreiro !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um pedreiro !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local da segunda obra !" );
		return 1;
	}
}

if( !strcmp( cmd, "/MaterialObra3", true ))
{
	if( IsPlayerInDynamicCP( playerid, CP_52 ))
	{
		if( pInfo[ playerid ][ Prof ] == PEDREIRO )
		{
			if( Material[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está com o materia da obra !" );
				return 1;
			}
			if( Material1[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( Material2[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a segunda entrega, volte e faça !" );
				return 1;
			}
			if( GetPlayerVehicleID( playerid ) == vPedreiro[ 0 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 1 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 2 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 3 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 4 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 5 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 6 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 7 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 8 ] ||
			GetPlayerVehicleID( playerid ) == vPedreiro[ 9 ] )
			{
				SendClientMessage( playerid, 0x9999FFAA, "[ > ] Material entregue com sucesso, vá até a próxima obra !" );
				SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Vá até o caminhãozinho que foi setado no mapa para levar o material !" );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seu destino é em Las Venturas do Spawn de sua Profissão !" );
				RemovePlayerMapIcon( playerid, 90 );
				SetPlayerMapIcon( playerid, 90, 605.4854,884.5767,-43.3004, 51, 0, MAPICON_GLOBAL_CHECKPOINT );
				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				Material1[ playerid ] = 1;
				Material2[ playerid ] = 1;
				Material3[ playerid ] = 1;
				return 1;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está em um dos veículos de pedreiro !" );
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um pedreiro !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local da terceira entrega !" );
		return 1;
	}
}
if( !strcmp( cmd, "/TerminarObra", true ))
{
	if( PlayerToPoint( 2.1, playerid, 605.4854, 884.5767, -43.3004 ))
	{
		if( pInfo[ playerid ][ Prof ] == PEDREIRO )
		{
			if( Material1[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a primeira entrega, volte e faça !" );
				return 1;
			}
			if( Material2[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a segunda entrega, volte e faça !" );
				return 1;
			}
			if( Material3[ playerid ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez a terceira entrega, volte e faça !" );
				return 1;
			}
			SendClientMessage( playerid, 0x66FF66AA, "[ > ] Você concluiu todas as obras e recebe $3.000 !" );
			SendClientMessage( playerid, 0x9999FFAA, "[ > ] Caso você queria, continue trabalhando." );
			GameTextForPlayer( playerid, "~n~~n~~y~~h~Obras Concluidas!", 5000, 5 );
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
			RemovePlayerMapIcon( playerid, 90 );
			sGivePlayerCash( playerid, 3000 );
			Material[ playerid ] = 0;
			Material1[ playerid ] = 0;
			Material2[ playerid ] = 0;
			Material3[ playerid ] = 0;
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um pedreiro !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local para entregar os comprovantes !" );
		return 1;
	}
}
if( !strcmp( cmd, "/desbugarsenha", true ))
{
	if( pInfo[ playerid ][ Logado ] == false )
	{
		SendClientMessage( playerid, COLOR_AZULCLARO, "[ x ] Você não está logado portando não pode usar comandos !" );
		return 0;
	}
	if( dini_Int( f( playerid ), "Dono" ) == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( strlen( tmp ) == 0 )
		{
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso: correto /DesbugarSenha [ nick ]" );
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", tmp );
		if( fexist( gFile ))
		{
			format( str, sizeof( str ), "( SENHA ) Você alterou a senha da conta de %s para ' 1234 '", tmp );
			SendClientMessage( playerid, 0xBCE635AA, str );
			dini_IntSet( gFile, "Senha", 33030347 );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa conta com esse nick não existe !" );
			return 1;
		}
	}
	return 1;
}
if( !strcmp( cmd, "/desbugarbanco", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( strlen( tmp ) == 0 )
		{
			return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso: correto /DesbugarBanco [ nick ]" );
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", tmp );
		if( fexist( gFile ))
		{
			format( str, sizeof( str ), "( SENHA ) Você alterou a senha da conta bancária de %s para ' 1234 '", tmp );
			SendClientMessage( playerid, 0xBCE635AA, str );
			dini_IntSet( gFile, "SenhaBanco", 33030347 );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa conta com esse nick não existe !" );
			return 1;
		}
	}
	return 1;
}
if( !strcmp( cmd, "/SaldoDevedor", true ))
{
	if( PlayerToPoint( 1.1, playerid, 359.0632,178.6568, 1008.3828 ) || IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ))
	{
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		SendClientMessage( playerid, 0x009966AA, "•~~~~~~~~~~~~~~~~~ Saldo Devedor ~~~~~~~~~~~~~~~~~•" );
		format( gstring, sizeof( gstring ), "••• Seu saldo devedor é de: {009966}%d", dini_Int( gFile, "Impostos" ));
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		SendClientMessage( playerid, 0x009966AA, "•~~~~~~~~~~~~~~~~~ Saldo Devedor ~~~~~~~~~~~~~~~~~•" );
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		return 1;
	}
	else return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura !" );
}
if( !strcmp( cmd, "/ImpostosAtrasados", true ))
{
	if( PlayerToPoint( 1.1, playerid, 359.0632,178.6568, 1008.3828 ) || IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ))
	{
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		SendClientMessage( playerid, 0xFF0033AA, "•~~~~~~~~~~~~~~~~~ Impostos Atrasados ~~~~~~~~~~~~~~~~~•" );
		format( gstring, sizeof( gstring ), "••• Seus impostos atrasados: %d de 10", dini_Int( gFile, "Atrasados" ));
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		SendClientMessage( playerid, 0xFF0033AA, "•~~~~~~~~~~~~~~~~~ Impostos Atrasados ~~~~~~~~~~~~~~~~~•" );
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		return 1;
	}
	else return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura !" );
}
if( !strcmp( cmd, "/PagarImpostos", true ))
{
	if( PlayerToPoint( 1.1, playerid, 359.0632,178.6568, 1008.3828 ) || IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ))
	{
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		if( dini_Int( gFile, "Impostos" ) <= 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem saldo devedor !" );
			return 1;
		}
		if( GetPlayerCash( playerid ) < dini_Int( gFile, "Impostos" ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para pagar seus impostos !" );
			MensagemFormatada( playerid, COLOR_ERRO, "[ > ] Sua divida é de: {009966}%d", dini_Int( gFile, "Impostos" ));
			return 1;
		}
		else if( GetPlayerCash( playerid ) >= dini_Int( gFile, "Impostos" ))
		{
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Seus impostos foram pagos com sucesso !" );
			sGivePlayerCash( playerid, -dini_Int( gFile, "Impostos" ));
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
			dini_IntSet( gFile, "Impostos", 0 );
			dini_IntSet( gFile, "Atrasados", 0 );
			return 1;
		}
	}
	else return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura !" );
}
if( strcmp( cmd, "/evento", true ) == 0 )
{
	if( aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
	{
		SendClientMessage( playerid, 0xFFFFFFAA, "[ x ] Você não tem permissão !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFFFFFFAA, "[ x ] Uso correto: /evento [ Ape / Veiculo / DM[ ON/OFF ] / Fechar ] DEPOIS: /irevento" );
		return 1;
	}
	else if( strcmp( tmp, "ape", true ) == 0 )
	{
		if( aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
			return 1;
		}
		if( aEventoCriado == true )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já tem um evento criado ! /evento fechar" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Evento apé criado com sucesso !" );
		GetPlayerPos( playerid, p1, p2, p3 );
		GetPlayerFacingAngle( playerid, p4 );
		aEventoCriado = true;
		EventoApe = true;
		return 1;
	}
	else if( strcmp( tmp, "veiculo", true ) == 0 )
	{
		if( aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
			return 1;
		}
		if( aEventoCriado == true )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já tem um evento criado ! /evento fechar" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Evento com veículo criado com sucesso !" );
		GetPlayerPos( playerid, p1, p2, p3 );
		GetPlayerFacingAngle( playerid, p4 );
		aEventoCriado = true;
		EventoVei = true;
		return 1;
	}
	else if( strcmp( tmp, "dm on", true ) == 0 )
	{
		if( aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Death Match Liberado !" );
		EventoDM = true;
		return 1;
	}
	else if( strcmp( tmp, "dm off", true ) == 0 )
	{
		if( aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Death Match Fechado !" );
		EventoDM = false;
		return 1;
	}
	else if( strcmp( tmp, "fechar", true ) == 0 )
	{
		if( aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Moderador ] != 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
			return 1;
		}
		if( aEventoCriado == false )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem nenhum evento criado !" );
			return 1;
		}
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Evento fechado com sucesso !" );
		aEventoCriado = false;
		EventoVei = false;
		EventoApe = false;
		return 1;
	}
}
if( !strcmp( cmdtext, "/irevento", true ))
{
	if( aEventoCriado == false )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não tem nenhum evento criado !" );
		return 1;
	}
	new
	veiculo
	;
	veiculo = GetPlayerVehicleID( playerid );
	if( EventoApe == true )
	{
		if( IsPlayerInVehicle( playerid, veiculo ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O evento em andamento é sem veículo !" );
			return 1;
		}
		else
		{
			SetPlayerPos( playerid, p1, p2, p3 );
			SetPlayerFacingAngle( playerid, p4 );
			return 1;
		}
	}
	if( EventoVei == true )
	{
		if( !IsPlayerInVehicle( playerid, veiculo ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O evento em andamento é com veículo !" );
			return 1;
		}
		else
		{
			SetPlayerNoveiculo( playerid, p1, p2, p3+2, p4, 0 );
			return 1;
		}
	}
	return 1;
}
if( !strcmp( cmdtext, "/vidaveiculos", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		for( new i = 0; i < MAX_VEHICLES; i++ )
		{
			RepairVehicle( i );
			SetVehicleHealth( i, 1000 );
		}
		format( string, sizeof( string ), "[ BPO ADMIN ] %s Reparou Todos Os Veículos.", PlayerName( playerid ));
		SendClientMessageToAll( 0x1E90FFAA, string );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/carrocmds", true ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~~[ Comandos de Carro ]~~~~~~~~~~~~~~~~~~•" );
	SendClientMessage( playerid, COLOR_BRANCO, "/FarolON /FarolOFF /CapoON /CapoOFF /PortamalasON /PortamalasOFF" );
	SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~~[ Comandos de Carro ]~~~~~~~~~~~~~~~~~~•" );
	return 1;
}
if( !strcmp( cmdtext, "/farolon", true ))
{
	new mot, lu, alar, por, cap, porma, ob;
	new carroa = GetPlayerVehicleID( playerid );
	if( carroa != INVALID_VEHICLE_ID )
	{
		GetVehicleParamsEx( carroa, mot, lu, alar, por, cap, porma, ob );
		SetVehicleParamsEx( carroa, mot, VEHICLE_PARAMS_ON, alar, por, cap, porma, ob );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Farol ligado !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/faroloff", true ))
{
	new mot, lu, alar, por, cap, porma, ob;
	new carroa = GetPlayerVehicleID( playerid );
	if( carroa != INVALID_VEHICLE_ID )
	{
		GetVehicleParamsEx( carroa, mot, lu, alar, por, cap, porma, ob );
		SetVehicleParamsEx( carroa, mot, VEHICLE_PARAMS_OFF, alar, por, cap, porma, ob );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Farol desligado !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/capoon", true ))
{
	new mot, lu, alar, por, cap, porma, ob;
	new carroa = GetPlayerVehicleID( playerid );
	if( carroa != INVALID_VEHICLE_ID )
	{
		GetVehicleParamsEx( carroa, mot, lu, alar, por, cap, porma, ob );
		SetVehicleParamsEx( carroa, mot, lu, alar, por, VEHICLE_PARAMS_ON, porma, ob );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Capo aberto !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/capooff", true ))
{
	new mot, lu, alar, por, cap, porma, ob;
	new carroa = GetPlayerVehicleID( playerid );
	if( carroa != INVALID_VEHICLE_ID )
	{
		GetVehicleParamsEx( carroa, mot, lu, alar, por, cap, porma, ob );
		SetVehicleParamsEx( carroa, mot, lu, alar, por, VEHICLE_PARAMS_OFF, porma, ob );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Capo fechado !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/portamalason", true ))
{
	new mot, lu, alar, por, cap, porma, ob;
	new carroa = GetPlayerVehicleID( playerid );
	if( carroa != INVALID_VEHICLE_ID )
	{
		GetVehicleParamsEx( carroa, mot, lu, alar, por, cap, porma, ob );
		SetVehicleParamsEx( carroa, mot, lu, alar, por, cap, VEHICLE_PARAMS_ON, ob );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Portamalas aberto !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/portamalasoff", true ))
{
	new mot, lu, alar, por, cap, porma, ob;
	new carroa = GetPlayerVehicleID( playerid );
	if( carroa != INVALID_VEHICLE_ID )
	{
		GetVehicleParamsEx( carroa, mot, lu, alar, por, cap, porma, ob );
		SetVehicleParamsEx( carroa, mot, lu, alar, por, cap, VEHICLE_PARAMS_OFF, ob );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Portamalas fechado !" );
	}
	return 1;
}
if( !strcmp( cmd, "/apostar", true ))
{
	if( PlayerToPoint( 1.1, playerid, -2159.0813, 640.3607, 1052.3817 ))
	{
		tmp = strtok( cmdtext, idx );
		if( strlen( tmp ) == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto:  /Apostar [ número ]" );
			return 1;
		}
		new
		aposta = strval( tmp )
		;
		if( dini_Int( "Loteria.ini", PlayerName( playerid )) == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já fez sua aposta hoje!" );
			return 1;
		}
		if( GetPlayerCash( playerid ) < 500 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $500 em mãos para poder apostar!" );
			return 1;
		}
		if( aposta < 0 || aposta > 60 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O número da aposta somente entre os números 0 á 60!" );
			return 1;
		}
		if( dini_Int( "Loteria.ini", tmp ) != 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse número já foi escolhido, por favor escolha outro!" );
			return 1;
		}
		dini_Set( "Loteria.ini", tmp, PlayerName( playerid ));
		dini_Set( "Loteria.ini", PlayerName( playerid ), "1" );
		sGivePlayerCash( playerid, -500 );
		format( gStr, sizeof( gStr ), "( LOTERIA ) Você apostou no número %d, boa sorte!", aposta );
		SendClientMessage( playerid, 0x009933AA, gStr );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma casa lotérica !" );
		return 1;
	}
}
if( !strcmp( cmd, "/acumulados", true ))
{
	if( PlayerToPoint( 1.1, playerid, -2159.0813, 640.3607, 1052.3817 ))
	{
		if( dini_Int( "Acumulado.ini", "Acumulado" ) <= 0 )
		{
			SendClientMessage( playerid, 0x009933AA, "( LOTERIA ) Não à nenhum sorteio acumulado !" );
			return 1;
		}
		else
		{
			MensagemFormatada( playerid, 0x009933AA, "( LOTERIA ) A loteria está acumulada somando um total de $%d", dini_Int( "Acumulado.ini", "Acumulado" ));
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma casa lotérica !" );
		return 1;
	}
}
if( !strcmp( cmd, "/sorteio", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SortearLoteria( );
		SendClientMessage( playerid, -1, "[ > ] Soterio realizado com sucesso !" );
	}
	return 1;
}
if( !strcmp( cmd, "/criarclan", true ))
{
	if( in_z[ playerid ] != -1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode utilizar comandos de Clan fora das Gangue Zones !" );
		return 1;
	}
	if( LiberadoGG[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa da permissão de um(a) Adminstrador(a) para criar um(a) Clan / Gangue !" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você também precisa ter $10000 em mãos." );
		return 1;
	}
	if( GetPlayerCash( playerid ) < 10000 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa de $10000 para poder criar um Clan !" );
		return 1;
	}
	if( strcmp( playerClan[ playerid ], "Nenhum", false ))
	{
		format( gStr, 128, "[ x ] Você já percente ao Clan / Gangue dos(as) %s !", playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	new
	length = strlen( cmdtext )
	;
	while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
	{
		idx++;
	}
	new offset = idx;
	new result[ 64 ];
	while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
	{
		result[ idx - offset ] = cmdtext[ idx ];
		idx++;
	}
	result[ idx - offset ] = EOS;

	if( !strlen( result ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /CriarClan [ Clan / Gangue NOME ]" );
		return 1;
	}
	if( strlen( result ) > 24 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O máximo de caracteres permitido é 24 !" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Escolha um nome menor para seu Clan / Gangue !" );
		return 1;
	}
	if( !IsValidNickClan( result ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você utilizou caracteres invalido / especiais !" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Escolha um nome com caracteres comuns !" );
		return 1;
	}
	format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", result );
	if( !fexist( gFile ))
	{
		dini_Create( gFile );
		dini_Set( gFile, "Dono", PlayerName( playerid ));
		dini_IntSet( gFile, "Color", -1 );
		new
		m_id[ 24 ]
		;
		for( new m = 1; m < 31; ++m )
		{
			format( m_id, 24, "Membro%d", m );
			dini_Set( gFile, m_id, "Ninguem" );
		}
	}
	else
	{
		format( gStr, 128, "[ x ] %s é um(a) Clan / Gangue já existente !", result );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Defina outro nome para seu Clan / Gangue." );
		return 1;
	}
	format( pFile, 128, "Clans/MembrosClans/%s.ini", PlayerName( playerid ));
	if( fexist( pFile ))
	{
		fremove( pFile );
		dini_Create( pFile );
		dini_Set( pFile, "Clan", result );
	}
	else
	{
		dini_Create( pFile );
		dini_Set( pFile, "Clan", result );
	}
	format( playerClan[ playerid ], MAX_PLAYER_NAME+1, result );
	clanColor[ playerid ] = -1;

	format( gStr, sizeof( gStr ), "[ > ] Clan / Gangue {FFFFFF}%s{FFFF00} criado(a).", result );
	SendClientMessage( playerid, COLOR_AMARELO, gStr );
	format( gStr, 128, "~r~~h~Clan / Gangue~n~~w~%s~n~~y~~h~Criado com sucesso!", result );
	GameTextForPlayer( playerid, gStr, 5000, 15 );
	sGivePlayerCash( playerid, -10000 );
	format( gstring, sizeof( gstring ), "[ > ] %s acaba de fundar o(a) Clan / Gangue: {FFFF00}%s", PlayerName( playerid ), result );
	SendClientMessageToAll( COLOR_BRANCO, gstring );
	return 1;
}
if( !strcmp( cmd, "/excluirclan", true ))
{
	if( in_z[ playerid ] != -1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode utilizar comandos de Clan fora das Gangue Zones !" );
		return 1;
	}
	if( !strcmp( playerClan[ playerid ], "Nenhum", true ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não percente a nenhum(a) Clan / Gangue !" );
		return 1;
	}
	format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", playerClan[ playerid ] );
	if( strcmp( dini_Get( gFile, "Dono" ), PlayerName( playerid ), false ))
	{
		format( gstring, sizeof( gstring ), "[ x ] Você não é Dono(a) do Clan / Gangue %s, somente o(a) Dono(a) pode exclui-lo(a) !", playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gstring );
		return 1;
	}
	new
	m_id[ 24 ],
	n_m[ 128 ]
	;
	for( new m = 1; m < 31; ++m )
	{
		format( m_id, 24, "Membro%d", m );

		if( strcmp( dini_Get( gFile, m_id ), "Ninguem", false ))
		{
			format( n_m, 128, "Clans/Clans/%s.ini", dini_Get( gFile, m_id ));
			if( fexist( n_m ))
			{
				fremove( n_m );
			}
		}
	}
	format( gStr, sizeof( gStr ), "[ > ] Clan / Gangue {00FFFF}%s{FFFFFF} excluído !", playerClan[ playerid ] );
	SendClientMessage( playerid, COLOR_BRANCO, gStr );
	format( gstring, sizeof( gstring ), "[ > ] %s acaba de (fechar / excluír) o(a) Clan / Gangue: {00FFFF}%s", PlayerName( playerid ), playerClan[ playerid ] );
	SendClientMessageToAll( COLOR_BRANCO, gstring );
	format( gStr, 128, "~r~~h~Clan / Gangue~n~~w~%s~n~~r~~h~excluido com sucesso!", playerClan[ playerid ] );
	GameTextForPlayer( playerid, gStr, 5000, 15 );
	foreach(Player, c)
	{
		if( c != playerid && !strcmp( playerClan[ c ], playerClan[ playerid ], true ))
		{
			format( playerClan[ c ], MAX_PLAYER_NAME+1, "Nenhum" );
			clanColor[ c ] = -1;

			format( gStr, 128, "~r~~h~Clan / Gangue~n~~w~%s~n~~r~~h~excluido !", playerClan[ playerid ] );
			GameTextForPlayer( c, gStr, 5000, 15 );
			format( gstring, sizeof( gstring ), "[ > ] %s líder do Clan / Gangue %s que você era membro, excluío o Clan / Gangue.", PlayerName( playerid ), playerClan[ playerid ] );
			SendClientMessage( c, COLOR_AMARELO, gstring );
		}
	}
	format( playerClan[ playerid ], MAX_PLAYER_NAME+1, "Nenhum" );
	clanColor[ playerid ] = -1;
	format( gStr, 128, "Clans/MembrosClans/%s.ini", PlayerName( playerid ));
	fremove( gStr );
	return 1;
}
if( !strcmp( cmd, "/convidarclan", true ))
{
	if( in_z[ playerid ] != -1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode utilizar comandos de Clan fora das Gangue Zones !" );
		return 1;
	}
	if( !strcmp( playerClan[ playerid ], "Nenhum", true ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não percente a nenhum(a) Clan / Gangue !" );
		return 1;
	}
	format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", playerClan[ playerid ] );
	if( strcmp( dini_Get( gFile, "Dono" ), PlayerName( playerid ), false ))
	{
		format( gstring, sizeof( gstring ), "[ x ] Você não é Dono(a) do Clan / Gangue %s, somente o(a) Dono(a) pode convidar !", playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gstring );
		return 1;
	}
	if( strcmp( dini_Get( gFile, "Membro1" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro2" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro3" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro4" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro5" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro6" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro7" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro8" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro9" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro10" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro11" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro12" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro13" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro14" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro15" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro16" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro17" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro18" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro19" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro20" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro21" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro22" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro23" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro24" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro25" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro26" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro27" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro28" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro29" ), "Ninguem", false ) &&
	strcmp( dini_Get( gFile, "Membro30" ), "Ninguem", false ))
	{
		format( gStr, 128, "[ x ] Seu Clan / Gangue %s já excedeu o limite de membros ! ( Total de 30 Membros )", playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /ConvidarClan [ ID ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;
	if( !IsPlayerConnected( id ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
		return 1;
	}
	if( GetDistanceBetweenPlayers( playerid, id ) > 15 ) return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está muito longe, chegue mais perto !" );

	if( !strcmp( playerClan[ id ], playerClan[ playerid ], true ))
	{
		format( gStr, sizeof( gStr ), "[ x ] %s já é membro do seu Clan / Gangue %s", PlayerName( id ), playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	if( strcmp( playerClan[ id ], "Nenhum", false ))
	{
		format( gStr, sizeof( gStr ), "[ x ] %s já é membro do Clan / Gangue %s", PlayerName( id ), playerClan[ id ] );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	format( gstring, sizeof( gstring), "[ > ] Você está convidando %s para ser membro do seu Clan / Gangue {FFFFFF}%s", PlayerName( id ), playerClan[ playerid ] );
	SendClientMessage( playerid, COLOR_AMARELO, gstring );
	format( gstring, sizeof( gstring ), "[ > ] %s está convidando você para ser membro do Clan / Gangue {FFFFFF}%s", PlayerName( playerid ), playerClan[ playerid ] );
	SendClientMessage( id, COLOR_AMARELO, gstring );
	timercou[ id ] = SetTimerEx( "MesagemClanConvite", 4000, false, "d", id );
	convidou[ id ] = playerid;
	msgconvi[ id ] = 1;
	return 1;
}
if( !strcmp( cmd, "/sairclan", true ))
{
	if( in_z[ playerid ] != -1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode utilizar comandos de Clan fora das Gangue Zones !" );
		return 1;
	}
	if( !strcmp( playerClan[ playerid ], "Nenhum", true ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não percente a nenhum(a) Clan / Gangue !" );
		return 1;
	}
	format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", playerClan[ playerid ] );
	if( !strcmp( dini_Get( gFile, "Dono" ), PlayerName( playerid ), true ))
	{
		format( gstring, sizeof( gstring ), "[ x ] Você é Dono(a) do Clan / Gangue %s, portando não pode sair !", playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gstring );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para sair você deve excluí-lo !" );
		return 1;
	}
	new
	m_id[ 24 ]
	;
	for( new m = 1; m < 31; ++m )
	{
		format( m_id, 24, "Membro%d", m );

		if( !strcmp( dini_Get( gFile, m_id ), PlayerName( playerid ), true ))
		{
			dini_Set( gFile, m_id, "Ninguem" );
		}
	}
	format( gStr, sizeof( gStr ), "[ > ] Você revogou sua vaga de membro do Clan / Gangue {FFFFFF}%s", playerClan[ playerid ] );
	SendClientMessage( playerid, COLOR_AMARELO, gStr );
	format( gStr, sizeof( gStr ), "[ > ] Portando você não é mais membro Clan / Gangue %s", playerClan[ playerid ] );
	SendClientMessage( playerid, COLOR_AMARELO, gStr );
	format( gStr, 128, "~w~Voce acaba de sair do~r~~h~Clan / Gangue~n~~w~%s", playerClan[ playerid ] );
	GameTextForPlayer( playerid, gStr, 5000, 15 );
	foreach(Player, c)
	{
		if( c != playerid && !strcmp( playerClan[ c ], playerClan[ playerid ], true ))
		{
			format( gStr, 128, "~w~%s~n~~r~~h~saiu do Clan / Gangue", PlayerName( playerid ));
			GameTextForPlayer( c, gStr, 5000, 15 );
			format( gstring, sizeof( gstring ), "[ > ] %s ex membro do seu Clan / Gangue %s, o(a) mesmo(a) acaba de revogar sua vaga.", PlayerName( playerid ), playerClan[ playerid ] );
			SendClientMessage( c, COLOR_AMARELO, gstring );
		}
	}
	format( playerClan[ playerid ], MAX_PLAYER_NAME+1, "Nenhum" );
	clanColor[ playerid ] = -1;
	format( gStr, 128, "Clans/MembrosClans/%s.ini", PlayerName( playerid ));
	fremove( gStr );
	return 1;
}
if( !strcmp( cmd, "/expulsarclan", true ))
{
	if( in_z[ playerid ] != -1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode utilizar comandos de clan fora das Gangue Zones !" );
		return 1;
	}
	if( !strcmp( playerClan[ playerid ], "Nenhum", true ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não percente a nenhum(a) Clan / Gangue !" );
		return 1;
	}

	format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", playerClan[ playerid ] );

	if( strcmp( dini_Get( gFile, "Dono" ), PlayerName( playerid ), false ))
	{
		format( gstring, sizeof( gstring ), "[ x ] Você não é Dono(a) do Clan / Gangue %s, somente o(a) Dono(a) pode expulsar !", playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gstring );
		return 1;
	}
	tmp = strtok( cmdtext, idx );

	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /ExpulsarClan [ Membro ID ]" );
		return 1;
	}
	new
	Membron = strval( tmp )
	;
	if( Membron < 1 || Membron > 30 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente membros ID de 1 à 30 !" );
		return 1;
	}
	format( gStr, sizeof( gStr ), "Membro%d", Membron );

	if( !strcmp( dini_Get( gFile, gStr ), "Ninguem", true ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não há nenhum membro nesse(a) ID / Vaga !" );
		return 1;
	}
	new
	ex_do_clan[ 24 ]
	;
	format( ex_do_clan, 24, dini_Get( gFile, gStr ));

	dini_Set( gFile, gStr, "Ninguem" );

	format( gstring, sizeof( gstring ), "[ > ] Você expulsou %s do seu(sua) Clan / Gangue {FFFFFF}%s", ex_do_clan, playerClan[ playerid ] );
	SendClientMessage( playerid, COLOR_AMARELO, gstring );

	format( gStr, 128, "~w~Voce expulsou~p~%s ~w~do(a) Clan / Gangue", ex_do_clan );
	GameTextForPlayer( playerid, gStr, 5000, 15 );

	foreach(Player, c)
	{
		if( c != playerid && !strcmp( playerClan[ c ], playerClan[ playerid ], false ))
		{
			format( gStr, 128, "~w~%s ~r~~h~foi expulso do Clan / Gangue", ex_do_clan );
			GameTextForPlayer( c, gStr, 5000, 15 );

			format( gstring, sizeof( gstring ), "[ > ] %s líder do(a) Clan / Gangue %s que você é membro, expulsou %s do(a) Clan / Gangue.", PlayerName( playerid ), playerClan[ playerid ], ex_do_clan );
			SendClientMessage( c, COLOR_AMARELO, gstring );

			if( !strcmp( PlayerName( c ), ex_do_clan, false ))
			{
				format( playerClan[ c ], MAX_PLAYER_NAME+1, "Nenhum" );
				clanColor[ c ] = -1;
			}
		}
	}
	new
	n_m[ 128 ]
	;
	format( n_m, 128, "Clans/MembrosClans/%s.ini", ex_do_clan );

	if( fexist( n_m ))
	{
		fremove( n_m );
	}
	return 1;
}
if( !strcmp( cmd, "/corclan", true ))
{
	if( in_z[ playerid ] != -1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode utilizar comandos de Clan fora das Gangue Zones !" );
		return 1;
	}
	if( !strcmp( playerClan[ playerid ], "Nenhum", true ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não percente a nenhum(a) Clan / Gangue !" );
		return 1;
	}
	format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", playerClan[ playerid ] );
	if( strcmp( dini_Get( gFile, "Dono" ), PlayerName( playerid ), false ))
	{
		format( gstring, sizeof( gstring ), "[ x ] Você não é Dono(a) do Clan / Gangue %s, somente o(a) Dono(a) pode alterar a cor !", playerClan[ playerid ] );
		SendClientMessage( playerid, COLOR_ERRO, gstring );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /CorClan [ Cor ID ]" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] OBS: Somente ID de cor de 1 à 43." );
		return 1;
	}
	new
	corClan = strval( tmp )
	;
	if( corClan < 1 || corClan > 43 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] OBS: Somente ID de cor de 1 à 43." );
		return 1;
	}
	dini_IntSet( gFile, "Color", corClan );
	format( gStr, sizeof( gStr ), "[ > ] A cor do seu Clan / Gangue %s foi alterada para cor ID %d.", playerClan[ playerid ], corClan );
	SendClientMessage( playerid, COLOR_AMARELO, gStr );
	SendClientMessage( playerid, SetZonaCorClan( corClan ), "[ > ] Essa é a nova cor do seu Clan / Gangue." );
	clanColor[ playerid ] = corClan;
	foreach(Player, c)
	{
		if( c != playerid && !strcmp( playerClan[ c ], playerClan[ playerid ], true ))
		{
			format( gStr, 128, "~w~%s ~r~~h~Alterou a cor do(a) Clan / Gangue", PlayerName( playerid ));
			GameTextForPlayer( c, gStr, 5000, 15 );
			format( gstring, sizeof( gstring ), "[ > ] %s líder do Clan / Gangue %s que você é membro, alterou a cor do(a) Clan / Gangue.", PlayerName( playerid ));
			SendClientMessage( c, COLOR_AMARELO, gstring );
			SendClientMessage( c, SetZonaCorClan( corClan ), "[ > ] Essa é a nova cor do seu Clan / Gangue." );
			clanColor[ c ] = corClan;
		}
	}
	return 1;
}
if( !strcmp( cmd, "/infoclan", true ))
{
	if( in_z[ playerid ] != -1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode utilizar comandos de Clan fora das Gangue Zones !" );
		return 1;
	}
	if( !strcmp( playerClan[ playerid ], "Nenhum", true ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não percente a nenhum(a) Clan / Gangue !" );
		return 1;
	}
	format( gFile, sizeof( gFile ), "Clans/Clans/%s.ini", playerClan[ playerid ] );
	new
	m_id[ 24 ], m_nn[ 64 ], stg[ 1024 ]
	;
	format( gStr, sizeof( gStr ), "\t{FFFF00}%s\n\n\t{FFFFFF}Dono {FFFF00}%s\n\n{FFFFFF}Membros:\n\n", playerClan[ playerid ], dini_Get( gFile, "Dono" ));
	strcat( stg, gStr );

	for( new m = 1; m < 31; ++m )
	{
		format( m_id, 24, "Membro%d", m );

		if( strcmp( dini_Get( gFile, m_id ), "Ninguem", false ))
		{
			format( m_nn, 64, "{A0DD6F}%s (%d)\n", dini_Get( gFile, m_id ), m );
			strcat( stg, m_nn );
		}
	}
	ShowPlayerDialog( playerid, 1458, DIALOG_STYLE_MSGBOX, "•» Info Clan / Gangue", stg, "Fechar", "" );
	return 1;
}
if( !strcmp( cmd, "/comandosclan", true ))
{
	if( in_z[ playerid ] != -1 ) // GZ
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode usar comandos de Clan fora das Gangue Zones !" );
		return 1;
	}
	SendClientMessage( playerid, 0xFFFF66AA, "•~~~~~~~~~~~~~~~~~~~~~[ Comandos Clan ]~~~~~~~~~~~~~~~~~~~~~•" );
	SendClientMessage( playerid, COLOR_BRANCO, "/CriarClan - Cria um Clan || /ExcluirClan - Exclui o Clan" );
	SendClientMessage( playerid, COLOR_BRANCO, "/ConvidarClan - Convida alguém || /ExpulsarClan - Expulsa alguém" );
	SendClientMessage( playerid, COLOR_BRANCO, "/Aceitar - Aceita ser membro || /Recusar - Recusa ser membro" );
	SendClientMessage( playerid, COLOR_BRANCO, "/SairClan - Para sair do Clan || ! [ Mensagem ] - Chat Clan" );
	SendClientMessage( playerid, COLOR_BRANCO, "/CorClan - Altera as cores do Clan na cabeça/GZ/ChatClan" );
	SendClientMessage( playerid, 0xFFFF66AA, "•~~~~~~~~~~~~~~~~~~~~~[ Comandos Clan ]~~~~~~~~~~~~~~~~~~~~~•" );
	return 1;
}
if( !strcmp( cmdtext, "/tutorial", true ))
{
	new
	Float:poSox, Float:poSoy, Float:poSoz, Float:poSoa
	;
	GetPlayerPos( playerid, poSox, poSoy, poSoz );
	GetPlayerFacingAngle( playerid, poSoa );
	oPosx[ playerid ] = poSox;
	oPosy[ playerid ] = poSoy;
	oPosz[ playerid ] = poSoz;
	oPosa[ playerid ] = poSoa;
	ShowPlayerDialog( playerid, D_TUTO, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Tutorial BPO™.", "{FFFFFF}Tutorial", "Iniciar", "Cancelar" );
	return 1;
}
if( !strcmp( cmd, "/abencoar", true ))
{
	if( pInfo[ playerid ][ Prof ] == PADRE )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /abencoar [ ID ]" );
			return 1;
		}
		new id = strval( tmp );
		if( IsPlayerConnected( id ))
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ > ] Você abençoou %s com sucesso !", PlayerName( id ));
			MensagemFormatada( id, COLOR_BRANCO, "[ > ] Você abençoado pelo(a) padre %s", PlayerName( playerid ));
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Jogador não conectado!" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/enquete", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( vTempo > 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uma enquete já foi iniciada aguarde !" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Enquete [ Tempo ] [ Pergunta ]" );
			return 1;
		}
		new
		timer = strval( tmp )
		;
		if( timer < 5 || timer > 60 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente de 5 à 100 segundos !" );
			return 1;
		}

		new length = strlen( cmdtext );
		while (( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx++;
		}
		new offset = idx;
		new result[ 64 ];
		while (( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx++;
		}
		result[ idx - offset ] = EOS;

		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Enquete [ Tempo ] [ Pergunta ]" );
			return 1;
		}
		enquetep = result;
		VotacaoIniciada = 1;
		new
		votos[ 1024 ]
		;
		format( votos, sizeof( votos ), "~y~~h~Enquete~n~~n~~y~~h~Pergunta: ~w~%s~n~~n~~y~Digite: ~w~/Sim ~y~ou ~w~/Nao~n~~n~Votos: Sim 0 - Nao 0", result );
		TextDrawSetString( Enquete, votos );
		TextDrawShowForAll( Enquete );
		format( gstring, sizeof( gstring ), "~n~~n~~r~~h~Tempo~n~~n~%d", timer );
		TextDrawSetString( ContagemEnquete, gstring );
		TextDrawShowForAll( ContagemEnquete );
		vTempo = timer;
		TempoVotacao( );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/sim", true ))
{
	if( VotacaoIniciada == 1 )
	{
		if( Votou[ playerid ] == 0 )
		{
			SendClientMessage( playerid, 0x00FF99AA, "Seu voto foi ( {009966}SIM{00FF99} ) - Seu voto foi enviado com sucesso !" );
			Votou[ playerid ] = 1;
			vSim ++;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já votou nessa enquete !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não foi iniciado nenhuma enquete !" );
	}
	return 1;
}
if( !strcmp( cmd, "/nao", true ))
{
	if( VotacaoIniciada == 1 )
	{
		if( Votou[ playerid ] == 0 )
		{
			SendClientMessage( playerid, 0x00FF99AA, "Seu voto foi ( {FF0000}NÃO{00FF99} ) - Seu voto foi enviado com sucesso !" );
			Votou[ playerid ] = 1;
			vNao ++;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já votou nessa enquete !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não foi iniciado nenhuma enquete !" );
	}
	return 1;
}
if( !strcmp( cmd, "/meustatus", true ))
{
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	format( pFile, sizeof( pFile ), "Clans/MembrosClans/%s.ini", PlayerName( playerid ));

	new Stats[ 1024 ], HT[ 4 ], HN[ 4 ], HA[ 4 ], TC[ 4 ], TM[ 4 ], CID;

	if( pInfo[ playerid ][ HabT ] == 1 ) { HT = "Sim"; } else if( pInfo[ playerid ][ HabT ] == 0 ) { HT = "Não"; }
	if( pInfo[ playerid ][ HabN ] == 1 ) { HN = "Sim"; } else if( pInfo[ playerid ][ HabN ] == 0 ) { HN = "Não"; }
	if( pInfo[ playerid ][ HabA ] == 1 ) { HA = "Sim"; } else if( pInfo[ playerid ][ HabA ] == 0 ) { HA = "Não"; }

	if( fexist( gFile ))
	{
		if( dini_Int( gFile, "Casa" ) > 0 )
		{
			if( strcmp( CasaInfo[ dini_Int( gFile, "Casa" ) ][ Proprietario ], PlayerName( playerid ), false ))
			{
				TC = "Não";
			}
			else if( strcmp( CasaInfo[ dini_Int( gFile, "Casa" ) ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
			{
				TC = "Sim"; CID = dini_Int( gFile, "Casa" );
			}
		}
		if( dini_Int( gFile, "MorandoID" ) != -1 )
		{
			if( strcmp( CasaInfo[ dini_Int( gFile, "MorandoID" ) ][ Morador ], PlayerName( playerid ), true ) == 0 || strcmp( CasaInfo[ dini_Int( gFile, "MorandoID" ) ][ Morador2 ], PlayerName( playerid ), true ) == 0 || strcmp( CasaInfo[ dini_Int( gFile, "MorandoID" ) ][ Morador3 ], PlayerName( playerid ), true ) == 0 )
			{
				TM = "Sim";
			}
			else
			{
				TM = "Não";
			}
		}
	}
	new PC[ 4 ];
	if( fexist( pFile ))
	{
		PC = "Sim";
	}
	else if( !fexist( pFile ))
	{
		PC = "Não";
	}
	new RU[ 4 ];
	if( pInfo[ playerid ][ Tem_RelogioUP ] == 1 )
	{
		RU = "Sim";
	}
	else if( pInfo[ playerid ][ Tem_RelogioUP ] == 0 )
	{
		RU = "Não";
	}
	new TB[ 4 ];
	if( dini_Int( gFile, "ContaBanco" ) == 1 )
	{
		TB = "Sim";
	}
	else if( dini_Int( gFile, "ContaBanco" ) == 0 )
	{
		TB = "Não";
	}
	new TS[ 4 ];
	if( dini_Int( gFile, "Seguro" ) == 1 )
	{
		TS = "Sim";
	}
	else if( dini_Int( gFile, "Seguro" ) == 0 )
	{
		TS = "Não";
	}
	new TCO[ 4 ];
	if( dini_Int( gFile, "Convenio" ) == 1 )
	{
		TCO = "Sim";
	}
	else if( dini_Int( gFile, "Convenio" ) == 0 )
	{
		TCO = "Não";
	}
	new SX[ 7 ];
	if( dini_Int( gFile, "Sexo" ) == 1 )
	{
		SX = "Homem";
	}
	else if( dini_Int( gFile, "Sexo" ) == 2 )
	{
		SX = "Mulher";
	}
	new pqp[ 128 ], pqp2[ 128 ];
	format( pqp, sizeof( pqp ), "Nick: %s\nCarteira: R$%d\nBanco: RS%d\nHabilitação T: %s\nHabilitação N: %s\nHabilitação A: %s\nPossui Casa: %s ( ID %d )", PlayerName( playerid ), GetPlayerCash( playerid ), dini_Int( gFile, "SaldoBanco" ), HT, HN, HA, TC, CID, TM );
	format( gstring, sizeof( gstring ), "Skin: ID %d / Nome %s\nPossui Clan: %s - %s\nStatus Favela - Matou: %d / Morreu: %d", GetPlayerSkin( playerid ), GetSkinName( GetPlayerSkin( playerid )), PC, dini_Get( pFile, "Clan" ), dini_Int( gFile, "Matou" ), dini_Int( gFile, "Morreu" ));
	format( pqp2, sizeof( pqp2 ), "Conta no Banco: %s\nRelogio UP: %s\nSeguro: %s\nConvênio: %s\n", TB, RU, TS, TCO );
	format( Stats, sizeof( Stats ), "%s\n%s\n%s", pqp, gstring, pqp2 );
	ShowPlayerDialog( playerid, 9982, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Seu Status", Stats, "Fechar", "" );
	return 1;
}
if( !strcmp( cmd, "/armas", true ))
{
	if( PlayerToPoint( 1.1, playerid, 295.9448, -80.4257, 1001.5156 ))
	{
		if( dini_Int( f( playerid ), "HabP" ) == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não possui porte de armas !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ > ] Para comprar seu porte de armas vá até a delegacia mais próxima." );
			return 1;
		}
		ShowPlayerDialog( playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Armas Categoria\t {FF0000}Fogo\n{99CCFF}Armas Categoria\t {FF0000}Brancas\n{99CCFF}Armas Categoria\t {FF0000}Acessórios", "Ver", "Sair" );
		return 1;
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no checkpoint das armas na Ammu Nation !" );
	return 1;
}
if( strcmp( cmd, "/comprarporte", true ) == 0 )
{
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));

	if( PlayerToPoint( 1.1, playerid, 249.5481, 67.6516, 1003.6406 ) || PlayerToPoint( 1.0, playerid, 251.9699, 117.4014, 1003.2188 )) // DP // DP PRF
	{
		if( pInfo[ playerid ][ Level ] <= 3 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente ! ( Somente level superior a 3 )" );
			return 1;
		}
		if( GetPlayerCash( playerid ) < 1000 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! {FFFFFF}( Preço {009900}$1000 {FFFFFF} )" );
			return 1;
		}
		if( dini_Int( gFile, "HabP" ) == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem porte de armas !" );
			return 1;
		}
		SendClientMessage( playerid, -1, "[ > ] Você comprou o porte de armas." );
		sGivePlayerCash( playerid, -1000 );
		dini_IntSet( gFile, "HabP", 1 );
		pInfo[ playerid ][ HabA ] = 1;
		return 1;
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na delegacia !" );
	return 1;
}
if( strcmp( cmd, "/pagarfianca", true ) == 0 )
{
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));

	if( PlayerToPoint( 1.1, playerid, 249.5481, 67.6516, 1003.6406 ) || PlayerToPoint( 1.0, playerid, 251.9699, 117.4014, 1003.2188 ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /PagarFianca [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( GetPlayerCash( playerid ) < 5000 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem $50000, para pode paga ra fiança de alguém !" );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( id ));
		if( dini_Int( gFile, "Abuser" ) == 1 )
		{
			SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Esse jogador é abuser e foi preso por um Administrador !" );
			SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Somente um adminstrador pode pagar fiança para ele !" );
			return 1;
		}
		if( playerid == id )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode pagar fiança para você mesmo !" );
			return 1;
		}
		if( pInfo[ id ][ Preso ] == 0 )
		{
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ x ] o jogador(a) %s não está preso !", PlayerName( id ));
			return 1;
		}
		GameTextForPlayer( id, "~w~A LIBERDADE CANTOU!", 3000, 0 );
		MensagemFormatada( id, 0x3366FFAA, "[ INFO ] O(A) jogador(a) %s pagou sua fiança. Não cometa mais nenhum crime ou será preso novamente !", PlayerName( playerid ));
		MensagemFormatada( playerid, 0x33CCFFAA, "[ INFO ] Você pagou a fiança do(a) jogador(a) %s, por $10000.", PlayerName( id ));
		pInfo[ id ][ Preso ] = 0;
		sGivePlayerCash( playerid, -5000 );
		return 1;
	}
	else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na delegacia !" );
	return 1;
}
if( strcmp( cmd, "/setnb", true ) == 0 )
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setNB [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		MensagemFormatada( id, COLOR_AMARELO, "[ BPO ADMIN ] O(A) Administrador(a) %s setou para você a profissão de Caminhoneiro.", PlayerName( playerid ));
		MensagemFormatada( id, COLOR_AMARELO, "[ BPO ADMIN ] O(A) Administrador(a) %s deu para você as habilitações, Terrestre, Náutica e Aérea.", PlayerName( playerid ));
		MensagemFormatada( playerid, COLOR_AMARELO, "[ BPO ADMIN ] Você tornou %s um caminhoneiro, e setou todas habilitações.", PlayerName( id ));
		pInfo[ id ][ Prof ] = CAMINHONEIRO;
		dini_IntSet( f( id ), "HabT", 1 );
		pInfo[ id ][ HabT ] = 1;
		dini_IntSet( f( id ), "HabN", 1 );
		pInfo[ id ][ HabN ] = 1;
		dini_IntSet( f( id ), "HabA", 1 );
		pInfo[ id ][ HabA ] = 1;
		SpawnProf( id );
		SetColor( id );
		TogglePlayerControllable( id, true );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/iniciarrota", true ))
{
	if( pInfo[ playerid ][ Prof ] != MOTORISTA_ONIBUS )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Motorista de Ônibus !" );
		return 1;
	}
	if( !PlayerToPoint( 5.0, playerid, 2278.4102, -2329.2820, 13.5469 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área Motorista de Ônibus !" );
		return 1;
	}
	if( tempoBus[ playerid ] > 0 )
	{
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 431 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um ônibus !" );
		return 1;
	}
	if( RotaBus[ playerid ] > 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua rota de ônibus já foi iniciada !" );
	}
	else if( RotaBus[ playerid ] <= 0 )
	{
		tempoBus[ playerid ] = 5;
		timerBus[ playerid ] = SetTimerEx( "TempoRotaBus", 1000, false, "d", playerid );
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~Aguarde para iniciar...", 1000, 5 );
		TogglePlayerControllable( playerid, false );
	}
	return 1;
}
if( !strcmp( cmd, "/proximoponto", true ))
{
	if( pInfo[ playerid ][ Prof ] != MOTORISTA_ONIBUS )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Motorista de Ônibus !" );
		return 1;
	}
	if( tempoBus[ playerid ] > 0 )
	{
		return 1;
	}
	if( !IsPlayerInAnyVehicle( playerid ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um ônibus !" );
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 431 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um ônibus !" );
		return 1;
	}
	CheckPontoBusPlayer( playerid );
	return 1;
}
if( !strcmp( cmd, "/pontofinal", true ))
{
	if( PlayerToPoint( 5.0, playerid, 2278.4102, -2329.2820, 13.5469 ))
	{
		if( pInfo[ playerid ][ Prof ] != MOTORISTA_ONIBUS )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Motorista de Ônibus !" );
			return 1;
		}
		if( tempoBus[ playerid ] > 0 )
		{
			return 1;
		}
		if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 431 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um ônibus !" );
			return 1;
		}
		if( RotaBus[ playerid ] != 21 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez uma rota completa ou não iniciou uma !" );
		}
		else
		{
			RotaBus[ playerid ] = -1;
			tempoBus[ playerid ] = -1;
			GameTextForPlayer( playerid, "~y~~h~ROTA CONCLUIDA~w~~h~!", 1000, 1 );
			SendClientMessage( playerid, COLOR_ROXO, "[ > ] Você ganha $2000 pela rota feita." );
			sGivePlayerCash( playerid, 2000 );
			RemovePlayerMapIcon( playerid, 90 );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área Motorista de Ônibus !" );
	}
	return 1;
}
if( !strcmp( cmd, "/iniciarrotal", true ))
{
	if( pInfo[ playerid ][ Prof ] != LIXEIRO )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a)lixeiro(a) !" );
		return 1;
	}
	if( !PlayerToPoint( 5.0, playerid, 2211.0000,-2237.8000,13.5000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área lixeiro !" );
		return 1;
	}
	if( tempoLixo[ playerid ] > 0 )
	{
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 408 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um caminhão de Lixo !" );
		return 1;
	}
	if( RotaLixo[ playerid ] > 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua rota de lixeiro já foi iniciada !" );
	}
	else if( RotaLixo[ playerid ] <= 0 )
	{
		tempoLixo[ playerid ] = 5;
		timerLixo[ playerid ] = SetTimerEx( "TempoRotaLixo", 1000, false, "d", playerid );
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~Aguarde para iniciar...", 1000, 5 );
		TogglePlayerControllable( playerid, false );
	}
	return 1;
}
if( !strcmp( cmd, "/proximacesta", true ))
{
	if( pInfo[ playerid ][ Prof ] != LIXEIRO )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Lixeiro(a) !" );
		return 1;
	}
	if( tempoLixo[ playerid ] > 0 )
	{
		return 1;
	}
	if( !IsPlayerInAnyVehicle( playerid ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um caminhão de Lixo !" );
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 408 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um caminhão de Lixo !" );
		return 1;
	}
	CheckPontoLixoPlaye( playerid );
	return 1;
}
if( !strcmp( cmd, "/fimdarota", true ))
{
	if( PlayerToPoint( 5.0, playerid, 2211.0000,-2237.8000,13.5000 ))
	{
		if( pInfo[ playerid ][ Prof ] != LIXEIRO )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) Lixeiro(a) !" );
			return 1;
		}
		if( tempoLixo[ playerid ] > 0 )
		{
			return 1;
		}
		if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 408 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um caminhão de Lixo !" );
			return 1;
		}
		if( RotaLixo[ playerid ] != 21 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez uma rota completa ou não iniciou uma !" );
		}
		else
		{
			RotaLixo[ playerid ] = -1;
			tempoLixo[ playerid ] = -1;
			GameTextForPlayer( playerid, "~y~~h~ROTA CONCLUIDA~w~~h~!", 1000, 1 );
			SendClientMessage( playerid, COLOR_ROXO, "[ > ] Você ganha $2.500 pela rota feita." );
			sGivePlayerCash( playerid, 2500 );
			RemovePlayerMapIcon( playerid, 90 );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na área de Lixeiro !" );
	}
	return 1;
}
/*M.Carro Forte */
if( !strcmp( cmdtext, "/pegarserviço", true ))
{
	if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !IsPlayerInRangeOfPoint( playerid, 5.0, 1759.5000,-1666.0000,13.6000 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no estacionamento do banco !" );
			return 1;
		}
		if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 428 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um carro Forte !" );
			return 1;
		}
		if( RotaMFort[ playerid ] != 2000 && RotaMFort[ playerid ] > 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já pegou um serviço !" );
			format( gStr, 128, "[ > ] %s você pegou o serviço.", PlayerName( playerid ));
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
			format( gStr, 128, "[ > ] %s você deve coletar o dinheiro na empresa {FFFFFF}ID %d.", PlayerName( playerid ), RotaMFort[ playerid ] );
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
			return 1;
		}
		GameTextForPlayer( playerid, "~y~~h~Busque o dinheiro.", 2000, 1 );
		new
		empresa_id = minrand( 1, MAX_EMPRESAS )
		;
		RotaMFort[ playerid ] = empresa_id;
		format( gStr, 128, "[ > ] %s Va e pegue a mercadoria.", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		new
		zone[ MAX_ZONE_NAME ],
		Cidade[ MAX_ZONE_NAME ],
		m = RotaMFort[ playerid ]
		;
		GetEmpresa2DZone( m, zone, MAX_ZONE_NAME );
		GetEmpresa2DCidade( m, Cidade, MAX_ZONE_NAME );

		if( !strcmp( EmpresaInfo[ m ][ Proprietario ], "Ninguem", true ))
		{
			format( gstring, 256, "[ > ] Você deve coletar o dinheiro na empresa {FFFFFF}%s ID %d que não possui Dono(a).",  EmpresaInfo[ m ][ NomeEmp ], empresa_id );
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, 256, "[ > ] A empresa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade );
			SendClientMessage( playerid, 0xFFF17CFF, gstring );
		}
		else
		{
			format( gstring, 256, "[ > ] Você deve coletar o dinheiro na empresa {FFFFFF}%s ID %d que pertence à %s", EmpresaInfo[ m ][ NomeEmp ], empresa_id, EmpresaInfo[ m ][ Proprietario ] );
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, 256, "[ > ] A empresa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade );
			SendClientMessage( playerid, 0xFFF17CFF, gstring );
		}
		SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Siga o ícone com a letra D que foi colocado em seu mapa." );
		SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Ao achar digite: {FFFF00}/RecolherDinheiro" );
		RemovePlayerMapIcon( playerid, 90 );
		SetPlayerMapIcon( playerid, 90, EmpresaInfo[ empresa_id ][ PickupX ], EmpresaInfo[ empresa_id ][ PickupY ], EmpresaInfo[ empresa_id ][ PickupZ ], 24, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um motorista de carro forte !" );
		return 1;
	}
}
if( !strcmp( cmdtext, "/recolherdinheiro", true ))
{
	if( RotaMFort[ playerid ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pegou um serviço!" );
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 428 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um carro Forte !" );
		return 1;
	}
	new
	m = RotaMFort[ playerid ]
	;
	if( !IsPlayerInRangeOfPoint( playerid, 10.0, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
	{
		format( gStr, 128, "[ x ] Você não está na empresa ID %d !", m );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	if( RotaMFort1[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já recolheu o dinheiro !" );
		format( gStr, 128, "[ > ] %s você deve voltar para o estacionamento do banco.", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		return 1;
	}
	if( RotaMFort[ playerid ] == 2000 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pegou nenhum serviço!" );
		return 1;
	}
	GameTextForPlayer( playerid, "~y~~h~Dinheiro recolhido.", 2000, 1 );

	RotaMFort1[ playerid ] = 1;

	format( gStr, 128, "[ > ] {FFFFFF}%s {FFFF00}você recolheu o dinheiro.", PlayerName( playerid ));
	SendClientMessage( playerid, COLOR_AMARELO, gStr );

	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você deve voltar para a marca em frente ao banco para entregar o dinheiro." );
	SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Ao chegar na marca de frente do banco digite: {FFFF00}/dinheiroentregar" );

	RemovePlayerMapIcon( playerid, 90 );
	return 1;
}
if( !strcmp( cmdtext, "/dinheiroentregar", true ))
{
	if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !IsPlayerInRangeOfPoint( playerid, 5.0, 1759.5000,-1666.0000,13.6000 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no estacionamento do banco !" );
			return 1;
		}
		{
			if( RotaMFort1[ playerid ] != 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez nenhum serviço !" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve fazer um serviço para poder entregar o dinheiro !" );
				return 1;
			}
			format( gStr, 128, "[ > ] %s você deu baixa no serviço feito para a empresa ID %d.", PlayerName( playerid ), RotaMFort[ playerid ] );
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
			sGivePlayerCash( playerid, 2500 );
			RotaMFort[ playerid ] = -1;
			RotaMFort1[ playerid ] = 0;
			return 1;
		}
	}
}
/*Entregador do Sedex */
if( !strcmp( cmdtext, "/MercadoriaSedex", true ))
{
	if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !IsPlayerInRangeOfPoint( playerid, 5.0, 2449.8999,-1548.8000,22.9209 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no local de spawn do Sedex !" );
			return 1;
		}
		if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 498 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um veiculo do Sedex !" );
			return 1;
		}
		if( RotaSedex[ playerid ] != 2000 && RotaSedex[ playerid ] > 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já pegou uma mercadoria !" );
			return 1;
		}
		GameTextForPlayer( playerid, "~y~~h~Entregue a mercadoria.", 2000, 1 );
		new
		casa_id = minrand( 1, MAX_CASAS )
		;
		RotaSedex[ playerid ] = casa_id;
		format( gStr, 128, "[ > ] %s Va e entregue a mercadoria.", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_VERDE, gStr );
		new
		zone[ MAX_ZONE_NAME ],
		Cidade[ MAX_ZONE_NAME ],
		c = RotaSedex[ playerid ]
		;
		GetCasa2DZone( c, zone, MAX_ZONE_NAME );
		GetCasa2DCidade( c, Cidade, MAX_ZONE_NAME );

		if( !strcmp( CasaInfo[ c ][ Proprietario ], "Ninguem", true ))
		{
			format( gstring, 256, "[ > ] Você deve entregar algumas cobranças na casa ID %d que não possui Dono(a).",  CasaInfo[ c ][ Numero ], casa_id );
			SendClientMessage( playerid, COLOR_VERDE, gstring );
			format( gstring, 256, "[ > ] A casa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade );
			SendClientMessage( playerid, 0xFFF17CFF, gstring );
		}
		else
		{
			format( gstring, 256, "[ > ] Você deve entregar a mercadoria na casa {FFFFFF}%s ID %d que pertence à %s", CasaInfo[ c ][ Numero ], casa_id, CasaInfo[ c ][ Proprietario ] );
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, 256, "[ > ] A Casa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade );
			SendClientMessage( playerid, 0xFFF17CFF, gstring );
		}
		SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Siga o ícone com a letra S que foi colocado em seu mapa." );
		SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Ao achar digite: {FFFF00}/SedexEntregar" );
		RemovePlayerMapIcon( playerid, 90 );
		SetPlayerMapIcon( playerid, 90, CasaInfo[ casa_id ][ PickupX ], CasaInfo[ casa_id ][ PickupY ], CasaInfo[ casa_id ][ PickupZ ], 38, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um Trabalhador do Sedex !" );
		return 1;
	}
}
if( !strcmp( cmdtext, "/SedexEntregar", true ))
{
	if( RotaSedex[ playerid ] <= 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pegou uma mercadoria!" );
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid )) != 482 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um Veiculo do Sedex !" );
		return 1;
	}
	new
	c = RotaSedex[ playerid ]
	;
	if( !IsPlayerInRangeOfPoint( playerid, 30.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
	{
		format( gStr, 128, "[ x ] Você não está na casa ID %d !", c );
		SendClientMessage( playerid, COLOR_ERRO, gStr );
		return 1;
	}
	if( RotaSedex1[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já entregou a mercadoria !" );
		format( gStr, 128, "[ > ] %s você deve voltar para o local de spawn de sua profissao.", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		return 1;
	}
	if( RotaSedex[ playerid ] == 2000 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pegou nenhuma mercadoria!" );
		return 1;
	}
	GameTextForPlayer( playerid, "~y~~h~Mercadoria Entregada.", 2000, 1 );

	RotaSedex1[ playerid ] = 1;

	format( gStr, 128, "[ > ] {FFFFFF}%s {FFFF00}você entregou a mercadoria.", PlayerName( playerid ));
	SendClientMessage( playerid, COLOR_AMARELO, gStr );

	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você deve voltar para a marca no Spawn do Sedex para dar baixa na mercadoria entregue." );
	SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Ao chegar na marca no spawn do Sedex digite: {FFFF00}/BaixaEntregaSedex" );

	RemovePlayerMapIcon( playerid, 90 );
	return 1;
}
if( !strcmp( cmdtext, "/BaixaEntregaSedex", true ))
{
	if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( !IsPlayerInRangeOfPoint( playerid, 5.0, 2449.8999,-1548.8000,22.9209 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no spawn do Sedex !" );
			return 1;
		}
		{
			if( RotaSedex1[ playerid ] != 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não fez nenhum serviço !" );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você deve fazer um serviço para poder entregar o dinheiro !" );
				return 1;
			}
			format( gStr, 128, "[ > ] %s você deu baixa na mercadoria entregada na casa ID %d.", PlayerName( playerid ), RotaSedex[ playerid ] );
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
			sGivePlayerCash( playerid, 2000 );
			RotaSedex[ playerid ] = -1;
			RotaSedex1[ playerid ] = 0;
			return 1;
		}
	}
}
if( !strcmp( cmd, "/participar", true ))
{
	if( EventoCriado == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não existe nenhum evento criado no momento !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) > 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode participar do evento estando procurado !" );
		return 1;
	}
	if( ParticipandoEvento[ playerid ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está participando do evento !" );
		return 1;
	}
	if( vOcupados == VeiculosEvento )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já excedeu o limite de players no evento !" );
		return 1;
	}
	new
	TCP
	;
	if( TipoCheckPoint == 1 )
	{
		TCP = 0;
	}
	else if( TipoCheckPoint == 2 )
	{
		TCP = 3;
	}
	if( vOcupados < VeiculosEvento )
	{
		SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Você agora está participando do evento. Boa sorte !" );
		PutPlayerInVehicle( playerid, vEvento[ vOcupados ], 0 );
		vOcupou[ playerid ] = vEvento[ vOcupados ];
		vOcupados ++;
		ParticipandoEvento[ playerid ] = 1;
		TextDrawShowForPlayer( playerid, text_Top5[ 0 ] );
		TextDrawShowForPlayer( playerid, text_Top5[ 1 ] );
		SetPlayerRaceCheckpoint( playerid, TCP, CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 0 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 1 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 2 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] +1 ][ 0 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] + 1 ][ 1 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] +1 ][ 2 ], 8.0 );
	}
	return 1;
}
 // Evento
if( GetPVarInt( playerid, "pDono" ) == 1 || GetPVarInt( playerid, "pAdmin" ) == 1 )
{
	if( !strcmp( cmd, "/ecv", true ))
	{
		if( VeiculosEvento == MAX_VEH_EVENTO )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Foi excedido o limite de veículos por evento ! ( Máximo: 50 )" );
			return 1;
		}
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /ecv [ VeiculoID ]" );
			return 1;
		}
		new
		veiculoID = strval( tmp )
		;
		if( veiculoID < 400 || veiculoID > 611 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] ID de veículo inexistente!" );
			return 1;
		}
		new
		Float:ev_x, Float:ev_y, Float:ev_z, Float:ev_a
		;
		GetPlayerFacingAngle( playerid, ev_a );
		GetPlayerPos( playerid, ev_x, ev_y, ev_z );
		new
		ev_c = random( 360 )
		;
		PutPlayerInVehicle( playerid, vEvento[ VeiculosEvento ] = CreateVehicle( veiculoID, ev_x, ev_y, ev_z, ev_a, ev_c, ev_c, -1 ), 0 );
        LinkVehicleToInterior( vEvento[ VeiculosEvento ], GetPlayerInterior( playerid )); // Veiculo aparece no interior
        SetVehicleVirtualWorld( vEvento[ VeiculosEvento ], GetPlayerVirtualWorld( playerid )); // Veiculo aparece no interior
		ivEvento[ vEvento[ VeiculosEvento ] ] = 1;
		VeiculosEvento ++;
		return 1;
	}
	if( !strcmp( cmd, "/evmodelo", true ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /evModelo [ ID Veículo ]" );
			return 1;
		}
		new
		ev_modelo = strval( tmp )
		;
		for( new ve = 0; ve < MAX_VEHICLES; ++ve )
		{
			if( IsValidVehicleEvento( ve ))
			{
				new
				Float:vehx, Float:vehy, Float:vehz, Float:veha
				;
				GetVehiclePos( ve, vehx, vehy, vehz );
				GetVehiclePos( ve, vehx, vehy, vehz );
				GetVehicleZAngle( ve, veha );
				DestroyVehicle( ve );
				new
				ev_c = random( 360 )
				;
				vEvento[ CreateVehicle( ev_modelo, vehx, vehy, vehz, veha, ev_c, ev_c, -1 ) ] = 1;
			}
		}
		return 1;
	}
	if( !strcmp( cmd, "/econtar", true ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /eContar [ Segundos ]" );
			return 1;
		}
		new
		eSegundos = strval( tmp )
		;
		if( eSegundos < 1 || eSegundos > 60 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente segundos para iniciar uma contagem de 1 a 60!" );
			return 1;
		}
		ContagemRegressiva = eSegundos;
		eContageme( );
		return 1;
	}
	if( !strcmp( cmd, "/etipo", true ))
	{
		tmp = strtok( cmdtext, idx ) ;
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /eTipo [ 1 = Terrestre | 2 = Aéreo ]" );
			return 1;
		}
		new
		CPT = strval( tmp )
		;
		if( CPT == 1 || CPT == 2 )
		{
			if( CPT == 1 )
			{
				TipoCheckPoint = 1;
				SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Os checkpoints a ser criados foram definidos para corrida terrestre." );
				ClickMause[ playerid ] = 1;
				return 1;
			}
			else if( CPT == 2 )
			{
				TipoCheckPoint = 2;
				SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Os checkpoints a ser criados foram definidos para corrida aéreo." );
				ClickMause[ playerid ] = 1;
				return 1;
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode definir ( 1 para terrestre ) ou ( 2 para aéreo )!" );
			return 1;
		}
		return 1;
	}
	if( !strcmp( cmd, "/ecriar", true ))
	{
		if( EventoCarregado == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Antes você precisa carregar o evento!" );
			return 1;
		}
		if( EventoCriado == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já tem um evento em andamento!" );
			return 1;
		}
		else
		{
			EventoCriado = 1;
			SendClientMessage( playerid, -1, "[ x ] Evento criado com sucesso!" );
			T_AntBug = 1;
			SetTimer( "CongelarPlayers", 1000, false );
			ClickMause[ playerid ] = 0;
			return 1;
		}
	}
	if( !strcmp( cmd, "/ecarregar", true ))
	{
		if( CheckID < 3 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa criar no mínimo 3 checkpoints!" );
			return 1;
		}
		EventoCarregado = 1;
		CheckMaxRaceCheckPoints( playerid );
		ClickMause[ playerid ] = 0;
		return 1;
	}
	if( !strcmp( cmd, "/eparar", true ))
	{
		foreach(Player, i )
		{
			if( ParticipandoEvento[ i ] == 1 )
			{
				SetPlayerInterior( i, 0 );
				SetPlayerPos( i, 1227.4470,-1817.2300,16.5938 );
				SetCameraBehindPlayer( i );
				TogglePlayerControllable( i, true );
				Finalizou[ i ] = 0;
			}
			SetPlayerCheckPoint[ i ] = 0; ParticipandoEvento[ i ] = 0; vOcupou[ i ] = -1;
			DisablePlayerRaceCheckpoint( i );
			TextDrawHideForAll( text_Top5[ 0 ] );
			TextDrawHideForAll( text_Top5[ 1 ] );
		}
		for( new ve = 0; ve < MAX_VEHICLES; ++ve )
		{
			if( IsValidVehicleEvento( ve ))
			{
				DestroyVehicle( ve );
			}
			ivEvento[ ve ] = 0;
		}
		CheckID = 0;
		MaxCheck = 0;
		UltimoCP = 0;
		vOcupados = 0;
		VeiculosEvento = 0;
		EventoCriado = 0;
		AlguemVenceu = 0;
		AlguemVenceu2 = 0;
		AlguemVenceu3 = 0;
		EventoCarregado = 0;
		KillTimer( T_Rank );
		RemovePlayerMapIcon( playerid, 8 );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Evento destruido com sucesso !" );
		SendClientMessage( playerid, COLOR_ERRO, "•~~~~~~~~~~~~~~~~~~~~~~~ Info Evento ~~~~~~~~~~~~~~~~~~~~~~~•" );
		MensagemFormatadaAll( -1, "• %s - venceu o evento em 1° lugar.", VencedorNome1 );
		MensagemFormatadaAll( -1, "• %s - venceu o evento em 2° lugar.", VencedorNome2 );
		MensagemFormatadaAll( -1, "• %s - venceu o evento em 3° lugar.", VencedorNome3 );
		SendClientMessage( playerid, COLOR_ERRO, "•~~~~~~~~~~~~~~~~~~~~~~~ Info Evento ~~~~~~~~~~~~~~~~~~~~~~~•" );
		VencedorNome1 = "Ninguém";
		VencedorNome2 = "Ninguém";
		VencedorNome3 = "Ninguém";
		ClickMause[ playerid ] = 0;
		return 1;
	}
	if( !strcmp( cmd, "/edveiculos", true ))
	{
		for( new ve = 0; ve < MAX_VEHICLES; ++ve )
		{
			if( IsValidVehicleEvento( ve ))
			{
				DestroyVehicle( ve );
				vOcupados = 0;
				VeiculosEvento = 0;
				ivEvento[ ve ] = 0;
				SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Os veículos criados foram destruidos !" );
			}
		}
		return 1;
	}
	if( !strcmp( cmd, "/evrespawn", true ))
	{
		for( new ve = 0; ve < MAX_VEHICLES; ++ve )
		{
			if( IsValidVehicleEvento( ve ))
			{
				SetVehicleToRespawn( ve );
				SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Os veículos do evento foram respawnados !" );
			}
		}
		return 1;
	}
	if( !strcmp( cmd, "/epausar", true ))
	{
		foreach(Player, i )
		{
			if( ParticipandoEvento[ i ] == 1 )
			{
				T_AntBug = 1;
				CongelarPlayers( );
				GameTextForPlayer( i, "~r~EVENTO PAUSADO!", 5, 1 );
			}
		}
		return 1;
	}
	if( !strcmp( cmd, "/esalvos", true ))
	{
		new
		length = strlen( cmdtext )
		;
		while(( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx ++;
		}
		new
		offset = idx
		;
		new
		result[ 64 ]
		;
		while(( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx ++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /eSalvos [ Nome ]" );
			return 1;
		}
		new
		nomeEvento[ 24 ], nomeEventov[ 24 ]
		;
		format( nomeEvento, sizeof( nomeEvento ), "eSalvos/CPS/%s.txt", result );
		format( nomeEventov, sizeof( nomeEventov ), "eSalvos/VS/%s.txt", result );
		carregarRace( playerid, nomeEvento );
		carregarVeiculos( nomeEventov );
		return 1;
	}
	if( !strcmp( cmd, "/esalvar", true ))
	{
		new length = strlen( cmdtext );
		while(( idx < length ) && ( cmdtext[ idx ] <= ' ' ))
		{
			idx ++;
		}
		new offset = idx;
		new result[ 64 ];
		while(( idx < length ) && (( idx - offset ) < ( sizeof( result ) - 1 )) )
		{
			result[ idx - offset ] = cmdtext[ idx ];
			idx ++;
		}
		result[ idx - offset ] = EOS;
		if( !strlen( result ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /eSalvar [ Nome ]" );
			return 1;
		}
		salvarRace(playerid, result);
		return 1;
	}
	if( !strcmp( cmd, "/ercp", true ))
	{
		CheckID = 0;
		MaxCheck = 0;
		UltimoCP = 0;
		EventoCriado = 0;
		AlguemVenceu = 0;
		AlguemVenceu2 = 0;
		AlguemVenceu3 = 0;
		EventoCarregado = 0;
		SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Você restou os checkpoints, crie-os novamente ! ( Os veículos permanecem )" );
		return 1;
	}
	if( !strcmp( cmd, "/edt", true ))
	{
		foreach(Player, i )
		{
			if( ParticipandoEvento[ i ] == 1 )
			{
				SetPlayerInterior( i, 0 );
				SetPlayerPos( i, 1227.4470,-1817.2300,16.5938 );
				SetCameraBehindPlayer( i );
				TogglePlayerControllable( i, true );
				Finalizou[ i ] = 0;
			}
			SetPlayerCheckPoint[ i ] = 0; ParticipandoEvento[ i ] = 0; vOcupou[ i ] = -1;
			DisablePlayerRaceCheckpoint( i );
			TextDrawHideForAll( text_Top5[ 0 ] );
			TextDrawHideForAll( text_Top5[ 1 ] );
		}
		for( new ve = 0; ve < MAX_VEHICLES; ++ve )
		{
			if( IsValidVehicleEvento( ve ))
			{
				DestroyVehicle( ve );
			}
			ivEvento[ ve ] = 0;
		}
		CheckID = 0;
		MaxCheck = 0;
		UltimoCP = 0;
		vOcupados = 0;
		VeiculosEvento = 0;
		EventoCriado = 0;
		AlguemVenceu = 0;
		AlguemVenceu2 = 0;
		AlguemVenceu3 = 0;
		EventoCarregado = 0;
		KillTimer( T_Rank );
		RemovePlayerMapIcon( playerid, 8 );
		SendClientMessage( playerid, COLOR_SISTEMA, "[ i ] Evento destruido com sucesso !" );
		VencedorNome1 = "Ninguém";
		VencedorNome2 = "Ninguém";
		VencedorNome3 = "Ninguém";
		ClickMause[ playerid ] = 0;
		return 1;
	}
	if( !strcmp( cmd, "/ecolor", true ))
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /eColor [ Cor1 ] [ Cor2 ]" );
			return 1;
		}
		new
		ecc1 = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /eColor [ Cor1 ] [ Cor2 ]" );
			return 1;
		}
		new
		ecc2 = strval( tmp )
		;
		for( new ve = 0; ve < MAX_VEHICLES; ++ve )
		{
			if( IsValidVehicleEvento( ve ))
			{
				ChangeVehicleColor( ve, ecc1, ecc2 );
			}
		}
		return 1;
	}
	if( !strcmp( cmd, "/ecmds", true ))
	{
		SendClientMessage( playerid, 0x2CFF00FF, "/eTipo - 1 = Race terrestre, 2 = Race áreo | eCV - Cria os veículos do evento por ID. ( CRIAR FORA DO VEÍCULO )" );
		SendClientMessage( playerid, 0x2CFF00FF, "/eCarregar - Carregar o evento e faz à contagem dos CPS | eCriar - Cria o evento assim os players podem usar: /Participar" );
		SendClientMessage( playerid, 0x2CFF00FF, "/eContar - Inicia à contagem do evento definido de 3 à 60 | ePausar - Pausa o evento pra retornar use: /eContar novamente" );
		SendClientMessage( playerid, 0x2CFF00FF, "/edVeiculos - Destroi os veículos atualmente criados | eParar - Destroi o evento veículos e CP de quem estiver no evento" );
		SendClientMessage( playerid, 0x2CFF00FF, "/eSalvar - Salva os CPs criado, somente se o evento valer a pena, exemplo: /eSalvar Race Fire\n/eLoad - Carregar um evento salvo exemplo: /eLoad Race LS" );
		SendClientMessage( playerid, 0x2CFF00FF, "/eRCP - Reseta os CP's sem destruir os veículos | /edt - Destroy o evento | /evrespawn - respawn os veiculos do evento" );
		SendClientMessage( playerid, 0x2CFF00FF, "/eSalvos - Carrega um evento já criado pelo nome. EX: /esalvos BPO Race" );
		return 1;
	}
}
if( !strcmp( cmd, "/desistir", true ))
{
	if( ParticipandoEvento[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um evento !" );
		return 1;
	}
	SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você dessitiu do evento !" );
	SetPlayerPos( playerid, 1227.4470,-1817.2300,16.5938 );
	SetCameraBehindPlayer( playerid );
	DisablePlayerRaceCheckpoint( playerid );
	TextDrawHideForPlayer( playerid, text_Top5[ 0 ] );
	TextDrawHideForPlayer( playerid, text_Top5[ 1 ] );
	SetPlayerCheckPoint[ playerid ] = 0;
	ParticipandoEvento[ playerid ] = 0;
	vOcupou[ playerid ] = -1;
	Finalizou[ playerid ] = 0;
	TogglePlayerControllable( playerid, true );
	return 1;
}
if( !strcmp( cmd, "/novatos", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo [ playerid ] [ Ajudante ] == 1 )
	{
		SendClientMessage( playerid, COLOR_AZULCLARO, "x Novatos online:" );
		foreach(Player, i )
		{
			if( pInfo[ i ][ Level ] == 0 && pInfo[ i ][ Prof ] == 0 )
			{
				format( gStr, sizeof( gStr ), "• %s [ ID %d ], é novato.", PlayerName( i ), i );
				SendClientMessage( playerid, COLOR_BRANCO, gStr );
			}
		}
		return 1;
	}
	return 1;
}
if( !strcmp( cmdtext, "/veiculos a" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos A ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " AT-400 -> 577 ~~ Andromeda -> 592" );
	SendClientMessage( playerid, COLOR_BRANCO, " Admiral -> 445 ~~ Alpha -> 602 ~~ Ambulan -> 416" );
	SendClientMessage( playerid, COLOR_BRANCO, " Artict1 -> 435 ~~ Artict2 -> 450" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos A ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos b" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos B ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " BF-400 -> 581 ~~ Beagle -> 511 ~~ Baggage -> 485 ~~ Bandito -> 568" );
	SendClientMessage( playerid, COLOR_BRANCO, " Banshee -> 429 ~~ Barracks -> 433 ~~ Benson -> 499 ~~ Bfinject -> 424" );
	SendClientMessage( playerid, COLOR_BRANCO, " Blade -> 536 ~~ Blistac -> 496 ~~ Bloodra -> 504 ~~ Bobcat -> 422" );
	SendClientMessage( playerid, COLOR_BRANCO, " Boxburg -> 609 ~~ Boxville -> 498 ~~ Bravura -> 401 ~~ Broadway -> 575" );
	SendClientMessage( playerid, COLOR_BRANCO, " Buccanee -> 518 ~~ Buffalo -> 402 ~~ Bullet -> 541 ~~ Bagboxb -> 607" );
	SendClientMessage( playerid, COLOR_BRANCO, " Burrito -> 482 ~~ Bus -> 431 ~~ Bike -> 509 ~~ BMX -> 481 ~~ Bagboxa -> 606" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos B ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos c" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos C ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " CopBike -> 523 ~~ Cropdust -> 512 ~~ CoastGuard -> 472" );
	SendClientMessage( playerid, COLOR_BRANCO, " Caddy -> 457 ~~ Cadrona -> 527 ~~ Camper -> 483 ~~ Cement -> 524" );
	SendClientMessage( playerid, COLOR_BRANCO, " Cheetah -> 411 ~~ Clover -> 542 ~~ Club -> 589 ~~ Coach -> 437" );
	SendClientMessage( playerid, COLOR_BRANCO, " Combine -> 532 ~~ Comet -> 480 ~~ CopCarLS -> 596 ~~ CopCar -> 599" );
	SendClientMessage( playerid, COLOR_BRANCO, " CopCarSF -> 597 ~~ CopCarLV -> 598 ~~ Cft30 -> 578 ~~ Cozer -> 486" );
	SendClientMessage( playerid, COLOR_BRANCO, " Cargobob -> 548 ~~ Cabbie -> 438" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos C ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos d" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos D ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Dodo -> 593 ~~ Dinghy -> 473 ~~ Dumper -> 406 ~~ Duneride -> 573" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos D ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos e" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos E ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Elegant -> 507 ~~ Elegy -> 562 ~~ Emperor -> 585" );
	SendClientMessage( playerid, COLOR_BRANCO, " Esperant -> 419 ~~ Euros -> 587 ~~ Enforcer -> 427" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos E ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos f" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos F ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Faggio -> 462 ~~ FCR-900 -> 521 ~~ Freeway -> 463 ~~ Fbiranch -> 490" );
	SendClientMessage( playerid, COLOR_BRANCO, " Fbitruck -> 528 ~~ Feltze -> 533 ~~ Firela -> 544 ~~ Firetruck -> 407" );
	SendClientMessage( playerid, COLOR_BRANCO, " Flash -> 565 ~~ Flatbed -> 455 ~~ Forklift -> 530 ~~ Fortune -> 526" );
	SendClientMessage( playerid, COLOR_BRANCO, " Freight -> 537 ~~ Farmtr1 -> 610 " );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos F ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos g" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos G ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Glendale -> 466 ~~ Glenshit -> 604 ~~ Greenwood -> 492 " );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos G ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos h" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos H ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Hydra -> 520 ~~ Hermes -> 474 ~~ Hotdog -> 588 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Hotrina -> 502 ~~ Hotrinb -> 503 ~~ Hotring -> 594 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Hustler -> 545 ~~ Huntley -> 579 ~~ Hotknife -> 434" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos H ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos i" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos I ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Infernus -> 411 ~~ Intruder -> 546" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos I ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos j" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos J ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Jester -> 559 ~~ Journey -> 508 " );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos J ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos k" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos K ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Kart -> 571" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos K ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos l" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos L ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Launch -> 595 ~~ Landstal -> 400" );
	SendClientMessage( playerid, COLOR_BRANCO, " Leviathn -> 417 ~~ Linerun -> 403" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos L ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos m" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos M ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Marquis -> 484 ~~ Majestic -> 517 ~~ Manana -> 410 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Merit -> 551 ~~ Mesa -> 500 ~~ Moonbeam -> 418 ~~ Mowerr -> 572" );
	SendClientMessage( playerid, COLOR_BRANCO, " Mrwhoop -> 423 ~~ Mule -> 414 ~~ Monster -> 444 ~~ MonsterA -> 556" );
	SendClientMessage( playerid, COLOR_BRANCO, " MonsterB -> 557 ~~ Mountain Bike -> 510 ~~ Maverick -> 487" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos M ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos n" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos N ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " NRG-500 -> 522 ~~ Nevada -> 553 ~~ Nebula -> 516 ~~ Newsvan -> 582" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos N ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos o" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos O ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Oceanic -> 467" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos O ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos p" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos P ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " PCJ-600 -> 461 ~~ Pizzaboy -> 448 ~~ Predator > 430" );
	SendClientMessage( playerid, COLOR_BRANCO, " Packer -> 443 ~~ Patriot -> 470 ~~ Peren -> 404 ~~ Petro -> 514" );
	SendClientMessage( playerid, COLOR_BRANCO, " Phoenix -> 603 ~~ Picador -> 600 ~~ Pony -> 413 ~~ Premier -> 426" );
	SendClientMessage( playerid, COLOR_BRANCO, " Previon -> 436 ~~ Primo -> 547 ~~ Polmav -> 497 ~~ Petrotr -> 584" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos P ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos q" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Q ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Quad -> 471" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Q ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos r" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos R ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Rustler -> 476 ~~ RC Barron -> 464 ~~ Reefer -> 453" );
	SendClientMessage( playerid, COLOR_BRANCO, " Rancher -> 489 ~~ RcBandit -> 441 ~~ Rccam -> 594 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Rctiger -> 564 ~~ RoadTrain -> 515 ~~ Regina -> 479 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Remingtn -> 534 ~~ Rhino -> 432 ~~ Rnchlure -> 505 ~~ Rcraider -> 465" );
	SendClientMessage( playerid, COLOR_BRANCO, " Romero -> 442 ~~ Rumpo -> 440 ~~ Raindanc -> 563 ~~ Rcgoblin -> 501" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos R ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos s" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos S ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Sanchez -> 468 ~~ Stuntplane -> 513 ~~ Skimmer -> 460 ~~ Sparrow -> 469" );
	SendClientMessage( playerid, COLOR_BRANCO, " Shamal -> 519 ~~ Speeder -> 452 ~~ Squalo -> 446 ~~ Sabre -> 475" );
	SendClientMessage( playerid, COLOR_BRANCO, " Sadler -> 543 ~~ Sadlshit -> 605 ~~ Sandking -> 495 ~~ Savanna -> 567" );
	SendClientMessage( playerid, COLOR_BRANCO, " Securica -> 428 ~~ Sentinel -> 405 ~~ Slamvan -> 535 ~~ Solair -> 458" );
	SendClientMessage( playerid, COLOR_BRANCO, " Stafford -> 580 ~~ Stallion -> 439 ~~ Stratum -> 561 ~~ Stretch -> 409 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Sultan -> 560 ~~ Sunrise -> 550 ~~ SuperGT -> 560 ~~ BOPEvan -> 601 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Sweeper -> 574 ~~ Streak -> 538 ~~ Streakc -> 570 ~~ Seasparr -> 447" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos S ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos t" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos T ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Tropic -> 454 ~~ Tahoma -> 566 ~~ Tampa -> 499 ~~ Taxi -> 420" );
	SendClientMessage( playerid, COLOR_BRANCO, " Topfun -> 459 ~~ Tornado -> 576 ~~ Towtruck -> 525" );
	SendClientMessage( playerid, COLOR_BRANCO, " Trash -> 408 ~~ Tug -> 583 ~~ Turismo -> 451 ~~ Tram -> 449 " );
	SendClientMessage( playerid, COLOR_BRANCO, " Tugstair -> 608 " );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos T ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos u" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos U ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Uranus -> 558 ~~ Utility -> 522 ~~ Utiltr1 -> 611" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos U ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos v" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos V ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Vortex -> 539 ~~ Vincent -> 540 ~~ Virgo -> 491" );
	SendClientMessage( playerid, COLOR_BRANCO, " Vcnmav -> 488 ~~ Voodoo -> 412" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos V ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos x" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos X ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Não existe veículos com as iniciais da letra 'X'." );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos X ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/veiculos z" ))
{
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Z ~~~~~~~~~~~~~~~~~~~~~~~~" );
	SendClientMessage( playerid, COLOR_BRANCO, " Zr350 -> 477" );
	SendClientMessage( playerid, COLOR_BRANCO, "~~~~~~~~~~~~~~~~~~~~~~~~ Veiculos Z ~~~~~~~~~~~~~~~~~~~~~~~~" );
	return 1;
}
if( !strcmp( cmdtext, "/GPSPlayer" ))
{
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	if( dini_Int( gFile, "GPSPlayer" ) == 1 || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPSPlayer comandos: /GPSPlayer [ ID ] = Localiza um jogador | /GPSPlayer desligar = Desliga o GPSPlayer." );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um GPSPlayer" );
		return 1;
	}
}
if( !strcmp( cmd, "/pflip", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Pflip [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( IsPlayerConnected( id ))
		{
			MensagemFormatada( id, COLOR_SISTEMA, "[ BPO ADMIN ] '%s' desvirou e consertou seu veículo.", PlayerName( playerid ));
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ BPO ADMIN ] Você desvirou e consertou o veículo de %s", PlayerName( id ));
			new currentveh, Float:angle;
			currentveh = GetPlayerVehicleID( id );
			GetVehicleZAngle( currentveh, angle );
			SetVehicleZAngle( currentveh, angle );
			SetVehicleHealth( currentveh, 1000 );
			RepairVehicle( currentveh );
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmd, "/setarjetpack", true ))
{
	if( dini_Int( f( playerid ), "Dono" ) == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SetJetPack [ ID ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		if( IsPlayerConnected( id ))
		{
			MensagemFormatada( id, COLOR_SISTEMA, "[ BPO ADMIN ] %s setou um JetPack para você.", PlayerName( playerid ));
			MensagemFormatada( playerid, COLOR_SISTEMA, "[ BPO ADMIN ] Você setou um JatPack para %s", PlayerName( id ));
			dini_IntSet( f( id ), "JetPack", 1 );
			pInfo[ id ][ JetPack ] = 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Ninguém online com esse ID !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
}
if( !strcmp( cmdtext, "/Estadio BateBate", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 15 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), -1398.103515,937.631164,1036.479125 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 6.4420 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 15 );
		SetPlayerPos( playerid, -1398.103515,937.631164,1036.479125 );
		SetPlayerFacingAngle( playerid, 6.4420 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Estadio Corrida", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 7 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), -1398.065307,-217.028900,1051.115844 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 272.1981 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 7 );
		SetPlayerPos( playerid, -1398.065307,-217.028900,1051.115844 );
		SetPlayerFacingAngle( playerid, 272.1981 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Estadio Stunt", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 14 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), -1465.268676,1557.868286,1052.531250 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 318.8850 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 14 );
		SetPlayerPos( playerid, -1465.268676,1557.868286,1052.531250 );
		SetPlayerFacingAngle( playerid, 318.8850 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Estadio Dm", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetVehiclePos( GetPlayerVehicleID( playerid ), -1396.8014,1248.7289,1039.8672 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 172.5093 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerPos( playerid, -1396.8014,1248.7289,1039.8672 );
		SetPlayerFacingAngle( playerid, 172.5093 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Estadio Rally", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 4 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), -1444.645507,-664.526000,1053.572998 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 266.8712 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 4 );
		SetPlayerPos( playerid, -1444.645507,-664.526000,1053.572998 );
		SetPlayerFacingAngle( playerid, 266.8712 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/LC", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 1 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), -729.276000,503.086944,1371.971801 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 211.0973 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 1 );
		SetPlayerPos( playerid, -729.276000,503.086944,1371.971801 );
		SetPlayerFacingAngle( playerid, 211.0973 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Predio Evento", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 18 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1710.433715,-1669.379272,20.225049 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 180.7036 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 18 );
		SetPlayerPos( playerid, 1710.433715,-1669.379272,20.225049 );
		SetPlayerFacingAngle( playerid, 180.7036 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Andromeda", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 9 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), 315.745086,984.969299,1958.919067 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 180.7036 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 9 );
		SetPlayerPos( playerid, 315.745086,984.969299,1958.919067 );
		SetPlayerFacingAngle( playerid, 180.7036 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Jatinho", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 1 );
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1.808619,32.384357,1199.593750 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 180.7036 );
	}
	else
	{
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 1 );
		SetPlayerPos( playerid, 1.808619,32.384357,1199.593750 );
		SetPlayerFacingAngle( playerid, 180.7036 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/UtiLS", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1825.384521, -1842.604370, 13.095001 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 359.660797 );
	}
	else
	{
		SetPlayerPos( playerid, 1825.384521, -1842.604370, 13.095001 );
		SetPlayerFacingAngle( playerid, 359.660797 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/alhambra", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1825.461303, -1683.614501, 13.067546 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 359.600402 );
	}
	else
	{
		SetPlayerPos( playerid, 1825.461303, -1683.614501, 13.067546 );
		SetPlayerFacingAngle( playerid, 359.600402 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/BancoLS", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1758.183105, -1663.246459, 13.251081 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 179.050216 );
	}
	else
	{
		SetPlayerPos( playerid, 1758.183105, -1663.246459, 13.251081 );
		SetPlayerFacingAngle( playerid, 179.050216 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Pref", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1487.640991, -1739.996215, 13.242293 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 90.235763 );
	}
	else
	{
		SetPlayerPos( playerid, 1487.640991, -1739.996215, 13.242293 );
		SetPlayerFacingAngle( playerid, 90.235763 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Dp", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1540.682006, -1674.907226, 13.247961 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 180.080368 );
	}
	else
	{
		SetPlayerPos( playerid, 1540.682006, -1674.907226, 13.247961 );
		SetPlayerFacingAngle( playerid, 180.080368 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Pd", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 59.4372, -1532.9075, 5.2146 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 81.5207 );
	}
	else
	{
		SetPlayerPos( playerid, 59.4372, -1532.9075, 5.2146 );
		SetPlayerFacingAngle( playerid, 81.5207 );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/agencia", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1239.202026, -1822.697387, 13.100659 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 182.002334 );
	}
	else
	{
		SetPlayerPos( playerid, 1239.202026, -1822.697387, 13.100659 );
		SetPlayerFacingAngle( playerid, 182.002334 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/ilha", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 836.698059, -2045.765991, 12.560351 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 178.416610 );
	}
	else
	{
		SetPlayerPos( playerid, 836.698059, -2045.765991, 12.560351 );
		SetPlayerFacingAngle( playerid, 178.416610 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/AeroLS", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1934.7350, -2345.7427, 13.5469 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 163.0548 );
	}
	else
	{
		SetPlayerPos( playerid, 1934.7350, -2345.7427, 13.5469 );
		SetPlayerFacingAngle( playerid, 163.0548 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/LV", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 2026.4370, 1008.0019, 10.8203 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 271.0209 );
	}
	else
	{
		SetPlayerPos( playerid, 2026.4370, 1008.0019, 10.8203 );
		SetPlayerFacingAngle( playerid, 271.0209 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/SF", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), -1609.8495, 724.9304, 12.3362 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 269.8703 );
	}
	else
	{
		SetPlayerPos( playerid, -1605.6431, 721.6378, 11.9935 );
		SetPlayerFacingAngle( playerid, 179.8421 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Predio", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1543.9467,-1353.4617,329.4741 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 271.6986 );
	}
	else
	{
		SetPlayerPos( playerid, 1543.9467,-1353.4617,329.4741 );
		SetPlayerFacingAngle( playerid, 271.6986 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Ammu", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1360.992065, -1285.878784, 13.037879 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 359.330780 );
	}
	else
	{
		SetPlayerPos( playerid, 1360.992065, -1285.878784, 13.037879 );
		SetPlayerFacingAngle( playerid, 359.330780 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/loteria", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1631.327270, -1164.624755, 23.581113 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 270.244537 );
	}
	else
	{
		SetPlayerPos( playerid, 1631.327270, -1164.624755, 23.581113 );
		SetPlayerFacingAngle( playerid, 270.244537 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/favela", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 2151.017822, -1099.932617, 24.754999 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 252.380737 );
	}
	else
	{
		SetPlayerPos( playerid, 2151.017822, -1099.932617, 24.754999 );
		SetPlayerFacingAngle( playerid, 252.380737 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Binco", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 2245.556884, -1659.454711, 14.969217 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 73.386764 );
	}
	else
	{
		SetPlayerPos( playerid, 2245.556884, -1659.454711, 14.969217 );
		SetPlayerFacingAngle( playerid, 73.386764 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/Posto", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode se teleportar estando procurado !" );
		return 1;
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && Teleporte[ playerid ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] O comando já foi executado ou seu tempo para usa-lo acabou !" );
		return 1;
	}
	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1938.160278, -1770.945190, 13.079992 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 181.523803 );
	}
	else
	{
		SetPlayerPos( playerid, 1938.160278, -1770.945190, 13.079992 );
		SetPlayerFacingAngle( playerid, 181.523803 );
	}
	SetCameraBehindPlayer( playerid );
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb1", true )) // BASE 1 // TP BASE 1
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 2287.4666,620.1959,10.5474 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 179.8484 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase1 /fbase1" );
	}
	else
	{
		SetPlayerPos( playerid, 2287.4666,620.1959,10.5474 );
		SetPlayerFacingAngle( playerid, 179.8484 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase1 /fbase1" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb2", true )) // BASE 2 // TP BASE 2
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), -85.3201,-357.9052,1.1568 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 304.7713 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase2 /fbase2" );
	}
	else
	{
		SetPlayerPos( playerid, -85.3201,-357.9052,1.1568 );
		SetPlayerFacingAngle( playerid, 304.7713 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase2 /fbase2" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb3", true )) // BASE 3 // TP BASE 3
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1289.5261,-1651.9401,13.2739 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 90.2451 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase3 /fbase3" );
	}
	else
	{
		SetPlayerPos( playerid, 1289.5261,-1651.9401,13.2739 );
		SetPlayerFacingAngle( playerid, 90.2451 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase3 /fbase3" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb4", true )) // BASE 4 // TP BASE 4
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 2284.8574,-2180.1487,5.7896 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 227.8857 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase4 /fbase4" );
	}
	else
	{
		SetPlayerPos( playerid, 2284.8574,-2180.1487,5.7896 );
		SetPlayerFacingAngle( playerid, 227.8857 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase4 /fbase4" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb5", true )) // BASE 5 // TP BASE 5
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), -134.1361,-1641.9142,3.1300 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 188.9417 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase5 /fbase5 /abase5p2 /fbase5p2" );
	}
	else
	{
		SetPlayerPos( playerid, -134.1361,-1641.9142,3.1300 );
		SetPlayerFacingAngle( playerid, 188.9417 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase5 /fbase5 /abase5p2 /fbase5p2" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb6", true )) // BASE 6 // TP BASE 6
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 644.3845,-455.3389,15.9146 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 271.0889 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase6 /fbase6" );
	}
	else
	{
		SetPlayerPos( playerid, 644.3845,-455.3389,15.9146 );
		SetPlayerFacingAngle( playerid, 271.0889 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase6 /fbase6" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb7", true )) // BASE 7 // TP BASE 7
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1838.8408,-2716.9419,13.2661 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 182.0032 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase7 /fbase7" );
	}
	else
	{
		SetPlayerPos( playerid, 1838.8408,-2716.9419,13.2661 );
		SetPlayerFacingAngle( playerid, 182.0032 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase7 /fbase7" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/irb8", true )) // BASE 8 // TP BASE 8
{
	if( aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && aInfo[ playerid ][ Ajudante ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), 2858.9175,-1782.8431,10.7768 );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), 270.8897 );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase8 /fbase8 /abase8pt2 /fbase8pt2 /abase8pt3 /fbase8pt3" );
	}
	else
	{
		SetPlayerPos( playerid, 2858.9175,-1782.8431,10.7768 );
		SetPlayerFacingAngle( playerid, 270.8897 );
        SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Comandos: /abase8 /fbase8 /abase8pt2 /fbase8pt2 /abase8pt3 /fbase8pt3" );
	}
	Teleporte[ playerid ] = 0;
	return 1;
}
if( !strcmp( cmdtext, "/tps", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 )
	{
		SendClientMessage( playerid, 0xFFFFFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~[ TELEPORTES VIP ]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "/UtiLS /Alhambra /BancoLS /Pref /Dp /Predio /AeroLS" );
		SendClientMessage( playerid, 0xFFFFFFAA, "/Agencia /Ilha /Ammu /Loteria /Favela /Binco /Posto /LV /SF" );
		SendClientMessage( playerid, 0xFFFFFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~[ TELEPORTES VIP ]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	return 1;
}
if( !strcmp( cmd, "/setarneon", true ))
{
	if( dini_Int( f( playerid ), "Dono" ) == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SetarNeon [ ID ] [ Neon ID ]" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente: 1 azul, 2, vermelho, 3 verde, 4 branco, 5 rosa, 6 amrelo, 7 KIT COMPLETO" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SetarNeon [ ID ] [ Neon ID ]" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente: 1 azul, 2, vermelho, 3 verde, 4 branco, 5 rosa, 6 amrelo, 7 KIT COMPLETO" );
			return 1;
		}
		new
		kitID = strval( tmp )
		;
		if( kitID <= 0 || kitID > 7 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente: 1 azul, 2, vermelho, 3 verde, 4 branco, 5 rosa, 6 amrelo, 7 KIT COMPLETO" );
			return 1;
		}
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Jogador não está conectado !" );
			return 1;
		}
		if( kitID == 1 )
		{
			format( str, sizeof( str ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou o neon azul pra você /ListaNeon", PlayerName( playerid ));
			SendClientMessage( id, 0xFFCC00AA, str );
			format( str, sizeof( str ), "[ BPO ADMIN ] Você setou o neon azul para %s", PlayerName( id ));
			SendClientMessage( playerid, 0xFFCC00AA, str );
			dini_IntSet( f( id ), "KitNeon", 1 );
			dini_IntSet( f( id ), "KitAzul", 1 );
			return 1;
		}
		if( kitID == 2 )
		{
			format( str, sizeof( str ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou o neon vermelho pra você /ListaNeon", PlayerName( playerid ));
			SendClientMessage( id, 0xFFCC00AA, str );
			format( str, sizeof( str ), "[ BPO ADMIN ] Você setou o neon vermelho para %s", PlayerName( id ));
			SendClientMessage( playerid, 0xFFCC00AA, str );
			dini_IntSet( f( id ), "KitNeon", 1 );
			dini_IntSet( f( id ), "KitVermelho", 1 );
			return 1;
		}
		if( kitID == 3 )
		{
			format( str, sizeof( str ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou o neon verde pra você /ListaNeon", PlayerName( playerid ));
			SendClientMessage( id, 0xFFCC00AA, str );
			format( str, sizeof( str ), "[ BPO ADMIN ] Você setou o neon verde para %s", PlayerName( id ));
			SendClientMessage( playerid, 0xFFCC00AA, str );
			dini_IntSet( f( id ), "KitNeon", 1 );
			dini_IntSet( f( id ), "KitVerde", 1 );
			return 1;
		}
		if( kitID == 4 )
		{
			format( str, sizeof( str ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou o neon branco pra você /ListaNeon", PlayerName( playerid ));
			SendClientMessage( id, 0xFFCC00AA, str );
			format( str, sizeof( str ), "[ BPO ADMIN ] Você setou o neon branco para %s", PlayerName( id ));
			SendClientMessage( playerid, 0xFFCC00AA, str );
			dini_IntSet( f( id ), "KitNeon", 1 );
			dini_IntSet( f( id ), "KitBranco", 1 );
			return 1;
		}
		if( kitID == 5 )
		{
			format( str, sizeof( str ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou o neon rosa pra você /ListaNeon", PlayerName( playerid ));
			SendClientMessage( id, 0xFFCC00AA, str );
			format( str, sizeof( str ), "[ BPO ADMIN ] Você setou o neon rosa para %s", PlayerName( id ));
			SendClientMessage( playerid, 0xFFCC00AA, str );
			dini_IntSet( f( id ), "KitNeon", 1 );
			dini_IntSet( f( id ), "KitRosa", 1 );
			return 1;
		}
		if( kitID == 6 )
		{
			format( str, sizeof( str ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou o neon amarelo pra você /ListaNeon", PlayerName( playerid ));
			SendClientMessage( id, 0xFFCC00AA, str );
			format( str, sizeof( str ), "[ BPO ADMIN ] Você setou o neon amarelo para %s", PlayerName( id ));
			SendClientMessage( playerid, 0xFFCC00AA, str );
			dini_IntSet( f( id ), "KitNeon", 1 );
			dini_IntSet( f( id ), "KitAmarelo", 1 );
			return 1;
		}
		if( kitID == 7 )
		{
			format( str, sizeof( str ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou o kit neon verde pra você /ListaNeon", PlayerName( playerid ));
			SendClientMessage( id, 0xFFCC00AA, str );
			format( str, sizeof( str ), "[ BPO ADMIN ] Você setou o kit completo de neon para %s", PlayerName( id ));
			SendClientMessage( playerid, 0xFFCC00AA, str );
			dini_IntSet( f( id ), "KitNeon", 1 );
			dini_IntSet( f( id ), "KitAmarelo", 1 );
			dini_IntSet( f( id ), "KitRosa", 1 );
			dini_IntSet( f( id ), "KitBranco", 1 );
			dini_IntSet( f( id ), "KitVerde", 1 );
			dini_IntSet( f( id ), "KitVermelho", 1 );
			dini_IntSet( f( id ), "KitAzul", 1 );
			return 1;
		}
	}
	return 1;
}
if( !strcmp( cmdtext, "/listaneon", true ))
{
	new
	vehicleid = GetPlayerVehicleID( playerid )
	;
	if( dini_Int( f( playerid ), "KitNeon" ) == 1 || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 )
	{
		if( !IsPlayerInAnyVehicle( playerid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um carro !" );
			return 1;
		}
		if( IsABike( vehicleid ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode adicionar neon em motocicletas !" );
			return 1;
		}
		ShowPlayerDialog( playerid, 8899, DIALOG_STYLE_LIST, "Neon", "{125CD7}Azul\n{E21D1F}Vermelho\n{1FD637}Verde\n{FFFFFF}Branco\n{E535D0}Rosa\n{EDE751}Amarelo\nRemover Neon", "OK", "SAIR" );
		PlayerPlaySound( playerid, 1133, 0.0, 0.0, 10.0 ) ;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não possui nenhum neon !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/Giroflex", true ))
{
	if( pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{

		ShowPlayerDialog( playerid, 8810, DIALOG_STYLE_LIST, "Giroflex Da Policia", "Meio - Baixo\nMeio - Dentro\nAtras - Baixo\nFrente - Baixo\nMeio - Cima\nRemover Giroflex", "OK", "SAIR" );
		PlayerPlaySound( playerid, 1133, 0.0, 0.0, 10.0 );
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
}
if( !strcmp( cmdtext, "/radios", true )) // Lista de rádios do /radios
{
	ShowPlayerDialog( playerid, 7954, DIALOG_STYLE_LIST, "Rádios", "Jovem Pan\nJoven Pan - Pagode\nHunter - Piseiro\nHunter - Sertanejo\nHunter - Rock\nFunk - Mandela\n> Desligar Rádio", "Escolher", "Cancelar" );
	return 1;
}
if( !strcmp( cmd, "/usaroculos", true ))
{
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarOculos [ de 1 à 30 ]" );
		return 1;
	}
	new
	oculosx = strval( tmp )
	;
	if( oculosx < 1 || oculosx > 30 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarOculos [ de 1 à 30 ]" );
		return 1;
	}
	new
	oOculos[ 24 ]
	;
	format( oOculos, sizeof( oOculos ), "Oculos%d", oculosx );
	if( dini_Int( f( playerid ), oOculos ) == 1 )
	{
		RemovePlayerAttachedObject( playerid, 1 );
		SetPlayerOculos( playerid, oculosx );
		format( gStr, sizeof( gStr ), "[ > ] Você colocou o óculos ID %d.", oculosx );
		SendClientMessage( playerid, -1, gStr );
		dini_IntSet( f( playerid ), "useOculos", oculosx );
	}
	else
	{
		SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem esse modelo de óculos !" );
	}
	return 1;
}
if( !strcmp( cmd, "/oculos", true ))
{
	if( !IsPlayerInDynamicCP( playerid, CP_5 ) &&
	!IsPlayerInDynamicCP( playerid, CP_41 ) &&
	!IsPlayerInDynamicCP( playerid, CP_42 ) &&
	!IsPlayerInDynamicCP( playerid, CP_43 ) &&
	!IsPlayerInDynamicCP( playerid, CP_44 ) &&
	!IsPlayerInDynamicCP( playerid, CP_45 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma loja de roupas(SKIN) !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Oculos [ de 1 à 30 ]" );
		return 1;
	}
	new
	oculosx = strval( tmp )
	;
	if( oculosx < 1 || oculosx > 30 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Oculos [ de 1 à 30 ]" );
		return 1;
	}
	new
	oOculos[ 24 ]
	;
	format( oOculos, sizeof( oOculos ), "Oculos%d", oculosx );
	if( dini_Int( f( playerid ), oOculos ) == 1 )
	{
		format( gStr, sizeof( gStr ), "[ x ] Você já possui esse modelo de óculos ! ( Use: /usarOculos %d )", oculosx );
		SendClientMessage( playerid, 0xFF0000AA, gStr );
		return 1;
	}
	RemovePlayerAttachedObject( playerid, 1 );
	SetPlayerOculos( playerid, oculosx );
	format( gStr, sizeof( gStr ), "[ > ] Você está experimentando o óculos ID %d.", oculosx );
	SendClientMessage( playerid, -1, gStr );
	SetTimerEx( "ItenOpcao", 5000, false, "d", playerid );
	useOculos[ playerid ] = oculosx, useTipo[ playerid ] = 1;
	return 1;
}
if( !strcmp( cmd, "/usarmascara", true ))
{
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarMascara [ de 1 à 6 ]" );
		return 1;
	}
	new
	mascarax = strval( tmp )
	;
	if( mascarax < 1 || mascarax > 6 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarMascara [ de 1 à 6 ]" );
		return 1;
	}
	new
	aMascara[ 24 ]
	;
	format( aMascara, sizeof( aMascara ), "Mascara%d", mascarax );
	if( dini_Int( f( playerid ), aMascara ) == 1 )
	{
		RemovePlayerAttachedObject( playerid, 2 );
		SetPlayerMascara( playerid, mascarax );
		format( gStr, sizeof( gStr ), "[ > ] Você colocou à  máscara ID %d.", mascarax );
		SendClientMessage( playerid, -1, gStr );
		dini_IntSet( f( playerid ), "useMascara", mascarax );
	}
	else
	{
		SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem esse modelo de máscara !" );
	}
	return 1;
}
if( !strcmp( cmd, "/mascara", true ))
{
	if( !IsPlayerInDynamicCP( playerid, CP_5 ) &&
	!IsPlayerInDynamicCP( playerid, CP_41 ) &&
	!IsPlayerInDynamicCP( playerid, CP_42 ) &&
	!IsPlayerInDynamicCP( playerid, CP_43 ) &&
	!IsPlayerInDynamicCP( playerid, CP_44 ) &&
	!IsPlayerInDynamicCP( playerid, CP_45 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma loja de roupas(SKIN) !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Mascara [ de 1 à 6 ]" );
		return 1;
	}
	new
	mascarax = strval( tmp )
	;
	if( mascarax < 1 || mascarax > 6 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Mascara [ de 1 à 6 ]" );
		return 1;
	}
	new
	aMascara[ 24 ]
	;
	format( aMascara, sizeof( aMascara ), "Mascara%d", mascarax );
	if( dini_Int( f( playerid ), aMascara ) == 1 )
	{
		format( gStr, sizeof( gStr ), "[ x ] Você já possui esse modelo de máscara ! ( Use: /usarMascara %d )", mascarax );
		SendClientMessage( playerid, 0xFF0000AA, gStr );
		return 1;
	}
	RemovePlayerAttachedObject( playerid, 2 );
	SetPlayerMascara( playerid, mascarax );
	format( gStr, sizeof( gStr ), "[ > ] Você está experimentando à máscara ID %d.", mascarax );
	SendClientMessage( playerid, -1, gStr );
	SetTimerEx( "ItenOpcao", 5000, false, "d", playerid );
	useMascara[ playerid ] = mascarax, useTipo[ playerid ] = 2;
	return 1;
}
if( !strcmp( cmd, "/bandana", true ))
{
	if( !IsPlayerInDynamicCP( playerid, CP_5 ) &&
	!IsPlayerInDynamicCP( playerid, CP_41 ) &&
	!IsPlayerInDynamicCP( playerid, CP_42 ) &&
	!IsPlayerInDynamicCP( playerid, CP_43 ) &&
	!IsPlayerInDynamicCP( playerid, CP_44 ) &&
	!IsPlayerInDynamicCP( playerid, CP_45 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma loja de roupas(SKIN) !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Bandana [ de 1 à 10 ]" );
		return 1;
	}
	new
	bandanax = strval( tmp )
	;
	if( bandanax < 1 || bandanax > 10 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Bandana [ de 1 à 10 ]" );
		return 1;
	}
	new
	aBandana[ 24 ]
	;
	format( aBandana, sizeof( aBandana ), "Bandana%d", bandanax );
	if( dini_Int( f( playerid ), aBandana ) == 1 )
	{
		format( gStr, sizeof( gStr ), "[ x ] Você já possui esse modelo de bandana ! ( Use: /usarBandana %d )", bandanax );
		SendClientMessage( playerid, 0xFF0000AA, gStr );
		return 1;
	}
	RemovePlayerAttachedObject( playerid, 3 );
	SetPlayerBandana( playerid, bandanax );
	format( gStr, sizeof( gStr ), "[ > ] Você está experimentando à bandana ID %d.", bandanax );
	SendClientMessage( playerid, -1, gStr );
	SetTimerEx( "ItenOpcao", 5000, false, "d", playerid );
	useBandana[ playerid ] = bandanax, useTipo[ playerid ] = 3;
	return 1;
}
if( !strcmp( cmd, "/usarbandana", true ))
{
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarBandana [ de 1 à 10 ]" );
		return 1;
	}
	new
	bandanax = strval( tmp )
	;
	if( bandanax < 1 || bandanax > 10 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarBandana [ de 1 à 10 ]" );
		return 1;
	}
	new
	aBandana[ 24 ]
	;
	format( aBandana, sizeof( aBandana ), "Bandana%d", bandanax );
	if( dini_Int( f( playerid ), aBandana ) == 1 )
	{
		RemovePlayerAttachedObject( playerid, 3 );
		SetPlayerBandana( playerid, bandanax );
		format( gStr, sizeof( gStr ), "[ > ] Você colocou à  bandana ID %d.", bandanax );
		SendClientMessage( playerid, -1, gStr );
		dini_IntSet( f( playerid ), "useBandana", bandanax );
	}
	else
	{
		SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem esse modelo de bandana !" );
	}
	return 1;
}
if( !strcmp( cmd, "/chapeu", true ))
{
	if( !IsPlayerInDynamicCP( playerid, CP_5 ) &&
	!IsPlayerInDynamicCP( playerid, CP_41 ) &&
	!IsPlayerInDynamicCP( playerid, CP_42 ) &&
	!IsPlayerInDynamicCP( playerid, CP_43 ) &&
	!IsPlayerInDynamicCP( playerid, CP_44 ) &&
	!IsPlayerInDynamicCP( playerid, CP_45 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma loja de roupas(SKIN) !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Chapeu [ de 1 à 71 ]" );
		return 1;
	}
	new
	chapeux = strval( tmp )
	;
	if( chapeux < 1 || chapeux > 71 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /Chapeu [ 1 à 71 ]" );
		return 1;
	}
	new
	oChapeu[ 24 ]
	;
	format( oChapeu, sizeof( oChapeu ), "Chapeu%d", chapeux );
	if( dini_Int( f( playerid ), oChapeu ) == 1 )
	{
		format( gStr, sizeof( gStr ), "[ x ] Você já possui esse modelo de chapéu ! ( Use: /usarChapeu %d )", chapeux );
		SendClientMessage( playerid, 0xFF0000AA, gStr );
		return 1;
	}
	RemovePlayerAttachedObject( playerid, 4 );
	SetPlayerChapeu( playerid, chapeux );
	format( gStr, sizeof( gStr ), "[ > ] Você está experimentando o chapéu ID %d.", chapeux );
	SendClientMessage( playerid, -1, gStr );
	SetTimerEx( "ItenOpcao", 5000, false, "d", playerid );
	useChapeu[ playerid ] = chapeux, useTipo[ playerid ] = 4;
	return 1;
}
if( !strcmp( cmd, "/toca", true ))
{
	if(Toca[playerid]==0)
	{
		SetPlayerAttachedObject(playerid,1,19066,2,0.13,0.0,0.0,90,90.0,0.0);
		Toca[playerid] = 1;
		SendClientMessage(playerid,-1,"Chapéu de Natal On");
	}
	else
	{
		RemovePlayerAttachedObject(playerid,1);
		SendClientMessage(playerid,-1,"Chapéu de Natal Off");
		Toca[playerid] = 0;
	}
	return 1;
}
if( !strcmp( cmd, "/usarchapeu", true ))
{
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarChapeu [ de 1 à 71 ]" );
		return 1;
	}
	new
	chapeux = strval( tmp )
	;
	if( chapeux < 1 || chapeux > 71 )
	{
		SendClientMessage( playerid, 0xFF0000FF, "[ x ] Uso correto: /usarChapeu [ 1 à 71 ]" );
		return 1;
	}
	new
	oChapeu[ 24 ]
	;
	format( oChapeu, sizeof( oChapeu ), "Chapeu%d", chapeux );
	if( dini_Int( f( playerid ), oChapeu ) == 1 )
	{
		RemovePlayerAttachedObject( playerid, 4 );
		SetPlayerChapeu( playerid, chapeux );
		format( gStr, sizeof( gStr ), "[ > ] Você colocou o chapéu ID %d.", chapeux );
		SendClientMessage( playerid, -1, gStr );
		dini_IntSet( f( playerid ), "useChapeu", chapeux );
	}
	else
	{
		SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem esse modelo de chapéu !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/removeritens", true ))
{
	if( !IsPlayerInDynamicCP( playerid, CP_5 ) &&
	!IsPlayerInDynamicCP( playerid, CP_41 ) &&
	!IsPlayerInDynamicCP( playerid, CP_42 ) &&
	!IsPlayerInDynamicCP( playerid, CP_43 ) &&
	!IsPlayerInDynamicCP( playerid, CP_44 ) &&
	!IsPlayerInDynamicCP( playerid, CP_45 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma loja de roupas(SKIN) !" );
		return 1;
	}
	/*new
	i
	;
	while( i != MAX_PLAYER_ATTACHED_OBJECTS )
	{
		if( IsPlayerAttachedObjectSlotUsed( playerid, i ))
		{
			RemovePlayerAttachedObject( playerid, i );
		}
		i++;
	}*/
	RemovePlayerAttachedObject( playerid, 1 );
	dini_IntSet( f( playerid ), "useOculos", 0 );
	RemovePlayerAttachedObject( playerid, 2 );
	dini_IntSet( f( playerid ), "useMascara", 0 );
	RemovePlayerAttachedObject( playerid, 3 );
	dini_IntSet( f( playerid ), "useBandana", 0 );
	RemovePlayerAttachedObject( playerid, 4 );
	dini_IntSet( f( playerid ), "useChapeu", 0 );
	SetarItensPlayer( playerid );
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Todos seus itens foram removidos." );
	return 1;
}
if( !strcmp( cmdtext, "/removeroculos", true ))
{
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Óculos atual removido com sucesso." );
	RemovePlayerAttachedObject( playerid, 1 );
	dini_IntSet( f( playerid ), "useOculos", 0 );
	SetarItensPlayer( playerid );
	return 1;
}
if( !strcmp( cmdtext, "/removermascara", true ))
{
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Máscara atual removida com sucesso." );
	RemovePlayerAttachedObject( playerid, 2 );
	dini_IntSet( f( playerid ), "useMascara", 0 );
	SetarItensPlayer( playerid );
	return 1;
}
if( !strcmp( cmdtext, "/removerbandana", true ))
{
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Bandana atual removida com sucesso." );
	RemovePlayerAttachedObject( playerid, 3 );
	dini_IntSet( f( playerid ), "useBandana", 0 );
	SetarItensPlayer( playerid );
	return 1;
}
if( !strcmp( cmdtext, "/removerchapeu", true ))
{
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Chapéu atual removido com sucesso." );
	RemovePlayerAttachedObject( playerid, 4 );
	dini_IntSet( f( playerid ), "useChapeu", 0 );
	SetarItensPlayer( playerid );
	return 1;
}
if( !strcmp( cmdtext, "/candidatarse", true ))
{
	if( PlayerToPoint( 1.1, playerid, 362.3257,173.7074,1008.3828 ) || IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ))
	{
		if( dini_Int( "Eleitos.ini", "votoStatus" ) == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não estamos em época de eleição ! ( Veja o prefeito atual usando: /AtualPresidente )" );
			return 1;
		}
		if( dini_Int( "Eleitos.ini", PlayerName( playerid )) == -1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está concorrendo !" );
			return 1;
		}
		if( dini_Int( "Eleitos.ini", "Candidatos" ) >= 10 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Vagas esgotadas tente na próxima eleição !" );
			return 1;
		}
		if( strcmp( dini_Get( "Eleitos.ini", "1_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "1_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "2_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "2_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "3_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "3_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "4_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "4_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "5_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "5_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "6_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "6_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "7_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "7_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "8_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "8_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "9_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "9_", PlayerName( playerid ));
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "10_" ), "Nenhum", true ) == 0 )
		{
			dini_Set( "Eleitos.ini", "10_", PlayerName( playerid ));
		}
		dini_IntSet( "Eleitos.ini", "Candidatos", dini_Int( "Eleitos.ini", "Candidatos" ) +1 );
		dini_IntSet( "Eleitos.ini", PlayerName( playerid ), -1 );
		SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~~~~~~[ Candidato ]~~~~~~~~~~~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s você agora está concorrendo a vaga para presidente.", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~~~~~~[ Candidato ]~~~~~~~~~~~~~~~~~~~~~~•" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura!" );
	}
	return 1;
}
if( strcmp( cmd, "/votar", true ) == 0 )
{
	if( PlayerToPoint( 1.1, playerid, 362.3257,173.7074,1008.3828 ) || IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ))
	{
		if( dini_Int( "Eleitos.ini", "votoStatus" ) == 1 )
		{
			if( dini_Int( "Eleitos.ini", PlayerName( playerid )) == -1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está concorrendo a presidente, portando não pode votar !" );
				return 1;
			}
			tmp = strtok( cmdtext, idx );
			if( strlen( tmp ) == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Votar [ Candidato Vaga ID ]" );
				return 1;
			}
			new
			canditado = strval( tmp )
			;
			if( dini_Int( "Eleitos.ini", PlayerName( playerid )) == -2 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Somente 1 voto por jogador, você já deu o seu voto !" );
				return 1;
			}
			if( canditado <= 0 || canditado > 10 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode votar de 1 à 10 ! ( Veja a lista de eleitos: /Eleitos )" );
				return 1;
			}
			format( gstring, sizeof( gstring ), "%d_", canditado );
			if( !strcmp( gstring, "Nenhum", true ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode votar em uma vaga não preenchida !" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~[ Voto ]~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			format( gStr, sizeof( gStr ), "• Você votou no candidato %s da vaga ID %d com sucesso !", dini_Get( "Eleitos.ini", gstring ), canditado );
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gstring, sizeof( gstring ), "• %s agora está com %d votos.", dini_Get( "Eleitos.ini", gstring ), dini_Int( "Eleitos.ini", tmp ));
			SendClientMessage( playerid, COLOR_BRANCO, gstring );
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~[ Voto ]~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			dini_IntSet( "Eleitos.ini", PlayerName( playerid ), -2 );
			dini_IntSet( "Eleitos.ini", tmp, dini_Int( "Eleitos.ini", tmp ) + 1 );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não estamos em época de eleição ! ( Veja o prefeito atual usando: /AtualPresidente )" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/eleitos", true ))
{
	if( PlayerToPoint( 1.1, playerid, 362.3257,173.7074,1008.3828 ) || IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ))
	{
		if( dini_Int( "Eleitos.ini", "votoStatus" ) == 1 )
		{
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~[ Eleitos ]~~~~~~~~~~~~~" );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 1 )", dini_Get( "Eleitos.ini", "1_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 2 )", dini_Get( "Eleitos.ini", "2_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 3 )", dini_Get( "Eleitos.ini", "3_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 4 )", dini_Get( "Eleitos.ini", "4_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 5 )", dini_Get( "Eleitos.ini", "5_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 6 )", dini_Get( "Eleitos.ini", "6_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 7 )", dini_Get( "Eleitos.ini", "7_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 8 )", dini_Get( "Eleitos.ini", "8_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 9 )", dini_Get( "Eleitos.ini", "9_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			format( gStr, sizeof( gStr ), "Candidato: %s - Vaga ID ( 10 )", dini_Get( "Eleitos.ini", "10_" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não estamos em época de eleição ! ( Veja o prefeito atual usando: /AtualPresidente )" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/atualpresidente", true ))
{
	if( PlayerToPoint( 1.1, playerid, 362.3257,173.7074,1008.3828 ) || IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ))
	{
		if( strcmp( dini_Get( "Eleitos.ini", "Presidente" ), "Nenhum", true ) == 0 )
		{
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Não há nenhum presidente no momento." );
		}
		else if( strcmp( dini_Get( "Eleitos.ini", "Presidente" ), "Nenhum", false ))
		{
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~[ Presidente ]~~~~~~~~~~~~~~•" );
			format( gStr, sizeof( gStr ), "• Presidente atual: %s", dini_Get( "Eleitos.ini", "Presidente" ));
			SendClientMessage( playerid, COLOR_BRANCO, gStr );
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~[ Presidente ]~~~~~~~~~~~~~~•" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está na prefeitura !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/abrirvotacao", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você liberou as urnas para que os jogadores possam votar." );
	SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~~~[ Eleição ]~~~~~~~~~~~~~~~~~~~•" );
	format( gStr, sizeof( gStr ), "• O(A) Administrador(a) %s, liberou as urnas para votação.", PlayerName( playerid ));
	SendClientMessageToAll( COLOR_BRANCO, gStr );
	SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~~~~~~~~[ Eleição ]~~~~~~~~~~~~~~~~~~~•" );
	dini_IntSet( "Eleitos.ini", "votoStatus", 1 );
	return 1;
}
if( !strcmp( cmdtext, "/fecharvotacao", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você fechou as urnas para que os jogadores possam votar." );
	format( gStr, sizeof( gStr ), "• O(A) Administrador(a) %s, fechou as urnas para votação.", PlayerName( playerid ));
	SendClientMessageToAll( COLOR_AMARELO, gStr );
	dini_IntSet( "Eleitos.ini", "votoStatus", 0 );
	return 1;
}
if( !strcmp( cmdtext, "/apurar", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
		return 1;
	}
	format( pFile, sizeof( pFile ), "Contas/%s.ini", dini_Get( "Eleitos.ini", "Presidente" ));
	dini_IntSet( pFile, "Presidente", 0 );
	new
	apuracao[ 10 ]
	;
	apuracao[ 0 ] = dini_Int( "Eleitos.ini", "1" );
	apuracao[ 1 ] = dini_Int( "Eleitos.ini", "2" );
	apuracao[ 2 ] = dini_Int( "Eleitos.ini", "3" );
	apuracao[ 3 ] = dini_Int( "Eleitos.ini", "4" );
	apuracao[ 4 ] = dini_Int( "Eleitos.ini", "5" );
	apuracao[ 5 ] = dini_Int( "Eleitos.ini", "6" );
	apuracao[ 6 ] = dini_Int( "Eleitos.ini", "7" );
	apuracao[ 7 ] = dini_Int( "Eleitos.ini", "8" );
	apuracao[ 8 ] = dini_Int( "Eleitos.ini", "9" );
	apuracao[ 9 ] = dini_Int( "Eleitos.ini", "10" );
	new
	maxVar = -1,
	extVar = 0
	;
	for( new i; i != 10; ++i )
	{
		if( apuracao[ i ] > maxVar )
		{
			maxVar = apuracao[ i ];
			extVar = i;
		}
	}
	printf( "Posição: %d | Pontuação: %d", extVar+1, apuracao[ extVar ] );
	new
	armaz[ 256 ]
	;
	if( extVar+1 == 1 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "1_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "1_" ));
		armaz = dini_Get( "Eleitos.ini", "1_" );
	}
	if( extVar+1 == 2 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "2_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "2_" ));
		armaz = dini_Get( "Eleitos.ini", "2_" );
	}
	if( extVar+1 == 3 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "3_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "3_" ));
		armaz = dini_Get( "Eleitos.ini", "3_" );
	}
	if( extVar+1 == 4 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "4_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "4_" ));
		armaz = dini_Get( "Eleitos.ini", "4_" );
	}
	if( extVar+1 == 5 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "5_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "5_" ));
		armaz = dini_Get( "Eleitos.ini", "5_" );
	}
	if( extVar+1 == 6 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "6_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "6_" ));
		armaz = dini_Get( "Eleitos.ini", "6_" );
	}
	if( extVar+1 == 7 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "7_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "7_" ));
		armaz = dini_Get( "Eleitos.ini", "7_" );
	}
	if( extVar+1 == 8 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "8_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "8_" ));
		armaz = dini_Get( "Eleitos.ini", "8_" );
	}
	if( extVar+1 == 9 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "9_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "9_" ));
		armaz = dini_Get( "Eleitos.ini", "9_" );
	}
	if( extVar+1 == 10 )
	{
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		format( gStr, sizeof( gStr ), "• %s ganha a eleição com %d de votos !", dini_Get( "Eleitos.ini", "10_" ), apuracao[ extVar ] );
		SendClientMessage( playerid, COLOR_BRANCO, gStr );
		SendClientMessage( playerid, COLOR_ROXO, "•~~~~~~~~~~~~[ Novo Presidente ]~~~~~~~~~~~~•" );
		dini_Set( "Eleitos.ini", "Presidente", dini_Get( "Eleitos.ini", "10_" ));
		armaz = dini_Get( "Eleitos.ini", "10_" );
	}
	CriarArquivoPresidente( armaz );
	format( gstring, sizeof( gstring ), "Contas/%s.ini", armaz );
	dini_IntSet( gstring, "Presidente", 1 );
	return 1;
}
if( !strcmp( cmd, "/setarvip", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 )
	{
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SetarVIP [ ID ] [ MesFinal ] [ DiaFinal ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;
	if( !IsPlayerConnected( id ))
	{
		SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Ninguém online com esse ID !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SetarVIP [ ID ] [ MesFinal ] [ DiaFinal ] [ AnoFinal ]" );
		return 1;
	}
	new
	MesFinal = strval( tmp )
	;
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SetarVIP [ ID ] [ MesFinal ] [ DiaFinal ] [ AnoFinal ]" );
		return 1;
	}
	new
	DiaFinal = strval( tmp )
	;
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /SetarVIP [ ID ] [ MesFinal ] [ DiaFinal ] [ AnoFinal ]" );
		return 1;
	}
	new
	AnoFinal = strval( tmp )
	;
	if( AnoFinal > ANO_LIMITE+1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Apenas pode setar 1 ano acima do atual !" );
		return 1;
	}
	format( gStr, sizeof( gStr ), "[ > ] Você recebeu VIP, setado por %s, data de vencimento:{FFFFFF} Mês %d, Dia %d", PlayerName( playerid ), MesFinal, DiaFinal );
	SendClientMessage( id, COLOR_AMARELO, gStr );
	format( gStr, sizeof( gStr ), "[ > ] Você setou VIP, para %s, data de vencimento:{FFFFFF} Mês %d, Dia %d", PlayerName( id ), MesFinal, DiaFinal );
	SendClientMessage( playerid, COLOR_AMARELO, gStr );
	GameTextForPlayer( id, "~y~~h~VIP", 1000, 0 );
	dini_IntSet( f( id ), "PLAYER_VIP", 1 );
	dini_IntSet( f( id ), "VIP_MES", MesFinal );
	dini_IntSet( f( id ), "VIP_DIA", DiaFinal );
	dini_IntSet( f( id ), "VIP_ANO", AnoFinal );
	pInfo[ id ][ PLAYER_VIP ] = 1;
	return 1;
}
if( !strcmp( cmd, "/tirarvip", true ))
{
	if( aInfo[ playerid ][ Dono ] == 0 )
	{
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /TirarVIP [ ID ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;
	if( !IsPlayerConnected( id ))
	{
		SendClientMessage( playerid, COLOR_BRANCO, "[ x ] Ninguém online com esse ID !" );
		return 1;
	}
	format( gStr, sizeof( gStr ), "[ > ] Você removeu o VIP de %s", PlayerName( id ));
	SendClientMessage( playerid, COLOR_AMARELO, gStr );
	dini_IntSet( f( id ), "PLAYER_VIP", 0 );
	dini_IntSet( f( id ), "VIP_MES", 0 );
	dini_IntSet( f( id ), "VIP_DIA", 0 );
	pInfo[ id ][ PLAYER_VIP ] = 0;
	return 1;
}
if( !strcmp( cmd, "/modop", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( modoP == 0 )
		{
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Prisão OFF !" );
			modoP = 1;
		}
		else if( modoP == 1 )
		{
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Prisão ON !" );
			modoP = 0;
		}
	}
	return 1;
}
if( !strcmp( cmd, "/comandosvip", true ))
{
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 || aInfo[ playerid ][ Dono ] == 1 )
	{
		ShowPlayerDialog( playerid, 9983, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Comandos VIP", "Teleportes: /tps\nChat VIP: . ( Ponto )\nJetpack: /JetPack\nTirar Jetpack: /DjetPack\nNeon's: /ListaNeon\nTunar Veiculo: /Tunar\nDesvirar veiculo: /flip\nNitro: Para soltar nitro basta clicar no mouse", "Fechar", "" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) jogador(a) VIP !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/marmas", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		new
		Weapons = 0, Ammo, Msg[ 64 ], gunname[ 64 ]
		;
		for( new i = 0; i < 13; i ++ )
		{
			GetWeaponName( i, gunname, sizeof( gunname ));
			GetPlayerWeaponData( playerid, i, Weapons, Ammo );
			if( Weapons != 0 )
			{
				format( Msg, sizeof( Msg ), "%s armaID %d, %d balas de munição, arma slotID %i", gunname, Weapons, Ammo, i );
				SendClientMessage( playerid, -1, Msg );
			}
		}
	}
	return 1;
}
if( !strcmp( cmdtext, "/evDM", true ))
{
	if( aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Dono ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão !" );
		return 1;
	}
	else
	{
		ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/participarDM", true ))
{
	if( esDM[ evdmLiberado ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não há um evento de DM criado no momento !" );
		return 1;
	}
	if( GetPlayerWantedLevel ( playerid ) > 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode participar do evento estando procurado !" );
		return 1;
	}
	if( epDM[ playerid ][ dmParticipando ] == 1 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está participando do evento !" );
		return 1;
	}
	if( esDM[ evdmArenaID ] == 6 )
	{
		SetPlayerPos( playerid, dmePos[ 0 ], dmePos[ 1 ], dmePos[ 2 ] );
		SetPlayerInterior( playerid, 0 );
	}
	else
	{
		if( esDM[ evdmArenaID ] == 1 )
		{
			new rnd = random( sizeof( saeArena1 ));
			SetPlayerPos( playerid, saeArena1[ rnd ][ 0 ], saeArena1[ rnd ][ 1 ], saeArena1[ rnd ][ 2 ] );
			SetPlayerFacingAngle( playerid, saeArena1[ rnd ][ 3 ] );
			SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
		}
		if( esDM[ evdmArenaID ] == 2 )
		{
			new rnd = random( sizeof( saeArena2 ));
			SetPlayerPos( playerid, saeArena2[ rnd ][ 0 ], saeArena2[ rnd ][ 1 ], saeArena2[ rnd ][ 2 ] );
			SetPlayerFacingAngle( playerid, saeArena2[ rnd ][ 3 ] );
			SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
		}
		if( esDM[ evdmArenaID ] == 3 )
		{
			new rnd = random( sizeof( saeArena3 ));
			SetPlayerPos( playerid, saeArena3[ rnd ][ 0 ], saeArena3[ rnd ][ 1 ], saeArena3[ rnd ][ 2 ] );
			SetPlayerFacingAngle( playerid, saeArena3[ rnd ][ 3 ] );
			SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
		}
		if( esDM[ evdmArenaID ] == 4 )
		{
			new rnd = random( sizeof( saeArena4 ));
			SetPlayerPos( playerid, saeArena4[ rnd ][ 0 ], saeArena4[ rnd ][ 1 ], saeArena4[ rnd ][ 2 ] );
			SetPlayerFacingAngle( playerid, saeArena4[ rnd ][ 3 ] );
			SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
		}
		if( esDM[ evdmArenaID ] == 5 )
		{
			new rnd = random( sizeof( saeArena5 ));
			SetPlayerPos( playerid, saeArena5[ rnd ][ 0 ], saeArena5[ rnd ][ 1 ], saeArena5[ rnd ][ 2 ] );
			SetPlayerFacingAngle( playerid, saeArena5[ rnd ][ 3 ] );
			SetPlayerInterior( playerid, intArena[ esDM[ evdmArenaID ] ][ 0 ] );
		}
	}
	ResetPlayerWeapons( playerid );
	epDM[ playerid ][ dmParticipando ] = 1;
	SetPlayerColor( playerid, COLOR_ERRO );
	if( esDM[ evdmCount ] <= 0 && esDM[ evdmCriado ] == 1 )
	{
		ResetPlayerWeapons( playerid );
		dmSetEquipamentos( playerid );
	}
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você está participando do evento de DM." );
	return 1;
}
if( !strcmp( cmdtext, "/desistirDM", true ))
{
	if( esDM[ evdmCriado ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não há um evento de DM criado no momento !" );
		return 1;
	}
	if( epDM[ playerid ][ dmParticipando ] == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está participando do evento !" );
		return 1;
	}
	evdmResetPlayer( playerid );
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você desistiu do evento de DM." );
	return 1;
}
if( !strcmp( cmd, "/setarveiculo", true ))
{
	if( dini_Int( f( playerid ), "Dono" ) == 0 )
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão para criar um set próprio !" );
		return 1;
	}
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Setarveiculo [ ID Player ] [ ID Veiculo ] [ Cor 1 ] [ Cor 2 ]" );
		return 1;
	}
	new
	id = strval( tmp )
	;
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Setarveiculo [ ID Player ] [ ID Veiculo ] [ Cor 1 ] [ Cor 2 ]" );
		return 1;
	}
	new
	modelo = strval( tmp )
	;
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Setarveiculo [ ID Player ] [ ID Veiculo ] [ Cor 1 ] [ Cor 2 ]" );
		return 1;
	}
	new
	scor1 = strval( tmp )
	;
	tmp = strtok( cmdtext, idx );
	if( !strlen( tmp ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /Setarveiculo [ ID Player ] [ ID Veiculo ] [ Cor 1 ] [ Cor 2 ]" );
		return 1;
	}
	new
	scor2 = strval( tmp )
	;
	if( !IsPlayerConnected( id ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Nenhum player online com esse ID !" );
		return 1;
	}
	if( IsPlayerInAnyVehicle( playerid ))
	{
		new
		Float:x_set, Float:y_set, Float:z_set, Float:a_set
		;
		GetPlayerPos( playerid, x_set, y_set, z_set );
		GetVehicleZAngle( GetPlayerVehicleID( playerid ), a_set );

		veiculoSetPPlayer( id, modelo, x_set, y_set, z_set, a_set, scor1, scor2, playerid );

		format( gStr, sizeof( gStr ), "[ > ] Veículo próprio %s criado para %s", GetVehicleModelName( modelo ), PlayerName( id ));
		SendClientMessage( playerid, COLOR_AMARELO, gStr );

		format( gStr, sizeof( gStr ), "[ > ] Veículo próprio %s criado por %s para você.", GetVehicleModelName( modelo ), PlayerName( playerid ));
		SendClientMessage( id, COLOR_AMARELO, gStr );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa estar no veículo base para poder setar sem erros !" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/meussets", true ))
{
	ShowPlayerSets( playerid );
	return 1;
}
if( !strcmp( cmd, "/loterica", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /loterica [ on / off ]" );
			return 1;
		}
		else if( !strcmp( tmp, "on", true ))
		{
			if( stats_Shop == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já está definido como {00FF02}Aberta {FF0000}a Loteria !" );
				return 1;
			}
			SendClientMessageToAll( COLOR_BRANCO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} A loteria está aberta ! {00FF02}Facam suas apostas." );
			GameTextForAll( "~w~~h~A loteria esta ~g~~h~ Aberta", 1000, 0 );
			TextDrawSetString( statsShop, "~h~A loteria ~y~~h~esta aberta !" );
			stats_Shop = 1;
		}
		else if( strcmp( tmp, "off", true ) == 0 )
		{
			if( stats_Shop == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já está definido como {FFFFFF}Fechada {FF0000}a Loteria !" );
				return 1;
			}
			SendClientMessageToAll( COLOR_BRANCO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} Apostas encerradas ! {FF0000}Boa sorte." );
			GameTextForAll( "~w~~h~A loteria foi~r~~h~ encerrada", 1000, 0 );
			TextDrawSetString( statsShop, "~r~~h~ Brasil Play Online");
			stats_Shop = 0;
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/proximoincendio", true ))
{
	if( pInfo[ playerid ][ Prof ] == BOMBEIRO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( IsPlayerInDynamicCP( playerid, CP_39 ))
		{
			if( FireAtual[ playerid ] != 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um incêndio pentente para apagar !" );
				format( gStr, sizeof( gStr ), "[ > ] A casa ID %d está pegando para você apagar.", FireAtual[ playerid ] );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
				return 1;
			}
			new
			c = minrand( 1, MAX_CASAS ),
			h = minrand( 120, 350 )
			;
			if( FireCreated[ c ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Tente novamente nenhum incêndio foi localizado !" );
			}
			else if( FireCreated[ c ] == 0 )
			{
				FireAtual[ playerid ] = c;
				FireBaixa[ playerid ] = 0;
				AddFire( playerid, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ], h );
				SetPlayerMapIcon( playerid, 90, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ]-10, 20, 0, MAPICON_GLOBAL_CHECKPOINT );
				new
				Float:X,
				Float:Y,
				Float:Z,
				Float:Distance,
				fireID = c
				;
				X = 2770.6172, Y = -1627.9358, Z = 12.177;

				Distance = GetDistanceBetweenPoints( X, Y, Z, CasaInfo[ fireID ][ PickupX ], CasaInfo[ fireID ][ PickupY ], CasaInfo[ fireID ][ PickupZ ] );
				new
				zone[ MAX_ZONE_NAME ]
				;
				GetCasa2DZone( fireID, zone, MAX_ZONE_NAME );

				format( gstring, sizeof( gstring ), "{FFFFFF}Casa {FF0000}%d {FFFFFF}Incêndiada\n\n{FFFFFF}Localização {FFFF00}%s\n\n{FFFFFF}Distância {00F746}%.1f", c, zone, Distance );
				ShowPlayerDialog( playerid, D_JIMCAR, DIALOG_STYLE_MSGBOX, "{FF0000}Corpo de Bombeiros", gstring, "OK", "" );
			}
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no Corpo de Bombeiros !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/baixaincendio", true ))
{
	if( pInfo[ playerid ][ Prof ] == BOMBEIRO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( FireBaixa[ playerid ] > 0 )
		{
			if( IsPlayerInDynamicCP( playerid, CP_39 ))
			{
				/*new
				Float:X,
				Float:Y,
				Float:Z,
				Float:Distance
				;
				X = CasaInfo[ [ playerid ] ][ PickupX ],
				Y = CasaInfo[ [ playerid ] ][ PickupY ],
				Z = CasaInfo[ [ playerid ] ][ PickupZ ];

				Distance = GetDistanceBetweenPoints( X, Y, Z, 263.5550, 2895.4639, 10.5314 );

				new quantia;

				if( Distance < 500.0 )
				{
					quantia = 500;
				}
				else if( Distance > 500.0 && Distance < 1000.0 )
				{
					quantia = 1000;
				}
				else if( Distance > 1000.0 && Distance < 1500.0 )
				{
					quantia = 1500;
				}
				else if( Distance > 1500.0 && Distance < 2000.0 )
				{
					quantia = 2000;
				}
				else if( Distance > 2000.0 && Distance < 2500.0 )
				{
					quantia = 2500;
				}
				else if( Distance > 2500.0 && Distance < 3000.0 )
				{
					quantia = 3000;
				}
				else if( Distance > 3000.0 && Distance < 4000.0 )
				{
					quantia = 3500;
				}
				else if( Distance > 4000.0 && Distance < 4500.0 )
				{
					quantia = 4000;
				}
				else if( Distance > 4500.0 && Distance < 5000.0 )
				{
					quantia = 4500;
				}
				else if( Distance > 5000.0 )
				{
					quantia = 5000;
				}*/
				format( gStr, 128, "[ > ] Você deu baixa no incêndio causado na casa ID {FFFFFF}%d", FireBaixa[ playerid ] );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
				//format( gStr, 128, "[ > ] Você recebe $%d pelo serviço concluído.", quantia );
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você recebe $1500 pelo serviço concluído." );
				sGivePlayerCash( playerid, 2500 );
				FireBaixa[ playerid ] = 0;
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no Corpo de Bombeiros !" );
			}
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não apagou nenhum incêndio !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/ecaminhaob", true ))
{
	if( pInfo[ playerid ][ Prof ] == BOMBEIRO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		if( FireAtual[ playerid ] <= 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não iniciou nenhuma rota de incêndio !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Volte para o corpo de bombeiros e utilize: /ProximoIncendio !" );
			return 1;
		}
		new
		veiculo = GetPlayerVehicleID( playerid ),
		modelo = GetVehicleModel( veiculo )
		;
		if( modelo == 407 )
		{
			new
			c = FireAtual[ playerid ]
			;
			if( IsPlayerInRangeOfPoint( playerid, 50.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
				estCamB[ veiculo ] = 1;
				SetTimerEx( "resetCaminhao", 120000, false, "d", veiculo );
				FireBaixa[ playerid ] = -1;
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Caminhão estacionado, você já pode apagar o incendio !" );
			}
			else
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode estacionar o caminhão próximo ao incendio !" );
			}
			return 1;
		}
		else
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em um caminhão de bombeiros !" );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
} 
if( !strcmp( cmd, "/verchat", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Obs: Essa alteração ocorre somente para você." );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /VerChat [ Opção ]" );
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Opções: ( Global, Proximo )" );
			return 1;
		}
		else if( !strcmp( tmp, "global", true ))
		{
			if( pInfo[ playerid ][ vchat2 ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já está definido para ver o chat: {00FF02}Global" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_BRANCO, "[ BPO ADMIN ] Você já está vendo o chat: {00FF02}Global." );
			GameTextForPlayer( playerid, "~w~~h~Chat V ~y~~h~Global", 1000, 0 );
			pInfo[ playerid ][ vchat2 ] = 1;
		}
		else if( strcmp( tmp, "proximo", true ) == 0 )
		{
			if( pInfo[ playerid ][ vchat2 ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já está definido para ver o chat: {FF0000}próximo" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_BRANCO, "[ BPO ADMIN ] Você já está vendo o chat: {00FF02}Próximo." );
			GameTextForPlayer( playerid, "~w~~h~Chat V ~r~~h~Proximo", 1000, 0 );
			pInfo[ playerid ][ vchat2 ] = 0;
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
if( !strcmp( cmdtext, "/infochat", true ))
{
	new
	stg[ 1500 ]
	;
	format( gstring, sizeof( gstring ), "\t\t{5FFF00}[ Informações Importantes sobre o CHAT ]" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• O chat aqui não é global !" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n• O motivo é claro, para os outros chats serem valorizados." );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n• Não só os outros chats como tornará mais RPG o modo de jogo." );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n• O mesmo funciona da seguinte forma:" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n- > Ao falar no chat somente quem estiver a 15 metros de você" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\nirá ver o que você escreveu." );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\nPara solicitar ajuda utilize o comando: /SOS [ Dúvida ]" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n- > Para falar privado com alguém utilize o comando: /SMS [ Mensagem ]" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\nO preço de 100 sms custa 3000 reais, sendo cada sms 30 reais." );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n- > Para fazer um anúncio utilize o comando: /AN [ Anúncio ]" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n- > Outros chats:" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n• Chat Profissão: /CP [ Mensagem ]" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n• Chat Clan/Gangue: ! [ Mensagem ]" );
	strcat( stg, gstring );
	format( gstring, sizeof( gstring ), "\n• Chat Vip: . [ Mensagem ]" );
	strcat( stg, gstring );
	ShowPlayerDialog( playerid, 1457, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Info Chat - [RPG] Brasil Play Online «", stg, "OK", "" );
	return 1;
}
if( !strcmp( cmd, "/gpscidade", true ))
{
	if( TextLocal[ playerid ][ 0 ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Opções: ( Ativar, Desativar )" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /GPScidade [ Opção ]" );
			return 1;
		}
		if( !strcmp( tmp, "ativar", true ))
		{
			if( TextLocal[ playerid ][ 2 ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu gps cidade já está ativado !" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPS cidade ativado !" );
			dini_IntSet( f( playerid ), "StatusGPSc", 1 );
			TextLocal[ playerid ][ 2 ] = 1;
		}
		else if( !strcmp( tmp, "desativar", true ))
		{
			if( TextLocal[ playerid ][ 2 ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu gps cidade já está desativado !" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPS cidade desativado !" );
			dini_IntSet( f( playerid ), "StatusGPSc", 0 );
			TextLocal[ playerid ][ 2 ] = 0;
			PlayerTextDrawHide( playerid, CityPlayer[ playerid ] );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um GPS Cidade !" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você adquire um nas lojas de utilitarios !" );
	}
	return 1;
}
if( !strcmp( cmd, "/gpslocal", true ))
{
	if( TextLocal[ playerid ][ 1 ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Opções: ( Ativar, Desativar )" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /GPSlocal [ Opção ]" );
			return 1;
		}
		if( !strcmp( tmp, "ativar", true ))
		{
			if( TextLocal[ playerid ][ 3 ] == 1 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu gps local já está ativado !" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPS local ativado !" );
			dini_IntSet( f( playerid ), "StatusGPSl", 1 );
			TextLocal[ playerid ][ 3 ] = 1;
		}
		else if( !strcmp( tmp, "desativar", true ))
		{
			if( TextLocal[ playerid ][ 3 ] == 0 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu gps local já está desativado !" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPS local desativado !" );
			dini_IntSet( f( playerid ), "StatusGPSl", 0 );
			TextLocal[ playerid ][ 3 ] = 0;
			PlayerTextDrawHide( playerid, LocalPlayer[ playerid ] );
		}
		return 1;
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem um GPS Local !" );
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você adquire um nas lojas de utilitarios !" );
	}
	return 1;
}
if( !strcmp( cmd, "/baninfo", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso: correto /baninfo [ Nick ]" );
			return 1;
		}
		format( gFile, sizeof( gFile ), "Contas/%s.ini", tmp );
		if( !fexist( gFile ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não existe nenhuma conta com esse nick !" );
			return 1;
		}
		new
		nome[ 64 ], banido[ 5 ], casa[ 24 ]
		;
		if( dini_Int( gFile, "Banido" ) == 1 )
		{
			banido = "SIM";
		}
		else
		{
			banido = "NÃO";
		}
		new
		CasaID = dini_Int( gFile, "Casa" )
		;
		if( CasaID > 0 )
		{
			if( !strcmp( CasaInfo[ CasaID ][ Proprietario ], tmp, true ))
			{
				format( casa, 24, "SIM | Casa ID %d", CasaID );
			}
			else if( strcmp( CasaInfo[ CasaID ][ Proprietario ], tmp, false ))
			{
				dini_IntSet( gFile, "Casa", -1 );
				casa = "NENHUMA";
			}
		}
		new lvl = dini_Int( gFile, "Level" );
		new bbb = dini_Int( gFile, "SaldoBanco" );
		new ddd = dini_Int( gFile, "Dinheiro" );
		new bnp[ 24 ];
		format( bnp, 24, "%s", dini_Get( gFile, "BanidoPor" ));
		new mtb[ 24 ];
		format( mtb, 24, "%s", dini_Get( gFile, "MotivoBan" ));
		format( s5Doze, sizeof( s5Doze ), "Level %d\nBanco $%d | Mãos $%d |\nBanido %s | Responsável %s | Motivo %s\nCasa | %s\nUlt Login %s | Hora %s\n\nRegistrou-se %s", lvl, bbb, ddd, banido, bnp, mtb, casa, dini_Get( gFile, "ulData" ), dini_Get( gFile, "ulHorario" ), dini_Get( gFile, "regData" ));
		format( nome, 64, "{FF0000}•»{00FF00}Informação De Banimento{FFFFFF}%s", tmp );
		ShowPlayerDialog( playerid, 1457, DIALOG_STYLE_MSGBOX, nome, s5Doze, "OK", "" );
	}
	return 1;
}
if( !strcmp( cmd, "/pconectado", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso: correto /pconectado [ Nick ]" );
			return 1;
		}
		if( pConectadoa( tmp ))
		{
			foreach(Player, i)
			{
				if( !strcmp( PlayerName( i ), tmp, false ))
				{
					format( gStr, 128, "[ > ] O(A) jogador(a) %s está online é o ID [ %d ].", tmp, i );
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					break;
				}
			}
		}
		else
		{
			format( gStr, 128, "[ x ] O(A) jogador(a) %s não está conectado !", tmp );
			SendClientMessage( playerid, COLOR_ERRO, gStr );
		}
		return 1;
	}
	return 1;
}
if( !strcmp( cmd, "/vArma", true ))
{
	if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS || pInfo[ playerid ][ Prof ] == CHEFE_MAFIA ||aInfo[ playerid ][ Admin ] == 1 )
	{
		ShowPlayerDialog( playerid, D_PARMA, DIALOG_STYLE_LIST, "Armas para venda:", "\tSilenced 9mm\n\tShotgun\n\tTec9\n\tAK-47\n\tSniper Rifle", "Escolher", "Cancelar" );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não é um(a) traficante nem chefe da máfia !" );
	}
	return 1;
}
if( !strcmp( cmd, "/farda", true )) // localização do /farda de cada profissão
{
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA )
	{
		if( pInfo[ playerid ][ Prof ] == POL_CIVIL && !IsPlayerInRangeOfPoint( playerid, 1.0, 217.9510, 71.7017, 1005.0391 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_MILITAR && !IsPlayerInRangeOfPoint( playerid, 1.0, 253.8083, 76.3055, 1003.6406 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == BOPE && !IsPlayerInRangeOfPoint( playerid, 1.0, 2244.5125, 2442.8975, 10.8203 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == MARINHA && !IsPlayerInRangeOfPoint( playerid, 1.0, -1348.4652, 492.5126, 11.1953 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA && !IsPlayerInRangeOfPoint( playerid, 1.0, 244.4147,120.5334,1003.3084 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 215.2691, 78.3579, 1005.0391 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == DELEGADO && !IsPlayerInRangeOfPoint( playerid, 1.0, 239.2931, 77.8610, 1005.0391 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == EXERCITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 239.3000, 1861.4000, 14.1000 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ fardado ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está fardado(a) !" );
			return 1;
		}
		pInfo[ playerid ][ fardado ] = 1;
		armasProf( playerid );
		SendClientMessage( playerid, COLOR_CEU, "[ > ] Farda e equipamentos colocados." );
	}
	return 1;
}
if( !strcmp( cmd, "/colete", true )) // Localização do /colete de cada profissão
{
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA )
	{
		if( pInfo[ playerid ][ Prof ] == POL_CIVIL && !IsPlayerInRangeOfPoint( playerid, 1.0, 220.7647, 71.5451, 1005.0391 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_MILITAR && !IsPlayerInRangeOfPoint( playerid, 1.0, 257.9767, 79.7221, 1003.6406 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == BOPE && !IsPlayerInRangeOfPoint( playerid, 1.0, 2247.4604, 2445.2827, 10.8203 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA && !IsPlayerInRangeOfPoint( playerid, 1.0, 248.5096, 120.5641, 1003.2188 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == MARINHA && !IsPlayerInRangeOfPoint( playerid, 1.0, -1346.1531,492.4623,11.2027 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 218.1883, 80.8657, 1005.0391 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == DELEGADO && !IsPlayerInRangeOfPoint( playerid, 1.0, 239.0744, 73.6162, 1005.0391 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == EXERCITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 239.1999, 1858.4000, 14.1000 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ fardado ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para colocar o colete !" );
			return 1;
		}
		pInfo[ playerid ][ ccolete ] = 1;
		SetPlayerArmour( playerid, 100.0 );
		SendClientMessage( playerid, COLOR_CEU, "[ > ] Colete colocado." );
	}
	return 1;
}
if( !strcmp( cmd, "/fardasf", true )) // localização do /farda de cada profissão // DP SF // SF DP
{
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA )
	{
		if( pInfo[ playerid ][ Prof ] == POL_CIVIL && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_MILITAR && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == BOPE && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == MARINHA && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == DELEGADO && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == EXERCITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 294.8674, 183.7677, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ fardado ] == 1 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já está fardado(a) !" );
			return 1;
		}
		pInfo[ playerid ][ fardado ] = 1;
		armasProf( playerid );
		SendClientMessage( playerid, COLOR_CEU, "[ > ] Farda e equipamentos colocados." );
	}
	return 1;
}
if( !strcmp( cmd, "/coletesf", true )) // Localização do /colete de cada profissão
{
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == DELEGADO || pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA )
	{
		if( pInfo[ playerid ][ Prof ] == POL_CIVIL && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_MILITAR && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == BOPE && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == MARINHA && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == DELEGADO && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ Prof ] == EXERCITO && !IsPlayerInRangeOfPoint( playerid, 1.0, 298.6661, 183.1014, 1007.1719 ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no seu vestiário !" );
			return 1;
		}
		if( pInfo[ playerid ][ fardado ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está fardado(a) !" );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa está fardado(a) para colocar o colete !" );
			return 1;
		}
		pInfo[ playerid ][ ccolete ] = 1;
		SetPlayerArmour( playerid, 100.0 );
		SendClientMessage( playerid, COLOR_CEU, "[ > ] Colete colocado." );
	}
	return 1;
}
if( !strcmp( cmd, "/celular", true ))
{
	ShowPlayerDialog( playerid, D_CELLL, DIALOG_STYLE_LIST, "Celular", "\tCréditos SMS\n\tEnviar SMS", "OK", "Sair" );
	return 1;
}
if( !strcmp( cmd, "/setarsms", true ))
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	{
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarsms [ ID ] [ SMS ]" );
			return 1;
		}
		new
		id = strval( tmp )
		;
		tmp = strtok( cmdtext, idx );
		if( !strlen( tmp ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Uso correto: /setarsms [ ID ] [ SMS ]" );
			return 1;
		}
		new
		s_sms = strval( tmp )
		;
		if( !IsPlayerConnected( id ))
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
			return 1;
		}
		if( pInfo[ id ][ Celular ] == 0 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] O(A) jogador(a) não tem celular !" );
			return 1;
		}
		format( gstring, sizeof( gstring ), "[ > ] Você setou %d sms para %s - SMS anterior %d", s_sms, PlayerName( id ), pInfo[ id ][ Celular_c ] );
		SendClientMessage( playerid, 0x00FF66AA, gstring );
		format( gstring, sizeof( gstring ), "[ BPO ADMIN ] O(A) Administrador(a) %s setou %d SMS pra você.", PlayerName( playerid ), s_sms );
		SendClientMessage( id, 0x00FF66AA, gstring );
		pInfo[ id ][ Celular_c ] = s_sms;

		format( gStr, sizeof( gStr ), "%s  recebeu  %d  SMS do(a) Administrador(a)  -  %s", PlayerName( id ), s_sms, PlayerName( playerid ));
		log_setados_sms( gStr );
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão!" );
	}
	return 1;
}
return SendClientMessage( playerid, 0xA9C4E4AA, "[ SERVER ] Comando invalido !" ), GameTextForPlayer( playerid, "~n~~r~~h~Comando invalido !", 2000, 5 );
}
//final

public MesagemClanConvite( playerid )
{
	if( msgcount[ playerid ] >= 5 )
	{
	    KillTimer( timercou[ playerid ] );
	    format( gstring, sizeof( gstring ), "[ x ] Você demorou muito para responder e o convite para sem membro do Clan %s foi cancelado !", playerClan[ convidou[ playerid ] ] );
		SendClientMessage( playerid, COLOR_ERRO, gstring );
 	    format( gstring, sizeof( gstring ), "[ x ] %s demorou para responder e o convite foi automaticamente cacenlado !", PlayerName( playerid ));
		SendClientMessage( playerid, COLOR_ERRO, gstring );
		msgcount[ playerid ] = -1;
		convidou[ playerid ] = -1;
		msgconvi[ playerid ] = 0;
		return 1;
	}
	else if( msgcount[ playerid ] < 5 )
	{
	    msgcount[ playerid ] ++;
		format( gstring, sizeof( gstring ), "[ > ] %s está convidando você para ser membro do Clan %s ( /Aceitar ou /Recusar )", PlayerName( convidou[ playerid ] ), playerClan[ convidou[ playerid ] ] );
        SendClientMessage( playerid, COLOR_AMARELO, gstring );
		format( gstring, sizeof( gstring ), "[ > ] Aguardando a resposta de %s para ser membro do seu Clan %s", PlayerName( playerid ), playerClan[ convidou[ playerid ] ] );
        SendClientMessage( convidou[ playerid ], COLOR_AMARELO, gstring );
        timercou[ playerid ] = SetTimerEx( "MesagemClanConvite", 4000, false, "d", playerid );
		return 1;
	}
	return 1;
}

forward TempoCriarGangue( playerid );
public TempoCriarGangue( playerid )
{
    LiberadoGG[ playerid ] = 0;
	return 1;
}

forward LiberadoCasaID( playerid );
public LiberadoCasaID( playerid )
{
    LiberadoCasa[ playerid ] = 0;
	return 1;
}

forward ComprandoCasaOferecida( playerid );
public ComprandoCasaOferecida( playerid )
{
	if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ HouseIP ][ PickupX ], CasaInfo[ HouseIP ][ PickupY ], CasaInfo[ HouseIP ][ PickupZ ] ))
	{
   		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ HouseIP ][ Numero ] );
		new
			zone[ MAX_ZONE_NAME ]
		;
		GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
		format( gstring, sizeof( gstring ), "[ INFO ] Jogador {FFFFFF}%s {99FF66}comprou a Casa ID {FFFFFF}%d, {99FF66}localizada em: {FFFFFF}%s", PlayerName( playerid ), CasaInfo[ HouseIP ][ Numero ], zone );
		SendClientMessageToAll( 0x99FF66AA, gstring );
		DestroyPickup( CasaPickup[ HouseIP ] );
		CasaPickup[ HouseIP ] = CreatePickup( 1272, 23, CasaInfo[ HouseIP ][ PickupX ], CasaInfo[ HouseIP ][ PickupY ], CasaInfo[ HouseIP ][ PickupZ ] );
		pInfo[ playerid ][ Spawn ] = 1;
		dini_IntSet( gFile, "Casa", CasaInfo[ HouseIP ][ Numero ] );
        dini_IntSet( gFile, "Spawn", 1 );
		dini_Set( hFile, "Proprietario", PlayerName( playerid ));
		format( CasaInfo[ HouseIP ][ Proprietario ], 64, PlayerName( playerid ));
		format( CasaInfo[ HouseIP ][ Morador ], 64, "Ninguem" );
		format( CasaInfo[ HouseIP ][ Morador2 ], 64, "Ninguem" );
		format( CasaInfo[ HouseIP ][ Morador3 ], 64, "Ninguem" );
		dini_Set( hFile, "Morador", "Ninguem" );
		dini_Set( hFile, "Morador2", "Ninguem" );
		dini_Set( hFile, "Morador3", "Ninguem" );
		dini_IntSet( hFile, "Dono", 1 );

		dini_Set( hFile, "Login", dini_Get( gFile, "ulData" ));
		format( CasaInfo[ HouseIP ][ Login ], 12, dini_Get( gFile, "ulData" ));
		dini_Set( hFile, "Horario", dini_Get( gFile, "ulHorario" ));
		format( CasaInfo[ HouseIP ][ Horario ], 12, dini_Get( gFile, "ulHorario" ));

		return 1;
	}
	LiberadoCasa[ playerid ] = 0,
	HouseIP = -1,
	Vendedor[ playerid ] = -1,
	MoneyHouse[ RecebeuCasa[ playerid ] ] = -1,
	RecebeuCasa[ playerid ] = -1;
	return 1;
}

forward Contagem( );
public Contagem( )
{
    if( NumeroCount == 0 )
    {
    	foreach(Player, i )
		{
			TogglePlayerControllable( i, true );
			PlayerPlaySound( i, 1057, 0.0, 0.0, 0.0 );
		}
    	format( gstring, sizeof( gstring ), "~y~VALENDO~w~!" );
		GameTextForAll( gstring, 1250, 5 );
    	return 1;
    }
    foreach(Player, i )
	{
		TogglePlayerControllable( i, false );
		PlayerPlaySound( i, 1056, 0.0, 0.0, 0.0 );
	}
    format( gstring, sizeof( gstring ), "%d", NumeroCount );
	GameTextForAll( gstring, 1250, 5 );
	NumeroCount --;
	SetTimer( "Contagem", 1000, false );
	return 1;
}

public OnPlayerEnterVehicle( playerid, vehicleid, ispassenger )
{
	return 1;
}

public OnPlayerExitVehicle( playerid, vehicleid )
{
	return 1;
}

public OnPlayerStateChange( playerid, newstate, oldstate )
{
	if( newstate == PLAYER_STATE_DRIVER ) // Bicicletas: 510, 481, 509, 462 - Motinha
	{
	    new
			veiculo = GetPlayerVehicleID( playerid )
		;
		if( pInfo[ playerid ][ HabT ] == 0 )
		{
		    if( IsACar( veiculo ) || IsABike( veiculo ))
		    {
				if( pInfo[ playerid ][ Level ] > 3 )
				{
			   		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão para dirigir um carro sem habilitação terrestre !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é level maior que 3 e foi multado(a) e poderá ser preso(a) caso seja parado(a) por polícias fazendo blitz !" );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Tire sua habilitação terrestre o mais rápido possível, ou sua situação ficará pior !" );
					if( GetPlayerWantedLevel( playerid ) < 6 )
	         		{
						SetPlayerWantedLevel( playerid, GetPlayerWantedLevel( playerid ) + 1 );
					}
				}
				else if( pInfo[ playerid ][ Level ] < 3 )
				{
	    			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão para dirigir um carro sem habilitação terrestre !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não será multado e não será adicionada estrela de procurado, tolerância somente até o level 3." );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Tire sua habilitação terrestre o mais rápido possível antes de ter level superior a 3 !" );
				}
			}
		}
		if( pInfo[ playerid ][ HabA ] == 0 )
		{
		    if( IsAPlane( veiculo ))
		    {
				if( pInfo[ playerid ][ Level ] > 3 )
				{
			   		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão para pilotar um veículo aéreo sem habilitação aérea !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é level maior que 3 e foi multado(a) e poderá ser preso(a) caso seja parado(a) por polícias fazendo blitz !" );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Tire sua habilitação aérea o mais rápido possível, ou sua situação ficará pior !" );
					if( GetPlayerWantedLevel( playerid ) < 6 )
	         		{
						SetPlayerWantedLevel( playerid, GetPlayerWantedLevel( playerid ) + 1 );
					}
				}
				else if( pInfo[ playerid ][ Level ] < 3 )
				{
	    			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão para pilotar um veículo aéreo sem habilitação aérea !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não será multado e não será adicionada estrela de procurado, tolerância somente até o level 3." );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Tire sua habilitação aérea o mais rápido possível antes de ter level superior a 3 !" );
				}
			}
		}
		if( pInfo[ playerid ][ HabN ] == 0 )
		{
		    if( IsABarco( veiculo ))
		    {
				if( pInfo[ playerid ][ Level ] > 3 )
				{
			   		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão para pilotar um barco sem habilitação náutica!" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você é level maior que 3 e foi multado(a) e poderá ser preso(a) caso seja parado(a) por polícias fazendo blitz !" );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Tire sua habilitação náutica o mais rápido possível, ou sua situação ficará pior !" );
					if( GetPlayerWantedLevel( playerid ) < 6 )
	         		{
						SetPlayerWantedLevel( playerid, GetPlayerWantedLevel( playerid ) + 1 );
					}
				}
				else if( pInfo[ playerid ][ Level ] < 3 )
				{
	    			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem permissão para pilotar um barco sem habilitação náutica !" );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não será multado e não será adicionada estrela de procurado, tolerância somente até o level 3." );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Tire sua habilitação náutica o mais rápido possível antes de ter level superior a 3 !" );
				}
			}
		}
	    if( IsABikeBike( veiculo ))
		{
		    if( pInfo[ playerid ][ StatusCapacete ] == 1 )
		    {
		        if( pInfo[ playerid ][ ModeloCapacete ] == 0 ) { SetPlayerAttachedObject( playerid, 5, 18645, 2, 0.07, 0, 0, 88, 75, 0 ); }
				if( pInfo[ playerid ][ ModeloCapacete ] == 1 ) { SetPlayerAttachedObject( playerid, 5, 18976, 2, 0.09, 0.03, 0, 88, 75, 0 ); }
	            if( pInfo[ playerid ][ ModeloCapacete ] == 2 ) { SetPlayerAttachedObject( playerid, 5, 18977, 2, 0.07, 0, 0, 88, 75, 0 ); }
	            if( pInfo[ playerid ][ ModeloCapacete ] == 3 ) { SetPlayerAttachedObject( playerid, 5, 18978, 2, 0.07, 0, 0, 88, 75, 0 ); }
	            if( pInfo[ playerid ][ ModeloCapacete ] == 4 ) { SetPlayerAttachedObject( playerid, 5, 18979, 2, 0.07, 0, 0, 88, 75, 0 ); }
		    }
		    else
		    {
     			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está com capacete desativado e poderá ser multado(a) !" );
       			SendClientMessage( playerid, COLOR_ERRO, "[ > ] Caso você tenha um capacete ative-o usando: {FFFFFF}/Capacete Ativar" );
        		SendClientMessage( playerid, COLOR_ERRO, "[ > ] Caso você não tenha um capacete compre um na loja de utilitarios." );
			}
	    }
	    if( in_z[ playerid ] != -1 )
	    {
	        if( ZonaAtacada[ in_z[ playerid ] ] != -1 )
	        {
	        	if( !strcmp( playerClan[ playerid ], ZoneInfo[ in_z[ playerid ] ][ zClan ], true ))
				{
					ZonaAtacada[ in_z[ playerid ] ] = -1;
					ZoneAttackTempo[ in_z[ playerid ] ] = 0;
					GangZoneStopFlashForAll( ZoneID[ in_z[ playerid ] ] );
	  			}
	        }
	    }
    	if( pInfo[ playerid ][ Gas ] <= 0 && GetVehicleModel( veiculo ) != 481 && GetVehicleModel( veiculo ) != 509 && GetVehicleModel( veiculo ) != 510 && GetVehicleModel( veiculo ) != 462 )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está sem combustível procure por um posto próximo a você e abasteça !" );
            RemovePlayerFromVehicle( playerid );
			PlayerPlaySound( playerid, 1085, 0.0, 0.0, 0.0 );
			return 1;
		}
		if( pInfo[ playerid ][ Tem_Velocimetro ] == 1 && pInfo[ playerid ][ VelocimetroO_F ] == 1 )
		{
		    TextDrawShowForPlayer( playerid, Velocidade[ playerid ] );
		}
		else
		{
   			TextDrawHideForPlayer( playerid, Velocidade[ playerid ] );
		}
	    TextDrawShowForPlayer( playerid, Gasolina[ playerid ] );

	    format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));

		if( dini_Int( gFile, "sModelo" ) == 1 && dini_Int( gFile, "sModeloStatus" ) == 1 )
		{
			format( gStr, sizeof( gStr ), "~y~~h~Modelo~n~%s", vNome[ GetVehicleModel( veiculo ) -400 ] );
			TextDrawSetString( Modelo[ playerid ], gStr );
			TextDrawShowForPlayer( playerid, Modelo[ playerid ] );
		}
		if( GetVehicleModel( veiculo ) == 525 )
	 	{
	        Eguicho[ playerid ] = 1;
	        CaminhaoGuincho ++;
		}
        if( ParticipandoEvento[ playerid ] == 1 )
        {
          	KillTimer( Volta[ playerid ] );
         	Tempo_Volta[ playerid ] = 50;
        }
        if( veiculo == vPrefeito[ 0 ] )
        {
            if( fexist( "Eleitos.ini" ))
            {
            	if( !strcmp( dini_Get( "Eleitos.ini", "Presidente" ), PlayerName( playerid ), true ))
				{
				    format( gStr, sizeof( gStr ), "[ > ] Olá presidente(a) %s, seja bem vindo a sua limosine.", PlayerName( playerid ));
				    SendClientMessage( playerid, COLOR_AMARELO, gStr );
				}
				else
				{
					RemovePlayerFromVehicle( playerid );
					format( gStr, sizeof( gStr ), "[ x ] Este veículo é reservado para o(a) presidente(a) %s !", dini_Get( "Eleitos.ini", "Presidente" ));
				    SendClientMessage( playerid, COLOR_AMARELO, gStr );
					PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				}
			}
			else
			{
				dini_Create( "Eleitos.ini" );
			    dini_IntSet( "Eleitos.ini", "votoStatus", 0 );
			    dini_Set( "Eleitos.ini", "Presidente", "Nenhum" );
			    dini_IntSet( "Eleitos.ini", "Candidatos", 0 );
			    dini_Set( "Eleitos.ini", "1_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "2_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "3_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "4_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "5_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "6_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "7_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "8_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "9_", "Nenhum" );
			    dini_Set( "Eleitos.ini", "10_", "Nenhum" );
			    dini_IntSet( "Eleitos.ini", "1", 0 );
			    dini_IntSet( "Eleitos.ini", "2", 0 );
			    dini_IntSet( "Eleitos.ini", "3", 0 );
			    dini_IntSet( "Eleitos.ini", "4", 0 );
			    dini_IntSet( "Eleitos.ini", "5", 0 );
			    dini_IntSet( "Eleitos.ini", "6", 0 );
			    dini_IntSet( "Eleitos.ini", "7", 0 );
			    dini_IntSet( "Eleitos.ini", "8", 0 );
			    dini_IntSet( "Eleitos.ini", "9", 0 );
			    dini_IntSet( "Eleitos.ini", "10", 0 );
			    RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Este veículo é reservado para o(a) presidente !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
			}
            return 1;
        }
		if( GetVehicleModel( veiculo) == 431 )
	    {
			if( pInfo[ playerid ][ Prof ] != MOTORISTA_ONIBUS && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ x ] Este veículo é reservado para os(as) Motoristas de Ônibus !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
    			return 1;
			}
		}
		if( GetVehicleModel( veiculo) == 420 )
	    {
	        if( pInfo[ playerid ][ Prof ] != TAXISTA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_TAXISTA, "[ x ] Este veículo é reservado para os(as) Taxistas !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		} // Ids dos veiculos que policia pode andar // Quem pode andar nas viaturas
		if( GetVehicleModel( veiculo) == 597 || GetVehicleModel( veiculo) == 599 || GetVehicleModel( veiculo) == 523 || GetVehicleModel( veiculo) == 497 || GetVehicleModel( veiculo) == 598 || GetVehicleModel( veiculo) == 596 || GetVehicleModel( veiculo) == 548 || GetVehicleModel( veiculo) == 433 )
	    {
	        if( pInfo[ playerid ][ Prof ] != GUARDA_TRANSITO && pInfo[ playerid ][ Prof ] != POL_CIVIL && pInfo[ playerid ][ Prof ] != POL_MILITAR && pInfo[ playerid ][ Prof ] != DELEGADO && pInfo[ playerid ][ Prof ] != BOPE && pInfo[ playerid ][ Prof ] != EXERCITO && pInfo[ playerid ][ Prof ] != POL_RODOVIARIA && pInfo[ playerid ][ Prof ] != MARINHA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, 0xAFED30FF, "[ x ] Este veículo é reservado para Policia !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
			}
			else
			{
			    if( pInfo[ playerid ][ fardado ] == 0 )
			    {
			    	RemovePlayerFromVehicle( playerid );
					SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode dirigir uma viatura sem estar fardado(a) !" );
					PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
			    }
			}
		}
	    if( veiculo == vNovatos[ 0 ] || veiculo == vNovatos[ 1 ] || veiculo == vNovatos[ 2 ] || veiculo == vNovatos[ 3 ] || veiculo == vNovatos[ 4 ] || veiculo == vNovatos[ 5 ] || veiculo == vNovatos[ 6 ] || veiculo == vNovatos[ 7 ] || veiculo == vNovatos[ 8 ] || veiculo == vNovatos[ 9 ] )
	    {
	        if( pInfo[ playerid ][ Level ] > 5 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa bicicleta é para novatos(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
	    if( veiculo == vMotoBoys[ 0 ] ||
		veiculo == vMotoBoys[ 1 ] ||
		veiculo == vMotoBoys[ 2 ] ||
		veiculo == vMotoBoys[ 3 ] ||
		veiculo == vMotoBoys[ 4 ] ||
		veiculo == vMotoBoys[ 5 ] ||
		veiculo == vMotoBoys[ 6 ] ||
		veiculo == vMotoBoys[ 7 ] ||
		veiculo == vMotoBoys[ 8 ] ||
		veiculo == vMotoBoys[ 9 ] ||
		veiculo == vMotoBoys[ 10 ] ||
		veiculo == vMotoBoys[ 11 ] ||
		veiculo == vMotoBoys[ 12 ] ||
		veiculo == vMotoBoys[ 13 ] ||
		veiculo == vMotoBoys[ 14 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != MOTOBOY && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MOTOBOY, "[ x ] Este veículo é reservado para os(as) MotoBoys/Girl !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
		if( GetVehicleModel( veiculo) == 515 )
	    {
			if( Carga[ playerid ] == 1 && saiuCaminhao[ playerid ] == 1 )
			{
			    saiuCaminhao[ playerid ] = 0;
			    KillTimer( cargaTempo[ playerid ] );
			}
	        if( pInfo[ playerid ][ Prof ] != CAMINHONEIRO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_CAMINHONEIRO, "[ x ] Este veículo é reservado para os(as) Caminhoneiros(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
 		if( veiculo == vMCarroForte[ 0 ] || veiculo == vMCarroForte[ 1 ] || veiculo == vMCarroForte[ 2 ] || veiculo == vMCarroForte[ 3 ] || veiculo == vMCarroForte[ 4 ] || veiculo == vMCarroForte[ 5 ] )
	    {
			if( RotaMFort[ playerid ] == 1 && saiuForte[ playerid ] == 1 )
			{
			    saiuForte[ playerid ] = 0;
			    KillTimer( ForteTempo[ playerid ] );
			}
	        if( pInfo[ playerid ][ Prof ] != M_CARRO_FORTE && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Este veículo é reservado para os(as) Motoristas de Carro Forte !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vSedex[ 0 ] || veiculo == vSedex[ 1 ] || veiculo == vSedex[ 2 ] || veiculo == vSedex[ 3 ] || veiculo == vSedex[ 4 ] || veiculo == vSedex[ 5 ] )
	    {
			if( RotaSedex[ playerid ] == 1 && saiuSedex[ playerid ] == 1 )
			{
			    saiuForte[ playerid ] = 0;
			    KillTimer( ForteTempo[ playerid ] );
			}
	        if( pInfo[ playerid ][ Prof ] != ENTREGADOR_SEDEX && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_AMARELO, "[ x ] Este veículo é reservado para trabalhadores do SEDEX !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vPescadores[ 0 ] || veiculo == vPescadores[ 1 ] || veiculo == vPescadores[ 2 ] || veiculo == vPescadores[ 3 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != PESCADOR && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_PESCADOR, "[ x ] Este veículo é reservado para os(as) Pescadores(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vPiloto[ 0 ] || veiculo == vPiloto[ 1 ] || veiculo == vPiloto[ 2 ] || veiculo == vPiloto[ 3 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != PILOTO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_PILOTO, "[ x ] Este veículo é reservado para os(as) Pilotos(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
		if( GetVehicleModel( veiculo) == 408 )
		 {
	        if( pInfo[ playerid ][ Prof ] != LIXEIRO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse Caminhao e feito para os Lixeiros(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
	    if( veiculo == vSegurancas[ 0 ] || veiculo == vSegurancas[ 1 ] || veiculo == vSegurancas[ 2 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != SEGURANCA_PART && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_SEGPART, "[ x ] Este veículo é reservado para os(as) Seguranças Particulares !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vMotoristap[ 0 ] || veiculo == vMotoristap[ 1 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != MOTORISTA_PART && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MOTPART, "[ x ] Este veículo é reservado para os(as) Motoristas Particulares !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vCacadores[ 0 ] || veiculo == vCacadores[ 1 ] || veiculo == vCacadores[ 2 ] || veiculo == vCacadores[ 3 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != CACADOR && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_CACADOR, "[ x ] Este veículo é reservado para os(as) Caçadores(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vMotoTaxista[ 0 ] || veiculo == vMotoTaxista[ 1 ] || veiculo == vMotoTaxista[ 2 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != MOTO_TAXISTA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MOTOTAXI, "[ x ] Este veículo é reservado para os(as) Moto Taxista !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vMotoAereo[ 0 ] || veiculo == vMotoAereo[ 1 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != TAXI_AEREO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_TAXIAEREO, "[ x ] Este veículo é reservado para os(as) Taxistas Áereo !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vTraficDrogas[ 0 ] || veiculo == vTraficDrogas[ 1 ] || veiculo == vTraficDrogas[ 2 ] || veiculo == vTraficDrogas[ 3 ] || veiculo == vTraficDrogas[ 4 ] || veiculo == vTraficDrogas[ 5 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != TRAF_DROGAS && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_TRAFDROGAS, "[ x ] Este veículo é reservado para os(as) Traficantes de Drogas !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vTraficArmas[ 0 ] || veiculo == vTraficArmas[ 1 ] || veiculo == vTraficArmas[ 2 ] || veiculo == vTraficArmas[ 3 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != TRAF_ARMAS && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_TRAFARMAS, "[ x ] Este veículo é reservado para os(as) Traficantes de Armas !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vAssasino[ 0 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != ASSASSINO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_ASSASSINO, "[ x ] Este veículo é reservado para os(as) Assasinos(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vTerrorista[ 0 ] || veiculo == vTerrorista[ 1 ] || veiculo == vTerrorista[ 2 ] || veiculo == vTerrorista[ 3 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != TERRORISTA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_TERRORISTA, "[ x ] Este veículo é reservado para os(as) Terroristas !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vChefeMafia[ 0 ] || veiculo == vChefeMafia[ 1 ] || veiculo == vChefeMafia[ 2 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != CHEFE_MAFIA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_CHEFEMAFIA, "[ x ] Este veículo é reservado para os(as) Chefes da Máfia !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vPortIlha[ 0 ] || veiculo == vPortIlha[ 1 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != PORT_ILHA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_PORILHA, "[ x ] Este veículo é reservado para os(as) Porteirtos da Ilha !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vSegIlha[ 0 ] || veiculo == vSegIlha[ 1 ] || veiculo == vSegIlha[ 2 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != SEG_ILHA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_SEGILHA, "[ x ] Este veículo é reservado para os(as) Seguranças da Ilha !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vFotografo[ 0 ] || veiculo == vFotografo[ 1 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != FOTOGRAFO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_FOTOGRAFO, "[ x ] Este veículo é reservado para os(as) Fotógrafos(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vReporter[ 0 ] || veiculo == vReporter[ 1 ] || veiculo == vReporter[ 2 ] || veiculo == vReporter[ 3 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != REPORTER && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_REPORTER, "[ x ] Este veículo é reservado para os(as) Reporters !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vInstrutor[ 0 ] || veiculo == vInstrutor[ 1 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != INSTRUTOR && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_INSTRUTOR, "[ x ] Este veículo é reservado para os(as) Instrutores(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vMecanico[ 0 ] || veiculo == vMecanico[ 1 ] || veiculo == vMecanico[ 2 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != MECANICO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MECANICO, "[ x ] Este veículo é reservado para os(as) Mecânicos(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vLixeiro[ 0 ] || veiculo == vLixeiro[ 1 ] || veiculo == vLixeiro[ 3 ] || veiculo == vLixeiro[ 4 ] || veiculo == vLixeiro[ 5 ] || veiculo == vLixeiro[ 6 ] || veiculo == vLixeiro[ 7 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != LIXEIRO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MECANICO, "[ x ] Este veículo é reservado para os(as) Lixeiros(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vAmbulancias[ 0 ] || veiculo == vAmbulancias[ 1 ] || veiculo == vAmbulancias[ 2 ] || veiculo == vAmbulancias[ 3 ] || veiculo == vAmbulancias[ 4 ] || veiculo == vAmbulancias[ 5 ] || veiculo == vAmbulancias[ 6 ] || veiculo == vAmbulancias[ 7 ] )
	    {
     		if( pInfo[ playerid ][ Prof ] != MEDICO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MEDICO, "[ x ] Este veículo é reservado para os(as) Médicos(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vPadre[ 0 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != PADRE && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_PADRE, "[ x ] Este veículo é reservado para os Padres !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vPizzaBoy[ 0 ] || veiculo == vPizzaBoy[ 1 ] || veiculo == vPizzaBoy[ 2 ] || veiculo == vPizzaBoy[ 3 ] || veiculo == vPizzaBoy[ 4 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != PIZZABOY && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_PIZZABOY, "[ x ] Este veículo é reservado para os(as) Pizza's Boy/Girl !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vHOTDOG[ 0 ] || veiculo == vHOTDOG[ 1 ] || veiculo == vHOTDOG[ 2 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != HOTDOG && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_HOTDOG, "[ x ] Este veículo é reservado para os(as) vendedor(as) de cachorro quente !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vSorveteiro[ 0 ] || veiculo == vSorveteiro[ 1 ] || veiculo == vSorveteiro[ 2 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != SORVETEIRO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_SORVETEIRO, "[ x ] Este veículo é reservado para os(as) Sorveteiro(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vDrifter[ 0 ] || veiculo == vDrifter[ 1 ] || veiculo == vDrifter[ 2 ] || veiculo == vDrifter[ 3 ] || veiculo == vDrifter[ 4 ] || veiculo == vDrifter[ 5 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != DRIFTER && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_DRIFTER, "[ x ] Este veículo é reservado para os(as) Drifters !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vAdvogado[ 0 ] || veiculo == vAdvogado[ 1 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != ADVOGADO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_ADVOGADO, "[ x ] Este veículo é reservado para os(as) Advogados(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
  		if( veiculo == vBombeiros[ 0 ] || veiculo == vBombeiros[ 1 ] || veiculo == vBombeiros[ 2 ] || veiculo == vBombeiros[ 3 ] || veiculo == vBombeiros[ 4 ] || veiculo == vBombeiros[ 5 ] || veiculo == vBombeiros[ 6 ] || veiculo == vBombeiros[ 7 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != BOMBEIRO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_BOMBEIRO, "[ x ] Este veículo é reservado para os(as) Bombeiros(as) !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
 		if( veiculo == vBOPE[ 0 ] || veiculo == vBOPE[ 1 ] || veiculo == vBOPE[ 2 ] || veiculo == vBOPE[ 3 ] || veiculo == vBOPE[ 4 ] || veiculo == vBOPE[ 5 ] || veiculo == vBOPE[ 6 ] || veiculo == vBOPE[ 7 ] || veiculo == vBOPE[ 8 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != BOPE && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_BOPE, "[ x ] Você não pode dirigir um veículo da BOPE !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
			}
		}
  		if( veiculo == vRodoviaria[ 0 ] || veiculo == vRodoviaria[ 1 ] || veiculo == vRodoviaria[ 2 ] || veiculo == vRodoviaria[ 3 ] || veiculo == vRodoviaria[ 4 ] || veiculo == vRodoviaria[ 5 ] || veiculo == vRodoviaria[ 6 ] || veiculo == vRodoviaria[ 7 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != POL_RODOVIARIA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_POLRODOVIARIA, "[ x ] Você não pode dirigir um veículo da Policia Rodoviária !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
			}
		}
  		if( veiculo == vMarinha[ 0 ] || veiculo == vMarinha[ 1 ] || veiculo == vMarinha[ 2 ] || veiculo == vMarinha[ 3 ] || veiculo == vMarinha[ 4 ] || veiculo == vMarinha[ 5 ] || veiculo == vMarinha[ 6 ] || veiculo == vMarinha[ 7 ] || veiculo == vMarinha[ 8 ] || veiculo == vMarinha[ 9 ] || veiculo == vMarinha[ 10 ] || veiculo == vMarinha[ 11 ] || veiculo == vMarinha[ 12 ] || veiculo == vMarinha[ 13 ] || veiculo == vMarinha[ 14 ] ||
  	    veiculo == vMarinha[ 15 ] || veiculo == vMarinha[ 16 ] || veiculo == vMarinha[ 17 ] || veiculo == vMarinha[ 18 ] || veiculo == vMarinha[ 19 ] || veiculo == vMarinha[ 20 ] || veiculo == vMarinha[ 21 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != MARINHA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MARINHA, "[ x ] Você não pode dirigir um veículo da Marinha !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
			}
		}
  		if( veiculo == vExercito[ 0 ] || veiculo == vExercito[ 1 ] || veiculo == vExercito[ 2 ] || veiculo == vExercito[ 3 ] || veiculo == vExercito[ 4 ] || veiculo == vExercito[ 5 ] || veiculo == vExercito[ 6 ] || veiculo == vExercito[ 7 ] || veiculo == vExercito[ 8 ] || veiculo == vExercito[ 9 ] || veiculo == vExercito[ 10 ] || veiculo == vExercito[ 11 ] || veiculo == vExercito[ 12 ] || veiculo == vExercito[ 13 ] || veiculo == vExercito[ 14 ] )
	    {
	        if( pInfo[ playerid ][ Prof ] != EXERCITO && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_EXERCITO, "[ x ] Você não pode dirigir um veículo do EXERCITO !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
			}
		}
  		if( veiculo == 538 )
	    {
	        if( pInfo[ playerid ][ Prof ] != MAQUINISTA && aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 )
			{
				RemovePlayerFromVehicle( playerid );
				SendClientMessage( playerid, COLOR_MAQUINISTA, "[ x ] Este veículo é reservado para os(as) Maquinistas !" );
				PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
				return 1;
			}
		}
        if( PCar_oInfo[ veiculo ][ car_ValidS ] != -1 && PCar_oInfo[ veiculo ][ car_DonoID ] == playerid )
        {
			format( gStr, sizeof( gStr ), "••• {FFFFFF}%s bem vindo(a) ao seu set próprio !", PlayerName( playerid ));
	     	SendClientMessage( playerid, 0x08FF5AFF, gStr );
        }
        else
		{
		    if( PCar_oInfo[ veiculo ][ car_ValidS ] != -1 && PCar_oInfo[ veiculo ][ car_DonoID ] != playerid )
		    {
		        if( IsPlayerConnected( PCar_oInfo[ veiculo ][ car_DonoID ] ))
		        {
					format( gStr, sizeof( gStr ), "x {FFFFFF}Este set próprio pertence à %s e você não pode dirigi-lo !", PlayerName( PCar_oInfo[ veiculo ][ car_DonoID ] ));
					SendClientMessage( playerid, 0xF6311AFF, gStr );
					RemovePlayerFromVehicle( playerid );
				}
			}
		}
		for( new c; c < sizeof( cInfo ); c++ )
		{
   			if( veiculo == cInfo[ c ][ HouseCar ] )
			{
			    format( hFile, sizeof( hFile ), "Casas/casa%d.ini", CasaInfo[ c ][ Numero ] );
        		if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
				{
					format( gStr, sizeof( gStr ), "••• {FFFFFF}Seja bem vindo(a) ao seu veículo %s.", CasaInfo[ c ][ Proprietario ] );
					SendClientMessage( playerid, 0xFFFFCCAA, gStr );
				    return 1;
				}
				else if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ))
				{
					if( strcmp( CasaInfo[ c ][ Morador ], PlayerName( playerid ), true ) == 0 )
				    {
						if( dini_Int( hFile, "vM1" ) == 1 )
						{
   							format( gStr, sizeof( gStr ), "••• {FFFFFF}Seja bem vindo(a) ao veículo de %s.", CasaInfo[ c ][ Proprietario ] );
							SendClientMessage( playerid, 0xCCCCFFAA, gStr );
							return 1;
						}
     					else if( dini_Int( hFile, "vM1" ) == 0 )
						{
						    MensagemFormatada( playerid, 0xFFFFFFAA, "[ > ] %s não liberou você para dirigir o veículo da casa, portanto você não pode dirigi-lo !", CasaInfo[ c ][ Proprietario ] );
                            if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 )
                            {
								RemovePlayerFromVehicle( playerid );
							}
						    return 1;
						}
					}
					if( strcmp( CasaInfo[ c ][ Morador2 ], PlayerName( playerid ), true ) == 0 )
					{
   						if( dini_Int( hFile, "vM2" ) == 1 )
						{
   							format( gStr, sizeof( gStr ), "••• {FFFFFF}Seja bem vindo(a) ao veículo de %s.", CasaInfo[ c ][ Proprietario ] );
							SendClientMessage( playerid, 0xCCCCFFAA, gStr );
							return 1;
						}
     					else if( dini_Int( hFile, "vM2" ) == 0 )
						{
						    MensagemFormatada( playerid, 0xFFFFFFAA, "[ > ] %s não liberou você para dirigir o veículo da casa, portanto você não pode dirigi-lo !", CasaInfo[ c ][ Proprietario ] );
                            if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 )
                            {
								RemovePlayerFromVehicle( playerid );
							}
						    return 1;
						}
					}
   					if( strcmp( CasaInfo[ c ][ Morador3 ], PlayerName( playerid ), true ) == 0 )
					{
   						if( dini_Int( hFile, "vM3" ) == 1 )
						{
   							format( gStr, sizeof( gStr ), "••• {FFFFFF}Seja bem vindo(a) ao veículo de %s.", CasaInfo[ c ][ Proprietario ] );
							SendClientMessage( playerid, 0xCCCCFFAA, gStr );
							return 1;
						}
						else if( dini_Int( hFile, "vM3" ) == 0 )
						{
						    MensagemFormatada( playerid, 0xFFFFFFAA, "[ > ] %s não liberou você para dirigir o veículo da casa, portanto você não pode dirigi-lo !", CasaInfo[ c ][ Proprietario ] );
						    if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 )
						    {
						    	RemovePlayerFromVehicle( playerid );
							}
						    return 1;
						}
					}
					if( CasaInfo[ c ][ vLiberado ] == 0 )
					{
						format( gStr, sizeof( gStr ), "••• {FFFFFF}Este veículo pertence à %s e não está liberado portando você não pode dirigi-lo !", CasaInfo[ c ][ Proprietario ] );
						SendClientMessage( playerid, 0x33CC99AA, gStr );
						PlayerPlaySound( playerid, 1147, 0.0, 0.0, 0.0 );
						if( aInfo[ playerid ][ Dono ] == 0 || aInfo[ playerid ][ Admin ] == 0 )
						{
							RemovePlayerFromVehicle( playerid );
						}
						return 1;
			    	}
			    	else if( CasaInfo[ c ][ vLiberado ] == 1 )
			    	{
	      				format( gStr, sizeof( gStr ), "••• {FFFFFF}Este veículo pertence à %s está liberado para qualquer um dirigi-lo !", CasaInfo[ c ][ Proprietario ] );
						SendClientMessage( playerid, 0xCCCCFFAA, gStr );
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if( newstate == PLAYER_STATE_ONFOOT )
	{
		RemovePlayerAttachedObject( playerid, 5 );

	    TextDrawHideForPlayer( playerid, Velocidade[ playerid ] );
	    TextDrawHideForPlayer( playerid, Gasolina[ playerid ] );
   	    TextDrawHideForPlayer( playerid, Modelo[ playerid ] );

        if( ParticipandoEvento[ playerid ] == 1 && Finalizou[ playerid ] == 0 )
        {
            Tempo_Volta[ playerid ] = 30;
            Volta[ playerid ] = SetTimerEx( "TempoVolta", 1000, false, "d", playerid );
            return 1;
        }
		if( Carga[ playerid ] == 1 )
		{
		    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você saiu do caminhão carregado, você tem 50 segundos para voltar !" );
            saiuCaminhao[ playerid ] = 1;
			cargaTempo[ playerid ] = 50;
		    tempoCarga[ playerid ] = SetTimerEx( "voltarCaminhao", 1000, false, "d", playerid );
		    return 1;
		}
		if( RotaMFort[ playerid ] == 1 )
		{
		    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você saiu do Forte em trabalho, você tem 50 segundos para voltar !" );
            saiuForte[ playerid ] = 1;
			ForteTempo[ playerid ] = 50;
		    tempoForte[ playerid ] = SetTimerEx( "voltarForte", 1000, false, "d", playerid );
		    return 1;
		}
    	if( Taximetro[ playerid ][ 1 ] == 1 )
		{
		    KillTimer( T_Taximetro[ playerid ] );
		    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O taxista foi pago pela sua corrida !" );
		    format( gStr, sizeof( gStr ), "[ > ] Você recebe $%d pela corrida feita para %s", PrecoTaximetro[ playerid ], PlayerName( playerid ));
			SendClientMessage( Taximetro[ playerid ][ 2 ], COLOR_AMARELO, gStr );
		    sGivePlayerCash( playerid, -PrecoTaximetro[ playerid ] );
		    sGivePlayerCash( Taximetro[ playerid ][ 2 ], PrecoTaximetro[ playerid ] );
		    Taxista_P[ Taximetro[ playerid ][ 2 ] ] = 0;
			Taximetro[ playerid ][ 1 ] = 0;
			Taximetro[ playerid ][ 2 ] = -1;
			PrecoTaximetro[ playerid ] = 0;
		}
		if( Eguicho[ playerid ] == 1 )
		{
		    Eguicho[ playerid ] = 0;
		    CaminhaoGuincho --;
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint( playerid )
{
    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );

	if( IsPlayerInDynamicCP( playerid, CP_0 ))
 	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~ Agência de Empregos ~~~~~~~~~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Para abrir o menu de profissões digite: '/Empregos' ou '/Profs'" );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~ Agência de Empregos ~~~~~~~~~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_6 )) // Ginásio de Lutas
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~ Ginásio de Luta ~~~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Para abrir o menu de lusta digite: '/Lutas'" );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~ Ginásio de Luta ~~~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_7 )) // Cooperativa de Pesca
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~ Cooperativa de Pesca ~~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Para descarregar o barco digite: '/VenderPescas'" );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~ Cooperativa de Pesca ~~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_8 )) // Cooperativa de Caça
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~ Cooperativa de Casça ~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Para vender suas caças digite: '/VenderCacas'" );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~ Cooperativa de Casça ~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_1 )) // Banco Central
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~ Banco Central ~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Caso não tenha uma conta bancária digite: '/AbrirConta'" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Caso já tenha uma conta bancária digite: '/EntrarConta'" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Após entrar na sua conta digite: '/Banco'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~ Banco Central ~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, cCaixas[ 0 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 1 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 2 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 3 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 4 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 5 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 6 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 7 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 8 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 9 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 10 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 11 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 12 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 13 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 14 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 15 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 16 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 17 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 18 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 19 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 20 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 21 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 22 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 23 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 24 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 25 ] ) ||
	IsPlayerInDynamicCP( playerid, cCaixas[ 26 ] ))
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~ Caixa  Eletrônico ~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para acessar sua conta bancária pelo caixa eletrônico digite: '/EntrarConta'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Após ter acessado sua conta digite: '/Caixa'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~ Caixa  Eletrônico ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_9 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
	    {
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~ Área Maquinista ~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• Caso você esteja para saída e inicio de viagem digite: '/SairEstacao'" );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• Caso você esteja na chegada final digite: '/ChegadaFinal'" );
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~ Área Maquinista ~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			return 1;
		}
	}
	if( IsPlayerInDynamicCP( playerid, CP_10 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
	    {
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Maquinista Las Venturas ~~~~~~~~~~~~~~~~~•" );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• Estação de Las Venturas - Confirme sua chegada digite: '/ChegadaLV'" );
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Maquinista Las Venturas ~~~~~~~~~~~~~~~~~•" );
			return 1;
		}
	}
	if( IsPlayerInDynamicCP( playerid, CP_11 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
	    {
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Maquinista San Fierro ~~~~~~~~~~~~~~~~~•" );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• Estação de San Fierro - Confirme sua chegada digite: '/ChegadaSF'" );
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área Maquinista San Fierro ~~~~~~~~~~~~~~~~~•" );
			return 1;
		}
	}
	if( IsPlayerInDynamicCP( playerid, CP_13 ))
	{
	    if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
	    {
 			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~ Agência de Fotógrafos ~~~~~~~~~~~~•" );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• Para vender suas fotografias digite: '/VenderFotos'" );
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~ Agência de Fotógrafos ~~~~~~~~~~~~•" );
			return 1;
	    }
	}
	if( IsPlayerInDynamicCP( playerid, CP_5 ))
	{
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}BINCO{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para ver a lista de roupas(SKINS) digite: {ABB6FF}/Skin" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um óculos ou comprar digite: {ABB6FF}/Oculos" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma máscara ou comprar digite: {ABB6FF}/Mascara" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma bandana ou comprar digite: {ABB6FF}/Bandana" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um Chapéu ou comprar digite: {ABB6FF}/Chapeu" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para remover os itens do seu corpo digite: {ABB6FF}/RemoverItens" );
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}BINCO{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_41 ))
	{
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}ZIP{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para ver a lista de roupas(SKINS) digite: {ABB6FF}/Skin" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um óculos ou comprar digite: {ABB6FF}/Oculos" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma máscara ou comprar digite: {ABB6FF}/Mascara" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma bandana ou comprar digite: {ABB6FF}/Bandana" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um Chapéu ou comprar digite: {ABB6FF}/Chapeu" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para remover os itens do seu corpo digite: {ABB6FF}/RemoverItens" );
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}ZIP{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_42 ))
	{
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}VICTIM{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para ver a lista de roupas(SKINS) digite: {ABB6FF}/Skin" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um óculos ou comprar digite: {ABB6FF}/Oculos" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma máscara ou comprar digite: {ABB6FF}/Mascara" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma bandana ou comprar digite: {ABB6FF}/Bandana" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um Chapéu ou comprar digite: {ABB6FF}/Chapeu" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para remover os itens do seu corpo digite: {ABB6FF}/RemoverItens" );
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}VICTIM{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_43 ))
	{
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~ {FFFFFF}TRAIN HARD & PRO-LAPS{B6A6FF} ~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para ver a lista de roupas(SKINS) digite: {ABB6FF}/Skin" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um óculos ou comprar digite: {ABB6FF}/Oculos" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma máscara ou comprar digite: {ABB6FF}/Mascara" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma bandana ou comprar digite: {ABB6FF}/Bandana" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um Chapéu ou comprar digite: {ABB6FF}/Chapeu" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para remover os itens do seu corpo digite: {ABB6FF}/RemoverItens" );
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~ {FFFFFF}TRAIN HARD & PRO-LAPS{B6A6FF} ~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_44 ))
	{
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}DIDIERSACHS{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para ver a lista de roupas(SKINS) digite: {ABB6FF}/Skin" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um óculos ou comprar digite: {ABB6FF}/Oculos" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma máscara ou comprar digite: {ABB6FF}/Mascara" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma bandana ou comprar digite: {ABB6FF}/Bandana" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um Chapéu ou comprar digite: {ABB6FF}/Chapeu" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para remover os itens do seu corpo digite: {ABB6FF}/RemoverItens" );
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}DIDIERSACHS{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_45 ))
	{
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}SUB-URBAN{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para ver a lista de roupas(SKINS) digite: {ABB6FF}/Skin" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um óculos ou comprar digite: {ABB6FF}/Oculos" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma máscara ou comprar digite: {ABB6FF}/Mascara" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar uma bandana ou comprar digite: {ABB6FF}/Bandana" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para experimentar um Chapéu ou comprar digite: {ABB6FF}/Chapeu" );
        SendClientMessage( playerid, 0xB6A6FFFF, "» {FFFFFF}Para remover os itens do seu corpo digite: {ABB6FF}/RemoverItens" );
		SendClientMessage( playerid, 0xB6A6FFFF, "•~~~~~~~~~~~~~~~~~~~~~~ {FFFFFF}SUB-URBAN{B6A6FF} ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_3 ))
	{
        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~ Loja de Utilitários ~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xFFFFFFAA, "• Para abrir o menu de utilitários digite: '/Utilitarios'" );
        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~ Loja de Utilitários ~~~~~~~~~~~~~~~•" );
        return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_14 ) || IsPlayerInDynamicCP( playerid, CP_15 ))
	{
        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Hospital ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xFFFFFFAA, "Convênio Médico || Seguro de Acidentes || Cura, para ver o menu digite: /mHospital" );
        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Hospital ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_16 ))
	{
        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Favela ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
        SendClientMessage( playerid, 0xFFFFFFAA, "• Kit de Armas para Área de DM ( Favela ), para ver o menu digite: /mFavela" );
        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Favela ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_2 ))
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~ Auto Escola ~~~~~~~~~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Escolha a licença deseja comprar, digite /Licencas" );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~ Auto Escola ~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_29 ))
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~ Procurado Prefeitura ~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para remover seu nome da lista de procurados digite: '/PagarEstrela'" );
	 	SendClientMessage( playerid, 0xFFFFFFAA, "• Cada entrela de procurado custa $1.000 para ser removida." );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~ Procurado Prefeitura ~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_17 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	    {
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        SendClientMessage( playerid, 0xFFFFFFAA, "• Para entregar a mercadoria digite: '/eMercadoria1'" );
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        return 1;
        }
	}
	if( IsPlayerInDynamicCP( playerid, CP_18 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	    {
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        SendClientMessage( playerid, 0xFFFFFFAA, "• Para entregar a mercadoria digite: '/eMercadoria2'" );
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        return 1;
        }
	}
	if( IsPlayerInDynamicCP( playerid, CP_19 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	    {
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        SendClientMessage( playerid, 0xFFFFFFAA, "• Para entregar a mercadoria digite: '/eMercadoria3'" );
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        return 1;
        }
	}
	if( IsPlayerInDynamicCP( playerid, CP_20 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	    {
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        SendClientMessage( playerid, 0xFFFFFFAA, "• Para entregar a mercadoria digite: '/eMercadoria4'" );
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        return 1;
        }
	}
	if( IsPlayerInDynamicCP( playerid, CP_21 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	    {
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        SendClientMessage( playerid, 0xFFFFFFAA, "• Para entregar a mercadoria digite: '/eMercadoria5'" );
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~ Agência de Entrega Moto Boy/Girl ~~~~~~~~~•" );
	        return 1;
        }
	}
	if( IsPlayerInDynamicCP( playerid, CP_22 ))
	{
	    if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	    {
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~ Agência de Moto Boy/Girl ~~~~~~~~~~~~~~~•" );
	        SendClientMessage( playerid, 0xFFFFFFAA, "• Para receber a taxa extra das entregas digite: '/eComprovantes'" );
	        SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~ Agência de Moto Boy/Girl ~~~~~~~~~~~~~~~•" );
	        return 1;
        }
	}
	if( IsPlayerInDynamicCP( playerid, CP_23 )) // pref
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Impostos Prefeitura ~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver seu saldo devedor de impostos digite: '/SaldoDevedor'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver quantos impostos atrasados digite: '/ImpostosAtrasados'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para pagar seus impostos digite: '/PagarImpostos'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Impostos Prefeitura ~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_35 ) || IsPlayerInDynamicCP( playerid, CP_36 ) || IsPlayerInDynamicCP( playerid, CP_37 )) // prefeitura
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Impostos ~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver seu saldo devedor de impostos digite: '/SaldoDevedor'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver quantos impostos atrasados digite: '/ImpostosAtrasados'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para pagar seus impostos digite: '/PagarImpostos'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Impostos ~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_4 ))
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Loteria ~~~~~~~~~~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Para fazer uma aposta digite: '/Apostar [ Número ]'" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver se à prêmio acumulado digite: '/Acumulados'" );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Loteria ~~~~~~~~~~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_24 ))
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~ DP ~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para comprar porte de armas digite: '/ComprarPorte'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para pagar a fiança de alguém digite: '/PagarFianca'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver os jogadores presos digite: '/Presos'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver os jogadores procurados digite: '/Procurados'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~ DP ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_58 ))
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~ PRF ~~~~~~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para comprar porte de armas digite: '/ComprarPorte'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para pagar a fiança de alguém digite: '/PagarFianca'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver os jogadores presos digite: '/Presos'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver os jogadores procurados digite: '/Procurados'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~~~~ PRF ~~~~~~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_25 ))
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~ Ammu Nation ~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver o menu de armas digite: '/Armas'" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Obs: Armas compradas aqui só podem ser usadas em GZS" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~ Ammu Nation ~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_22 ))
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área de Mercadoria ~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para entregar os comprovamentes digite: '/eComprovantes'" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Área de Mercadoria ~~~~~~~~~~~~~~~~~•" );
		return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_30 ))
	{
	    if( IsPlayerInAnyVehicle( playerid ) && pInfo[ playerid ][ Prof ] == 3 )
	    {
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Área de Mototorista de Ônibus ~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xFFFFFFAA, "• Para dar partida em sua rota digite: '/IniciarRota'" );
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Área de Mototorista de Ônibus ~~~~~~~~~~~~~•" );
			return 1;
		}
	}
	if( IsPlayerInDynamicCP( playerid, CP_46 ))
	{
	    if( IsPlayerInAnyVehicle( playerid ) && pInfo[ playerid ][ Prof ] == LIXEIRO )
	    {
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Área de Lixeiro ~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xFFFFFFAA, "• Para dar partida em sua rota digite: '/IniciarRotaL'" );
			SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Área de Lixeiro ~~~~~~~~~~~~~•" );
			return 1;
		}
	}
	if( IsPlayerInDynamicCP( playerid, CP_12 ))
	{
	    // Fazenda da Drogas Definir
	    return 1;
	}
/*	if( IsPlayerInDynamicCP( playerid, CP_28 )) // ALGODÃO - AGÊNCIA
	{
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Tiozinho do Algodão ~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, 0xFFFFFFAA, "• Para ver a lista dos algodões digite: /Algodao" );
		SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Tiozinho do Algodão ~~~~~~~~~~~~~•" );
		return 1;
	}*/
	if( IsPlayerInDynamicCP( playerid, CP_31 ) || IsPlayerInDynamicCP( playerid, CP_32 ) ||IsPlayerInDynamicCP( playerid, CP_33 ) || IsPlayerInDynamicCP( playerid, CP_34 ))
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Produtos para Empresas LTDA ~~~~~~~~~~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• Para pegar produtos para produção de sua empresa digite: /pMercadoria" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• É necessário ter em mãos $10 para liberação dos produtos." );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~~~ Produtos para Empresas LTDA ~~~~~~~~~~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_37 ))
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~ Prefeitura ~~~~~~~~~~~•" );
	    format( gStr, sizeof( gStr ), "• Atual Presidente: %s", dini_Get( "Eleitos.ini", "Presidente" ));
		SendClientMessage( playerid, 0xFFFFFFAA, gStr );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• /AtualPresidente - Para ver o(a) presidente atual." );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• /Candidatarse - Para se candidatar à presidente." );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• /Eleitos - Para ver a lista de eleitos." );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• /Votar - Para votar em algum eleito(a)." );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~ Prefeitura ~~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_12 ))
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~ Fazenda das Drogas ~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• /PegarDroga - Para pegar 1kg de droga." );
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~ Fazenda das Drogas ~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_38 ))
	{
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Biqueira ~~~~~~~~~~~~~~~~~•" );
	    SendClientMessage( playerid, 0xFFFFFFAA, "• /InfoBiqueira - Mostra as informações da biqueira." );
	    if( pInfo[ playerid ][ Prof ] == AVIAOZINHO )
	    {
	        SendClientMessage( playerid, 0xFFFFFFAA, "• /DepositarDroga - Para depositar 1kg de droga." );
	    }
	    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~~~~~ Biqueira ~~~~~~~~~~~~~~~~~•" );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_39 ))
	{
	    if( pInfo[ playerid ][ Prof ] == BOMBEIRO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	    {
		    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Corpo de Bombeiros ~~~~~~~~~~~~~•" );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• > /ProximoIncendio - Para ir apagar um novo incêndio." );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• < /BaixaIncendio - Para dar baixa de um incêndio apagado. *" );
		    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Corpo de Bombeiros ~~~~~~~~~~~~~•" );
	    }
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_47 ))
	{
	    if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	    {
		    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Area de Motorista de Carro Forte ~~~~~~~~~~~~~•" );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• > /pegarserviço - Para pegar um serviço." );
		    SendClientMessage( playerid, 0xFFFFFFAA, "• < /dinheiroentregar - Para entregar o dinheiro e receber a grana. *" );
		    SendClientMessage( playerid, 0x66CCFFAA, "•~~~~~~~~~~~~~ Area de Motorista de Carro Forte ~~~~~~~~~~~~~•" );
	    }
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_48 ))
	{
	    if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
	    {
		    SendClientMessage( playerid, 0xFFFF00AA, "•~~~~~~~~~~~~~~~~~~~~~ Area do Sedex ~~~~~~~~~~~~~~~~~~~~~•" );
		    SendClientMessage( playerid, 0x009933AA, "• > /MercadoriaSedex - Para pegar uma mercadoria e fazer seu serviço." );
		    SendClientMessage( playerid, 0x009933AA, "• < /BaixaEntregaSedex - Para dar baixa da mercadoria entregada. *" );
		    SendClientMessage( playerid, 0xFFFF00AA, "•~~~~~~~~~~~~~~~~~~~~~ Area do Sedex ~~~~~~~~~~~~~~~~~~~~~•" );
	    }
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_40 ))
	{
	    GameTextForPlayer( playerid, "~y~~h~Para pegar a mercadoria~n~Digite:~n~~w~/mercadoriaempresa", 1000, 5 );
	    return 1;
	}
	if( IsPlayerInDynamicCP( playerid, CP_49 ))
	{
	    GameTextForPlayer( playerid, "~y~~h~Area Odbretch Pegar uma obra?~n~Digite:~n~~w~/IniciarObra", 1000, 5 );
	    return 1;
	}
	return 1;
}
// Final CP

public OnPlayerLeaveCheckpoint( playerid )
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint( playerid )
{
	if( ParticipandoEvento[ playerid ] == 1 )
	{
	    if ( SetPlayerCheckPoint[ playerid ] == UltimoCP-1 )
	    {
	        if( AlguemVenceu == 0 )
	        {
	            AlguemVenceu = 1;
	            SetPlayerCheckPoint[ playerid ] = 333333;
		        SendClientMessageToAll( 0xFF00CCAA , "________________________________________________________________________________" );
		        SendClientMessageToAll( 0xFF00CCAA , "   " );
		        format( gstring, sizeof( gstring ), "~~~~~~~~~~~> %s VENCEU O EVENTO EM PRIMEIRO LUGAR ! <~~~~~~~~~~~", PlayerName( playerid ));
		        SendClientMessageToAll( 0xCCFFFFAA , gstring );
		        SendClientMessageToAll( 0xFF00CCAA , "________________________________________________________________________________" );
		        DisablePlayerRaceCheckpoint( playerid );
		        VencedorNome1 = PlayerName( playerid );
		        Finalizou[ playerid ] = 1;
		        return 1;
	        }
	        else if( AlguemVenceu == 1 )
			{
			    if( AlguemVenceu2 == 0 )
			    {
	   	            AlguemVenceu2 = 1;
		            SetPlayerCheckPoint[ playerid ] = 222222;
			        SendClientMessageToAll( 0xFF00CCAA , "________________________________________________________________________________" );
			        SendClientMessageToAll( 0xFF00CCAA , "   " );
			        format( gstring, sizeof( gstring ), "~~~~~~~~~~~> %s VENCEU O EVENTO EM SEGUNDO LUGAR ! <~~~~~~~~~~~", PlayerName( playerid ));
			        SendClientMessageToAll( 0xCCFFFFAA , gstring );
			        SendClientMessageToAll( 0xFF00CCAA , "________________________________________________________________________________" );
			        DisablePlayerRaceCheckpoint( playerid );
			        VencedorNome2 = PlayerName( playerid );
			        Finalizou[ playerid ] = 1;
			    }
			    else if( AlguemVenceu2 == 1 )
			    {
				    if( AlguemVenceu3 == 0 )
				    {
		   	            AlguemVenceu3 = 1;
			            SetPlayerCheckPoint[ playerid ] = 111111;
				        SendClientMessageToAll( 0xFF00CCAA , "________________________________________________________________________________" );
				        SendClientMessageToAll( 0xFF00CCAA , "   " );
				        format( gstring, sizeof( gstring ), "~~~~~~~~~~~> %s VENCEU O EVENTO EM TERCEIRO LUGAR ! <~~~~~~~~~~~", PlayerName( playerid ));
				        SendClientMessageToAll( 0xCCFFFFAA , gstring );
				        SendClientMessageToAll( 0xFF00CCAA , "________________________________________________________________________________" );
				        DisablePlayerRaceCheckpoint( playerid );
				        VencedorNome3 = PlayerName( playerid );
				        Finalizou[ playerid ] = 1;
				    }
				    else if( AlguemVenceu3 == 1 )
				    {
				    	SendClientMessage( playerid, COLOR_AMARELO , "[ > ] Você chegou no final do evento mais não foi o vencedor !" );
		        		DisablePlayerRaceCheckpoint( playerid );
		        		Finalizou[ playerid ] = 1;
		        		return 1;
					}
	        	}
			}
	    }
		else
		{
		    SetPlayerCheckPoint[ playerid ] ++;
		    OnPlayerRaceCheckpoint( playerid, SetPlayerCheckPoint[ playerid ] );
	 		format( gStr, sizeof( gStr ), "~w~~h~Pontos Passados~n~~y~~h~%d ~w~de ~r~~h~%d", SetPlayerCheckPoint[ playerid ], UltimoCP );
	        GameTextForPlayer( playerid, gStr, 5000, 5 );
		}
    }
	return 1;
}

public OnPlayerLeaveRaceCheckpoint( playerid )
{
	return 1;
}

public OnRconCommand( cmd[ ] )
{
	return 1;
}

public OnPlayerPickUpPickup( playerid, pickupid )
{
	// Mensagem de Entrada do /entrar // /entrar
 	if( pickupid == ePick[ 1 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Delegacia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // DP LS
 	else if( pickupid == ePick[ 2 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Delegacia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // DP PRF
 	else if( pickupid == ePick[ 3 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar no {006400}Posto PRF{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Posto PRF
 	else if( pickupid == ePick[ 4 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Delegacia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // DP SF
 	else if( pickupid == ePick[ 5 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Agencia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Agencia LS
 	else if( pickupid == ePick[ 6 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Agencia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Agencia SF
 	else if( pickupid == ePick[ 7 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Agencia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Agencia Las Venturat
 	else if( pickupid == ePick[ 8 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Agencia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Agencia Fort Carson
 	else if( pickupid == ePick[ 9 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Agencia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Agencia Fort Blueberry
 	else if( pickupid == ePick[ 10 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Agencia{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Agencia Angel Pine
    else if( pickupid == ePick[ 11 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Prefeitura{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Prefeitura LS
 	else if( pickupid == ePick[ 12 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar no {006400}Banco{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Prefeitura SF
 	else if( pickupid == ePick[ 13 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar no {006400}Banco{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Banco LS
 	else if( pickupid == ePick[ 14 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar no {006400}Banco{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Banco SF
 	else if( pickupid == ePick[ 15 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar no {006400}Banco{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Banco LV
 	else if( pickupid == ePick[ 16 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Loterica{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Loterica
 	else if( pickupid == ePick[ 17 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar no {006400}Mercado{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // 24/7
 	else if( pickupid == ePick[ 18 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Auto Escola{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Auto Escola LS
 	else if( pickupid == ePick[ 19 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na {006400}Auto Escola{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Auto Escola SF
    else if( pickupid == ePick[ 20 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para entrar no {006400}Alhambra{FFFFFF} digite '{8b8b83}/entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // Alhambra
   	else if( pickupid == ePick[ 40 ] )
	{
		SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~ Delegacia Geral ~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, COLOR_BRANCO, "• Qualquer militar pode utilizar {ff0000}/FardaSF {ffffff}& {ff0000}/ColeteSF {ffffff}nesta DP" );
		SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~ Delegacia Geral ~~~~~~~~~~~~~~~~~•" );
    }
	if( pickupid == ePick[ 22 ] && pInfo[ playerid ][ Prof ] == POL_CIVIL )
	{
		GameTextForPlayer( playerid, "~h~civil~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 23 ] && pInfo[ playerid ][ Prof ] == POL_CIVIL )
	{
		GameTextForPlayer( playerid, "~h~civil~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	if( pickupid == ePick[ 24 ] && pInfo[ playerid ][ Prof ] == POL_MILITAR )
	{
		GameTextForPlayer( playerid, "~h~militar~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 25 ] && pInfo[ playerid ][ Prof ] == POL_MILITAR )
	{
		GameTextForPlayer( playerid, "~h~militar~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	if( pickupid == ePick[ 26 ] && pInfo[ playerid ][ Prof ] == BOPE )
	{
		GameTextForPlayer( playerid, "~h~BOPE~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 27 ] && pInfo[ playerid ][ Prof ] == BOPE )
	{
		GameTextForPlayer( playerid, "~h~BOPE~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	if( pickupid == ePick[ 28 ] && pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
	{
		GameTextForPlayer( playerid, "~h~transito~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 29 ] && pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
	{
		GameTextForPlayer( playerid, "~h~transito~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	if( pickupid == ePick[ 30 ] && pInfo[ playerid ][ Prof ] == DELEGADO )
	{
		GameTextForPlayer( playerid, "~h~delegado~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 31 ] && pInfo[ playerid ][ Prof ] == DELEGADO )
	{
		GameTextForPlayer( playerid, "~h~delegado~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	if( pickupid == ePick[ 32 ] && pInfo[ playerid ][ Prof ] == EXERCITO )
	{
		GameTextForPlayer( playerid, "~h~exercito~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 33 ] && pInfo[ playerid ][ Prof ] == EXERCITO )
	{
		GameTextForPlayer( playerid, "~h~exercito~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	if( pickupid == ePick[ 34 ] && pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
	{
		GameTextForPlayer( playerid, "~h~rodoviaria~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 35 ] && pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
	{
		GameTextForPlayer( playerid, "~h~rodoviaria~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	if( pickupid == ePick[ 36 ] && pInfo[ playerid ][ Prof ] == MARINHA )
	{
		GameTextForPlayer( playerid, "~h~marinha~n~~y~~h~coloque o colete~n~~w~digite /colete", 5000, 5 );
	}
	if( pickupid == ePick[ 37 ] && pInfo[ playerid ][ Prof ] == MARINHA )  //  && = e / || = ou / ! = não
	{
		GameTextForPlayer( playerid, "~h~marinha~n~~y~~h~coloque a farda e equipamentos~n~~w~digite /farda", 5000, 5 );
	}
	// Mensagem de saida do /sair
	else if( pickupid == sPick[ 1 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair da {006400}Delegacia{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // LS
	else if( pickupid == sPick[ 2 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair da {006400}Delegacia{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // SF
	else if( pickupid == sPick[ 3 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair da {006400}Delegacia{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // DILLIMORE PRF
	else if( pickupid == sPick[ 4 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair do {006400}Posto PRF{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // POSTO PRF
	else if( pickupid == sPick[ 5 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair da {006400}Agencia{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // AGENCIA
	else if( pickupid == sPick[ 6 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair da {006400}Prefeitura{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // PREFEITURA
	else if( pickupid == sPick[ 7 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair do {006400}Banco{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // BANCO
	else if( pickupid == sPick[ 8 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair da {006400}Auto Escola{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // AUTO ESCOLA
	else if( pickupid == sPick[ 9 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair do {006400}Mercado{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // MERCADO
	else if( pickupid == sPick[ 10 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair da {006400}Loterica{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // LOTERICA
	else if( pickupid == sPick[ 11 ] ) SendClientMessage( playerid, COLOR_BRANCO, "Para sair do {006400}Alhambra{FFFFFF} digite '{8b8b83}/sair{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." ); // ALHAMBRA
	else if( pickupid == ePick[ 21 ] )
	{
		SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~ Duelo ~~~~~~~~~~~~~~~~~•" );
		SendClientMessage( playerid, COLOR_BRANCO, "• Para entrar no {006400}Duelo{FFFFFF} digite '{0000ff}/duelo{FFFFFF}'." );
		SendClientMessage( playerid, COLOR_BRANCO, "•~~~~~~~~~~~~~~~~~ Duelo ~~~~~~~~~~~~~~~~~•" );
    }
	// Entradas casas e empresas
	for( new c; c < MAX_CASAS; ++c )
	{
	    if( pickupid == CasaPickup[ c ] )
	    {
	        if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
	        {
	            if( pInfo[ playerid ][ Prof ] != BOMBEIRO )
	            {
					format( gstring, 256, "~n~~n~~r~~h~Casa ID %d~n~~w~Dono(a) ~y~~h~%s~n~~w~Mensagem ~y~~h~%s~n~~p~+Info digite:~n~~w~/Casa Info", CasaInfo[ c ][ Numero ], CasaInfo[ c ][ Proprietario ], CasaInfo[ c ][ Mensagem ] );
					GameTextForPlayer( playerid, gstring, 4000, 5 );
					SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na casa digite '{ff0000}/casa entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." );
			       	HousePickup[ playerid ] = gettime();
			       	InHousePickup[ playerid ] = c;
		       	}
		       	else
		       	{
			    	SendClientMessage( playerid, COLOR_BRANCO, "Para entrar na casa digite '{ff0000}/casa entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." );
			       	HousePickup[ playerid ] = gettime( );
			       	InHousePickup[ playerid ] = c;
		       	}
		    	break;
	        }
	    }
	}

  	for( new m = 1; m < MAX_EMPRESAS; ++m )
	{
	    if( pickupid == EmpresaPickup[ m ] )
	    {
	        if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
	        {
	            InCompanyPickup[ playerid ] = m;
				SendClientMessage( playerid, 0xFFFFFFAA, "Para entrar na empresa digite '{ff0000}/empresa entrar{FFFFFF}' ou pressione a tecla '{8b8b83}F{FFFFFF}'." );
				CompanyPickup[ playerid ] = gettime();
				format( gstring, 256, "~r~~h~%s ID %d~n~~w~Dono(a) ~y~~h~%s~n~~w~Subnome ~y~~h~%s~n~~p~+Info digite:~n~~w~/Empresa Info", EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ EmpresaNome ] );
				GameTextForPlayer( playerid, gstring, 4000, 5 );
				break;
	        }
	    }
	}
	return 1;
}

public OnEnterExitModShop( playerid, enterexit, interiorid )
{
    if( enterexit == 1 ) // Se entrar
    {
        SendClientMessage( playerid, COLOR_AMARELO, "{37CA3A}[ BPO ] CASTIEL:{FFFFFF} Seja bem vindo(a) à transfender." );
    }
    /*if( enterexit == 0 ) // Se sair
    {
    }*/
    return 1;
}

/*stock veiculoCasa( vehicleid )
{
	for( new c; c < sizeof( cInfo ); ++c )
	{
		if( vehicleid == cInfo[ c ][ HouseCar ] )
		{
			return 1;
		}
	}
	return 0;
}*/

stock veiculoCasa( vehicleid, playerid )
{
	for( new c; c < sizeof( cInfo ); ++c )
	{
		if( vehicleid == cInfo[ c ][ HouseCar ] && !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
		{
			return 1;
		}
	}
	return 0;
}

public OnVehicleMod( playerid, vehicleid, componentid )
{
	if( GetPlayerCash( playerid ) >= 1000 )
	{
		for( new c; c < sizeof( cInfo ); ++c )
		{
			if( vehicleid == cInfo[ c ][ HouseCar ] )
			{
				if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
				{
					new
						vStr[ 128 ]
					;
					format( vStr, sizeof( vStr ), "CarrosTunados/vCasa%d.ini", CasaInfo[ c ][ Numero ] );
					if( fexist( vStr ))
					{
						if( eNitro( componentid ))
						{
							dini_IntSet( vStr, "Nitro", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Nitro ] = componentid;
						}
						if( eRoda( componentid ))
						{
							dini_IntSet( vStr, "Roda", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Roda ] = componentid;
						}
						if( eSpoiler( componentid ))
						{
							dini_IntSet( vStr, "Spoiler", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Spoiler ] = componentid;
						}
						if( eHydraulico( componentid ))
						{
							dini_IntSet( vStr, "Hydraulico", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Hydraulico ] = componentid;
						}
						if( eParachoqueDianteiro( componentid ))
						{
							dini_IntSet( vStr, "ParachoqueDianteiro", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueDianteiro ] = componentid;
						}
						if( eParachoqueTraseiro( componentid ))
						{
							dini_IntSet( vStr, "ParachoqueTraseiro", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueTraseiro ] = componentid;
						}
						if( eEscapamento( componentid ))
						{
							dini_IntSet( vStr, "Escapamento", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Escapamento ] = componentid;
						}
						if( eBventr( componentid ))
						{
							dini_IntSet( vStr, "Bventr", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventr ] = componentid;
						}
						if( eBventl( componentid ))
						{
							dini_IntSet( vStr, "Bventl", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventl ] = componentid;
						}
						if( eBscoop( componentid ))
						{
							dini_IntSet( vStr, "Bscoop", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bscoop ] = componentid;
						}
						if( eRscoop( componentid ))
						{
							dini_IntSet( vStr, "Rscoop", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rscoop ] = componentid;
						}
						if( eLskirt( componentid ))
						{
							dini_IntSet( vStr, "Lskirt", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lskirt ] = componentid;
						}
						if( eRskirt( componentid ))
						{
							dini_IntSet( vStr, "Rskirt", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rskirt ] = componentid;
						}
						if( eBase( componentid ))
						{
							dini_IntSet( vStr, "Base", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Base ] = componentid;
						}
						if( eRbbars( componentid ))
						{
							dini_IntSet( vStr, "Rbbars", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rbbars ] = componentid;
						}
						if( eFbbars( componentid ))
						{
							dini_IntSet( vStr, "Fbbars", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Fbbars ] = componentid;
						}
						if( eLights( componentid ))
						{
							dini_IntSet( vStr, "Lights", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lights ] = componentid;
						}
					}
					else
					{
					    dini_Create( vStr );
						if( eNitro( componentid ))
						{
							dini_IntSet( vStr, "Nitro", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Nitro ] = componentid;
						}
						if( eRoda( componentid ))
						{
							dini_IntSet( vStr, "Roda", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Roda ] = componentid;
						}
						if( eSpoiler( componentid ))
						{
							dini_IntSet( vStr, "Spoiler", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Spoiler ] = componentid;
						}
						if( eHydraulico( componentid ))
						{
							dini_IntSet( vStr, "Hydraulico", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Hydraulico ] = componentid;
						}
						if( eParachoqueDianteiro( componentid ))
						{
							dini_IntSet( vStr, "ParachoqueDianteiro", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueDianteiro ] = componentid;
						}
						if( eParachoqueTraseiro( componentid ))
						{
							dini_IntSet( vStr, "ParachoqueTraseiro", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_ParachoqueTraseiro ] = componentid;
						}
						if( eEscapamento( componentid ))
						{
							dini_IntSet( vStr, "Escapamento", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Escapamento ] = componentid;
						}
						if( eBventr( componentid ))
						{
							dini_IntSet( vStr, "Bventr", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventr ] = componentid;
						}
						if( eBventl( componentid ))
						{
							dini_IntSet( vStr, "Bventl", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bventl ] = componentid;
						}
						if( eBscoop( componentid ))
						{
							dini_IntSet( vStr, "Bscoop", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Bscoop ] = componentid;
						}
						if( eRscoop( componentid ))
						{
							dini_IntSet( vStr, "Rscoop", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rscoop ] = componentid;
						}
						if( eLskirt( componentid ))
						{
							dini_IntSet( vStr, "Lskirt", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lskirt ] = componentid;
						}
						if( eRskirt( componentid ))
						{
							dini_IntSet( vStr, "Rskirt", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rskirt ] = componentid;
						}
						if( eBase( componentid ))
						{
							dini_IntSet( vStr, "Base", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Base ] = componentid;
						}
						if( eRbbars( componentid ))
						{
							dini_IntSet( vStr, "Rbbars", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Rbbars ] = componentid;
						}
						if( eFbbars( componentid ))
						{
							dini_IntSet( vStr, "Fbbars", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Fbbars ] = componentid;
						}
						if( eLights( componentid ))
						{
							dini_IntSet( vStr, "Lights", componentid );
							cInfo[ CasaInfo[ c ][ Numero ] ][ t_Lights ] = componentid;
						}
					}
					if( pInfo[ playerid ] [ PLAYER_VIP ] == 0 )
					{
						sGivePlayerCash( playerid, -1000 );
					}
					return 1;
				}
			}
		}
	}/*
    new
		vehiclemodel = GetVehicleModel( vehicleid )
	;
	format( gstring, sizeof( gstring ), "%s acaba de adicionar o tuning %s no veículo %s ID %d", PlayerName( playerid ), GetComponentName( componentid ), vNome[ vehiclemodel - 400 ], vehiclemodel );
	SendClientMessage( playerid, -1, gstring );*/
    return 1;
}

public OnVehiclePaintjob( playerid, vehicleid, paintjobid )
{
	if( GetPlayerCash( playerid ) >= 1000 )
	{
		for( new c; c < sizeof( cInfo ); ++c )
		{
			if( vehicleid == cInfo[ c ][ HouseCar ] )
			{
				if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
				{
					new
						vStr[ 128 ]
					;
					format( vStr, sizeof( vStr ), "CarrosTunados/vCasa%d.ini", CasaInfo[ c ][ Numero ] );

					if( fexist( vStr ))
					{
					    dini_IntSet( vStr, "PaintJob", paintjobid );
					    cInfo[ CasaInfo[ c ][ Numero ] ][ t_PaintJob ] = paintjobid;
					}
					else
					{
					    dini_Create( vStr );
	   					dini_IntSet( vStr, "PaintJob", paintjobid );
					    cInfo[ CasaInfo[ c ][ Numero ] ][ t_PaintJob ] = paintjobid;
					}
					if( pInfo[ playerid ] [ PLAYER_VIP ] == 0 )
					{
						sGivePlayerCash( playerid, -1000 );
					}
					return 1;
				}
			}
		}
	}
    /*new
		vehiclemodel = GetVehicleModel( vehicleid )
	;
	format( gstring, sizeof( gstring ), "%s pintou o veículo %s ID %d com a PaintJob ID %d", PlayerName( playerid ), vNome[ vehiclemodel - 400 ], vehiclemodel, paintjobid );
    SendClientMessage( playerid, -1, gstring );*/
	return 1;
}

public OnVehicleRespray( playerid, vehicleid, color1, color2 )
{
	if( GetPlayerCash( playerid ) >= 100 )
	{
		for( new c; c < sizeof( cInfo ); ++c )
		{
			if( vehicleid == cInfo[ c ][ HouseCar ] )
			{
				if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
				{
					new
						vStr[ 128 ]
					;
					format( vStr, sizeof( vStr ), "CarrosTunados/vCasa%d.ini", CasaInfo[ c ][ Numero ] );

					if( fexist( vStr ))
					{
					    dini_IntSet( vStr, "Cor1", color1 );
					    dini_IntSet( vStr, "Cor2", color2 );
					    cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_1 ] = color1;
					    cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_2 ] = color2;
					}
					else
					{
					    dini_Create( vStr );
	   					dini_IntSet( vStr, "Cor1", color1 );
					    dini_IntSet( vStr, "Cor2", color2 );
					    cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_1 ] = color1;
					    cInfo[ CasaInfo[ c ][ Numero ] ][ t_Cor_2 ] = color2;
					}
					if( pInfo[ playerid ] [ PLAYER_VIP ] == 0 )
					{
						sGivePlayerCash( playerid, -100 );
					}
					return 1;
				}
			}
		}
	}
	return 1;
}

stock GetComponentName(componentid) return ModName[componentid-1000]; // by BigETI

stock IsVehicleUpgradeCompatible(model,componentid) // by AirKite
{
	switch(model)
	{
		case 400:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 401:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
			}
		}
		case 404:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 405:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1001: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 410:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 415:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 418:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 420:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 421:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 422:
		{
			switch(componentid)
			{
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 426:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 436:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 439:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 477:
		{
			switch(componentid)
			{
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 478:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1012: { return 1; }
				case 1013: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 489:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 491:
		{
			switch(componentid)
			{
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 492:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 496:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 500:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 516:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1015: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 517:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 518:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 527:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 529:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 534:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1100: { return 1; }
				case 1101: { return 1; }
				case 1106: { return 1; }
				case 1122: { return 1; }
				case 1123: { return 1; }
				case 1124: { return 1; }
				case 1125: { return 1; }
				case 1126: { return 1; }
				case 1127: { return 1; }
				case 1178: { return 1; }
				case 1179: { return 1; }
				case 1180: { return 1; }
				case 1185: { return 1; }
			}
		}
		case 535:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1109: { return 1; }
				case 1110: { return 1; }
				case 1113: { return 1; }
				case 1114: { return 1; }
				case 1115: { return 1; }
				case 1116: { return 1; }
				case 1117: { return 1; }
				case 1118: { return 1; }
				case 1119: { return 1; }
				case 1120: { return 1; }
				case 1121: { return 1; }
			}
		}
		case 536:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1103: { return 1; }
				case 1104: { return 1; }
				case 1105: { return 1; }
				case 1107: { return 1; }
				case 1108: { return 1; }
				case 1128: { return 1; }
				case 1181: { return 1; }
				case 1182: { return 1; }
				case 1183: { return 1; }
				case 1184: { return 1; }
			}
		}
		case 540:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 542:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 546:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 547:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1003: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 549:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 550:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 551:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 558:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1088: { return 1; }
				case 1089: { return 1; }
				case 1090: { return 1; }
				case 1091: { return 1; }
				case 1092: { return 1; }
				case 1093: { return 1; }
				case 1094: { return 1; }
				case 1095: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1163: { return 1; }
				case 1164: { return 1; }
				case 1165: { return 1; }
				case 1166: { return 1; }
				case 1167: { return 1; }
				case 1168: { return 1; }
			}
		}
		case 559:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1065: { return 1; }
				case 1066: { return 1; }
				case 1067: { return 1; }
				case 1068: { return 1; }
				case 1069: { return 1; }
				case 1070: { return 1; }
				case 1071: { return 1; }
				case 1072: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1158: { return 1; }
				case 1159: { return 1; }
				case 1160: { return 1; }
				case 1161: { return 1; }
				case 1162: { return 1; }
				case 1173: { return 1; }
			}
		}
		case 560:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1026: { return 1; }
				case 1027: { return 1; }
				case 1028: { return 1; }
				case 1029: { return 1; }
				case 1030: { return 1; }
				case 1031: { return 1; }
				case 1032: { return 1; }
				case 1033: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1138: { return 1; }
				case 1139: { return 1; }
				case 1140: { return 1; }
				case 1141: { return 1; }
				case 1169: { return 1; }
				case 1170: { return 1; }
			}
		}
		case 561:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1055: { return 1; }
				case 1056: { return 1; }
				case 1057: { return 1; }
				case 1058: { return 1; }
				case 1059: { return 1; }
				case 1060: { return 1; }
				case 1061: { return 1; }
				case 1062: { return 1; }
				case 1063: { return 1; }
				case 1064: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1154: { return 1; }
				case 1155: { return 1; }
				case 1156: { return 1; }
				case 1157: { return 1; }
			}
		}
		case 562:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1034: { return 1; }
				case 1035: { return 1; }
				case 1036: { return 1; }
				case 1037: { return 1; }
				case 1038: { return 1; }
				case 1039: { return 1; }
				case 1040: { return 1; }
				case 1041: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1146: { return 1; }
				case 1147: { return 1; }
				case 1148: { return 1; }
				case 1149: { return 1; }
				case 1171: { return 1; }
				case 1172: { return 1; }
			}
		}
		case 565:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1045: { return 1; }
				case 1046: { return 1; }
				case 1047: { return 1; }
				case 1048: { return 1; }
				case 1049: { return 1; }
				case 1050: { return 1; }
				case 1051: { return 1; }
				case 1052: { return 1; }
				case 1053: { return 1; }
				case 1054: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1150: { return 1; }
				case 1151: { return 1; }
				case 1152: { return 1; }
				case 1153: { return 1; }
			}
		}
		case 567:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1102: { return 1; }
				case 1129: { return 1; }
				case 1130: { return 1; }
				case 1131: { return 1; }
				case 1132: { return 1; }
				case 1133: { return 1; }
				case 1186: { return 1; }
				case 1187: { return 1; }
				case 1188: { return 1; }
				case 1189: { return 1; }
			}
		}
		case 575:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1042: { return 1; }
				case 1043: { return 1; }
				case 1044: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1099: { return 1; }
				case 1174: { return 1; }
				case 1175: { return 1; }
				case 1176: { return 1; }
				case 1177: { return 1; }
			}
		}
		case 576:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1134: { return 1; }
				case 1135: { return 1; }
				case 1136: { return 1; }
				case 1137: { return 1; }
				case 1190: { return 1; }
				case 1191: { return 1; }
				case 1192: { return 1; }
				case 1193: { return 1; }
			}
		}
		case 580:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 585:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 589:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 600:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 603:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
	}
	return 0;
}

stock GetVehicleCompatibleUpgrades(model, count, &componentid = 0) // by AirKite
{
	componentid = 0;
	switch(model)
	{
		case 400:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1018; }
				case 6: { componentid = 1019; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1024; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 401:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1007; }
				case 7: { componentid = 1008; }
				case 8: { componentid = 1009; }
				case 9: { componentid = 1010; }
				case 10: { componentid = 1013; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
			}
		}
		case 404:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 405:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1001; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 410:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 415:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 418:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 420:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 421:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1014; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 422:
		{
			switch(count)
			{
				case 1: { componentid = 1007; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1013; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 426:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 436:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1022; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 439:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1023; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1142; }
				case 29: { componentid = 1143; }
				case 30: { componentid = 1144; }
				case 31: { componentid = 1145; }
			}
		}
		case 477:
		{
			switch(count)
			{
				case 1: { componentid = 1006; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 478:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1012; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1022; }
				case 11: { componentid = 1024; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 489:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 491:
		{
			switch(count)
			{
				case 1: { componentid = 1003; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 492:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 496:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1003; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1011; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
			}
		}
		case 500:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1019; }
				case 6: { componentid = 1020; }
				case 7: { componentid = 1021; }
				case 8: { componentid = 1024; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 516:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1015; }
				case 9: { componentid = 1016; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1021; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 517:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1016; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 518:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 527:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1015; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 529:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1011; }
				case 9: { componentid = 1012; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1023; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 534:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1100; }
				case 23: { componentid = 1101; }
				case 24: { componentid = 1106; }
				case 25: { componentid = 1122; }
				case 26: { componentid = 1123; }
				case 27: { componentid = 1124; }
				case 28: { componentid = 1125; }
				case 29: { componentid = 1126; }
				case 30: { componentid = 1127; }
				case 31: { componentid = 1178; }
				case 32: { componentid = 1179; }
				case 33: { componentid = 1180; }
				case 34: { componentid = 1185; }
			}
		}
		case 535:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1109; }
				case 23: { componentid = 1110; }
				case 24: { componentid = 1113; }
				case 25: { componentid = 1114; }
				case 26: { componentid = 1115; }
				case 27: { componentid = 1116; }
				case 28: { componentid = 1117; }
				case 29: { componentid = 1118; }
				case 30: { componentid = 1119; }
				case 31: { componentid = 1120; }
				case 32: { componentid = 1121; }
			}
		}
		case 536:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1103; }
				case 23: { componentid = 1104; }
				case 24: { componentid = 1105; }
				case 25: { componentid = 1107; }
				case 26: { componentid = 1108; }
				case 27: { componentid = 1128; }
				case 28: { componentid = 1181; }
				case 29: { componentid = 1182; }
				case 30: { componentid = 1183; }
				case 31: { componentid = 1184; }
			}
		}
		case 540:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 542:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1014; }
				case 5: { componentid = 1015; }
				case 6: { componentid = 1018; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1144; }
				case 29: { componentid = 1145; }
			}
		}
		case 546:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 547:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
				case 29: { componentid = 1142; }
				case 30: { componentid = 1143; }
			}
		}
		case 549:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1011; }
				case 8: { componentid = 1012; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 550:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 551:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 558:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1088; }
				case 20: { componentid = 1089; }
				case 21: { componentid = 1090; }
				case 22: { componentid = 1091; }
				case 23: { componentid = 1092; }
				case 24: { componentid = 1093; }
				case 25: { componentid = 1094; }
				case 26: { componentid = 1095; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1163; }
				case 31: { componentid = 1164; }
				case 32: { componentid = 1165; }
				case 33: { componentid = 1166; }
				case 34: { componentid = 1167; }
				case 35: { componentid = 1168; }
			}
		}
		case 559:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1065; }
				case 6: { componentid = 1066; }
				case 7: { componentid = 1067; }
				case 8: { componentid = 1068; }
				case 9: { componentid = 1069; }
				case 10: { componentid = 1070; }
				case 11: { componentid = 1071; }
				case 12: { componentid = 1072; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1158; }
				case 31: { componentid = 1159; }
				case 32: { componentid = 1160; }
				case 33: { componentid = 1161; }
				case 34: { componentid = 1162; }
				case 35: { componentid = 1173; }
			}
		}
		case 560:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1026; }
				case 6: { componentid = 1027; }
				case 7: { componentid = 1028; }
				case 8: { componentid = 1029; }
				case 9: { componentid = 1030; }
				case 10: { componentid = 1031; }
				case 11: { componentid = 1032; }
				case 12: { componentid = 1033; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1138; }
				case 31: { componentid = 1139; }
				case 32: { componentid = 1140; }
				case 33: { componentid = 1141; }
				case 34: { componentid = 1169; }
				case 35: { componentid = 1170; }
			}
		}
		case 561:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1055; }
				case 6: { componentid = 1056; }
				case 7: { componentid = 1057; }
				case 8: { componentid = 1058; }
				case 9: { componentid = 1059; }
				case 10: { componentid = 1060; }
				case 11: { componentid = 1061; }
				case 12: { componentid = 1062; }
				case 13: { componentid = 1063; }
				case 14: { componentid = 1064; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1154; }
				case 33: { componentid = 1155; }
				case 34: { componentid = 1156; }
				case 35: { componentid = 1157; }
			}
		}
		case 562:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1034; }
				case 6: { componentid = 1035; }
				case 7: { componentid = 1036; }
				case 8: { componentid = 1037; }
				case 9: { componentid = 1038; }
				case 10: { componentid = 1039; }
				case 11: { componentid = 1040; }
				case 12: { componentid = 1041; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1146; }
				case 31: { componentid = 1147; }
				case 32: { componentid = 1148; }
				case 33: { componentid = 1149; }
				case 34: { componentid = 1171; }
				case 35: { componentid = 1172; }
			}
		}
		case 565:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1045; }
				case 6: { componentid = 1046; }
				case 7: { componentid = 1047; }
				case 8: { componentid = 1048; }
				case 9: { componentid = 1049; }
				case 10: { componentid = 1050; }
				case 11: { componentid = 1051; }
				case 12: { componentid = 1052; }
				case 13: { componentid = 1053; }
				case 14: { componentid = 1054; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1150; }
				case 33: { componentid = 1151; }
				case 34: { componentid = 1152; }
				case 35: { componentid = 1153; }
			}
		}
		case 567:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1102; }
				case 23: { componentid = 1129; }
				case 24: { componentid = 1130; }
				case 25: { componentid = 1131; }
				case 26: { componentid = 1132; }
				case 27: { componentid = 1133; }
				case 28: { componentid = 1186; }
				case 29: { componentid = 1187; }
				case 30: { componentid = 1188; }
				case 31: { componentid = 1189; }
			}
		}
		case 575:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1042; }
				case 6: { componentid = 1043; }
				case 7: { componentid = 1044; }
				case 8: { componentid = 1073; }
				case 9: { componentid = 1074; }
				case 10: { componentid = 1075; }
				case 11: { componentid = 1076; }
				case 12: { componentid = 1077; }
				case 13: { componentid = 1078; }
				case 14: { componentid = 1079; }
				case 15: { componentid = 1080; }
				case 16: { componentid = 1081; }
				case 17: { componentid = 1082; }
				case 18: { componentid = 1083; }
				case 19: { componentid = 1084; }
				case 20: { componentid = 1085; }
				case 21: { componentid = 1087; }
				case 22: { componentid = 1096; }
				case 23: { componentid = 1097; }
				case 24: { componentid = 1098; }
				case 25: { componentid = 1099; }
				case 26: { componentid = 1174; }
				case 27: { componentid = 1175; }
				case 28: { componentid = 1176; }
				case 29: { componentid = 1177; }
			}
		}
		case 576:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1134; }
				case 23: { componentid = 1135; }
				case 24: { componentid = 1136; }
				case 25: { componentid = 1137; }
				case 26: { componentid = 1190; }
				case 27: { componentid = 1191; }
				case 28: { componentid = 1192; }
				case 29: { componentid = 1193; }
			}
		}
		case 580:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 585:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 589:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1018; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 600:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1022; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 603:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1024; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
			}
		}
	}
	return componentid;
}

public OnPlayerSelectedMenuRow( playerid, row )
{
	return 1;
}

public OnPlayerExitedMenu( playerid )
{
	return 1;
}

public OnPlayerKeyStateChange( playerid, newkeys, oldkeys )
{
 	if( newkeys & KEY_FIRE )
 	{
        if( pInfo[ playerid ][ Prof ] == BOMBEIRO && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
        {
            for( new i = 0; i < MaxFire; ++i )
            {
    			if( IsValidFire( i ))
				{
				    if( PlayerFaces( playerid, FirePos[ i ][ 0 ],  FirePos[ i ][ 1 ],  FirePos[ i ][ 2 ], 12 ) && IsPlayerInRangeOfPoint( playerid, 10, FirePos[ i ][ 0 ],  FirePos[ i ][ 1 ],  FirePos[ i ][ 2 ] ))
 	        		{
 	        		    new
 	        		        veiculo = GetPlayerVehicleID( playerid ),
							modelo = GetVehicleModel( veiculo )
			 			;
 	        		    if( !strcmp( FirePlayer[ i ], PlayerName( playerid ), true ))
 	        		    {
 	        		        if( modelo == 407 )
 	        		        {
	 	        		        if( FireBaixa[ playerid ] == -1 )
								{
						    		FireHealth[ i ] -= 2;
								    #if defined Labels
							    		new
											string[ 128 ]
										;
								    	format( string, sizeof( string ), "Incêndio AQUI!\nPorcentagem Fogo\n( %d / %d )", FireHealth[ i ], FireHealthMax[ i ] );
										Update3DTextLabelText( FireText[ i ], 0xFFFFFFFF, string );
										GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~y~~h~Apagando...~n~~w~Continue Clicando", 1000, 5 );
									    #endif
								    if( FireHealth[ i ] <= 0 )
								    {
										DeleteFire( i );
										GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~r~~h~Incendio~n~~w~Apagado!", 3000, 5 );
										KillTimer( FireTimerP[ playerid ] );

	                                    FireBaixa[ playerid ] = FireAtual[ playerid ];
										FireAtual[ playerid ] = 0;

										ResetPlayerWeapons( playerid );
										RemovePlayerMapIcon( playerid, 90 );
										SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Volte para o corpo de bombeiros e de baixa no incêndio." );
										SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você recebe pelo serviço após dar baixa." );
									}
								}
								else
								{
									GameTextForPlayer( playerid, "~n~~n~~n~~r~~h~ERRO!~n~~w~PRIMEIRO ESTACIONE O CAMINHAO", 1000, 5 );
								}
							}
							else
							{
							    return 1;
							    //GameTextForPlayer( playerid, "~n~~n~~n~~r~~h~ERRO!~n~~w~VOCE NAO ESTA EM UM CAMINHAO", 1000, 5 );
							}
						}
						else
						{
							GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~r~~h~ERRO!~n~~w~SEM PERMISSAO~n~PARA ESSE INCENDIO!", 1000, 5 );
						}
					}
				}
			}
        }
        else if( pInfo[ playerid ][ Prof ] == BOMBEIRO && GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
        {
        	if( GetPlayerWeapon( playerid ) == 42 )
	        {
	            for( new i = 0; i < MaxFire; ++i )
	 	    	{
	 	        	if( IsValidFire( i ))
	 	        	{
	 	        	    if( PlayerFaces( playerid, FirePos[ i ][ 0 ],  FirePos[ i ][ 1 ],  FirePos[ i ][ 2 ], 1 ) && IsPlayerInRangeOfPoint( playerid, 4, FirePos[ i ][ 0 ],  FirePos[ i ][ 1 ],  FirePos[ i ][ 2 ] ))
	 	        		{
	 	        		    if( !strcmp( FirePlayer[ i ], PlayerName( playerid ), true ))
 	        		    	{
 	        		    	    if( FireBaixa[ playerid ] == -1 )
								{
						    		FireHealth[ i ] -= 2;
								    #if defined Labels
							    		new
											string[ 128 ]
										;
								    	format( string, sizeof( string ), "Incêndio AQUI!\nPorcentagem Fogo\n( %d / %d )", FireHealth[ i ], FireHealthMax[ i ] );
										Update3DTextLabelText( FireText[ i ], 0xFFFFFFFF, string );
										GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~y~~h~Apagando...~n~~w~Continue Clicando", 1000, 5 );
									    #endif
								    if( FireHealth[ i ] <= 0 )
								    {
										DeleteFire( i );
										GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~r~~h~Incendio~n~~w~Apagado!", 3000, 5 );
										KillTimer( FireTimerP[ playerid ] );

	                                    FireBaixa[ playerid ] = FireAtual[ playerid ];
										FireAtual[ playerid ] = 0;

										ResetPlayerWeapons( playerid );
										RemovePlayerMapIcon( playerid, 90 );
										SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Volte para o corpo de bombeiros e de baixa no incêndio." );
										SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você recebe pelo serviço após dar baixa." );
									}
								}
								else
								{
									GameTextForPlayer( playerid, "~n~~n~~n~~r~~h~ERRO!~n~~w~PRIMEIRO ESTACIONE O CAMINHAO", 1000, 5 );
								}
							}
							else
							{
							    GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~r~~h~ERRO!~n~~w~SEM PERMISSAO~n~PARA ESSE INCENDIO!", 1000, 5 );
							}
						}
					}
				}
			}
        }
/* Admin && Moderador = Admin e Moderador
Admin || Moderador = Admin ou Moderador */
		if( IsPlayerInAnyVehicle( playerid ) && !IsABike( GetPlayerVehicleID( playerid )))
		{
		  	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid][ Moderador ] == 1 || aInfo[ playerid][ Ajudante ] == 1 ) // Quais Grupos de Admin Podem Ter Nitro
		  	{
				AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
			}
			if( pInfo[ playerid ][ PLAYER_VIP ] == 1 && ParticipandoEvento[ playerid ] == 0 )
			{
				AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
			}
		}
 		if( ClickMause[ playerid ] == 1 && aInfo[ playerid ][ Dono ] == 1 || ClickMause[ playerid ] == 1 && aInfo[ playerid ][ Admin ] == 1 ) // Quais Grupos de Admin Podem Criar Checkpoint No Evento
		{
			if( CheckID >= 500 )
		 	{
		     	SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já foi criado o máximo de checkpoints ! ( Máximo: 500 )" );
		      	return 1;
			}
			new
				Float:g_x, Float:g_y, Float:g_z
			;
			GetPlayerPos( playerid, g_x, g_y, g_z );
	 		CheckPoint[ CheckID ][ 0 ] = g_x;
			CheckPoint[ CheckID ][ 1 ] = g_y;
			CheckPoint[ CheckID ][ 2 ] = g_z;
			CheckID ++;
			format( gStr, sizeof( gStr ), "~y~~h~~n~~n~~n~~n~~n~~n~CheckPoint %d criado !", CheckID );
			GameTextForPlayer( playerid, gStr, 5000, 5 );
		}
	}
	if( newkeys & KEY_SECONDARY_ATTACK )
	{
        if( !IsPlayerInAnyVehicle( playerid ))
		{
            new
				Float:myx, Float:myy, Float:myz, myvehicle
			;
            GetPlayerPos( playerid, myx, myy, myz );
            GetVehicleWithinDistance( playerid, myx, myy, myz, 20.0, myvehicle );
            if( IsVehicleRc( myvehicle ))
			{
				PutPlayerInVehicle( playerid, myvehicle, 0 );
            }
        }
        else
		{
            new
				vehicleID = GetPlayerVehicleID( playerid )
			;
            if( IsVehicleRc( vehicleID ) || GetVehicleModel( vehicleID ) == RC_CAM )
			{
				if( GetVehicleModel( vehicleID ) != D_TRAM )
				{
                	new
						Float:myx, Float:myy, Float:myz
					;
                	GetPlayerPos( playerid, myx, myy, myz );
                	SetPlayerPos( playerid, myx+0.5, myy, myz+1.0 );
                }
            }
        }
	    if( pHospital[ playerid ] > gettime() )
		{
			return 1;
		}
		for( new c; c < MAX_CASAS; ++c )
		{
      		if( IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] ))
			{
            	if( strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), false ) &&
					strcmp( CasaInfo[ c ][ Morador ], PlayerName( playerid ), false ) &&
					strcmp( CasaInfo[ c ][ Morador2 ], PlayerName( playerid ), false ) &&
					strcmp( CasaInfo[ c ][ Morador3 ], PlayerName( playerid ), false ))
              	{
                 	if( CasaInfo[ c ][ Status ] == 1 )
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa casa está fechada !" );
						return 1;
					}
				}
				InHouse[ playerid ] = CasaInfo[ c ][ Numero ];
				if( strcmp( CasaInfo[ InHouse[ playerid ] ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, seja bem vindo(a) à sua casa ID %d.", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ] );
					SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
           		}
				else
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, seja bem vindo(a) à casa ID %d, que pertence à %s", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ], CasaInfo[ InHouse[ playerid ] ][ Proprietario ] );
					SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
				}
    			SetPlayerPos( playerid, CasaInfo[ c ][ InteriorX ], CasaInfo[ c ][ InteriorY ], CasaInfo[ c ][ InteriorZ ] );
              	SetPlayerVirtualWorld( playerid, CasaInfo[ c ][ VirtualWorld ] );
              	SetPlayerInterior( playerid, CasaInfo[ c ][ InteriorID ] );
              	EntrouCasa[ playerid ] = 1;
            	return 1;
          	}
        	if( EntrouCasa[ playerid ] == 1 )
         	{
         	    if( !IsPlayerInRangeOfPoint( playerid, 3.0, CasaInfo[ InHouse[ playerid ] ][ InteriorX ], CasaInfo[ InHouse[ playerid ] ][ InteriorY ], CasaInfo[ InHouse[ playerid ] ][ InteriorZ ] ))
         	    {
         	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você está longe da porta !" );
         	        return 1;
         	    }
				if( strcmp( CasaInfo[ InHouse[ playerid ] ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, você saiu da sua casa ID %d.", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ] );
					SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
            	}
				else
				{
					format( gStr, sizeof( gStr ), "[ > ] %s, você saiu da casa ID %d, que pertence à %s", PlayerName( playerid ), CasaInfo[ InHouse[ playerid ] ][ Numero ], CasaInfo[ InHouse[ playerid ] ][ Proprietario ] );
                  	SendClientMessage( playerid, COLOR_VERDEFRACO, gStr );
				}
	     		SetPlayerPos( playerid, CasaInfo[ InHouse[ playerid ] ][ PickupX ], CasaInfo[ InHouse[ playerid ] ][ PickupY ], CasaInfo[ InHouse[ playerid ] ][ PickupZ ] );
     			SetPlayerVirtualWorld( playerid, 0 );
       			SetPlayerInterior( playerid, 0 );
        	 	if( IsCasaIlha( CasaInfo[ InHouse[ playerid ] ][ Numero ] ))
				{
					TogglePlayerControllable( playerid, false );
					SetTimerEx( "DescongelarIlha", 5000, false, "d", playerid );
				}
				EntrouCasa[ playerid ] = 0;
	     		InHouse[ playerid ] = -1;
				return 1;
            }
 		}
	  	for( new m = 0; m < MAX_EMPRESAS; ++m )
		{
	        if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ PickupX ], EmpresaInfo[ m ][ PickupY ], EmpresaInfo[ m ][ PickupZ ] ))
	        {
        	    if( EntrouEmpresa[ playerid ] == 0 )
                {
                    if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), false ))
					{
                    	if( EmpresaInfo[ m ][ Aberta ] == 0 )
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esta empresa está fechada !" );
							return 1;
						}
					}
                    SetPlayerVirtualWorld( playerid, EmpresaInfo[ m ][ VirtualWorld ] );
                    SetPlayerInterior( playerid, EmpresaInfo[ m ][ InteriorID ] );
                	SetPlayerPos( playerid, EmpresaInfo[ m ][ InteriorX ], EmpresaInfo[ m ][ InteriorY ], EmpresaInfo[ m ][ InteriorZ ] );
					InCompanyPickup[ playerid ] = m;
                	if( strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
					{
   	     				format( gstring, sizeof( gstring ), "[ > ] Seja bem vindo(a) a sua Empresa ID %d - %s, %s", EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ NomeEmp ], PlayerName( playerid ));
						SendClientMessage( playerid, 0xE0EEEEAA, gstring );
                	}
					else
					{
	   	     			format( gstring, sizeof( gstring ), "[ > ] Seja bem vindo(a) a Empresa ID %d - %s, que pertence a %s", EmpresaInfo[ m ][ Numero ], EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Proprietario ] );
						SendClientMessage( playerid, 0xE0EEEEAA, gstring );
					}
					EntrouEmpresa[ playerid ] = 1;
					new
					    nome_empresa[ 24 ]
					;
					format( nome_empresa, 24, "~w~~h~%s", EmpresaInfo[ m ][ NomeEmp ] );
					GameTextForPlayer( playerid, nome_empresa, 1000, 1 );
	              	return 1;
                }
			}
			if( EntrouEmpresa[ playerid ] == 1 )
			{
	      		if( IsPlayerInRangeOfPoint( playerid, 3, EmpresaInfo[ m ][ InteriorX ], EmpresaInfo[ m ][ InteriorY ], EmpresaInfo[ m ][ InteriorZ ] ))
	        	{
	 				if( InCompanyPickup[ playerid ] == -1 )
		 			{
		 			    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está em uma empresa !" );
					 	return 1;
					}
	   				SetPlayerVirtualWorld( playerid, 0 );
	     			SetPlayerInterior( playerid, 0 );
					SetPlayerPos( playerid, EmpresaInfo[ InCompanyPickup[ playerid ] ][ PickupX ], EmpresaInfo[ InCompanyPickup[ playerid ] ][ PickupY ], EmpresaInfo[ InCompanyPickup[ playerid ] ][ PickupZ ] );
					EntrouEmpresa[ playerid ] = 0;
         			InCompanyPickup[ playerid ] = -1;
					return 1;
				}
			}
		}
		if( pInfo[ playerid ][ EntrouL ] == false ) // Entradas Das DPs
		{
			if( IsPlayerInRangeOfPoint( playerid, 2.0, 1555.1055, -1675.6426, 16.1953 )) // Delegacia LS
			{
			    SetPlayerPos( playerid, 246.3469, 63.5393, 1003.6406 );
//			    SetPlayerFacingAngle( playerid, 348.9244 );
			    SetPlayerInterior( playerid, 6 );
//			    SetPlayerVirtualWorld( playerid, 1 );
		      	pInfo[ playerid ][ EntrouL ] = true;
		      	SetCameraBehindPlayer( playerid );
//		      	pInfo[ playerid ][ entrouDEL ] = 1;
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -1605.4067, 711.3124, 13.8672 )) // Delegacia SF
			{
       			SetPlayerPos( playerid, 288.745971, 169.350997, 1007.17187 );
			    SetPlayerInterior( playerid, 3 );
			    SetPlayerVirtualWorld( playerid, 1 );
		      	pInfo[ playerid ][ EntrouL ] = true;
		      	SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 627.5673, -571.7941, 17.6481 )) // Delegacia Dillimore
			{
       			SetPlayerPos( playerid, 246.375991, 109.245994, 1003.218750 );
			    SetPlayerInterior( playerid, 10 );
//			    SetPlayerVirtualWorld( playerid, 1 );
		      	pInfo[ playerid ][ EntrouL ] = true;
		      	SetCameraBehindPlayer( playerid );
//		      	pInfo[ playerid ][ entrouDEL ] = 1;
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 53.4001, -1530.7544, 5.2698 )) // Pedagio // POSTO PRF
			{
			    SetPlayerPos( playerid, 51.7680, -1530.5012, 5.2866 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1836.5631, -1682.5184, 13.3427 )) // Alhambra
			{
			    SetPlayerPos( playerid, 493.4367, -24.9197, 1000.6719 );
			    SetPlayerInterior( playerid, 17 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1219.1569, -1812.4558, 16.5938 )) // Agencia LS
			{
			    SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
			    SetPlayerFacingAngle( playerid, 268.7034 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 1;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2054.8433, 456.0135, 35.1719 )) // Agencia SF
			{
			    SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
			    SetPlayerFacingAngle( playerid, 268.7034 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 2;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1989.1378, 959.3508, 10.8203 )) // Agencia LV
			{
			    SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
			    SetPlayerFacingAngle( playerid, 268.7034 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 3;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -177.7854, 1110.6555, 19.7422 )) // Agência de Fort Carson
			{
			    SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
			    SetPlayerFacingAngle( playerid, 268.7034 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 4;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
	 		else if( IsPlayerInRangeOfPoint( playerid, 2.0, 207.8856, -62.8081, 1.5781 )) // Agência de Blueberry
			{
			    SetPlayerPos( playerid, 2308.2383, -15.8399, 26.7496 );
			    SetPlayerFacingAngle( playerid, 268.7034 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 5;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
	  		else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2165.2070, -2417.1287, 30.8203 )) // Agência de Angel Pine
			{
				SetPlayerPos( playerid, -2163.5835, -2418.4753, 30.6250 );
				SetPlayerFacingAngle( playerid, 233.7247 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 6;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1778.8096, -1662.7579, 14.4375 )) // Banco LS
			{
			    SetPlayerPos( playerid, 831.5861, 8.8236, 1004.1797 );
			    SetPlayerFacingAngle( playerid, 135.9976 );
			    SetPlayerInterior( playerid, 3 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 1;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
	 		else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1958.3718, 951.9951, 10.8203 )) // Banco LV
			{
				SetPlayerPos( playerid, 831.5861, 8.8236, 1004.1797 );
  				SetPlayerFacingAngle( playerid, 135.9976 );
			    SetPlayerInterior( playerid, 3 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 2;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
	 		else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2650.2886, 376.0364, 6.1563 )) // Banco SF
			{
			    SetPlayerPos( playerid, 831.5861, 8.8236, 1004.1797 );
		    	SetPlayerFacingAngle( playerid, 135.9976 );
			    SetPlayerInterior( playerid, 3 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    pInfo[ playerid ][ EntrouAgencia ] = 3;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1310.2739, -1367.0903, 13.5192 )) // Auto Escola LS
			{
			    SetPlayerPos( playerid, -2026.8789, -103.6022, 1035.1833 );
			    SetPlayerInterior( playerid, 3 );
			    pInfo[ playerid ][ entrouHAB ] = 1;
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2026.6133, -100.9539, 35.1641 )) // Auto Escola SF
			{
			    SetPlayerPos( playerid, -2026.8789, -103.6022, 1035.1833 );
			    SetPlayerInterior( playerid, 3 );
			    pInfo[ playerid ][ entrouHAB ] = 2;
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1352.4087, -1759.2499, 13.5078 )) // 24/7
			{
			    SetPlayerPos( playerid, -25.8498, -188.2523, 1003.5469 );
			    SetPlayerInterior( playerid, 17 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1833.7720, -1842.4988, 13.5781 )) // 24/7²
			{
			    SetPlayerPos( playerid, -25.8498, -188.2523, 1003.5469 );
			    SetPlayerInterior( playerid, 17 );
			    SetPlayerVirtualWorld( playerid, 24 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1631.8516, -1172.9270, 24.0843 )) // Loterica
			{
			    SetPlayerPos( playerid, -2158.6572, 643.1335, 1052.3750 );
			    SetPlayerInterior( playerid, 1 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2244.3889, -1665.5635, 15.4766 )) // Binco
			{
			    SetPlayerPos( playerid, 203.8940, -48.9065, 1001.8047 );
			    SetPlayerFacingAngle( playerid, 0.0387 );
			    SetPlayerInterior( playerid, 1 );
			    SetCameraBehindPlayer( playerid );
			    pInfo[ playerid ][ EntrouL ] = true;
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2229.8167, -1721.1733, 13.5603 )) // Academia
			{
			    SetPlayerPos( playerid, 773.9420, -78.8449, 1000.6628 );
			    SetPlayerInterior( playerid, 7 );
	            pInfo[ playerid ][ EntrouL ] = true;
	            SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2421.6262, -1219.2485, 25.5610 )) // Puteiro
			{
			    SetPlayerPos( playerid, 1204.7864, -13.8520, 1000.9219 );
			    SetPlayerInterior( playerid, 2 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2310.1558, -1643.6486, 14.8270 )) // Bar da Grove
			{
			    SetPlayerPos( playerid, 501.9589, -67.5634, 998.7578 );
			    SetPlayerInterior( playerid, 11 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2105.4834, -1806.5027, 13.554 )) // Pizzaria
			{
			    SetPlayerPos( playerid, 372.2989, -133.5238, 1001.4922 );
			    SetPlayerInterior( playerid, 5 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1199.2562, -918.1423, 43.1232 )) // Burger Shot
			{
			    SetPlayerPos( playerid, 362.7990, -75.0967, 1001.5078 );
			    SetPlayerInterior( playerid, 10 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 928.9155, -1352.9719, 13.3438 )) // Cluckin'Bell
			{
			    SetPlayerPos( playerid, 365.0023, -11.8438, 1001.8516 );
			    SetPlayerInterior( playerid, 9 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1481.1034, -1770.4825, 18.7958 )) // Prefeitura LS
			{
			    SetPlayerPos( playerid, 380.0053, 173.6629, 1008.3828 );
				SetPlayerFacingAngle( playerid, 92.4343 );
			    SetPlayerInterior( playerid, 3 );
			    pInfo[ playerid ][ entroupref ] = 1;
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2765.3511, 375.5041, 6.3359 )) // Prefeitura SF
			{
			    SetPlayerPos( playerid, 380.0053, 173.6629, 1008.3828 );
				SetPlayerFacingAngle( playerid, 92.4343 );
			    SetPlayerInterior( playerid, 3 );
			    pInfo[ playerid ][ entroupref ] = 2;
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
	 		else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1367.1837, -1279.7854, 13.5469 )) // Ammuu
			{
				SetPlayerPos( playerid, 286.0948, -85.4703, 1001.5156 );
				SetPlayerInterior( playerid, 4 );
			    pInfo[ playerid ][ EntrouL ] = true;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			return 1;
		}
		else if( pInfo[ playerid ][ EntrouL ] == true ) // Saídas
		{
			if( IsPlayerInRangeOfPoint( playerid, 2.0, 246.8718, 62.3202, 1003.6406 )) // Delegacias
			{
			    if( pInfo[ playerid ][ entrouDEL ] == 1 ) // LS
			    {
				    SetPlayerPos( playerid, 1552.3304, -1675.5342, 16.1953 );
			    	SetPlayerFacingAngle( playerid, 88.2519 );
				    SetPlayerInterior( playerid, 0 );
				    SetPlayerVirtualWorld( playerid, 0 );
				    GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
			    }
			    else if( pInfo[ playerid ][ entrouDEL ] == 2 ) // SF
			    {
				    SetPlayerPos( playerid, -1606.0313, 717.9035, 12.0699 );
			    	SetPlayerFacingAngle( playerid, 359.8679 );
				    SetPlayerInterior( playerid, 0 );
				    SetPlayerVirtualWorld( playerid, 0 );
				    GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
			    }
			    pInfo[ playerid ][ entrouDEL ] = 0;
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0,493.4367, -24.9197, 1000.6719 )) // Alhambra
			{
			    SetPlayerPos( playerid, 1836.5631, -1682.5184, 13.3427 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 2304.6934, -16.0919, 26.7422 )) // Agencia
			{
				if( pInfo[ playerid ][ EntrouAgencia ] == 1 )
			    {
				    SetPlayerPos( playerid, 1219.0415, -1814.5978, 16.5938 ); // LS
				    SetPlayerFacingAngle( playerid, 272.4634 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
			    }
			    else if( pInfo[ playerid ][ EntrouAgencia ] == 2 )
			    {
				    SetPlayerPos( playerid, -2054.8433, 456.0135, 35.1719 );
			    	SetPlayerFacingAngle( playerid, 317.8766 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
			    }
			    else if( pInfo[ playerid ][ EntrouAgencia ] == 3 )
			    {
				    SetPlayerPos( playerid, 1994.6506, 958.8142, 10.8203 ); // LV
		    		SetPlayerFacingAngle( playerid, 269.9011 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~Las Venturas", 3000, 1 );
			    }
	   		    else if( pInfo[ playerid ][ EntrouAgencia ] == 4 )
			    {
				    SetPlayerPos( playerid, -177.7854, 1110.6555, 19.7422 ); // FC
				    SetPlayerFacingAngle( playerid, 140.0 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~Fort Carson", 3000, 1 );
			    }
	      		else if( pInfo[ playerid ][ EntrouAgencia ] == 5 )
			    {
				    SetPlayerPos( playerid, 207.8856, -62.8081, 1.5781 ); // Blueberry
				    SetPlayerFacingAngle( playerid, 179.2190 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~Blueberry", 3000, 1 );
			    }
	      		else if( pInfo[ playerid ][ EntrouAgencia ] == 6 )
			    {
				    SetPlayerPos( playerid, -2163.5835, -2418.4753, 30.6250 ); // Angel Pine
				    SetPlayerFacingAngle( playerid, 233.7247 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~Angel Pine", 3000, 1 );
			    }
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 834.6674, 7.4959, 1004.1870 )) // Banco
			{
			    if( pInfo[ playerid ][ EntrouAgencia ] == 1 )
			    {
				    SetPlayerPos( playerid, 1778.8096, -1662.7579, 14.4375 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
			    }
			    else if( pInfo[ playerid ][ EntrouAgencia ] == 2 )
			    {
				    SetPlayerPos( playerid, 1958.3718, 951.9951, 10.8203 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~Las Venturas", 3000, 1 );
			    }
			    else if( pInfo[ playerid ][ EntrouAgencia ] == 3 )
			    {
				    SetPlayerPos( playerid, -2651.6523, 376.2323, 5.5455 );
			    	SetPlayerFacingAngle( playerid, 87.8926 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    pInfo[ playerid ][ EntrouAgencia ] = 0;
				    GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
			    }
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2026.8789, -103.6022, 1035.1833 )) // Auto Escola
			{
			    if( pInfo[ playerid ][ entrouHAB ] == 1 )
			    {
				    SetPlayerPos( playerid, 1310.2739, -1367.0903, 13.5192 ); // LS
				    SetPlayerInterior( playerid, 0 );
				    GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
			    }
			    if( pInfo[ playerid ][ entrouHAB ] == 2 )
			    {
				    SetPlayerPos( playerid, -2026.6133, -100.9539, 35.1641 ); // SF
				    SetPlayerFacingAngle( playerid, 0.2082 );
				    SetPlayerInterior( playerid, 0 );
				    GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
			    }
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -25.8498, -188.2523, 1003.5469 )) // 24/7 e 24/7²
			{
			    if( GetPlayerVirtualWorld( playerid ) == 24 )
			    {
			    	SetPlayerPos( playerid, 1833.7720, -1842.4988, 13.5781 );
			    	SetPlayerInterior( playerid, 0 );
			    	SetPlayerVirtualWorld( playerid, 0 );
			    	pInfo[ playerid ][ EntrouL ] = false;
			    }
			    else if( GetPlayerVirtualWorld( playerid ) == 0 )
			    {
			    	SetPlayerPos( playerid, 1352.4087, -1759.2499, 13.5078 );
			    	SetPlayerInterior( playerid, 0 );
			    	pInfo[ playerid ][ EntrouL ] = false;
			    }
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, -2158.6572, 643.1335, 1052.3750 )) // Loterica
			{
			    SetPlayerPos( playerid, 1631.8516, -1172.9270, 24.0843 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 203.7462, -50.6643, 1001.8047 )) // Binco
			{
			    if( EntrouEmpresa[ playerid ] == 0 )
			    {
				    SetPlayerPos( playerid, 2244.3889, -1665.5635, 15.4766 );
				    SetPlayerInterior( playerid, 0 );
				    pInfo[ playerid ][ EntrouL ] = false;
				    SetCameraBehindPlayer( playerid );
			    }
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 773.9420, -78.8449, 1000.6628 )) // Academia
			{
			    SetPlayerPos( playerid, 2229.8167, -1721.1733, 13.5603 );
			    SetPlayerInterior( playerid, 0 );
	            pInfo[ playerid ][ EntrouL ] = false;
	            SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1204.7864, -13.8520, 1000.9219 )) // Puteiro
			{
			    SetPlayerPos( playerid, 2421.6262, -1219.2485, 25.5610 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 501.9589, -67.5634, 998.7578 )) // Bar da Grove
			{
			    SetPlayerPos( playerid, 2310.1558, -1643.6486, 14.8270 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 372.2989, -133.5238, 1001.4922 )) // Pizzaria
			{
			    SetPlayerPos( playerid, 2105.4834, -1806.5027, 13.554 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 362.7990, -75.0967, 1001.5078 )) // Burger Shot
			{
			    SetPlayerPos( playerid, 1199.2562, -918.1423, 43.1232 );
			    SetPlayerInterior( playerid, 0 );
			    pInfo[ playerid ][ EntrouL ] = false;
			    SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 365.0023, -11.8438, 1001.8516 )) // Cluckin'Bell
			{
			    SetPlayerPos( playerid, 928.9155, -1352.9719, 13.3438 );
			    SetPlayerInterior( playerid, 0 );
	            pInfo[ playerid ][ EntrouL ] = false;
	            SetCameraBehindPlayer( playerid );
			    return 1;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 2.0, 390.0609, 173.7708, 1008.3828 )) // Prefeitura
			{
			    if( pInfo[ playerid ][ entroupref ] == 1 )
			    {
				    SetPlayerPos( playerid, 1480.9595, -1766.3862, 18.7958 ); // LS
				    SetPlayerFacingAngle( playerid, 358.2239 );
				    SetPlayerInterior( playerid, 0 );
		            pInfo[ playerid ][ EntrouL ] = false;
		            SetCameraBehindPlayer( playerid );
		            GameTextForPlayer( playerid, "~w~Los Santos", 3000, 1 );
	            }
	            if( pInfo[ playerid ][ entroupref ] == 2 )
			    {
				    SetPlayerPos( playerid, -2763.0068, 375.6516, 5.8614 ); // SF
				    SetPlayerFacingAngle( playerid, 269.5799 );
				    SetPlayerInterior( playerid, 0 );
		            pInfo[ playerid ][ EntrouL ] = false;
		            SetCameraBehindPlayer( playerid );
		            GameTextForPlayer( playerid, "~w~San Fierro", 3000, 1 );
	            }
	            pInfo[ playerid ][ entroupref ] = 0;
			    return 1;
			}
	 		else if( IsPlayerInRangeOfPoint( playerid, 2.0, 286.0948, -85.4703, 1001.5156 )) // Ammu
			{
			    SetPlayerPos( playerid, 1367.1837, -1279.7854, 13.5469 );
			    SetPlayerInterior( playerid, 0 );
	            pInfo[ playerid ][ EntrouL ] = false;
	            SetCameraBehindPlayer( playerid );
			    return 1;
			}
		}
	}
	if(( newkeys == KEY_ACTION ) && ( IsPlayerInAnyVehicle( playerid )) && ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ))
 	{
 	    if( pInfo[ playerid ][ Prof ] == MECANICO || aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 )
 	    {
		    if( GetVehicleModel( GetPlayerVehicleID( playerid )) == 525 )
			{
				new
					Float:pX,
					Float:pY,
					Float:pZ
				;
				GetPlayerPos( playerid, pX, pY, pZ );
				new
					Float:vX,
				    Float:vY,
					Float:vZ
				;
				new
					Found = 0
				;
				new
					vid = 0
				;
				while(( vid < MAX_VEHICLES ) && ( !Found ))
				{
	   				vid++;
	   				GetVehiclePos( vid, vX, vY, vZ );
	   				if (( floatabs( pX-vX ) < 7.0 ) && ( floatabs( pY-vY ) < 7.0 ) && ( floatabs( pZ-vZ ) < 7.0 ) && ( vid != GetPlayerVehicleID( playerid )) )
	   				{
	   				    Found = 1;
	   				    if( IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid )) )
	   					{
	   				        DetachTrailerFromVehicle( GetPlayerVehicleID( playerid ));
	   					}
	   				    AttachTrailerToVehicle( vid, GetPlayerVehicleID( playerid ));
	   				    SendClientMessage( playerid, COLOR_SISTEMA,"[ > ] Veículo guinchado com sucesso !" );
	   				}
	       		}
				if( !Found )
				{
				    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Não à nenhum veículo para você guinchar !" );
				}
			}
		}
		return 1;
	}
	return 1;
}

public OnDialogResponse( playerid, dialogid, response, listitem, inputtext[ ] )
{
    format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
    format( hFile, sizeof( hFile ), "Casas/casa%d.ini", dini_Int( gFile, "Casa" ));

	new
	ano, mes, dia, hora, minuto, segundo
	;
	getdate( ano, mes, dia );
	gettime( hora, minuto, segundo );

	if( dialogid == D_LOGIN )
	{
		if( response )
		{
			if( !strlen( inputtext ))
			{
				format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Logando em sua conta.\n\nSeja bem vindo(a) novamente ao {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}BPO{F90C14}™\n\n\t{00FF00}Usuário(a): {FFFFFF}%s\n\n\t{00FF00}Status da conta: {3366FF}Registrada!\n\nInsira sua senha abaixo para logar:", PlayerName( playerid ));
				ShowPlayerDialog( playerid, D_LOGIN, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}BPO{F90C14}™", s5Doze, "Logar", "Cancelar" );
				return 0;
			}
			if( fexist( gFile ))
			{
			    new
					password = dini_Int( gFile, "Senha" )
				;
		       	if( pass_hash( inputtext ) != password )
				{
				    if( pInfo[ playerid ][ psErrou ] >= 2 )
				    {
				        format( gStr, sizeof( gStr ), "{FF0000}[ x ] Senha incorreta {FFFFFF}%d de 3 {FF0000}tentativas !", pInfo[ playerid ][ psErrou ] );
                		SendClientMessage( playerid, COLOR_ERRO, gStr );
                		pInfo[ playerid ][ psErrou ] = 0;
				        SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você errou a senha 3 vezes, agora tem 2 tentativas com a palavra chave." );
			    		format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Acessar conta pela palavra chave.\n\nColoque abaixo sua palavra chave para logar em sua conta:", PlayerName( playerid ));
						ShowPlayerDialog( playerid, D_PCHAVL, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » Palavra chave.", s5Doze, "Logar", "" );
						return 0;
					}
				    pInfo[ playerid ][ psErrou ] += 1;
				    format( gStr, sizeof( gStr ), "{FF0000}[ x ] Senha incorreta {FFFFFF}%d de 3 {FF0000}tentativas !", pInfo[ playerid ][ psErrou ] );
                	SendClientMessage( playerid, COLOR_ERRO, gStr );
					format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Logando em sua conta.\n\nSeja bem vindo(a) novamente ao {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}BPO{F90C14}™\n\n\t{00FF00}Usuário(a): {FFFFFF}%s\n\n\t{00FF00}Status da conta: {3366FF}Registrada\n\n{FF0000}! Insira sua senha abaixo para logar:", PlayerName( playerid ));
					ShowPlayerDialog( playerid, D_LOGIN, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}BPO{F90C14}™", s5Doze, "Logar", "Cancelar" );
				}
				else
				{
					pInfo[ playerid ][ Logado ] = true;
					CarregarFile( playerid );
					SpawnPlayer( playerid );
				}
			}
		}
		else
		{
		    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você cancelou o login e foi kickado !" );
		    Kick( playerid );
		}
		return 1;
	}
  	if( dialogid == D_REGISTRO )
	{
		if( !response )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você cancelou o registro e foi kickado !" );
		    Kick( playerid );
		    return 1;
		}
	    if( !strlen( inputtext ) || strlen( inputtext ) > 30 )
	    {
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Senha fora do padrão ! ( Minimo: {0000FF}3 - {FFFFFF}Máximo: {0000FF}30 )" );
			format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Registrando sua conta.\n\nSeja bem vindo(a) ao {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}BPO{F90C14}™\n\n\t{00FF00}Usuário(a): {FFFFFF}%s\n\n\t{00FF00}Status da conta: {FF0000}Não registrada\n\n{FF0000}! Insira uma senha abaixo para registrar-se:", PlayerName( playerid ));
			ShowPlayerDialog( playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » {FFFF00}B{00C200}r{006EFF}a{FFFF00}s{00C200}i{006EFF}l {FFFFFF}BPO{F90C14}™", s5Doze, "Registrar", "Cancelar" );
			return 0;
		}
		if( !fexist( gFile )) // INI de cada player
		{
		    dini_Create( gFile );
 			dini_IntSet( gFile, "Dono", 0 );
 			dini_IntSet( gFile, "Administrador", 0 );
 			dini_IntSet( gFile, "Moderador", 0 );
 			dini_IntSet( gFile, "Ajudante", 0 );
		    dini_IntSet( gFile, "Senha", pass_hash( inputtext ));
		    dini_Set( gFile, "Chave", "BPO" );
 			dini_IntSet( gFile, "PLAYER_VIP", 0 );
 			dini_IntSet( gFile, "VIP_MES", 0 );
 			dini_IntSet( gFile, "VIP_DIA", 0 );
 			dini_IntSet( gFile, "VIP_ANO", 0 );
  			dini_IntSet( gFile, "JetPack", 0 );
			dini_IntSet( gFile, "Profissao", DESEMPREGADO );
			dini_IntSet( gFile, "Dinheiro", 2500 );
			dini_IntSet( gFile, "ContaBanco", 0 );
			dini_IntSet( gFile, "SaldoBanco", 0 );
			dini_IntSet( gFile, "Casa", -1 );
			dini_IntSet( gFile, "Impostos", 0 );
			dini_IntSet( gFile, "Atrasados", 0 );
 			dini_IntSet( gFile, "MorandoID", -1 );
			dini_IntSet( gFile, "Level", 0 );
			dini_FloatSet( gFile, "Vida", 100.0 );
			dini_IntSet( gFile, "Exp", 0 );
			dini_IntSet( gFile, "SegUP", 59 );
			dini_IntSet( gFile, "MinUP", 9 );
 			dini_IntSet( gFile, "Matou", 0 );
 			dini_IntSet( gFile, "Morreu", 0 );
 			dini_IntSet( gFile, "Lider", 0 );
 			dini_IntSet( gFile, "SubLider", 0 );
 			dini_IntSet( gFile, "Membro", 0 );
			dini_IntSet( gFile, "Skin", 0 );
			dini_IntSet( gFile, "Sexo", -1 );
			dini_IntSet( gFile, "Gasolina", 50 );
			dini_IntSet( gFile, "Celular", 0 );
			dini_IntSet( gFile, "Creditos", 0 );
			dini_IntSet( gFile, "Tem_RelogioUP", 0 );
			dini_IntSet( gFile, "RelogioONOFF", 0 );
			dini_IntSet( gFile, "Cor_Relogio", 0 );
			dini_IntSet( gFile, "Tem_GPS", 0 );
			dini_IntSet( gFile, "GPSPlayer", 0 );
			dini_IntSet( gFile, "GPScidade", 0 );
			dini_IntSet( gFile, "StatusGPSc", 0 );
			dini_IntSet( gFile, "GPSlocal", 0 );
			dini_IntSet( gFile, "StatusGPSl", 0 );
    		dini_IntSet( gFile, "Tem_Velocimetro", 1 );
    		dini_IntSet( gFile, "Velo_ON_OFF", 1 );
    		dini_IntSet( gFile, "Tem_Cura", 0 );
    		dini_IntSet( gFile, "sModelo", 0 );
    		dini_IntSet( gFile, "sModeloStatus", 0 );
 			dini_IntSet( gFile, "Tem_Capact", 0 );
 			dini_IntSet( gFile, "Seguro", 1 );
 			dini_IntSet( gFile, "Convenio", 1 );
			dini_IntSet( gFile, "Luta", FIGHT_STYLE_NORMAL );
			dini_IntSet( gFile, "HabT", 0 );
			dini_IntSet( gFile, "HabN", 0 );
			dini_IntSet( gFile, "HabA", 0 );
			dini_IntSet( gFile, "HabP", 0 );
			dini_IntSet( gFile, "T_Cocaina", 0 );
			dini_IntSet( gFile, "T_Maconha", 0 );
			dini_IntSet( gFile, "T_Crack", 0 );
			dini_IntSet( gFile, "P_Cocaina", 0 );
			dini_IntSet( gFile, "P_Maconha", 0 );
			dini_IntSet( gFile, "P_Crack", 0 );
			dini_IntSet( gFile, "Fotos", 0 );
			dini_IntSet( gFile, "Caca", 0 );
			dini_IntSet( gFile, "Peixes", 0 );
			dini_IntSet( gFile, "Spawn", 0 );
	   		dini_IntSet( gFile, "Kit", 0 );
	   		dini_IntSet( gFile, "Ci", 0 );
			dini_IntSet( gFile, "Procurado", 0 );
			dini_IntSet( gFile, "Preso", 0 );
			dini_IntSet( gFile, "Abuser", 0 );
 			dini_IntSet( gFile, "Registrado", 0 );
 			dini_IntSet( gFile, "Banido", 0 );
   			dataRegistro( playerid );
 			ultimoLogin( playerid );
			pInfo[ playerid ][ Continuar ] = false;
			pInfo[ playerid ][ Logado ] = true;
			format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Palavra chave.\n\nColoque abaixo uma palavra chave que você sempre irá lembrar.\nPara casos de esquecimento de senhas.", PlayerName( playerid ));
			ShowPlayerDialog( playerid, D_PCHAVE, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » Palavra chave.", s5Doze, "Salvar", "" );
		}
		return 1;
	}
	if( dialogid == D_PCHAVE )
	{
		if( !response )
		{
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Coloque uma frase !" );
			format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Palavra chave.\n\nColoque abaixo uma palavra chave que você sempre irá lembrar.\nPara casos de esquecimento de senhas.", PlayerName( playerid ));
			ShowPlayerDialog( playerid, D_PCHAVE, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » Palavra chave.", s5Doze, "Salvar", "" );
			return 0;
		}
		if( !IsValidFrase( inputtext ))
		{
		    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua palavra chave só pode conter letras !" );
			format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Palavra chave.\n\nColoque abaixo uma palavra chave que você sempre irá lembrar.\nPara casos de esquecimento de senhas.", PlayerName( playerid ));
			ShowPlayerDialog( playerid, D_PCHAVE, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » Palavra chave.", s5Doze, "Salvar", "" );
			return 0;
		}
	    if( !strlen( inputtext ) || strlen( inputtext ) <= 2 || strlen( inputtext ) > 12 )
	    {
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Sua palavra chave só deve conter de 3 à 12 letras !" );
			format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Palavra chave.\n\nColoque abaixo uma palavra chave que você sempre irá lembrar.\nPara casos de esquecimento de senhas.", PlayerName( playerid ));
			ShowPlayerDialog( playerid, D_PCHAVE, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » Palavra chave.", s5Doze, "Salvar", "" );
			return 0;
		}
		dini_IntSet( gFile, "Chave", pass_hash( inputtext ));
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Palavra chave salva !" );
		new pCH[ 24 ];
		format( pCH, 24, "%s", inputtext );
		format( pFile, sizeof( pFile ), "[ > ] Não esqueça sua palavra chave: {FFFFFF}%s", pCH );
		SendClientMessage( playerid, COLOR_AMARELO, pFile );
		new
  			linha_t[ ] = "{46E75D}-------------------------------------------------------------------------------------{FFFFFF}",
  			linha_1[ ] = "Olá, desejamos saber qual é o seu sexo.",
  			linha_2[ ] = "{FFFFFF}Você é do sexo {2BF34F}Masculino{FFFFFF}? ou {F37DD0}Feminino{FFFFFF}?",
  			linha_3[ ] = "{FF0000}* {FFFFFF}Escolha a opção M para Masculino e F para Feminino.",
  			stg[ 512 ]
  		;
  		format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_t );
		ShowPlayerDialog( playerid, D_SEXO, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Sexo", stg, "M", "F" );
		return 1;
	}
	if( dialogid == D_PCHAVL )
	{
		if( !response )
		{
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você cancelou o login pela palavra chave !" );
		    Kick( playerid );
		    return 1;
		}
		if( response )
		{
			if( fexist( gFile ))
			{
			    new
					password = dini_Int( gFile, "Chave" )
				;
		       	if( pass_hash( inputtext ) != password )
				{
				    if( pInfo[ playerid ][ psErrou ] >= 1 )
				    {
					    format( gStr, sizeof( gStr ), "{FF0000}[ x ] Palavra chave incorreta {FFFFFF}%d de 2 {FF0000}tentativas !", pInfo[ playerid ][ psErrou ] );
	                	SendClientMessage( playerid, COLOR_ERRO, gStr );
				        pInfo[ playerid ][ psErrou ] = 0;
				        SendClientMessage( playerid, COLOR_ERRO, "[ > ] Você errou a palavra chave 2 vezes !" );
				        Kick( playerid );
						return 1;
					}
				    pInfo[ playerid ][ psErrou ] += 1;
				    format( gStr, sizeof( gStr ), "{FF0000}[ x ] Palavra chave incorreta {FFFFFF}%d de 2 {FF0000}tentativas !", pInfo[ playerid ][ psErrou ] );
                	SendClientMessage( playerid, COLOR_ERRO, gStr );
					format( s5Doze, sizeof( s5Doze ), "\t{FFFFFF}» Acessar conta pela palavra chave.\n\nColoque abaixo sua palavra chave para logar em sua conta:", PlayerName( playerid ));
					ShowPlayerDialog( playerid, D_PCHAVL, DIALOG_STYLE_PASSWORD, "{FFFFFF}• » Palavra chave.", s5Doze, "Logar", "" );
					return 0;
				}
				else
				{
					pInfo[ playerid ][ Logado ] = true;
					CarregarFile( playerid );
					SpawnPlayer( playerid );
					return 1;
				}
			}
		}
		return 1;
	}
	if( dialogid == D_SEXO )
	{
		if( response )
		{
			dini_IntSet( gFile, "Sexo", 1 );
			dini_IntSet( gFile, "Skin", 59 );
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ok seu sexo é masculino." );
			CarregarFile( playerid );
			SpawnPlayer( playerid );
			NoTuto[ playerid ] = true;
			ChatTuto[ playerid ] = SetTimerEx( "TutoLimparChatPlayer", 1000, false, "d", playerid );
			new
  			    linha_t[ ] = "{46E75D}-----------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá, desejamos que você leia o tutorial.",
  			    linha_2[ ] = "Leia com atenção assim evitará dúvidas.",
  			    linha_3[ ] = "{FF0000}*{FFFFFF} O tutorial é obrigatório ler.",
  			    stg[ 512 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_t );
			ShowPlayerDialog( playerid, D_TUTO, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Tutorial", stg, "INICIAR", "" );
		}
		else if( !response )
		{
			dini_IntSet( gFile, "Sexo", 2 );
			dini_IntSet( gFile, "Skin", 190 );
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ok seu sexo é feminino." );
			CarregarFile( playerid );
			SpawnPlayer( playerid );
			NoTuto[ playerid ] = true;
			ChatTuto[ playerid ] = SetTimerEx( "TutoLimparChatPlayer", 1000, false, "d", playerid );
			new
  			    linha_t[ ] = "{46E75D}-----------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá, desejamos que você leia o tutorial.",
  			    linha_2[ ] = "Leia com atenção assim evitará dúvidas.",
  			    linha_3[ ] = "{FF0000}*{FFFFFF} O tutorial é obrigatório ler.",
  			    stg[ 512 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_t );
			ShowPlayerDialog( playerid, D_TUTO, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Iniciando o tutorial", stg, "INICIAR", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO )
	{
		if( response )
		{
   		  	SetPlayerPos( playerid, 1222.8126,-1815.1891,13.5964 );
			SetPlayerCameraPos( playerid, 1234.0280,-1826.8340,15.8383 );
			SetPlayerCameraLookAt( playerid, 1222.8126,-1815.1891,13.5964 );
  			TogglePlayerControllable( playerid, false );
  			//~~
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a agência de empregos da sua nova vida virtual.",
  			    linha_2[ ] = "Aqui você encontrará vários tipos de profissões, nas quais você poderá trabalhar.",
  			    linha_3[ ] = "Cada profissão exige um level mínimo, então você deve escolher uma profissão de acordo com seu level.",
  			    linha_4[ ] = "Cada profissão tem um salário fixo e a maioria além do salário você ganha trabalhando extra.",
  			    linha_5[ ] = "Para saber os comandos da sua profissão digite o comando: /Profissao",
  			    linha_6[ ] = "Para conversar com os jogadores da sua profissão digite o comando: /CP [ Mensagem ]",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO1, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 1 - {FFFFFF}Agência de Empregos", stg, "Avancar", "" );
		}
 		else if( !response )
		{
   		  	SetPlayerPos( playerid, 1222.8126,-1815.1891,13.5964 );
			SetPlayerCameraPos( playerid, 1234.0280,-1826.8340,15.8383 );
			SetPlayerCameraLookAt( playerid, 1222.8126,-1815.1891,13.5964 );
  			TogglePlayerControllable( playerid, false );
  			//~~
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a agência de empregos da sua nova vida virtual.",
  			    linha_2[ ] = "Aqui você encontrará vários tipos de profissões, nas quais você poderá trabalhar.",
  			    linha_3[ ] = "Cada profissão exige um level mínimo, então você deve escolher uma profissão de acordo com seu level.",
  			    linha_4[ ] = "Cada profissão tem um salário fixo e a maioria além do salário você ganha trabalhando extra.",
  			    linha_5[ ] = "Para saber os comandos da sua profissão digite o comando: /Profissão",
  			    linha_6[ ] = "Para conversar com os jogadores da sua profissão digite o comando: /CP [ Mensagem ]",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO1, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 1 - {FFFFFF}Agência de Empregos", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO1 )
	{
		if( response )
		{
			SetPlayerPos( playerid, 1781.4069,-1656.0896,14.4449 );
			SetPlayerCameraPos( playerid, 1765.0480,-1683.4331,17.2922 );
			SetPlayerCameraLookAt( playerid, 1781.4069,-1656.0896,14.4449 );
  			TogglePlayerControllable( playerid, false );
  			//~~
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é o banco central do servidor no qual você terá que abrir um conta.",
  			    linha_2[ ] = "Aqui você poderá fazer operações como saques, transações e depositos em sua conta.",
  			    linha_3[ ] = "É recomendado ter uma conta bancária para poder manter seu dinheiro seguro.",
  			    linha_4[ ] = "Para usar sua conta bancária basta entrar no checkpoint e digitar o comando: /Banco",
  			    linha_5[ ] = "Há também caixas espalhados por Los Santos, para utiliza-los digite o comando: /Caixa",
  			    linha_6[ ] = "O limite de dinheiro que pode ser armazenado pelo banco é de $10.000.000.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO2, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 2 - {FFFFFF}Banco Central", stg, "Avancar", "" );
		}
 		else if( !response )
		{
			SetPlayerPos( playerid, 1781.4069,-1656.0896,14.4449 );
			SetPlayerCameraPos( playerid, 1765.0480,-1683.4331,17.2922 );
			SetPlayerCameraLookAt( playerid, 1781.4069,-1656.0896,14.4449 );
  			TogglePlayerControllable( playerid, false );
			//~~
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é o banco central do servidor no qual você terá que abrir um conta.",
  			    linha_2[ ] = "Aqui você poderá fazer operações como saques, transações e depositos em sua conta.",
  			    linha_3[ ] = "É recomendado ter uma conta bancária para poder manter seu dinheiro seguro.",
  			    linha_4[ ] = "Para usar sua conta bancária basta entrar no checkpoint e digitar o comando: /Banco",
  			    linha_5[ ] = "Há também caixas espalhados por Los Santos, para utiliza-los digite o comando: /Caixa",
  			    linha_6[ ] = "O limite de dinheiro que pode ser armazenado pelo banco é de $10.000.000.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO2, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 2 - {FFFFFF}Banco Central", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO2 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 1483.6733,-1759.4933,17.5313 );
			SetPlayerCameraPos( playerid, 1480.7356,-1722.5148,15.4868 );
			SetPlayerCameraLookAt( playerid, 1483.6733,-1759.4933,17.5313 );
			TogglePlayerControllable( playerid, false );
			//~~
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a prefeitura do servidor um lugar que você irá frequentar sempre.",
  			    linha_2[ ] = "Aqui você irá pagar seus impostos checar saldo devedor caso você tenha uma casa.",
  			    linha_3[ ] = "Aqui você pode também remover suas estrelas de procurado caso cometa alguma infração.",
  			    linha_4[ ] = "Aqui você poderá se candidatar para prefeito do servidor e terá beneficios.",
  			    linha_5[ ] = "Caso você tenha alguma profissão relacionada a política aqui será seu local de spawn caso não tenha casa.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO3, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 3 - {FFFFFF}Prefeitura", stg, "Avancar", "" );
		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 1483.6733,-1759.4933,17.5313 );
			SetPlayerCameraPos( playerid, 1480.7356,-1722.5148,15.4868 );
			SetPlayerCameraLookAt( playerid, 1483.6733,-1759.4933,17.5313 );
			TogglePlayerControllable( playerid, false );
			//~~
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a prefeitura do servidor um lugar que você irá frequentar sempre.",
  			    linha_2[ ] = "Aqui você irá pagar seus impostos checar saldo devedor caso você tenha uma casa.",
  			    linha_3[ ] = "Aqui você pode também remover suas estrelas de procurado caso cometa alguma infração.",
  			    linha_4[ ] = "Aqui você poderá se candidatar para prefeito do servidor e terá beneficios.",
  			    linha_5[ ] = "Caso você tenha alguma profissão relacionada a política aqui será seu local de spawn caso não tenha casa.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO3, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 3 - {FFFFFF}Prefeitura", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO3 )
	{
		if( response )
		{
  		  	SetPlayerPos( playerid, 1310.2108,-1357.0059,20.1843 );
			SetPlayerCameraPos( playerid, 1310.4865,-1416.8126,32.6512 );
			SetPlayerCameraLookAt( playerid, 1310.2108,-1357.0059,20.1843 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a auto escola o local aonde você deve ir tirar suas habilitações.",
  			    linha_2[ ] = "São três tipos de habitação que você precisa ter náutica, terrestre e aérea.",
  			    linha_3[ ] = "Você tem até o level 3 que é o equivalente a 3 horas jogadas para poder tirar as habilitações.",
  			    linha_4[ ] = "Caso você não tire as habilitações e fique com um level superior a 3 você correrá o risco de ser procurado.",
  			    linha_5[ ] = "Você pode vim até aqui na auto escola ou contatar um instrutor de direção para tirar suas habilitações.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO4, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 4 - {FFFFFF}Auto Escola", stg, "Avancar", "" );
		}
 		else if( !response )
		{
  		  	SetPlayerPos( playerid, 1310.2108,-1357.0059,20.1843 );
			SetPlayerCameraPos( playerid, 1310.4865,-1416.8126,32.6512 );
			SetPlayerCameraLookAt( playerid, 1310.2108,-1357.0059,20.1843 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a auto escola o local aonde você deve ir tirar suas habilitações.",
  			    linha_2[ ] = "São três tipos de habitação que você precisa ter náutica, terrestre e aérea.",
  			    linha_3[ ] = "Você tem até o level 3 que é o equivalente a 3 horas jogadas para poder tirar as habilitações.",
  			    linha_4[ ] = "Caso você não tire as habilitações e fique com um level superior a 3 você correrá o risco de ser procurado.",
  			    linha_5[ ] = "Você pode vim até aqui na auto escola ou contatar um instrutor de direção para tirar suas habilitações.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO4, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 4 - {FFFFFF}Auto Escola", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO4 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 1553.0934,-1674.7941,13.0000 );
			SetPlayerCameraPos( playerid, 1526.4133,-1670.2605,13.3828 );
			SetPlayerCameraLookAt( playerid, 1553.0934,-1674.7941,13.0000 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a delegacia do servidor.",
  			    linha_2[ ] = "Aqui na delegacia você poderá ver os jogadores que estão presos, visitar e até mesmo pagar fiança.",
  			    linha_3[ ] = "Aqui é o local aonde vende porte de armas que você irpa precisar para poder comprar armas.",
  			    linha_4[ ] = "Caso você seja um infrator da lei ou faça algo fora das regras, você poderá ser preso.",
  			    linha_5[ ] = "O tempo de prissão varia de acordo com seu level de procurado, quanto maior for mais tempo você ficará preso(a).",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO5, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 5 - {FFFFFF}Delegacia", stg, "Avancar", "" );
 		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 1553.0934,-1674.7941,13.0000 );
			SetPlayerCameraPos( playerid, 1526.4133,-1670.2605,13.3828 );
			SetPlayerCameraLookAt( playerid, 1553.0934,-1674.7941,13.0000 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a delegacia do servidor.",
  			    linha_2[ ] = "Aqui na delegacia você poderá ver os jogadores que estão presos, visitar e até mesmo pagar fiança.",
  			    linha_3[ ] = "Aqui é o local aonde vende porte de armas que você irpa precisar para poder comprar armas.",
  			    linha_4[ ] = "Caso você seja um infrator da lei ou faça algo fora das regras, você poderá ser preso.",
  			    linha_5[ ] = "O tempo de prissão varia de acordo com seu level de procurado, quanto maior for mais tempo você ficará preso(a).",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO5, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 5 - {FFFFFF}Delegacia", stg, "Avancar", "" );
 		}
		return 1;
	}
	if( dialogid == D_TUTO5 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 1631.8452,-1177.7609,24.1653 );
			SetPlayerCameraPos( playerid, 1630.4423,-1148.3627,24.0703 );
			SetPlayerCameraLookAt( playerid, 1631.8452,-1177.7609,24.1653 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a loteria do servidor.",
  			    linha_2[ ] = "Aqui você poderá pagar seus impostos e fazer apostas para concorrer a prêmios em dinheiro do jogo.",
  			    linha_3[ ] = "O prêmio é de acordo com o sorteio, caso ninguém ganhe o mesmo é acumulado para o próximo sorteio.",
  			    linha_4[ ] = "Você poderá fazer apostas até o número 60, apenas uma aposta por sorteio.",
  			    linha_5[ ] = "* Desejamos sorte em suas apostas ; ]",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO6, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 6 - {FFFFFF}Loteria", stg, "Avancar", "" );
		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 1631.8452,-1177.7609,24.1653 );
			SetPlayerCameraPos( playerid, 1630.4423,-1148.3627,24.0703 );
			SetPlayerCameraLookAt( playerid, 1631.8452,-1177.7609,24.1653 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a loteria do servidor.",
  			    linha_2[ ] = "Aqui você poderá pagar seus impostos e fazer apostas para concorrer a prêmios em dinheiro do jogo.",
  			    linha_3[ ] = "O prêmio é de acordo com o sorteio, caso ninguém ganhe o mesmo é acumulado para o próximo sorteio.",
  			    linha_4[ ] = "Você poderá fazer apostas até o número 60, apenas uma aposta por sorteio.",
  			    linha_5[ ] = "* Desejamos sorte em suas apostas ; ]",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO6, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 6 - {FFFFFF}Loteria", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO6 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 1161.3822,-1333.9138,18.5351 );
			SetPlayerCameraPos( playerid, 1196.1722,-1307.4220,15.4933 );
			SetPlayerCameraLookAt( playerid, 1161.3822,-1333.9138,18.5351 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é o hospital do servidor.",
  			    linha_2[ ] = "Toda vez que você morrer você automaticamente é levado até o hosptial aonde você será tratado(a).",
  			    linha_3[ ] = "Será cobrada uma taxa de $300,00 toda vez que você morrer e ser tratado no hospital.",
  			    linha_4[ ] = "Caso não queira pagar a taxa basta comprar o convênio médico que vende no próprio hospital.",
  			    linha_5[ ] = "A cada morte você perde o dinheiro do bolso, para evitar isso compre o seguro de acidentes que vende aqui também.",
  			    linha_6[ ] = "Aqui também você poderá tratar casos de drogas comprando a cura.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO7, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 7 - {FFFFFF}Hospital", stg, "Avancar", "" );
		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 1161.3822,-1333.9138,18.5351 );
			SetPlayerCameraPos( playerid, 1196.1722,-1307.4220,15.4933 );
			SetPlayerCameraLookAt( playerid, 1161.3822,-1333.9138,18.5351 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é o hospital do servidor.",
  			    linha_2[ ] = "Toda vez que você morrer você automaticamente é levado até o hosptial aonde você será tratado(a).",
  			    linha_3[ ] = "Será cobrada uma taxa de $300,00 toda vez que você morrer e ser tratado no hospital.",
  			    linha_4[ ] = "Caso não queira pagar a taxa basta comprar o convênio médico que vende no próprio hospital.",
  			    linha_5[ ] = "A cada morte você perde o dinheiro do bolso, para evitar isso compre o seguro de acidentes que vende aqui também.",
  			    linha_6[ ] = "Aqui também você poderá tratar casos de drogas comprando a cura.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO7, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 7 - {FFFFFF}Hospital", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO7 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 1926.6771,-1768.3055,13.5469 );
			SetPlayerCameraPos( playerid, 1956.1354,-1788.3785,15.0142 );
			SetPlayerCameraLookAt( playerid, 1926.6771,-1768.3055,13.5469 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é um dos postos de combustível do servidor.",
  			    linha_2[ ] = "Aqui você irá abastecer seu 'tanque', cada jogador tem um limite de 100 litros de combustível.",
  			    linha_3[ ] = "Seu combustível irá acabar conforme você vai utilizando os veículos movido a combustível.",
  			    linha_4[ ] = "São cobrados $1,00 por litro de combustível.",
  			    linha_5[ ] = "Caso fique sem combustível basta procurar um dos vários postos que estão espalhados por San Andreas.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO8, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 8 - {FFFFFF}Postos de Combustível", stg, "Avancar", "" );
		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 1926.6771,-1768.3055,13.5469 );
			SetPlayerCameraPos( playerid, 1956.1354,-1788.3785,15.0142 );
			SetPlayerCameraLookAt( playerid, 1926.6771,-1768.3055,13.5469 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é um dos postos de combustível do servidor.",
  			    linha_2[ ] = "Aqui você irá abastecer seu 'tanque', cada jogador tem um limite de 100 litros de combustível.",
  			    linha_3[ ] = "Seu combustível irá acabar conforme você vai utilizando os veículos movido a combustível.",
  			    linha_4[ ] = "São cobrados $1,00 por litro de combustível.",
  			    linha_5[ ] = "Caso fique sem combustível basta procurar um dos vários postos que estão espalhados por San Andreas.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO8, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 8 - {FFFFFF}Postos de Combustível", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO8 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 2162.2107,-1066.9646,58.7415 );
			SetPlayerCameraPos( playerid, 2049.7568,-1102.7506,92.0059 );
			SetPlayerCameraLookAt( playerid, 2162.2107,-1066.9646,58.7415 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a área de death match conhecido como favela.",
  			    linha_2[ ] = "Aqui ocorrem confrontos entre todos os jogadores, aqui você pode matar e não será procurado e nem preso.",
  			    linha_3[ ] = "Caso mate fora desse local e dos outros locais no qual DM é liberado como GangueZones você será preso(a).",
  			    linha_4[ ] = "Aqui você tem um status informando quantos vezes você matou e quantas vezes morreu.",
  			    linha_5[ ] = "Aqui você pode comprar um kit no qual você tem direito a diversas armas todas vez que você entrar na favela.",
  			    linha_6[ ] = "Tem o duelo no qual você pode convidar alguém para duelar e ver quem é o melhor no DM.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO9, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 9 - {FFFFFF}Favela", stg, "Avancar", "" );
		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 2162.2107,-1066.9646,58.7415 );
			SetPlayerCameraPos( playerid, 2049.7568,-1102.7506,92.0059 );
			SetPlayerCameraLookAt( playerid, 2162.2107,-1066.9646,58.7415 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a área de death match conhecido como favela.",
  			    linha_2[ ] = "Aqui ocorrem confrontos entre todos os jogadores, aqui você pode matar e não será procurado e nem preso.",
  			    linha_3[ ] = "Caso mate fora desse local e dos outros locais no qual DM é liberado como GangueZones você será preso(a).",
  			    linha_4[ ] = "Aqui você tem um status informando quantos vezes você matou e quantas vezes morreu.",
  			    linha_5[ ] = "Aqui você pode comprar um kit no qual você tem direito a diversas armas todas vez que você entrar na favela.",
  			    linha_6[ ] = "Tem o duelo no qual você pode convidar alguém para duelar e ver quem é o melhor no DM.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_6, linha_t );
			ShowPlayerDialog( playerid, D_TUTO9, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 9 - {FFFFFF}Favela", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO9 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 1857.3394,-1843.1569,13.5817 );
			SetPlayerCameraPos( playerid, 1815.5970,-1842.4349,13.8922 );
			SetPlayerCameraLookAt( playerid, 1857.3394,-1843.1569,13.5817 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a loja de utilitários do servidor.",
  			    linha_2[ ] = "Aqui na loja de utilitários você encontra diversos tipos de coisas como celular, gps, relógio UP e outros.",
  			    linha_3[ ] = "A loja de utilitários é atualizada com frequencia para adição de novos itens.",
  			    linha_4[ ] = "Então é sempre bom estar indo até a mesma para verificar a lista de produtos e checar se algo de novo.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_t );
			ShowPlayerDialog( playerid, D_TUTO10, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 10 - {FFFFFF}Loja de Utilitários", stg, "Avancar", "" );
		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 1857.3394,-1843.1569,13.5817 );
			SetPlayerCameraPos( playerid, 1815.5970,-1842.4349,13.8922 );
			SetPlayerCameraLookAt( playerid, 1857.3394,-1843.1569,13.5817 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a loja de utilitários do servidor.",
  			    linha_2[ ] = "Aqui na loja de utilitários você encontra diversos tipos de coisas como celular, gps, relógio UP e outros.",
  			    linha_3[ ] = "A loja de utilitários é atualizada com frequencia para adição de novos itens.",
  			    linha_4[ ] = "Então é sempre bom estar indo até a mesma para verificar a lista de produtos e checar se algo de novo.",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_t );
			ShowPlayerDialog( playerid, D_TUTO10, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 10 - {FFFFFF}Loja de Utilitários", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO10 )
	{
		if( response )
		{
		    SetPlayerPos( playerid, 2239.4626,-1673.6244,16.4082 );
			SetPlayerCameraPos( playerid, 2247.6531,-1654.9840,17.5291 );
			SetPlayerCameraLookAt( playerid, 2239.4626,-1673.6244,16.4082 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a loja de roupas do servidor conhecida como loja de skins.",
  			    linha_2[ ] = "Aqui você poderá trocar de aparência, são 299 tipos de aprências para você escolher uma.",
  			    linha_3[ ] = "Você poderá também comprar itens como óculos, chapéu, bandana e outros.",
  			    linha_4[ ] = "Caso você não tenha ideia do ID da skin que deseja visite o seguinte site: wiki.sa-mp.com/wiki/Skins:All",
  			    linha_5[ ] = "Para escolher sua skin entre no checkpoint e digite o comando: /Skin",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO11, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 11 - {FFFFFF}Loja de Roupas Skin", stg, "Avancar", "" );
		}
 		else if( !response )
		{
		    SetPlayerPos( playerid, 2239.4626,-1673.6244,16.4082 );
			SetPlayerCameraPos( playerid, 2247.6531,-1654.9840,17.5291 );
			SetPlayerCameraLookAt( playerid, 2239.4626,-1673.6244,16.4082 );
			TogglePlayerControllable( playerid, false );
  			new
  			    linha_t[ ] = "{46E75D}----------------------------------------------------------------------------------------------------------------------------------------------------{FFFFFF}",
  			    linha_1[ ] = "Olá jogador(a), aqui é a loja de roupas do servidor conhecida como loja de skins.",
  			    linha_2[ ] = "Aqui você poderá trocar de aparência, são 299 tipos de aprências para você escolher uma.",
  			    linha_3[ ] = "Você poderá também comprar itens como óculos, chapéu, bandana e outros.",
  			    linha_4[ ] = "Caso você não tenha ideia do ID da skin que deseja visite o seguinte site: wiki.sa-mp.com/wiki/Skins:All",
  			    linha_5[ ] = "Para escolher sua skin entre no checkpoint e digite o comando: /Skin",
  			    stg[ 1024 ]
  			;
  			format( stg, sizeof( stg ), "%s\n%s\n%s\n%s\n%s\n%s\n%s", linha_t, linha_1, linha_2, linha_3, linha_4, linha_5, linha_t );
			ShowPlayerDialog( playerid, D_TUTO11, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Parte 11 - {FFFFFF}Loja de Roupas Skin", stg, "Avancar", "" );
		}
		return 1;
	}
	if( dialogid == D_TUTO11 )
	{
		if( response )
		{
   			if( dini_Int( gFile, "Registrado" ) == 1 )
   			{
				SetPlayerPos( playerid, oPosx[ playerid ], oPosy[ playerid ], oPosz[ playerid ] );
				SetPlayerFacingAngle( playerid, oPosa[ playerid ] );
				SetCameraBehindPlayer( playerid );
			    TogglePlayerControllable( playerid, true );
			    NoTuto[ playerid ] = false;
  				LimparChat( playerid, 30 );
  				SendClientMessage( playerid, COLOR_LARANJA, "[ > ] Você terminou de ler o tutorial." );
  				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Leia sempre as regras para não cometer nenhum erro ! ( Use: /Regras )" );
			}
			else
			{
			    pInfo[ playerid ][ MsgSpawn ] = 1;
			    pInfo[ playerid ][ pLogin ] = true;
			    SpawnPlayer( playerid );
			    NoTuto[ playerid ] = false;
				LimparChat( playerid, 30 );
   			    SendClientMessage( playerid, COLOR_LARANJA, "[ > ] Você terminou o tutorial, seja bem vindo(a)." );
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Leia sempre as regras para não cometer nenhum erro ! ( Use: /Regras )" );
				format( gStr, sizeof( gStr ), "~y~~h~BEM VINDO(A) ~r~~h~%s", PlayerName( playerid ));
				GameTextForPlayer( playerid, gStr, 5000, 1 );
				dini_IntSet( gFile, "Registrado", 1 );
			}
		}
 		else if( !response )
		{
   			if( dini_Int( gFile, "Registrado" ) == 1 )
   			{
				SetPlayerPos( playerid, oPosx[ playerid ], oPosy[ playerid ], oPosz[ playerid ] );
				SetPlayerFacingAngle( playerid, oPosa[ playerid ] );
				SetCameraBehindPlayer( playerid );
			    TogglePlayerControllable( playerid, true );
			    NoTuto[ playerid ] = false;
  				LimparChat( playerid, 30 );
      			SendClientMessage( playerid, COLOR_LARANJA, "[ > ] Você terminou de ler o tutorial." );
  				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Leia sempre as regras para não cometer nenhum erro ! ( Use: /Regras )" );
			}
			else
			{
			    pInfo[ playerid ][ MsgSpawn ] = 1;
			    pInfo[ playerid ][ pLogin ] = true;
			    SpawnPlayer( playerid );
			    NoTuto[ playerid ] = false;
				LimparChat( playerid, 30 );
   			    SendClientMessage( playerid, COLOR_LARANJA, "[ > ] Você terminou o tutorial, seja bem vindo(a)." );
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Leia sempre as regras para não cometer nenhum erro ! ( Use: /Regras )" );
				format( gStr, sizeof( gStr ), "~y~~h~BEM VINDO(A) ~r~~h~%s", PlayerName( playerid ));
				GameTextForPlayer( playerid, gStr, 5000, 1 );
				dini_IntSet( gFile, "Registrado", 1 );
			}
		}
		return 1;
	}
	if( dialogid == D_CARGA )
	{
		if( response ) // LV
		{
		    SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~[ Área de Carregamento ]~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xBFEBFFAA, "[ > ] Caminhão carregado com sucesso !" );
			SendClientMessage( playerid, 0xBFEBFFAA, "[ > ] Para descarregar vá até a area de descarregamento !" );
			SendClientMessage( playerid, 0xFFFFFFDD, "[ > ] O local foi marcado no mapa com um caminhão." );
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~[ Área de Carregamento ]~~~~~~~~~~~~•" );
			GameTextForPlayer( playerid, "~y~~h~carregado", 1000, 0 );
			Carga[ playerid ] = 1;
			Carregou[ playerid ] = 1;
			SetTimerEx( "CheckComandos", 30000, false, "d", playerid );
  			RemovePlayerMapIcon( playerid, 90 );
	    	SetPlayerMapIcon( playerid, 90, 2826.9810, 933.8503, 10.9766, 51, 0, MAPICON_GLOBAL_CHECKPOINT );
		}
		if( !response ) // SF
		{
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~[ Área de Carregamento ]~~~~~~~~~~~~•" );
			SendClientMessage( playerid, 0xBFEBFFAA, "[ > ] Caminhão carregado com sucesso !" );
			SendClientMessage( playerid, 0xBFEBFFAA, "[ > ] Para descarregar vá até a area de descarregamento !" );
			SendClientMessage( playerid, 0xFFFFFFDD, "[ > ] O local foi marcado no mapa com um caminhão." );
			SendClientMessage( playerid, COLOR_AMARELO, "•~~~~~~~~~~~~[ Área de Carregamento ]~~~~~~~~~~~~•" );
			GameTextForPlayer( playerid, "~y~~h~carregado", 1000, 0 );
			Carga[ playerid ] = 1;
			Carregou[ playerid ] = 1;
			SetTimerEx( "CheckComandos", 30000, false, "d", playerid );
  			RemovePlayerMapIcon( playerid, 90 );
	    	SetPlayerMapIcon( playerid, 90, -1068.3540, -642.2197, 32.0078, 51, 0, MAPICON_GLOBAL_CHECKPOINT );
		}
		return 1;
	}
	if( dialogid == D_CONTABANCO )
	{
        if( response )
		{
		    if( !strlen( inputtext ))
		    {
			    format( gStr, sizeof( gStr ), "Não deixe o campo em branco !\n\nNome de usuário: {3366FF}%s{FFFFFF}\n\nInsira uma senha:", PlayerName( playerid ));
                ShowPlayerDialog( playerid, D_CONTABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Criar", "Cancelar" );
                return 1;
			}
			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
			SendClientMessage( playerid, 0xFFFFFFAA, "[ > ] Sua conta bancária foi criada !" );
			format( gStr, sizeof( gStr ), "[ > ] Não esqueça de sua senha: {FF0000}%s", inputtext );
			SendClientMessage( playerid, 0x46E75DFF, gStr );
            dini_IntSet( gFile, "SenhaBanco", pass_hash( inputtext ));
            dini_IntSet( gFile, "ContaBanco", 1 );
            pInfo[ playerid ][ ContaBanco ] = 1;
		}
		return 1;
	}
	if( dialogid == D_LOGINBANCO )
	{
	    if( response )
		{
            if( !strlen( inputtext ))
		    {
               	format( gStr, sizeof( gStr ), "{FF0000}Digite a senha !\n\nNome de usuário: {3366FF}%s{FFFFFF}\n\nInsira sua senha bancária:", PlayerName( playerid ));
        		ShowPlayerDialog( playerid, D_LOGINBANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Entrar", "Cancelar" );
				return 1;
			}
		    if( pass_hash( inputtext ) != dini_Int( gFile, "SenhaBanco" ))
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Senha incorreta !" );
               	format( gStr, sizeof( gStr ), "{FF0000}Senha Incorreta !\n\nNome de usuário: {3366FF}%s{FFFFFF}\n\nInsira sua senha bancária:", PlayerName( playerid ));
        		ShowPlayerDialog( playerid, D_LOGINBANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Entrar", "Cancelar" );
			}
			else
            {
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sua conta bancária foi carregada !" );
                PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				BancoLogin[ playerid ] = 1;
			}
		}
		return 1;
	}
	if( dialogid == D_SENHABANCO )
	{
		if( response )
		{
			if( !strlen( inputtext ))
			{
				ShowPlayerDialog( playerid, D_SENHABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", "Conta Bancária\n\nInsira sua senha atual:", "Confirmar", "Cancelar" );
				return 1;
			}
		    if( pass_hash( inputtext ) != dini_Int( gFile, "SenhaBanco" ))
			{
	            ShowPlayerDialog( playerid, D_SENHABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", "{FF0000}A senha digitada não bate com sua 	 Atual !\n\n{FFFFFF}Insira sua senha atual:", "Confirmar", "Cancelar" );
			}
			else
			{
				ShowPlayerDialog( playerid, D_SENHABANCO2, DIALOG_STYLE_INPUT, "Conta Bancária", "Senha confirmada !\n\nInsira sua {FAF65D}nova senha{FFFFFF}:", "Confirmar", "Cancelar" );
            }
		}
		return 1;
	}
	if( dialogid == D_SENHABANCO2 )
	{
		if( response )
		{
			if( !strlen( inputtext ))
			{
				ShowPlayerDialog( playerid, D_SENHABANCO2, DIALOG_STYLE_INPUT, "Conta Bancária", "Senha confirmada !\n\nInsira sua {FAF65D}nova senha{FFFFFF}:", "Confirmar", "Cancelar" );
				return 1;
			}
			SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sua senha foi alterada com sucesso !" );
            format( gStr, sizeof( gStr ), "[ > ] Sua nova senha não se esqueça: {FF0000}%s", inputtext );
            SendClientMessage( playerid, 0x46E75DFF, gStr );
            dini_IntSet( gFile, "SenhaBanco", pass_hash( inputtext ));
		}
		return 1;
	}
	if( dialogid == D_iBANCO )
	{
		if( response )
		{
			format( s5Doze, sizeof( s5Doze ), "\n{CCFF66}Carteira: {66FF00}R$ %d{CCFF66}\n\nBanco: {66FF00}R$% d\n\n{CCFF66}Horario: {CCFFFF}%02d:%02d:%02d\n\n{CCFF66}Data: {CCFFFF}%d/%02d/%d\n ", GetPlayerCash( playerid ), dini_Int( gFile, "SaldoBanco" ), hora, minuto, segundo, dia, mes, ano );
			ShowPlayerDialog( playerid, D_SALDO, DIALOG_STYLE_MSGBOX, "{FF0000}>>{FFFFFF} Saldo Bancário {FF0000}<<{FFFFFF}", s5Doze, "Ok", "" );
		}
		else
		{
			format( gStr, sizeof( gStr ), "\nNome de usuário: {3366FF}%s{FFFFFF}\n\n{00FF00}Qual transação você deseja realizar:{FFFFFF}", PlayerName( playerid ));
            ShowPlayerDialog( playerid, D_TRANSACAO, DIALOG_STYLE_MSGBOX, "{FF0000}>>{FFFFFF} Transação Bancária {FF0000}<<{FFFFFF}", gStr, "Deposito", "Saque" );
		}
		return 1;
	}
	if( dialogid == D_TRANSACAO )
	{
		if( response )
		{
			format( gStr, sizeof( gStr ), "\nNome de usuário: {3366FF}%s{FFFFFF}\n\n{00FF00}Insira a quantia que deseja depositar:{FFFFFF}", PlayerName( playerid ));
            ShowPlayerDialog( playerid, D_DEPOSITO, DIALOG_STYLE_INPUT, "{FF0000}>>{FFFFFF} Depósito Bancário {FF0000}<<{FFFFFF}", gStr, "Depositar", "Cancelar" );
		}
		else
		{
			format( gStr, sizeof( gStr ), "\nNome de usuário: {3366FF}%s{FFFFFF}\n\n{00FF00}Insira a quantia que deseja sacar:{FFFFFF}", PlayerName( playerid ));
            ShowPlayerDialog( playerid, D_SAQUE, DIALOG_STYLE_INPUT, "{FF0000}>>{FFFFFF} Saque Bancário {FF0000}<<{FFFFFF}", gStr, "Sacar", "Cancelar" );
		}
		return 1;
	}
	if( dialogid == D_DEPOSITO )
	{
	    if( response )
	    {
			if( pInfo[ playerid ][ ContaBanco ] == 0 )
			{
			    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem uma conta bancária ! ( /AbrirConta )" );
				return 1;
			}
			new
				dinheiro = strval( inputtext )
			;
			if( !strlen( inputtext ))
			{
				format( gStr, sizeof( gStr ), "\nNome de usuário: {3366FF}%s{FFFFFF}\n\n{00FF00}Insira a quantia que deseja depositar:{FFFFFF}", PlayerName( playerid ));
            	ShowPlayerDialog( playerid, D_DEPOSITOU, DIALOG_STYLE_INPUT, "{FF0000}>>{FFFFFF} Depósito Bancário {FF0000}<<{FFFFFF}", gStr, "Depositar", "Cancelar" );
				return 1;
			}
		   	if( GetPlayerCash( playerid ) < dinheiro || dinheiro <= 0 || dinheiro >= 1000000 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "[ x ] Quantia Inválida !" );
				return 1;
			}
			sGivePlayerCash( playerid, -dinheiro );
			dini_IntSet( gFile, "SaldoBanco", dini_Int( gFile, "SaldoBanco" ) + dinheiro );
            format( s5Doze, sizeof( s5Doze ), "\n{CCFF66}Voce depositou: {66FF00}$%d\n\n{CCFF66}Saldo atual: {66FF00}$%d\n\n{CCFF66}Horario: {CCFFFF}%02d:%02d:%02d\n\n{CCFF66}Data: {CCFFFF}%d/%02d/%d\n ", dinheiro, dini_Int( gFile, "SaldoBanco" ), hora, minuto, segundo, dia, mes, ano );
			ShowPlayerDialog( playerid, D_SACOU, DIALOG_STYLE_MSGBOX, "{FF0000}>>{FFFFFF} Extrato Bancário {FF0000}<<{FFFFFF}", s5Doze, "Ok", "" );
		}
		return 1;
	}
	if( dialogid == D_SAQUE )
	{
	    if( response )
	    {
			if( pInfo[ playerid ][ ContaBanco ] == 0 )
			{
			    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem uma conta bancária ! ( /AbrirConta )" );
				return 1;
			}
            new
				dinheiro = strval( inputtext )
			;
			if( !strlen( inputtext ))
			{
				format( gStr, sizeof( gStr ), "\nNome de usuário: {3366FF}%s{FFFFFF}\n\n{00FF00}Insira a quantia que deseja sacar:{FFFFFF}", PlayerName( playerid ));
            	ShowPlayerDialog( playerid, D_SAQUE, DIALOG_STYLE_INPUT, "{FF0000}>>{FFFFFF} Saque Bancário {FF0000}<<{FFFFFF}", gStr, "Sacar", "Cancelar" );
				return 1;
			}
			if( dini_Int( gFile, "SaldoBanco" ) < dinheiro || dinheiro <= 0 || dinheiro >= 1000000 )
			{
				SendClientMessage( playerid, COLOR_ERRO, "( BANCO ) Quantia Inválida !" );
				return 1;
			}
			sGivePlayerCash( playerid, dinheiro );
			dini_IntSet( gFile, "SaldoBanco", dini_Int( gFile, "SaldoBanco" ) - dinheiro );
			format( s5Doze, sizeof( s5Doze ), "\n{CCFF66}Voce sacou: {66FF00}$%d\n\n{CCFF66}Saldo atual: {66FF00}$%d\n\n{CCFF66}Horario: {CCFFFF}%02d:%02d:%02d\n\n{CCFF66}Data: {CCFFFF}%d/%02d/%d\n ", dinheiro, dini_Int( gFile, "SaldoBanco" ), hora, minuto, segundo, dia, mes, ano );
			ShowPlayerDialog( playerid, D_DEPOSITOU, DIALOG_STYLE_MSGBOX, "{FF0000}>>{FFFFFF} Extrato Bancário {FF0000}<<{FFFFFF}", s5Doze, "Ok", "" );
		}
		return 1;
	}
	if( dialogid == D_vINDEX )
	{
		if( response )
		{
			if( listitem == 0 )
		    {
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
			if( listitem == 1 )
		    {
		    	new vMotos[ ] = "BF-400 - Preço $20.000\nBike - Preço $1.000\nBMX - Preço $1.000\nFaggio - Preço $5.000\nFCR-900 - Preço $40.000\nFreeway - Preço $60.000\nNRG-500 - Preço $45.000\nPCJ-600 - Preço $30.000\nQuad - Preço $15.000\nSanchez - Preço $10.000\nWayfarer - Preço $15.000\n« Voltar";
				ShowPlayerDialog( playerid, D_vMOTOS, DIALOG_STYLE_LIST, "Motos", vMotos, "Ok", "Cancelar" );
			}
		}
		return 1;
	}
	if( dialogid == D_vMOTOS )
	{
	    if( response )
	    {
            if( listitem == 0 ) // BF 400
	        {
	            if( GetPlayerCash( playerid ) <= 20000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -20000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 581;
				// - -
				dini_IntSet( hFile, "CarModel", 581 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto BF 400 para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Bike
	        {
         		if( GetPlayerCash( playerid ) <= 1000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -1000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 509;
				// - -
				dini_IntSet( hFile, "CarModel", 509 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou uma Bike para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // BMX
	        {
         		if( GetPlayerCash( playerid ) <= 1000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -1000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 481;
				// - -
				dini_IntSet( hFile, "CarModel", 481 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou uma BMX para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Faggio
	        {
         		if( GetPlayerCash( playerid ) <= 5000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -5000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 462;
				// - -
				dini_IntSet( hFile, "CarModel", 462 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto Faggio para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 4 ) // FCR 900
	        {
         		if( GetPlayerCash( playerid ) <= 40000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -40000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 521;
				// - -
				dini_IntSet( hFile, "CarModel", 521 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto FCR 900 para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 5 ) // Freeway
	        {
         		if( GetPlayerCash( playerid ) <= 60000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -60000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 463;
				// - -
				dini_IntSet( hFile, "CarModel", 463 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto Freeway para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 6 ) // NRG 500
	        {
         		if( GetPlayerCash( playerid ) <= 45000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -45000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 522;
				dini_IntSet( hFile, "CarModel", 522 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto NRG 500 para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 7 ) // PCJ 600
	        {
         		if( GetPlayerCash( playerid ) <= 30000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -30000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 461;
				// - -
				dini_IntSet( hFile, "CarModel", 461 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto PCJ 600 para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 8 ) // Quad
	        {
         		if( GetPlayerCash( playerid ) <= 15000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -15000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 471;
				// - -
				dini_IntSet( hFile, "CarModel", 471 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou um Quad para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 9 ) // Sanchez
	        {
         		if( GetPlayerCash( playerid ) <= 10000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -10000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 568;
				// - -
				dini_IntSet( hFile, "CarModel", 468 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto Sanchez para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 10 ) // Wayfarer
	        {
         		if( GetPlayerCash( playerid ) <= 15000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -15000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 586;
				// - -
				dini_IntSet( hFile, "CarModel", 586 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou a moto Wayfarer para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 11 ) // voltar
	        {
				new
					vIndex[ ] = "» Carros\n» Motos"
				;
				ShowPlayerDialog( playerid, D_vINDEX, DIALOG_STYLE_LIST, "{00FFCC}Selecione uma lista", vIndex, "Ok", "Cancelar" );
			}
		}
		return 1;
	}
	if( dialogid == D_vCARROS )
	{
		if( response )
		{
			if( listitem == 0 )
		    { // vLISTA1
			    new Lista1[ ] = "Admiral - Preço $30.000\nAlpha - Preço $40.000\nBanshee - Preço $60.000\nBandito - Preço $50.000\n\nBF Injection - Preço $15.000\nBlade - Preço $60.000\nBlista Compact - Preço $15.000\nBloodring Banger - Preço $45.000\nBobcat - Preço $32.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA1, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 1", Lista1, "Comprar", "Cancelar" );
    		}
		    if( listitem == 1 )
		    {// vLISTA2
			    new Lista2[ ] = "Boxville - Preço $26.000\nBravura - Preço $33.000\nBroadway - Preço $44.000\nBuccaneer - Preço $40.000\nBuffalo - Preço $75.000\nBullet - Preço $80.000\nBurrito - Preço $48.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA2, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 2", Lista2, "Comprar", "Cancelar" );
		    }
		    if( listitem == 2 )
		    {// vLISTA3
			    new Lista3[ ] = "Camper - Preço $28.000\nCheetah - Preço $95.000\nClover - Preço $25.000\nClub - Preço $47.000\nComet - Preço $18.000\nElegant - Preço $49.000\nElegy - Preço $78.000\nEmperor - Preço $55.000\nEsperanto - Preço $22.000\nEuros - Preço $64.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA3, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 3", Lista3, "Comprar", "Cancelar" );
		    }
		    if( listitem == 3 )
		    {// vLISTA4
			    new Lista4[ ] = "Feltzer - Preço $23.000\nFlash - Preço $62.000\nGlendale - Preço $26.000\nGreenwood - Preço $20.000\nHermes - Preço $41.000\nHotknife - Preço $66.000\nHotring - Preço $90.000\nHuntley - Preço $65.000\nHustler - Preço $59.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA4, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 4", Lista4, "Comprar", "Cancelar" );
		    }
		    if( listitem == 4 )
		    {// vLISTA5
			    new Lista5[ ] = "Infernus - Preço $90.000\nJester - Preço $72.000\nKart - Preço $14.000\nLandstalker - Preço $65.000\nMajestic - Preço $17.000\nMesa - Preço $56.000\nMoonbeam - Preço $51.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA5, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 5", Lista5, "Comprar", "Cancelar" );
		    }
		    if( listitem == 5 )
		    {// vLISTA6
			    new Lista6[ ] = "Perenniel - Preço $19.000\nPhoenix - Preço $83.000\nPicador - Preço $21.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA6, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 6", Lista6, "Comprar", "Cancelar" );
		    }
		    if( listitem == 6 )
		    {// vLISTA7
			    new Lista7[ ] = "Rancher - Preço $84.000\nRemington - Preço $57.000\nSabre - Preço $22.000\nSadler - Preço $14.000\nSandking - Preço $80.000\nSavanna - Preço $39.000\nSlamvam - Preço $25.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA7, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 7", Lista7, "Comprar", "Cancelar" );
		    }
		    if( listitem == 7 )
		    {// vLISTA8
			    new Lista8[ ] = "Stafford - Preço $45.000\nStratum - Preço $56.000\nStretch - Preço $70.000\nSultan - Preço 64.000\nSunrise - Preço $51.000\nSuper GT - Preço $80.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA8, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 8", Lista8, "Comprar", "Cancelar" );
		    }
		    if( listitem == 8 )
		    {// vLISTA9
			    new Lista9[ ] = "Tornado - Preço $33.00\nTurismo - Preço $95.000\nUranus - Preço $57.000\nVincent - Preço $42.000\nVirgo - Preço $22.000\nVoodoo - Preço $23.000\nWalton - Preço $10.000\nWashington - Preço $29.000\nWillard - Preço $37.000\nYosemite - Preço $77.000\nZR-350 - Preço $85.000\n« Voltar";
			    ShowPlayerDialog( playerid, D_vLISTA9, DIALOG_STYLE_LIST, "~> Veículos Casas Lista 9", Lista9, "Comprar", "Cancelar" );
		    }
		}
		return 1;
	}
	if( dialogid == D_vLISTA1 )
	{
		if( response )
	    {
	        if( listitem == 0 ) // admiral
	        {
           		if( GetPlayerCash( playerid ) <= 30000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 445;
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Admiral para sua casa." );
				// - -
				dini_IntSet( hFile, "CarModel", 445 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
				sGivePlayerCash( playerid, -30000 );
			}
  			if( listitem == 1 ) // Alpha
	    	{
         		if( GetPlayerCash( playerid ) <= 40000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -40000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 602;
				// - -
				dini_IntSet( hFile, "CarModel", 602 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Alpha para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
  			if( listitem == 2 ) // Banshee
	    	{
         		if( GetPlayerCash( playerid ) <= 60000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -60000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 429;
				// - -
				dini_IntSet( hFile, "CarModel", 429 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Banshee para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Bandito
	    	{
         		if( GetPlayerCash( playerid ) <= 50000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -50000 ); // Poe o preço do carro '-valor'
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 568; // Aqui poe o id do carro, vai em ://wiki.sa-mp.com/wiki/Vehicles:All e da ctrl + f e procura pelo nome do carro e pega o id .-.
				// - - // aqui nem precisa mexer
				dini_IntSet( hFile, "CarModel", 568 ); // Aqui poe o id do carro tbm
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Bandito para sua casa." ); // Aqui do muda o nome do carro na msn
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1; // Aqui nem precisa mexer
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] ); // Aqui tbm nao precisa mexer
			}
			if( listitem == 4 ) // BF Injection
	    	{
         		if( GetPlayerCash( playerid ) <= 15000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -15000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 424;
				// - -
				dini_IntSet( hFile, "CarModel", 424 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo BF Injection para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
 			if( listitem == 5 ) // Blade
	    	{
         		if( GetPlayerCash( playerid ) <= 60000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -60000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 536;
				// - -
				dini_IntSet( hFile, "CarModel", 536 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Blade para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
  			if( listitem == 6 ) // Blista Compact
	    	{
         		if( GetPlayerCash( playerid ) <= 15000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -15000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 496;
				// - -
				dini_IntSet( hFile, "CarModel", 496 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Blista Compact para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
   			if( listitem == 7 ) // Bloodring Banger
	    	{
         		if( GetPlayerCash( playerid ) <= 45000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -45000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 504;
				// - -
				dini_IntSet( hFile, "CarModel", 504 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Bloodring Banger para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
   			if( listitem == 8 ) // Bobcat
	    	{
         		if( GetPlayerCash( playerid ) <= 32000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -32000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 422;
				// - -
				dini_IntSet( hFile, "CarModel", 422 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Bobcat para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 9 ) // Voltar
			{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}
	if( dialogid == D_vLISTA2 )
	{
		if( response )
	    {
		    if( listitem == 0 ) // BoxVille
	    	{
         		if( GetPlayerCash( playerid ) <= 26000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -26000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 498;
				// - -
				dini_IntSet( hFile, "CarModel", 498 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Boxville para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
		    if( listitem == 1 ) // Bravura
	    	{
         		if( GetPlayerCash( playerid ) <= 33000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -33000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 401;
				// - -
				dini_IntSet( hFile, "CarModel", 401 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Bravura para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );

			}
			if( listitem == 2 ) // Broadway
	    	{
         		if( GetPlayerCash( playerid ) <= 44000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -44000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 575;
				// - -
				dini_IntSet( hFile, "CarModel", 575 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Broadway para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );

			}
			if( listitem == 3 ) // Buccaneer
	    	{
         		if( GetPlayerCash( playerid ) <= 40000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -40000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 518;
				// - -
				dini_IntSet( hFile, "CarModel", 518 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Buccaneer para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );

			}
			if( listitem == 4 ) // Buffalo
	    	{
         		if( GetPlayerCash( playerid ) <= 75000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -75000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 402;
				// - -
				dini_IntSet( hFile, "CarModel", 402 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Buffalo para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );

			}
			if( listitem == 5 ) // Bullet
	    	{
         		if( GetPlayerCash( playerid ) <= 80000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -80000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 541;
				// - -
				dini_IntSet( hFile, "CarModel", 541 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Bullet para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );

			}
			if( listitem == 6 ) // Burrito
	    	{
         		if( GetPlayerCash( playerid ) <= 48000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -48000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 482;
				// - -
				dini_IntSet( hFile, "CarModel", 482 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Burrito para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );

			}
			if( listitem == 7 ) // voltar
	    	{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}
	if( dialogid == D_vLISTA3 )
	{
		if( response )
	    {
			if( listitem == 0 ) // Camper
	    	{
         		if( GetPlayerCash( playerid ) <= 28000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -28000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 483;
				// - -
				dini_IntSet( hFile, "CarModel", 483 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Camper para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Cheetah
	    	{
         		if( GetPlayerCash( playerid ) <= 95000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -95000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 415;
				// - -
				dini_IntSet( hFile, "CarModel", 415 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Cheetah para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // Clover
	    	{
         		if( GetPlayerCash( playerid ) <= 25000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -25000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 542;
				// - -
				dini_IntSet( hFile, "CarModel", 542 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Clover para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Club
	    	{
         		if( GetPlayerCash( playerid ) <= 47000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -47000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 589;
				// - -
				dini_IntSet( hFile, "CarModel", 589 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Club para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 4 ) // Comet
	    	{
         		if( GetPlayerCash( playerid ) <= 18000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -18000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 480;
				// - -
				dini_IntSet( hFile, "CarModel", 480 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Comet para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 5 ) // Elegant
	    	{
         		if( GetPlayerCash( playerid ) <= 49000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -49000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 507;
				// - -
				dini_IntSet( hFile, "CarModel", 507 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Elegant para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 6 ) // Elegy
	    	{
         		if( GetPlayerCash( playerid ) <= 78000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -78000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 562;
				// - -
				dini_IntSet( hFile, "CarModel", 562 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Elegy para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 7 ) // Empreror
	    	{
         		if( GetPlayerCash( playerid ) <= 55000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -55000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 585;
				// - -
				dini_IntSet( hFile, "CarModel", 585 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Empreror para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 8 ) // Esperanto
	    	{
         		if( GetPlayerCash( playerid ) <= 22000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -22000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 419;
				// - -
				dini_IntSet( hFile, "CarModel", 419 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Esperanto para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 9 ) // Euros
	    	{
         		if( GetPlayerCash( playerid ) <= 64000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -64000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 587;
				// - -
				dini_IntSet( hFile, "CarModel", 587 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Euros para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 10 ) // voltar
	    	{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}
	if( dialogid == D_vLISTA4 )
	{
		if( response )
	    {
	    	if( listitem == 0 ) // Feltzer
			{
          		if( GetPlayerCash( playerid ) <= 23000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -23000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 533;
				// - -
				dini_IntSet( hFile, "CarModel", 533 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Feltzer para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Flash
			{
         		if( GetPlayerCash( playerid ) <= 62000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -62000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 565;
				// - -
				dini_IntSet( hFile, "CarModel", 565 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Flash para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // Glendale
			{
         		if( GetPlayerCash( playerid ) <= 26000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -26000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 466;
				// - -
				dini_IntSet( hFile, "CarModel", 466 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Glendale para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Greenwood
			{
         		if( GetPlayerCash( playerid ) <= 20000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -20000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 492;
				// - -
				dini_IntSet( hFile, "CarModel", 492 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Grennwood para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 4 ) // Hermes
			{
         		if( GetPlayerCash( playerid ) <= 41000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -41000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 474;
				// - -
				dini_IntSet( hFile, "CarModel", 474 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Hermes para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 5 ) // Hotknife
			{
         		if( GetPlayerCash( playerid ) <= 66000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -66000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 434;
				// - -
				dini_IntSet( hFile, "CarModel", 434 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Hotknife para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 6 ) // Hotring
			{
         		if( GetPlayerCash( playerid ) <= 90000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -90000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 494;
				// - -
				dini_IntSet( hFile, "CarModel", 494 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Hotring para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 7 ) // Huntley
			{
         		if( GetPlayerCash( playerid ) <= 65000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -65000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 579;
				// - -
				dini_IntSet( hFile, "CarModel", 579 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Huntley para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 8 ) //Hustler
			{
         		if( GetPlayerCash( playerid ) <= 59000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -59000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 545;
				// - -
				dini_IntSet( hFile, "CarModel", 545 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Hustler para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 9 ) // voltar
	    	{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}

	if( dialogid == D_vLISTA5 )
	{
		if( response )
	    {
	    	if( listitem == 0 ) // Infernus
			{
           		if( GetPlayerCash( playerid ) <= 90000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -90000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 411;
				// - -
				dini_IntSet( hFile, "CarModel", 411 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Infernus para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Jester
			{
         		if( GetPlayerCash( playerid ) <= 72000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -72000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 559;
				// - -
				dini_IntSet( hFile, "CarModel", 559 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Jester para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // Kart
			{
         		if( GetPlayerCash( playerid ) <= 14000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -14000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 571;
				// - -
				dini_IntSet( hFile, "CarModel", 571 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Kart para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Landstalkner
			{
         		if( GetPlayerCash( playerid ) <= 65000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -65000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 400;
				// - -
				dini_IntSet( hFile, "CarModel", 400 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Landstalker para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 4 ) // Majestic
			{
         		if( GetPlayerCash( playerid ) <= 17000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -17000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 517;
				// - -
				dini_IntSet( hFile, "CarModel", 517 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Majestic para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 5 ) // Mesa
			{
         		if( GetPlayerCash( playerid ) <= 56000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -56000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 500;
				// - -
				dini_IntSet( hFile, "CarModel", 500 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Mesa para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 6 ) // Moonbeam
			{
         		if( GetPlayerCash( playerid ) <= 51000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -51000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 418;
				// - -
				dini_IntSet( hFile, "CarModel", 418 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Moonbeam para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 7 ) // voltar
			{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}

	if( dialogid == D_vLISTA6 )
	{
	    if( response )
	    {
			if( listitem == 0 ) // Perenniel
			{
           		if( GetPlayerCash( playerid ) <= 19000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -19000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 404;
				// - -
				dini_IntSet( hFile, "CarModel", 404 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Perenniel para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Phoenix
			{
         		if( GetPlayerCash( playerid ) <= 83000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -83000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 603;
				// - -
				dini_IntSet( hFile, "CarModel", 603 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Phoenix para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // Picador
			{
         		if( GetPlayerCash( playerid ) <= 21000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -21000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 600;
				// - -
				dini_IntSet( hFile, "CarModel", 600 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Picador para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // voltar
			{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}

	if( dialogid == D_vLISTA7 )
	{
	    if( response )
		{
			if( listitem == 0 ) // Rancher
			{
           		if( GetPlayerCash( playerid ) <= 84000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -84000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 489;
				// - -
				dini_IntSet( hFile, "CarModel", 489 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Rancher para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Remington
			{
         		if( GetPlayerCash( playerid ) <= 57000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -57000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 534;
				// - -
				dini_IntSet( hFile, "CarModel", 534 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Remington para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // Sabre
			{
         		if( GetPlayerCash( playerid ) <= 22000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -22000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 475;
				// - -
				dini_IntSet( hFile, "CarModel", 475 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Sabre para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Sadler
			{
         		if( GetPlayerCash( playerid ) <= 14000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -14000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 543;
				// - -
				dini_IntSet( hFile, "CarModel", 543 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Sadler para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 4 ) // Sandking
			{
         		if( GetPlayerCash( playerid ) <= 80000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -80000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 495;
				// - -
				dini_IntSet( hFile, "CarModel", 495 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Sandking para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 5 ) // Savanna
			{
         		if( GetPlayerCash( playerid ) <= 39000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -39000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 567;
				// - -
				dini_IntSet( hFile, "CarModel", 567 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Savanna para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 6 ) // Slamvan
			{
         		if( GetPlayerCash( playerid ) <= 25000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -25000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 535;
				// - -
				dini_IntSet( hFile, "CarModel", 535 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Slamvan para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 7 ) // voltar
			{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}

	if( dialogid == D_vLISTA8 )
	{
	    if( response )
	    {
	    	if( listitem == 0 ) // Stafford
			{
           		if( GetPlayerCash( playerid ) <= 45000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -45000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 580;
				// - -
				dini_IntSet( hFile, "CarModel", 580 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Stafford para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Stratum
			{
         		if( GetPlayerCash( playerid ) <= 50000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -50000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 561;
				// - -
				dini_IntSet( hFile, "CarModel", 561 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Stratum para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // Stretch
			{
         		if( GetPlayerCash( playerid ) <= 70000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -70000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 409;
				// - -
				dini_IntSet( hFile, "CarModel", 409 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Stretch para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Sultan
			{
         		if( GetPlayerCash( playerid ) <= 64000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -64000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 560;
				// - -
				dini_IntSet( hFile, "CarModel", 560 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Sultan para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 4 ) // Sunrise
			{
         		if( GetPlayerCash( playerid ) <= 51000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -51000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 550;
				// - -
				dini_IntSet( hFile, "CarModel", 550 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Sunrise para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 5 ) // Super GT
			{
         		if( GetPlayerCash( playerid ) <= 80000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -80000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 506;
				// - -
				dini_IntSet( hFile, "CarModel", 506 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Super GT para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 6 ) // voltar
			{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}

	if( dialogid == D_vLISTA9 )
	{
	    if( response )
	    {
	    	if( listitem == 0 ) // Tornado
			{
           		if( GetPlayerCash( playerid ) <= 33000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -33000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 576;
				// - -
				dini_IntSet( hFile, "CarModel", 576 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Tornado para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 1 ) // Turismo
			{
         		if( GetPlayerCash( playerid ) <= 95000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -95000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 451;
				// - -
				dini_IntSet( hFile, "CarModel", 451 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Turismo para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 2 ) // Uranus
			{
         		if( GetPlayerCash( playerid ) <= 57000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -57000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 558;
				// - -
				dini_IntSet( hFile, "CarModel", 558 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Uranus para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 3 ) // Vincent
			{
         		if( GetPlayerCash( playerid ) <= 42000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -42000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 540;
				// - -
				dini_IntSet( hFile, "CarModel", 540 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Vincent para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 4 ) // Virgo
			{
         		if( GetPlayerCash( playerid ) <= 22000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -22000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 491;
				// - -
				dini_IntSet( hFile, "CarModel", 491 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Virgo para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 5 ) // Voodoo
			{
         		if( GetPlayerCash( playerid ) <= 23000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -23000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 412;
				// - -
				dini_IntSet( hFile, "CarModel", 412 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Voodoo para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 6 ) // Walton
			{
         		if( GetPlayerCash( playerid ) <= 10000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -10000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 478;
				// - -
				dini_IntSet( hFile, "CarModel", 478 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Walton para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 7 ) // Washington
			{
         		if( GetPlayerCash( playerid ) <= 29000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -29000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 421;
				// - -
				dini_IntSet( hFile, "CarModel", 421 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Washington para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 8 ) // Willard
			{
         		if( GetPlayerCash( playerid ) <= 37000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -37000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 529;
				// - -
				dini_IntSet( hFile, "CarModel", 529 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Willard para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 9 ) // Yosemite
			{
         		if( GetPlayerCash( playerid ) <= 77000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -77000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 554;
				// - -
				dini_IntSet( hFile, "CarModel", 554 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo Yosemite para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 10 ) // ZR 350
			{
         		if( GetPlayerCash( playerid ) <= 85000 )
	                return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar este veículo !" );

				sGivePlayerCash( playerid, -85000 );
				cInfo[ pInfo[ playerid ][ Casa ] ][ CarModel ] = 477;
				// - -
				dini_IntSet( hFile, "CarModel", 477 );
				SendClientMessage( playerid, COLOR_AZULBEBE, "( CASA ) Você comprou o veículo ZR 350 para sua casa." );
				cInfo[ pInfo[ playerid ][ Casa ] ][ NewCar ] = 1;
				SetTimerEx( "NewCarH", 2000, false, "d", pInfo[ playerid ][ Casa ] );
			}
			if( listitem == 11 ) // voltar
			{
				new vCarros[ ] = "Carros Letras A/B\nCarros Letra B\nCarros Letras C/E\nCarros Letras F/G/H\nCarros Letras I/J/K/L/M\nCarros Letra P\nCarros Letras R/S\nCarros Letra S\nCarros Letras T/U/V/W/Y/Z";
				ShowPlayerDialog( playerid, D_vCARROS, DIALOG_STYLE_LIST, "Selecione uma lista", vCarros, "Ok", "Cancelar" );
			}
		}
		return 1;
	}
	if( dialogid == SLOT_ARMAS )
    {
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	    			ShowPlayerDialog( playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Categoria\t{FFFFFF}Pistolas\n{99CCFF}Categoria\t{FFFFFF}Escopetas\n{99CCFF}Categoria\t{FFFFFF}Metralhadoras\n{99CCFF}Categoria\t{FFFFFF}Rifles\n{99CCFF}Categoria\t{FFFFFF}Granadas", "Ver", "Voltar" );
	            }
	            case 1:
	            {
				    ShowPlayerDialog( playerid, SLOT_ARMAS+2, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "Soco Inglês\nTaco de Golf\nCacetete\nFaca\nTaco de Baseball\nInchada\nTaco de Bilhar\nKatana\nSerra Elétrica", "Comprar", "Voltar" );
	            }
	          	case 2:
	            {
				    ShowPlayerDialog( playerid, SLOT_ARMAS+3, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "Spray\nExtintor\nCâmera\nParaquedas", "Comprar", "Voltar" );
	            }
			}
		}
	}
	if( dialogid == SLOT_ARMAS+1 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
         		{
	    			ShowPlayerDialog( playerid, SLOT_ARMAS+4, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "Pistola 9mm\nPistola Silenciosa 9mm\nPistola Desert Eagle", "Comprar", "Voltar" );
	            }
	            case 1:
         		{
	    			ShowPlayerDialog( playerid, SLOT_ARMAS+5, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "Shotgun\nSawn-off Shotgun\nCombat Shotgun", "Comprar", "Voltar" );
	            }
	            case 2:
         		{
	    			ShowPlayerDialog( playerid, SLOT_ARMAS+6, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "Metralhadora Micro SMG\nMetralhadora MP5\nMetralhadora AK-47\nMetralhadora M4\nMetralhadora Tec9", "Comprar", "Voltar" );
	            }
	            case 3:
         		{
	    			ShowPlayerDialog( playerid, SLOT_ARMAS+7, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "Rifle\nSniper Rifle", "Comprar", "Voltar" );
	            }
	            case 4:
         		{
	    			ShowPlayerDialog( playerid, SLOT_ARMAS+8, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "Granada\nGarrafa de Fogo\nGranada de Gás", "Comprar", "Voltar" );
	            }
	        }
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Armas Categoria\t {FF0000}Fogo\n{99CCFF}Armas Categoria\t {FF0000}Brancas\n{99CCFF}Armas Categoria\t {FF0000}Acessórios", "Ver", "Sair" );
		}
	}
	if( dialogid == SLOT_ARMAS+4 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( dini_Int( gFile, "Pistola_9mm" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Pistola 9mm !" );
	                    return 1;
	                }
	            	if( GetPlayerCash( playerid ) < 500 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Pistola 9mm ! {FFFFFF}( Preço {009900}$500 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 500 )
					{
					    sGivePlayerCash( playerid, -500 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Pistola 9mm." );
         				dini_IntSet( gFile, "Pistola_9mm", 1 );
         			}
         			return 1;
	            }
	            case 1:
	            {
	            	if( dini_Int( gFile, "Pistola_S9mm" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Pistola Silenciosa 9mm !" );
	                    return 1;
	                }
					if( GetPlayerCash( playerid ) < 700 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Pistola Silenciosa 9mm ! {FFFFFF}( Preço {009900}$700 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 700 )
					{
					    sGivePlayerCash( playerid, -700 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Pistola Silenciosa 9mm." );
						dini_IntSet( gFile, "Pistola_S9mm", 1 );
					}
					return 1;
	            }
	            case 2:
	            {
	                if( dini_Int( gFile, "Pistola_Emm" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Pistola Desert Eagle !" );
	                    return 1;
	                }
	            	if( GetPlayerCash( playerid ) < 1000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Pistola Desert Eagle ! {FFFFFF}( Preço {009900}$1000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 1000 )
					{
					    sGivePlayerCash( playerid, -1000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Desert Eagle." );
						dini_IntSet( gFile, "Pistola_Emm", 1 );
					}
					return 1;
	            }
			}
		}
		if( !response )
		{
	    	ShowPlayerDialog( playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Categoria\t{FFFFFF}Pistolas\n{99CCFF}Categoria\t{FFFFFF}Escopetas\n{99CCFF}Categoria\t{FFFFFF}Metralhadoras\n{99CCFF}Categoria\t{FFFFFF}Rifles\n{99CCFF}Categoria\t{FFFFFF}Granadas", "Ver", "Voltar" );
	   	}
	}
	if( dialogid == SLOT_ARMAS+5 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( dini_Int( gFile, "Shotgun" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Shotgun !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 1000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Shotgun ! {FFFFFF}( Preço {009900}$1000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 1000 )
					{
					    sGivePlayerCash( playerid, -1000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Shotgun." );
						dini_IntSet( gFile, "Shotgun", 1 );
					}
					return 1;
	            }
	            case 1:
	            {
	                if( dini_Int( gFile, "sOfShotgun" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Sawn-off Shotgun !" );
	                    return 1;
	                }
                    if( GetPlayerCash( playerid ) < 2000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Sawn-off Shotgun ! {FFFFFF}( Preço {009900}$2000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 2000 )
					{
					    sGivePlayerCash( playerid, -2000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Sawn-off Shotgun." );
						dini_IntSet( gFile, "sOfShotgun", 1 );
					}
					return 1;
	            }
	            case 2:
	            {
	                if( dini_Int( gFile, "CombatShotgun" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Combat Shotgun !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 2500 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Combat Shotgun ! {FFFFFF}( Preço {009900}$2500 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 2500 )
					{
					    sGivePlayerCash( playerid, -2500 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Combat Shotgun." );
						dini_IntSet( gFile, "CombatShotgun", 1 );
					}
					return 1;
	            }
			}
		}
		if( !response )
		{
	    	ShowPlayerDialog( playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Categoria\t{FFFFFF}Pistolas\n{99CCFF}Categoria\t{FFFFFF}Escopetas\n{99CCFF}Categoria\t{FFFFFF}Metralhadoras\n{99CCFF}Categoria\t{FFFFFF}Rifles\n{99CCFF}Categoria\t{FFFFFF}Granadas", "Ver", "Voltar" );
	   	}
	}
	if( dialogid == SLOT_ARMAS+6 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( dini_Int( gFile, "MicroSMG" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Metralhadora Micro SMG !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 3000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Metralhadora Micro SMG ! {FFFFFF}( Preço {009900}$3000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 3000 )
					{
					    sGivePlayerCash( playerid, -3000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Metralhadora Micro SMG." );
         				dini_IntSet( gFile, "MicroSMG", 1 );
         			}
         			return 1;
	            }
	            case 1:
	            {
	                if( dini_Int( gFile, "MP5" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Metralhadora MP5 !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 2500 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Metralhadora MP5 ! {FFFFFF}( Preço {009900}$2500 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 2500 )
					{
					    sGivePlayerCash( playerid, -2500 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Metralhadora MP5." );
						dini_IntSet( gFile, "MP5", 1 );
					}
					return 1;
	            }
	            case 2:
	            {
	                if( dini_Int( gFile, "AK47" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Metralhadora AK-47 !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 5000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Metralhadora AK-47 ! {FFFFFF}( Preço {009900}$5000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 5000 )
					{
					    sGivePlayerCash( playerid, -5000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Metralhadora AK-47." );
						dini_IntSet( gFile, "AK47", 1 );
					}
					return 1;
	            }
	            case 3:
	            {
	                if( dini_Int( gFile, "M4" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Metralhadora M4 !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 5000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Metralhadora M4 ! {FFFFFF}( Preço {009900}$5000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 5000 )
					{
					    sGivePlayerCash( playerid, -5000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Metralhadora M4." );
						dini_IntSet( gFile, "M4", 1 );
					}
					return 1;
	            }
	            case 4:
	            {
	                if( dini_Int( gFile, "Tec9" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Metralhadora Tec9 !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 3000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Metralhadora Tec9 ! {FFFFFF}( Preço {009900}$3000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 3000 )
					{
					    sGivePlayerCash( playerid, -3000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Metralhadora Tec9." );
						dini_IntSet( gFile, "Tec9", 1 );
					}
					return 1;
	            }
			}
		}
		if( !response )
		{
	    	ShowPlayerDialog( playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Categoria\t{FFFFFF}Pistolas\n{99CCFF}Categoria\t{FFFFFF}Escopetas\n{99CCFF}Categoria\t{FFFFFF}Metralhadoras\n{99CCFF}Categoria\t{FFFFFF}Rifles\n{99CCFF}Categoria\t{FFFFFF}Granadas", "Ver", "Voltar" );
	   	}
	}
	if( dialogid == SLOT_ARMAS+7 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( dini_Int( gFile, "Rifle" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Rifle !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 3500 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Rifle ! {FFFFFF}( Preço {009900}$3500 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 3500 )
					{
					    sGivePlayerCash( playerid, -3500 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Rifle." );
	            		dini_IntSet( gFile, "Rifle", 1 );
	            	}
	            	return 1;
	            }
	            case 1:
	            {
	                if( dini_Int( gFile, "Sniper" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Sniper Rifle !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 8000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Sniper Rifle ! {FFFFFF}( Preço {009900}$8000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 8000 )
					{
					    sGivePlayerCash( playerid, -8000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Sniper Rifle." );
	                	dini_IntSet( gFile, "Sniper", 1 );
	                }
	                return 1;
	            }
			}
		}
		if( !response )
		{
	    	ShowPlayerDialog( playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Categoria\t{FFFFFF}Pistolas\n{99CCFF}Categoria\t{FFFFFF}Escopetas\n{99CCFF}Categoria\t{FFFFFF}Metralhadoras\n{99CCFF}Categoria\t{FFFFFF}Rifles\n{99CCFF}Categoria\t{FFFFFF}Granadas", "Ver", "Voltar" );
	   	}
	}
	if( dialogid == SLOT_ARMAS+8 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( dini_Int( gFile, "Granada" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Granada !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 10000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Granada ! {FFFFFF}( Preço {009900}$10000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 10000 )
					{
					    sGivePlayerCash( playerid, -10000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Granada." );
	            		dini_IntSet( gFile, "Granada", 1 );
	            	}
	            	return 1;
	            }
	            case 1:
	            {
	                if( dini_Int( gFile, "GarrafaFogo" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Garrafa de Fogo !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 9000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Garrafa de Fogo ! {FFFFFF}( Preço {009900}$9000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 9000 )
					{
					    sGivePlayerCash( playerid, -9000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Garrafa de Fogo." );
	            		dini_IntSet( gFile, "GarrafaFogo", 1 );
	            	}
	            	return 1;
	            }
	            case 2:
	            {
	                if( dini_Int( gFile, "GranadaGas" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Granada de Gás !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 5000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Granada de Gás ! {FFFFFF}( Preço {009900}$5000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 5000 )
					{
					    sGivePlayerCash( playerid, -5000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Granada de Gás." );
	                	dini_IntSet( gFile, "GranadaGas", 1 );
	                }
	                return 1;
	            }
			}
		}
		if( !response )
		{
	    	ShowPlayerDialog( playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Categoria\t{FFFFFF}Pistolas\n{99CCFF}Categoria\t{FFFFFF}Escopetas\n{99CCFF}Categoria\t{FFFFFF}Metralhadoras\n{99CCFF}Categoria\t{FFFFFF}Rifles\n{99CCFF}Categoria\t{FFFFFF}Granadas", "Ver", "Voltar" );
	   	}
	}
	if( dialogid == SLOT_ARMAS+2 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( dini_Int( gFile, "SocoIngles" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Soco Inglês !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 200 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Soco Inglês ! {FFFFFF}( Preço {009900}$200 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 200 )
					{
					    sGivePlayerCash( playerid, -200 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Soco Inglês." );
	            		dini_IntSet( gFile, "SocoIngles", 1 );
	            	}
	            	return 1;
	            }
	            case 1:
	            {
                 	if( dini_Int( gFile, "TacoGolf" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Taco de Golf !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 100 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Taco de Golf ! {FFFFFF}( Preço {009900}$100 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 100 )
					{
					    sGivePlayerCash( playerid, -100 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Taco de Golf." );
	            		dini_IntSet( gFile, "TacoGolf", 1 );
	            	}
	            	return 1;
	            }
	            case 2:
	            {
	                if( dini_Int( gFile, "Cacetete" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Cacetete !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 300 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Cacetete ! {FFFFFF}( Preço {009900}$300 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 300 )
					{
					    sGivePlayerCash( playerid, -300 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Cacetete." );
	            		dini_IntSet( gFile, "Cacetete", 1 );
	            	}
	            	return 1;
	            }
	            case 3:
	            {
	                if( dini_Int( gFile, "Faca" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Faca !" );
	                    return 1;
	                }
	            	if( GetPlayerCash( playerid ) < 100 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Faca ! {FFFFFF}( Preço {009900}$100 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 100 )
					{
					    sGivePlayerCash( playerid, -100 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Faca." );
	            		dini_IntSet( gFile, "Faca", 1 );
	            	}
	            	return 1;
	            }
	            case 4:
	            {
	                if( dini_Int( gFile, "Baseball" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Taco de Baseball !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 250 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Taco de Baseball ! {FFFFFF}( Preço {009900}$250 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 250 )
					{
					    sGivePlayerCash( playerid, -250 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Taco de Baseball." );
	            		dini_IntSet( gFile, "Baseball", 1 );
	            	}
	            	return 1;
	            }
	            case 5:
	            {
	                if( dini_Int( gFile, "Inchada" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Inchada !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 50 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Inchada ! {FFFFFF}( Preço {009900}$50 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 50 )
					{
					    sGivePlayerCash( playerid, -50 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Inchada." );
	            		dini_IntSet( gFile, "Inchada", 1 );
	            	}
	            	return 1;
	            }
	            case 6:
	            {
	                if( dini_Int( gFile, "TacoBilhar" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Taco de Bilhar !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 120 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Taco de Bilhar ! {FFFFFF}( Preço {009900}$120 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 120 )
					{
					    sGivePlayerCash( playerid, -120 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Taco de Bilhar." );
	            		dini_IntSet( gFile, "TacoBilhar", 1 );
	            	}
	            	return 1;
	            }
	            case 7:
	            {
	                if( dini_Int( gFile, "Katana" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Katana !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 350 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Katana ! {FFFFFF}( Preço {009900}$350 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 350 )
					{
					    sGivePlayerCash( playerid, -350 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Katana." );
	            		dini_IntSet( gFile, "Katana", 1 );
                    }
                    return 1;
	            }
	            case 8:
	            {
	                if( dini_Int( gFile, "SerraEletrica" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Serra Eletrica !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 900 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Serra Elétrica ! {FFFFFF}( Preço {009900}$900 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 900 )
					{
					    sGivePlayerCash( playerid, -900 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Serra Elétrica." );
	            		dini_IntSet( gFile, "SerraEletrica", 1 );
                    }
                    return 1;
	            }
	        }
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Armas Categoria\t {FF0000}Fogo\n{99CCFF}Armas Categoria\t {FF0000}Brancas\n{99CCFF}Armas Categoria\t {FF0000}Acessórios", "Ver", "Sair" );
		}
	}
	if( dialogid == SLOT_ARMAS+3 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( dini_Int( gFile, "Spray" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um  Spray !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 50 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Spray ! {FFFFFF}( Preço {009900}$50 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 50 )
					{
					    sGivePlayerCash( playerid, -50 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Spray." );
	            		dini_IntSet( gFile, "Spray", 1 );
	            	}
	            	return 1;
	            }
	            case 1:
	            {
	                if( dini_Int( gFile, "Extintor" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Extintor !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 80 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Extintor ! {FFFFFF}( Preço {009900}$80 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 80 )
					{
					    sGivePlayerCash( playerid, -80 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Extintor." );
						dini_IntSet( gFile, "Extintor", 1 );
	            	}
	            	return 1;
				}
	            case 2:
	            {
	                if( dini_Int( gFile, "Camera" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma Camêra !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 1000 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar uma Camêra ! {FFFFFF}( Preço {009900}$1000 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 1000 )
					{
					    sGivePlayerCash( playerid, -1000 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu uma Camêra." );
						dini_IntSet( gFile, "Camera", 1 );
					}
					return 1;
	            }
	            case 3:
	            {
	                if( dini_Int( gFile, "Paraquedas" ) == 1 )
	                {
	               		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Paraquedas !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 800 )
	            	{
	           			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro suficiente para comprar um Paraquedas  ! {FFFFFF}( Preço {009900}$800 {FFFFFF} )" );
					}
					else if( GetPlayerCash( playerid ) >= 800 )
					{
					    sGivePlayerCash( playerid, -800 );
					    SendClientMessage( playerid, -1, "[ > ] Você adquiriu um Paraquedas." );
						dini_IntSet( gFile, "Paraquedas", 1 );
					}
					return 1;
	            }
			}
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammu Nation ( VV ) BPO", "{99CCFF}Armas Categoria\t {FF0000}Fogo\n{99CCFF}Armas Categoria\t {FF0000}Brancas\n{99CCFF}Armas Categoria\t {FF0000}Acessórios", "Ver", "Sair" );
		}
	}
	if( dialogid == D_PROFS )
    {
        if( response )
        {
	        switch( listitem ) // 1
	        {
	            case 0:      // Profissões e seus leveis
	            {
	    			ShowPlayerDialog( playerid, D_TRANS, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
						"Motorista de Ônibus - 70 {3DB134}$1000\nTaxista - 5 {3DB134}$600\nMoto Taxista - 8 {3DB134}$700\nTaxista Aéreo - 10 {3DB134}$800\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
	            case 1:
	            {
				    ShowPlayerDialog( playerid, D_TRANP, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
						"Caminhoneiro - 0 {3DB134}$700\nMaquinista - 15 {3DB134}$800\nMotoboy - 50 {3DB134}$900\nMotorista de carro Forte - 60 {3DB134}$1000\nEntregador do Sedex - 40 {3DB134}$900\nPiloto - 150 {3DB134}$1000\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
	          	case 2:
	            {
				    ShowPlayerDialog( playerid, D_PARTI, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
						"Seguranca Particular - 50 {3DB134}$900\nMotorista Particular - 35 {3DB134}$800\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
        		case 3:
	            {
				    ShowPlayerDialog( playerid, D_POLIC, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
						"Guarda de Transito - 70 {3DB134}$900\nPolicial Civil - 100 {3DB134}$1500\nPolicial Militar - 120 {3DB134}$1900\nDelegado - 180 {3DB134}$2200\nPolicia Rodoviaria - 230 {3DB134}$2600\nBOPE - 300 {3DB134}$3000\nExercito - 500 {3DB134}$3900\nMarinha - 600 {3DB134}$7000\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
	            case 4:
	            {
				    ShowPlayerDialog( playerid, D_GOVER, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
						"Juiz - 280 {3DB134}$3300\nDeputado - 350 {3DB134}$2000\nPrefeito - 500 {3DB134}$3000\nPresidente - 1200 {3DB134}$5000\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
	            case 5:
	            {
				    ShowPlayerDialog( playerid, D_CRIME, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
      				"Traficante de Drogas - 10 {3DB134}$1000\nTraficante de Armas - 15 {3DB134}$1000\nAssassino - 200 {3DB134}$1300\nAtirador - 30 {3DB134}$1000\nTerrorista - 80 {3DB134}$1200\nChefe da Mafia - 250 {3DB134}$2000\nAviãozinho - 20 {3DB134}$250\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
	            case 6:
	            {
				    ShowPlayerDialog( playerid, D_OUTRA, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
						"Seguranca da Ilha - 30 {3DB134}$760\nPorteiro da Ilha - 30 {3DB134}$750\nPizza Boy - 0 {3DB134}$550\nFotografo - 0 {3DB134}$600\nVendedor de cachorro quente - 5 {3DB134}$800\nSorveteiro - 5 {3DB134}$800\nReporter - 50 {3DB134}$850\nDrifter - 35 {3DB134}$800\nInstrutor - 40 {3DB134}$900\nMecanico - 30 {3DB134}$750\nSeguranca da Vila - 25 {3DB134}$700\nPorteiro da Vila - 25 {3DB134}$700\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
	            case 7:
	            {
				    ShowPlayerDialog( playerid, D_OUTR2, DIALOG_STYLE_LIST, "{82FF00}Profissão {82FFFF}Level {3DB134}Salário",
						"Pescador - 5 {3DB134}$550\nCacador - 8 {3DB134}$550\nMedico - 25 {3DB134}$800\nAdvogado - 100 {3DB134}$750\nVendedor de Skins - 40 {3DB134}$650\nFrentista - 50 {3DB134}$650\nProstituta - 10 {3DB134}$850\nPadre - 45 {3DB134}$600\nBombeiro(a) - 120 {3DB134}$950\nLixeiro - 25 {3DB134}$1000\nPedreiro - 15 {3DB134}$1000\nDesempregado - 0 {3DB134}$500\n{FFA000}<( Voltar )", "OK", "Voltar" );
	            }
			}
		}
	} // 2
	if( dialogid == D_TRANS )  // Profissões e seus leveis
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( pInfo[ playerid ][ Prof ] == MOTORISTA_ONIBUS )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Motorista de Ônibus !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 70 )
	                {
	                    SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Parabéns, você agora é um(a) Motorista de Ônibus." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MOTORISTA_ONIBUS;
	                    SetPlayerColor( playerid, COLOR_MOTORISTABUS );
						ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 70 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					}
					return 1;
	            }
	            case 1:
	            {
	                if( pInfo[ playerid ][ Prof ] == TAXISTA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Taxista!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 5 )
	                {
	                    SendClientMessage( playerid, COLOR_TAXISTA, "[ > ] Parabéns, você agora é um(a) Taxista." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = TAXISTA;
	                    SetPlayerColor( playerid, COLOR_TAXISTA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
	            }
	      		case 2:
	            {
	                if( pInfo[ playerid ][ Prof ] == MOTO_TAXISTA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Moto-Taxista!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 8 )
	                {
	                    SendClientMessage( playerid, COLOR_MOTOTAXI, "[ > ] Parabéns, você agora é um(a) Moto-Taxista." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MOTO_TAXISTA;
	                    SetPlayerColor( playerid, COLOR_MOTOTAXI );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
	            }
	           	case 3:
	            {
	                if( pInfo[ playerid ][ HabA ] == 0 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Essa profissão exige habilitação aérea !" );
						return 1;
					}
	                if( pInfo[ playerid ][ Prof ] == TAXI_AEREO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Taxista-Aéreo!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 10 )
	                {
	                    SendClientMessage( playerid, COLOR_TAXIAEREO, "[ > ] Parabéns, você agora é um(a) Taxista-Aéreo." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = TAXI_AEREO;
	                    SetPlayerColor( playerid, COLOR_TAXIAEREO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 10 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
	            }
	            case 4:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_TRANP )
	{
        if( response )
        {
	        switch( listitem )
	        {
				case 0:
				{
	                if( pInfo[ playerid ][ Prof ] == CAMINHONEIRO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Caminhoneiro(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 0 )
	                {
	                    SendClientMessage( playerid, COLOR_CAMINHONEIRO, "[ > ] Parabéns, você agora é um(a) Caminhoneiro(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = CAMINHONEIRO;
	                    SetPlayerColor( playerid, COLOR_CAMINHONEIRO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
	            }
	            case 1:
	   			{
	                if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Maquinista!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 15 )
	                {
	                    SendClientMessage( playerid, COLOR_MAQUINISTA, "[ > ] Parabéns, você agora é um(a) Maquinista." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MAQUINISTA;
	                    SetPlayerColor( playerid, COLOR_MAQUINISTA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 15 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
	            }
	            case 2:
	          	{
	                if( pInfo[ playerid ][ Prof ] == MOTOBOY )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Moto-Boy/Girl!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						TogglePlayerControllable( playerid, true );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 50 )
	                {
	                    SendClientMessage( playerid, COLOR_MOTOBOY, "[ > ] Parabéns, você agora é um(a) Moto-Boy/Girl." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MOTOBOY;
	                    SetPlayerColor( playerid, COLOR_MOTOBOY );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 50 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
	            }
	            case 3:
	          	{
	                if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Motorista de carro Forte!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						TogglePlayerControllable( playerid, true );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 60 )
	                {
	                    SendClientMessage( playerid, COLOR_MOTOBOY, "[ > ] Parabéns, você agora é um(a) Motorista de carro Forte." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = M_CARRO_FORTE;
	                    SetPlayerColor( playerid, COLOR_MCF );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 60 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
	            }
	            case 4:
	          	{
	                if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um Entregador do Sedex!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						TogglePlayerControllable( playerid, true );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 40 )
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Parabéns, você agora é um Entregador do Sedex." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = ENTREGADOR_SEDEX;
	                    SetPlayerColor( playerid, COLOR_AMARELO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 40 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
	            }
	            case 5:
	          	{
	                if( pInfo[ playerid ][ Prof ] == PILOTO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um Piloto!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						TogglePlayerControllable( playerid, true );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 150 )
	                {
	                    SendClientMessage( playerid, COLOR_PILOTO, "[ > ] Parabéns, você agora é um Piloto." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PILOTO;
	                    SetPlayerColor( playerid, COLOR_PILOTO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 150 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
	            }
	            case 6:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_PARTI )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
				{
	               	if( pInfo[ playerid ][ Prof ] == SEGURANCA_PART )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Segurança Particular!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 50 )
	                {
	                    SendClientMessage( playerid, COLOR_SEGPART, "[ > ] Parabéns, você agora é um(a) Segurança Particular." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = SEGURANCA_PART;
	                    SetPlayerColor( playerid, COLOR_SEGPART );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 50 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 1:
				{
					if( pInfo[ playerid ][ Prof ] == MOTORISTA_PART )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Motorista Particular!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 35 )
	                {
	                    SendClientMessage( playerid, COLOR_MOTPART, "[ > ] Parabéns, você agora é um(a) Motorista Particular." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MOTORISTA_PART;
	                    SetPlayerColor( playerid, COLOR_MOTPART );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 35 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 2:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_POLIC )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
				{
					if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Guarda de Transito!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 70 )
	                {
	                    SendClientMessage( playerid, COLOR_GUARDTRANS, "[ > ] Parabéns, você agora é um(a) Guarda de Transito." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = GUARDA_TRANSITO;
	                    SetPlayerColor( playerid, COLOR_GUARDTRANS );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 70 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 1:
				{
					if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Policial Civil!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 100 )
	                {
	                    SendClientMessage( playerid, COLOR_POLCIVIL, "[ > ] Parabéns, você agora é um(a) Policial Civil." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = POL_CIVIL;
	                    SetPlayerColor( playerid, COLOR_POLCIVIL );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 100 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 2:
				{
					if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Policial Militar!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 120 )
	                {
	                    SendClientMessage( playerid, COLOR_POLMILITAR, "[ > ] Parabéns, você agora é um(a) Policial Militar." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = POL_MILITAR;
	                    SetPlayerColor( playerid, COLOR_POLMILITAR );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 120 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 3:
				{
					if( pInfo[ playerid ][ Prof ] == DELEGADO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Delegado(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 180 )
	                {
	                    SendClientMessage( playerid, COLOR_DELEGADO, "[ > ] Parabéns, você agora é um(a) Delegado(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = DELEGADO;
	                    SetPlayerColor( playerid, COLOR_DELEGADO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 180 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 4:
				{
				    if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Policial Rodoviário!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 230 )
	                {
	                    SendClientMessage( playerid, COLOR_POLRODOVIARIA, "[ > ] Parabéns, você agora é um(a) Policial Rodoviário." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = POL_RODOVIARIA;
	                    SetPlayerColor( playerid, COLOR_POLRODOVIARIA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 230 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 5:
				{
				    if( pInfo[ playerid ][ Prof ] == BOPE )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é da B.O.P.E!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 300 )
	                {
	                    SendClientMessage( playerid, COLOR_BOPE, "[ > ] Parabéns, você agora é da B.O.P.E." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = BOPE;
	                    SetPlayerColor( playerid, COLOR_BOPE );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 300 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
			 case 6:
				{
				    if( pInfo[ playerid ][ Prof ] == EXERCITO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é do Exercito!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 500 )
	                {
	                    SendClientMessage( playerid, COLOR_EXERCITO, "[ > ] Parabéns, você agora é do Exercito" );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = EXERCITO;
	                    SetPlayerColor( playerid, COLOR_EXERCITO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 500 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
			 case 7:
				{
				    if( pInfo[ playerid ][ Prof ] == MARINHA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é da Marinha!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 600 )
	                {
	                    SendClientMessage( playerid, COLOR_MARINHA, "[ > ] Parabéns, você agora é da Marinha" );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MARINHA;
	                    SetPlayerColor( playerid, COLOR_MARINHA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 600 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 8:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_GOVER )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
				{
				    if( pInfo[ playerid ][ Prof ] == JUIZ )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Juiz(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 280 )
	                {
	                    SendClientMessage( playerid, COLOR_JUIZ, "[ > ] Parabéns, você agora é um(a) Juiz(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = JUIZ;
	                    SetPlayerColor( playerid, COLOR_JUIZ );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 280 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	            case 1:
				{
					if( pInfo[ playerid ][ Prof ] == DEPUTADO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Deputado(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 350 )
	                {
	                    SendClientMessage( playerid, COLOR_DEPUTADO, "[ > ] Parabéns, você agora é um(a) Deputado(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = DEPUTADO;
	                    SetPlayerColor( playerid, COLOR_DEPUTADO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 350 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 2:
				{
					if( pInfo[ playerid ][ Prof ] == PREFEITO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Prefeito(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 500 )
	                {
	                    SendClientMessage( playerid, COLOR_PREFEITO, "[ > ] Parabéns, você agora é um(a) Prefeito(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PREFEITO;
	                    SetPlayerColor( playerid, COLOR_PREFEITO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 500 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 3:
				{
					if( pInfo[ playerid ][ Prof ] == PRESIDENTE )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Presidente!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 1200 )
	                {
	                    SendClientMessage( playerid, COLOR_PRESIDENTE, "[ > ] Parabéns, você agora é um(a) Presidente." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PRESIDENTE;
	                    SetPlayerColor( playerid, COLOR_PRESIDENTE );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 1200 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 4:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_CRIME )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
				{
					if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Traficante de Drogas!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 10 )
	                {
	                    SendClientMessage( playerid, COLOR_TRAFDROGAS, "[ > ] Parabéns, você agora é um(a) Traficante de Drogas." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = TRAF_DROGAS;
	                    SetPlayerColor( playerid, COLOR_TRAFDROGAS );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 10 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 1:
				{
					if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Traficante de Armas!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 15 )
	                {
	                    SendClientMessage( playerid, COLOR_TRAFARMAS, "[ > ] Parabéns, você agora é um(a) Traficante de Armas." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = TRAF_ARMAS;
	                    SetPlayerColor( playerid, COLOR_TRAFARMAS );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 15 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 2:
				{
					if( pInfo[ playerid ][ Prof ] == ASSASSINO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Assassino(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 200 )
	                {
	                    SendClientMessage( playerid, COLOR_ASSASSINO, "[ > ] Parabéns, você agora é um(a) Assassino(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = ASSASSINO;
	                    SetPlayerColor( playerid, COLOR_ASSASSINO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 200 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 3:
				{
					if( pInfo[ playerid ][ Prof ] == ATIRADOR )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Atirador(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 30 )
	                {
	                    SendClientMessage( playerid, 0xFFFFFF, "[ > ] Parabéns, você agora é um(a) Atirador(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = ATIRADOR;
	                    SetPlayerColor( playerid, COLOR_ATIRADOR );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 30 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 4:
				{
					if( pInfo[ playerid ][ Prof ] == TERRORISTA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Terrorista!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 80 )
	                {
	                    SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Parabéns, você agora é um(a) Terrorista." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = TERRORISTA;
	                    SetPlayerColor( playerid, COLOR_TERRORISTA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 80 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 5:
				{
					if( pInfo[ playerid ][ Prof ] == CHEFE_MAFIA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é o Chefe da Mafia !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 250 )
	                {
	                    SendClientMessage( playerid, COLOR_CHEFEMAFIA, "[ > ] Parabéns, você agora é o Chefe da Máfia !" );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = CHEFE_MAFIA;
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 250 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 6:
				{
					if( pInfo[ playerid ][ Prof ] == AVIAOZINHO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um Aviãozinho !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 20 )
	                {
	                    SendClientMessage( playerid, COLOR_CHEFEMAFIA, "[ > ] Parabéns, você agora é um(a) Aviãozinho !" );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = AVIAOZINHO;
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 20 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 7:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_OUTRA )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
				{
					if( pInfo[ playerid ][ Prof ] == SEG_ILHA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Segurança da ilha!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 30 )
	                {
	                    SendClientMessage( playerid, COLOR_SEGILHA, "[ > ] Parabéns, você agora é um(a) Segurança da ilha." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = SEG_ILHA;
	                    SetPlayerColor( playerid, COLOR_SEGILHA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 30 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	            case 1:
				{
					if( pInfo[ playerid ][ Prof ] == PORT_ILHA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Porteiro da ilha!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 30 )
	                {
	                    SendClientMessage( playerid, COLOR_PORILHA, "[ > ] Parabéns, você agora é um(a) Porteiro da ilha." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PORT_ILHA;
	                    SetPlayerColor( playerid, COLOR_PORILHA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 30 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 2:
				{
					if( pInfo[ playerid ][ Prof ] == PIZZABOY )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Pizza Boy/Girl!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 0 )
	                {
	                    SendClientMessage( playerid, COLOR_PIZZABOY, "[ > ] Parabéns, você agora é um(a) Pizza Boy/Girl." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PIZZABOY;
	                    SetPlayerColor( playerid, COLOR_PIZZABOY );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
				}
				case 3:
				{
					if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Fotografo(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 0 )
	                {
	                    SendClientMessage( playerid, COLOR_FOTOGRAFO, "[ > ] Parabéns, você agora é um(a) Fotografo(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = FOTOGRAFO;
	                    SetPlayerColor( playerid, COLOR_FOTOGRAFO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
				}
				case 4:
				{
					if( pInfo[ playerid ][ Prof ] == HOTDOG )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) vendedor(a) de cachorro quente!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 5 )
	                {
	                    SendClientMessage( playerid, COLOR_HOTDOG, "[ > ] Parabéns, você agora é ué um(a) vendedor(a) de cachorro quente." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = HOTDOG;
	                    SetPlayerColor( playerid, COLOR_HOTDOG );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 5 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 5:
				{
					if( pInfo[ playerid ][ Prof ] == SORVETEIRO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Sorveteiro(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 5 )
	                {
	                    SendClientMessage( playerid, COLOR_SORVETEIRO, "[ > ] Parabéns, você agora é um(a) Sorveteir(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = SORVETEIRO;
	                    SetPlayerColor( playerid, COLOR_SORVETEIRO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
				}
				case 6:
				{
					if( pInfo[ playerid ][ Prof ] == REPORTER )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Reporter!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 50 )
	                {
	                    SendClientMessage( playerid, COLOR_REPORTER, "[ > ] Parabéns, você agora é um(a) Reporter." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = REPORTER;
	                    SetPlayerColor( playerid, COLOR_REPORTER );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 50 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 7:
				{
					if( pInfo[ playerid ][ Prof ] == DRIFTER )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Drifter!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 35 )
	                {
	                    SendClientMessage( playerid, COLOR_DRIFTER, "[ > ] Parabéns, você agora é um(a) Drifter." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = DRIFTER;
	                    SetPlayerColor( playerid, COLOR_DRIFTER );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 35 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 8:
				{
					if( pInfo[ playerid ][ Prof ] == INSTRUTOR )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Instrutor(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 40 )
	                {
	                    SendClientMessage( playerid, COLOR_INSTRUTOR, "[ > ] Parabéns, você agora é um(a) Instrutor(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = INSTRUTOR;
	                    SetPlayerColor( playerid, COLOR_INSTRUTOR );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 40 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 9:
				{
					if( pInfo[ playerid ][ Prof ] == MECANICO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Mecânico(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 30 )
	                {
	                    SendClientMessage( playerid, COLOR_MECANICO, "[ > ] Parabéns, você agora é um(a) Mecânico(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MECANICO;
	                    SetPlayerColor( playerid, COLOR_MECANICO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 30 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
		        case 10:
		        {
					if( pInfo[ playerid ][ Prof ] == SEG_VILA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Segurança da Vila !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 25 )
	                {
	                    SendClientMessage( playerid, COLOR_SEGVILA, "[ > ] Parabéns, você agora é um(a) Segurança da Vila." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = SEG_VILA;
	                    SetPlayerColor( playerid, COLOR_SEGVILA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 25 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
		        }
		        case 11:
		        {
					if( pInfo[ playerid ][ Prof ] == PORT_VILA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Porteiro(a) da Vila !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 25 )
	                {
	                    SendClientMessage( playerid, COLOR_PORILHA, "[ > ] Parabéns, você agora é um(a) Porteiro(a) da Vila." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PORT_VILA;
	                    SetPlayerColor( playerid, COLOR_PORILHA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 25 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 12:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_OUTR2 )
	{
        if( response )
        {
	        switch( listitem )
	        {
              	case 0:
				{
					if( pInfo[ playerid ][ Prof ] == PESCADOR )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Pescador(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 5 )
	                {
	                    SendClientMessage( playerid, COLOR_PESCADOR, "[ > ] Parabéns, você agora é um(a) Pescador(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PESCADOR;
	                    SetPlayerColor( playerid, COLOR_PESCADOR );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 5 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	            case 1:
				{
					if( pInfo[ playerid ][ Prof ] == CACADOR )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Caçador(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 8 )
	                {
	                    SendClientMessage( playerid, COLOR_CACADOR, "[ > ] Parabéns, você agora é um(a) Caçador(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = CACADOR;
	                    SetPlayerColor( playerid, COLOR_CACADOR );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 8 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	            case 2:
				{
					if( pInfo[ playerid ][ Prof ] == MEDICO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Médico(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 25 )
	                {
	                    SendClientMessage( playerid, COLOR_MEDICO, "[ > ] Parabéns, você agora é um(a) Médico(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = MEDICO;
	                    SetPlayerColor( playerid, COLOR_MEDICO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 25 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 3:
				{
					if( pInfo[ playerid ][ Prof ] == ADVOGADO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Advogado(a)!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 100 )
	                {
	                    SendClientMessage( playerid, COLOR_ADVOGADO, "[ > ] Parabéns, você agora é um(a) Advogado(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = ADVOGADO;
	                    SetPlayerColor( playerid, COLOR_ADVOGADO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 100 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 4:
				{
					if( pInfo[ playerid ][ Prof ] == VENDEDOR_SKINS )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Vendedor(a) de Skins!" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 40 )
	                {
	                    SendClientMessage( playerid, COLOR_VENDEDORSKINS, "[ > ] Parabéns, você agora é um(a) Vendedor(a) de Skins." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = VENDEDOR_SKINS;
	                    SetPlayerColor( playerid, COLOR_VENDEDORSKINS );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 40 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	 			case 5:
				{
					if( pInfo[ playerid ][ Prof ] == FRENTISTA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Frentista !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 50 )
	                {
	                    SendClientMessage( playerid, COLOR_FRENTISTA, "[ > ] Parabéns, você agora é um(a) Frentista." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = FRENTISTA;
	                    SetPlayerColor( playerid, COLOR_FRENTISTA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 50 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 6:
				{
					if( pInfo[ playerid ][ Prof ] == PROSTITUTA )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Frentista !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 10 )
	                {
	                    SendClientMessage( playerid, COLOR_PROSTITUTA, "[ > ] Parabéns, você agora é um(a) Prostituta." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PROSTITUTA;
	                    SetPlayerColor( playerid, COLOR_PROSTITUTA );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 10 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 7:
				{
					if( pInfo[ playerid ][ Prof ] == PADRE )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Padre !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 45 )
	                {
	                    SendClientMessage( playerid, COLOR_PADRE, "[ > ] Parabéns, você agora é um Padre." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PADRE;
	                    SetPlayerColor( playerid, COLOR_PADRE );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 45 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	   			case 8:
				{
					if( pInfo[ playerid ][ Prof ] == BOMBEIRO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Bombeiro(a) !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 80 )
	                {
	                    SendClientMessage( playerid, COLOR_PADRE, "[ > ] Parabéns, você agora é um(a) Bombeiro(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = BOMBEIRO;
	                    SetPlayerColor( playerid, COLOR_BOMBEIRO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 120 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 9:
				{
					if( pInfo[ playerid ][ Prof ] == LIXEIRO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) Lixeiro(a) !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 25 )
	                {
	                    SendClientMessage( playerid, COLOR_PADRE, "[ > ] Parabéns, você agora é um(a) Lixeiro(a)." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = LIXEIRO;
	                    SetPlayerColor( playerid, COLOR_LIXEIRO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 25 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
				case 10:
				{
					if( pInfo[ playerid ][ Prof ] == PEDREIRO )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um pedreiro !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
					}
	                if( pInfo[ playerid ][ Level ] >= 15 )
	                {
	                    SendClientMessage( playerid, COLOR_LIXEIRO, "[ > ] Parabéns, você agora é um Pedreiro." );
	                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                    pInfo[ playerid ][ Prof ] = PEDREIRO;
	                    SetPlayerColor( playerid, COLOR_PEDREIRO );
	                    ShowPlayerDialog( playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Spawn", "Caso deseje dar spawn no seu local de trabalho, escolha a opção ( Sim )\nCaso deseje continuar na agência escolha a opçao ( Não )", "Sim", "Não" );
	                    return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem level o suficiente para esta profissão !" );
					    SendClientMessage( playerid, COLOR_BRANCO, "[ > ] Essa profissão requer no mínimo level 15 ou superior." );
					    PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
					    return 1;
					}
				}
	   			case 11:
				{
				    SendClientMessage( playerid, COLOR_PADRE, "[ > ] Você agora é um desempregado." );
				    pInfo[ playerid ][ Prof ] = DESEMPREGADO;
				    SetPlayerColor( playerid, COLOR_DESEMPREGADO );
					ResetPlayerWeapons( playerid );
	               	PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
				    return 1;
		        }
	  			case 12:
	            {
	                ShowPlayerDialog( playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "\t{90ABA8}Transporte Publico\n\t{90B182}Transporte\n\t{F1C259}Particulares\n\t{4390C3}Policia\n\t{F1DD0F}Governo\n\t{F41A00}Crime\n\t{CAF785}Outras\n\t{79F785}Outras - 2", "Ver", "Sair" );
	                return 1;
				}
			}
		}
	}
	if( dialogid == D_ISPAW )
	{
	    if( pInfo[ playerid ][ fardado ] == 1 )
	    {
	        SetPlayerArmour( playerid, 0.0 );
	    	SetPlayerSkin( playerid, dini_Int( f( playerid ), "Skin" ));
	    	pInfo[ playerid ][ fardado ] = 0;
	    	pInfo[ playerid ][ ccolete ] = 0;
	    }
	    if( FireAtual[ playerid ] > 0 )
		{
			new ID = playerid;
			DestroyDynamicObject( FireObj[ ID ] );
			FireCreated[ ID ] = 0;
			FirePlayer[ ID ] = "Ninguém";
			FirePos[ ID ][ 0 ] = 0, FirePos[ ID ][ 1 ] = 0, FirePos[ ID ][ 2 ] = 0;
			Delete3DTextLabel( FireText[ ID ] );
			FireAtual[ playerid ] = 0;
			RemovePlayerMapIcon( playerid, 90 );
		}
		if( response )
		{
			SendClientMessage( playerid, 0x99CC66AA, "[ > ] Você resolveu dar spawn na sua nova Profissão." );
			SendClientMessage( playerid, 0x99CC66AA, "[ > ] Para saber sobre comandos e funções de sua profissão digite: /Profissao" );
			SpawnProf( playerid ); SetColor( playerid ); ResetPlayerWeapons( playerid ); armasProf( playerid );
		}
		else
		{
		    SendClientMessage( playerid, 0x99CC66AA, "[ > ] Você resolveu ficar aqui mesmo na Agência." );
			SendClientMessage( playerid, 0x99CC66AA, "[ > ] Para saber sobre comandos e funções de sua profissão digite: /Profissao" );
			SetColor( playerid ); ResetPlayerWeapons( playerid ); armasProf( playerid );
		}
		return 1;
	}
	if( dialogid == D_LUTAS )
	{
        if( response )
        {
	        switch( listitem )
	        {
	     		case 0: // Boxe
				{
				    if( dini_Int( gFile, "Luta" ) == 1 )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) lutador(a) de Boxe !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
				    }
				    if( GetPlayerCash( playerid ) < 1000 )
				    {
				        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para mudar sua seu tipo de luta é preciso ter uma quantia de $1000!" );
				        PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Agora seu modo de lutar é Boxe." );
	                    sGivePlayerCash( playerid, -500 );
	                    dini_IntSet( gFile, "Luta", 1 );
	      				SetPlayerFightingStyle( playerid, FIGHT_STYLE_BOXING );
	      				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	      				return 1;
					}
				}
	      		case 1: // KongFu
				{
				    if( dini_Int( gFile, "Luta" ) == 2 )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) lutador(a) de Kung Fu !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
				    }
				    if( GetPlayerCash( playerid ) < 1000 )
				    {
				        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para mudar sua seu tipo de luta é preciso ter uma quantia de $1000!" );
				        PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Agora seu modo de lutar é Kung Fu." );
	                    sGivePlayerCash( playerid, -700 );
	                    dini_IntSet( gFile, "Luta", 2 );
	      				SetPlayerFightingStyle( playerid, FIGHT_STYLE_KUNGFU );
	      				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	      				return 1;
					}
				}
	      		case 2: // Briga de Rua
				{
				    if( dini_Int( gFile, "Luta" ) == 3 )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) lutador(a) de Rua !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
				    }
				    if( GetPlayerCash( playerid ) < 1000 )
				    {
				        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para mudar sua seu tipo de luta é preciso ter uma quantia de $1000!" );
				        PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Agora seu modo de lutar é Briga de Rua." );
	                    sGivePlayerCash( playerid, -300 );
	                    dini_IntSet( gFile, "Luta", 3 );
	      				SetPlayerFightingStyle( playerid, FIGHT_STYLE_KNEEHEAD );
	      				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	      				return 1;
					}
				}
	      		case 3: // Agarra e Chuta
				{
				    if( dini_Int( gFile, "Luta" ) == 4 )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já possui esse estilo de luta !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
				    }
				    if( GetPlayerCash( playerid ) < 1000 )
				    {
				        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para mudar sua seu tipo de luta é preciso ter uma quantia de $1000!" );
				        PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Agora seu modo de lutar é Agarrar e Chutar." );
	                    sGivePlayerCash( playerid, -400 );
	                    dini_IntSet( gFile, "Luta", 4 );
	      				SetPlayerFightingStyle ( playerid, FIGHT_STYLE_GRABKICK );
	      				PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	      				return 1;
					}
				}
	    		case 4: // Normal
				{
				    if( dini_Int( gFile, "Luta" ) == 5 )
				    {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já é um(a) lutador(a) Normal !" );
						PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
						return 1;
				    }
				    if( GetPlayerCash( playerid ) < 1000 )
				    {
				        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para mudar sua seu tipo de luta é preciso ter uma quantia de $1000!" );
				        PlayerPlaySound( playerid, 1054, 0.0, 0.0, 10.0 );
				        return 1;
				    }
	              	else
				  	{
					  	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Agora seu modo de lutar é Normal." );
		             	sGivePlayerCash( playerid, -50 );
		            	dini_IntSet( gFile, "Luta", 5 );
		      			SetPlayerFightingStyle( playerid, FIGHT_STYLE_NORMAL );
		      			PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		      			return 1;
					}
				}
			}
		}
	}
	if( dialogid == D_AUTOE )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( pInfo[ playerid ][ HabT ] == 1 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já possui habilitação terrestre !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 900 )
	                {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Preço: $900 )" );
						return 1;
					}
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você adquiriu uma habilitação terrestre." );
					pInfo[ playerid ][ HabT ] = 1;
					sGivePlayerCash( playerid, -900 );
					dini_IntSet( f( playerid ), "HabA", 1 );
					return 1;
	            }
	            case 1:
	            {
	                if( pInfo[ playerid ][ HabN ] == 1 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já possui habilitação náutica !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 900 )
	                {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Preço: $900 )" );
						return 1;
					}
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você adquiriu uma habilitação náutica." );
					pInfo[ playerid ][ HabN ] = 1;
					sGivePlayerCash( playerid, -900 );
					dini_IntSet( f( playerid ), "HabN", 1 );
					return 1;
	            }
	            case 2:
	            {
	                if( pInfo[ playerid ][ HabA ] == 1 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já possui habilitação aérea !" );
	                    return 1;
	                }
	                if( GetPlayerCash( playerid ) < 900 )
	                {
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Preço: $900 )" );
						return 1;
					}
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você adquiriu uma habilitação aérea." );
					pInfo[ playerid ][ HabA ] = 1;
					sGivePlayerCash( playerid, -900 );
					dini_IntSet( f( playerid ), "HabA", 1 );
					return 1;
	            }
			}
		}
	}
	if( dialogid == D_UTILI )
	{
        if( response )
        {
	        switch( listitem )
	        {
				case 0: // 'GPS Cidade'
	            {
	            	if( TextLocal[ playerid ][ 0 ] == 0 )
	            	{
	            	    if( GetPlayerCash( playerid ) >= 15000 )
	            	    {
	            	        SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPS Cidade adquirido com sucesso ! Comandos GPS Cidade: /GPScidade" );
	            	        TextLocal[ playerid ][ 0 ] = 1;
	            	      	sGivePlayerCash( playerid, -15000 );
	            	      	dini_IntSet( f( playerid ), "GPScidade", 1 );
	            	      	dini_IntSet( f( playerid ), "StatusGPSc", 0 );
	            	      	TextCreatePlayer( playerid );
	            	    }
						else
						{
						    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $15000 para comprar o GPS Cidade !" );
						}
						return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um GPS Cidade !" );
					}
					return 1;
	            }
	            case 1: // 'GPS Local'
	            {
	            	if( TextLocal[ playerid ][ 1 ] == 0 )
	            	{
	            	    if( GetPlayerCash( playerid ) >= 15000 )
	            	    {
	            	        SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPS Local adquirido com sucesso ! Comandos GPS Local: /GPSlocal" );
	            	        TextLocal[ playerid ][ 1 ] = 1;
	            	      	sGivePlayerCash( playerid, -15000 );
	            	      	dini_IntSet( f( playerid ), "GPSlocal", 1 );
	            	      	dini_IntSet( f( playerid ), "StatusGPSl", 0 );
	            	      	TextCreatePlayer( playerid );
	            	    }
						else
						{
						    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $15000 para comprar o GPS Local !" );
						}
						return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um GPS Local !" );
					}
					return 1;
	            }
	            case 2: // 'Relógio UP'
	            {
	            	if( pInfo[ playerid ][ Tem_RelogioUP ] == 0 )
	            	{
	            	    if( GetPlayerCash( playerid ) >= 5000 )
	            	    {
	            	        SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Relógio UP adquirido com sucesso ! Comandos Relógio UP digite: /RelogioUP" );
	            	        pInfo[ playerid ][ Tem_RelogioUP ] = 1;
	            	      	sGivePlayerCash( playerid, -5000 );
	            	    }
						else
						{
						    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $5000 para comprar o relógio UP !" );
						}
						return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um relogio UP !" );
					}
					return 1;
	            }
	            case 3: // 'Status Modelo'
	            {
	            	if( dini_Int( gFile, "sModelo" ) == 0 )
	            	{
	            	    if( GetPlayerCash( playerid ) >= 5000 )
	            	    {
	            	        SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Status Modelo adquirido com sucesso ! Comandos Status Modelo digite: /StatusModelo" );
	            	        dini_IntSet( gFile, "sModelo", 1 );
	            	      	sGivePlayerCash( playerid, -5000 );
	            	    }
						else
						{
						    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $5000 para comprar o status modelo !" );
						}
						return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um status modelo !" );
					}
					return 1;
	            }
				case 4: // 'Celular'
	            {
	                if( pInfo[ playerid ][ Celular ] == 1 )
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem celular !" );
					    return 1;
					}
					if( GetPlayerCash( playerid ) < 5000 )
		         	{
		         	    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente !" );
		         	    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Um celular custa $5000 !" );
						return 1;
					}
					sGivePlayerCash( playerid, -5000 );
					dini_IntSet( f( playerid ), "Celular", 1 );
					pInfo[ playerid ][ Celular ] = 1;
		       		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Celular adquirido !" );
		       		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Para saber os comandos digite: {FFFFFF}/Celular" );
					return 1;
	            }
	 			case 5: // 'Créditos'
	            {
	                if( pInfo[ playerid ][ Celular_c ] >= 100 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu celular já tem (100 SMS) de créditos !" );
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode carregar o celular quanto estiver com menos de (100 SMS) !" );
	                    return 1;
	                }
	                new
						add_creditos = (100 - pInfo[ playerid ][ Celular_c ])
					;
					new
					    preco_creditos = (add_creditos * 30)
					;
					if( GetPlayerCash( playerid ) < preco_creditos )
		          	{
		          	    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente !" );
		          	    if( add_creditos > 0 )
		          	    {
			          	    format( gStr, 128, "[ x ] Você precisa ter em mãos $%d para carregar seu celular !", preco_creditos );
			          	    SendClientMessage( playerid, COLOR_ERRO, gStr );
		          	    }
		          	    else
		          	    {
			          	    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter em mãos $3000 para carregar seu celular !" );
		          	    }
		          	    return 1;
		          	}
		          	sGivePlayerCash( playerid, -preco_creditos );

		       		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Celular carregado !" );

		       		format( gStr, 128, "[ > ] Crédito anterior %d SMS, crédito atual (100 SMS), total gasto {FFFFFF}$%d.", pInfo[ playerid ][ Celular_c ], preco_creditos );
		       		SendClientMessage( playerid, COLOR_AMARELO, gStr );

		       		pInfo[ playerid ][ Celular_c ] = 100;

					return 1;
	            }
	            case 6: // 'Capacete'
	            {
	                if( pInfo[ playerid ][ Tem_Capacete ] == 0 )
	                {
						if( GetPlayerCash( playerid ) >= 2000 )
			        	{
			        	    SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Capacete adquirido com sucesso ! Para ver os comandos digite: /Capacete" );
			        	    pInfo[ playerid ][ Tem_Capacete ] = 1;
			        	    dini_IntSet( gFile, "Tem_Capact", 1 );
			        	    sGivePlayerCash( playerid, -2000 );
			        	}
						else
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $2000 para comprar o capacete !" );
						}
						return 1;
					}
					else
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um capacete !" );
					}
					return 1;
	            }
	            case 7: // 'GPS Player'
	            {
	                if( dini_Int( gFile, "GPSPlayer" ) == 0 )
	                {
						if( GetPlayerCash( playerid ) >= 15000 )
			        	{
			        	    SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] GPSPlayer adquirido com sucesso ! Para ver os comandos digite: /GPSPlayer" );
			        	    dini_IntSet( gFile, "GPSPlayer", 1 );
			        	    sGivePlayerCash( playerid, -15000 );
			        	}
						else
						{
						    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa ter $15000 para comprar o gpsplayer !" );
						}
						return 1;
					}
					else
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um gpsplayer !" );
					}
					return 1;
	            }
	        }
		}
		return 1;
	}
	if( dialogid == D_GPSL1 )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
					ShowPlayerDialog( playerid, D_GPSLS, DIALOG_STYLE_LIST, "GPS - Locais Los Santos", "Agência de Empregos\nBanco\nPrefeitura\nDelegacia\nUltilitarios\nBinco\nGinásio de Luta\nAlhambra Balada\nBar Ten Green\nAuto Escola\nPosto de Combustível\nLoteria\nTransfender\nTransfender Low-rider\nTransfender BPO", "Localizar", "Voltar" );
	            }
/*	            case 1:
	            {
					ShowPlayerDialog( playerid, D_GPSSF, DIALOG_STYLE_LIST, "GPS - Locais San Fierro", "Em construção", "Localizar", "Voltar" );
	            }
	            case 3:
	            {
					ShowPlayerDialog( playerid, D_GPSLV, DIALOG_STYLE_LIST, "GPS - Locais Las Veturas", "Em construção", "Localizar", "Voltar" );
	            } */
	            case 1:
	            {
	             	RemovePlayerMapIcon( playerid, 90 );
	          		SendClientMessage( playerid, COLOR_AMARELO, "[ GPS ] O seu GPS foi desabilitado." );
	            }
	        }
		}
		return 1;
	}
	if( dialogid == D_GPSLS )
	{
	    if( !response )
	    {
			ShowPlayerDialog( playerid, D_GPSL1, DIALOG_STYLE_LIST, "GPS - Escolha a cidade", "\tLos Santos\n\t> Desligar GPS", "Abrir", "Sair" ); // GPS - Escolha a cidade", "\tLos Santos\n\tSan Fierro\n\tLas Venturas\n\t> Desligar GPS", "Abrir", "Sair
		}
	    if( response )
	    {
	        switch( listitem )
	        {
				case 0:
	            {
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Agência de Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
		    		SetPlayerMapIcon( playerid, 90, 1222.2948, -1814.5229, 16.5938, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 1:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Banco de Los Santos localizado." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1777.5851, -1663.9617, 14.4345, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 2:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Prefeitura de Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1481.1010, -1763.2540, 18.7958 , 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
				case 3:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Delegacia de Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1543.9362, -1676.0367, 13.5574, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
				case 4:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Loja de Utilitários de Los Santos localizado." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1830.5568, -1842.2247, 13.5781, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 5:
             	{
	               	RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Binco de Los Santos localizado." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 2244.6948, -1662.8044, 15.4766, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	         	case 6:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Ginásio de Luta de Los Santos localizado." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 2225.9150, -1724.6503, 13.5587, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 7:
            	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Alhambra Balada de Los Santos localizado." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1833.9529, -1682.5370, 13.4518, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 8:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Bar Ten Green de Los Santos localizado." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 2306.7695, -1648.8844, 14.5057, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 9:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Auto Escola de Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1310.1615, -1381.1624, 13.4441, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 10:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Posto de Combustível de Los Santos localizado." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1940.4883,-1772.6022,13.3906, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 11:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Loteria de Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1631.8190,-1172.7080,24.0843, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 12:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Transfender de Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1041.1962,-1030.2954,32.0833, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
             	case 13:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Transfender Low-rider Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 2644.7849,-2020.3087,13.5469, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
	            case 14:
             	{
	                RemovePlayerMapIcon( playerid, 90 );
	                SendClientMessage( playerid, 0x6699CCAA, "[ GPS ] Transfender BPO Los Santos localizada." );
		    		SendClientMessage( playerid, 0x6699CCAA, "[ GPS > ] Vá até o ícone de um HAMBÚRGUER que foi colocado no seu MAPA." );
	                SetPlayerMapIcon( playerid, 90, 1667.1602,-1706.4203,15.1753, 10, 0, MAPICON_GLOBAL_CHECKPOINT );
	            }
			}
	    }
	}
	if( dialogid == D_HOSPI )
	{
        if( response )
        {
	        switch( listitem )
	        {
             	case 0:
	            {
	                if( GetPlayerCash( playerid ) < 1000 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem $1.000, para comprar a cura !" );
	                    return 1;
					}
					if( pInfo[ playerid ][ Tem_Cura ] == 1 )
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem uma cura !" );
					    return 1;
					}
					else if( pInfo[ playerid ][ Tem_Cura ] == 0 )
					{
		                SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você comprou uma cura ! modo de uso: /usarcura" );
						pInfo[ playerid ][ Tem_Cura ] = 1;
						sGivePlayerCash( playerid,  -1000 );
		                return 1;
					}
	            }
	            case 1:
	            {
	                if( GetPlayerCash( playerid ) < 5000 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem $5.000, para contratar o Convênio Médico !" );
	                    TogglePlayerControllable( playerid, true );
	                    return 1;
					}
					if( dini_Int( gFile, "Convenio" ) == 1 )
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem contrato com o Convênio Médico !" );
					    return 1;
					}
					else if( dini_Int( gFile, "Convenio" ) == 0 )
					{
		                SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Parabéns você agora você tem um Convênio Médico." );
		                dini_IntSet( gFile, "Convenio", 1 );
						sGivePlayerCash( playerid,  -5000 );
		                return 1;
					}
	            }
			 	case 2:
				{
	                if( GetPlayerCash( playerid ) < 10000 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem $5.000, para contratar o Seguro de Acidentes !" );
	                    return 1;
					}
					if( dini_Int( gFile, "Seguro" ) == 1 )
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem contrato com o Seguro de Acidentes !" );
					    return 1;
					}
					else if( dini_Int( gFile, "Seguro" ) == 0 )
					{
		                SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Parabéns você agora você tem um Seguro de Acidentes." );
		                dini_IntSet( gFile, "Seguro", 1 );
						sGivePlayerCash( playerid,  -10000 );
		                return 1;
					}
	            }
	        }
		}
		return 1;
	}
	if( dialogid == D_TEMPO )
	{
        if( response )
        {
	        switch( listitem )
	        {
        	   	case 0:
		        {
			        SetWorldTime( 8 );
			        return 1;
				}
		        case 1:
				{
					SetWorldTime( 16 );
					return 1;
				}
		        case 2:
		        {
	   		        SetWorldTime( 20 );
	   		        return 1;
				}
		        case 3:
				{
	                SetWorldTime( 0 );
	                return 1;
				}
	        }
		}
		return 1;
	}
	if( dialogid == D_FAVEL )
	{
        if( response )
        {
	        switch( listitem )
	        {
	            case 0:
	            {
	            	if( pInfo[ playerid ][ Tem_Kit ] == 1 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você já tem um Kit de Armas !" );
	                    return 1;
					}
	                if( GetPlayerCash( playerid ) >= 5000 )
	                {
			            SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Parabéns Kit de arma adquirido com sucesso !" );
						pInfo[ playerid ][ Tem_Kit ] = 1;
						ResetPlayerWeapons( playerid );
				  		GivePlayerWeapon( playerid, 24, 9999 ); // Eagle
				    	GivePlayerWeapon( playerid, 26, 9999 ); // Sawn-Off
				  		GivePlayerWeapon( playerid, 32, 9999 ); // Tec9
				  		GivePlayerWeapon( playerid, 34, 9999 ); // Sniper
				  		GivePlayerWeapon( playerid, 31, 9999 ); // M4
				  		GivePlayerWeapon( playerid, 9, 1 ); // Serra
	                	sGivePlayerCash( playerid,  -5000 );
	                	PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                	return 1;
					}
					else
					{
					    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem $5000, para comprar o Kit !" );
					    return 1;
					}
	            }
	            case 1:
	            {
	                PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
	                SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Kit removido com sucesso !" );
		            pInfo[ playerid ][ Tem_Kit ] = 0;
		            return 1;
	            }
	        }
		}
		return 1;
	}
/*	new  // ALGODÃO AGÊNCIA
		Float:pVida
	;
	GetPlayerHealth( playerid, pVida );
	if( dialogid == D_ALGOD )
	{
        if( response )
        {
	        switch( listitem )
	        {
	 			case 0:
	            {
	             	if( GetPlayerCash( playerid ) < 20 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Custo: $20 )" );
	                    return 1;
	                }
	                if( pVida >= 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode comer nada pois você está de barriga cheia !" );
	                    return 1;
	                }
	                if( pVida + 10.0 > 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce azul !" );
	                    sGivePlayerCash( playerid, - 20 );
	                    SetPlayerHealth( playerid, 100.0 );
	                    ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
	                    return 1;
	                }
	                SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce azul !" );
	                sGivePlayerCash( playerid, - 20 );
					SetPlayerHealth( playerid, pVida + 10.0 );
					ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
					return 1;
	            }
	            case 1:
	            {
	             	if( GetPlayerCash( playerid ) < 20 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Custo: $20 )" );
	                    return 1;
	                }
	                if( pVida >= 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode comer nada pois você está de barriga cheia !" );
	                    return 1;
	                }
	                if( pVida + 10.0 > 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce rosa !" );
	                    sGivePlayerCash( playerid, - 20 );
	                    SetPlayerHealth( playerid, 100.0 );
	                    ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
	                    return 1;
	                }
	                SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce rosa !" );
	                sGivePlayerCash( playerid, - 20 );
					SetPlayerHealth( playerid, pVida + 10.0 );
					ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
					return 1;
	            }
	            case 2:
	            {
	             	if( GetPlayerCash( playerid ) < 20 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Custo: $20 )" );
	                    return 1;
	                }
	                if( pVida >= 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode comer nada pois você está de barriga cheia !" );
	                    return 1;
	                }
	                if( pVida + 10.0 > 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce verde !" );
	                    sGivePlayerCash( playerid, - 20 );
	                    SetPlayerHealth( playerid, 100.0 );
	                    ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
	                    return 1;
	                }
	                SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce verde !" );
	                sGivePlayerCash( playerid, - 20 );
					SetPlayerHealth( playerid, pVida + 10.0 );
					ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
					return 1;
	            }
	            case 3:
	            {
	             	if( GetPlayerCash( playerid ) < 20 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Custo: $20 )" );
	                    return 1;
	                }
	                if( pVida >= 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode comer nada pois você está de barriga cheia !" );
	                    return 1;
	                }
	                if( pVida + 10.0 > 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce amarelo !" );
	                    sGivePlayerCash( playerid, - 20 );
	                    SetPlayerHealth( playerid, 100.0 );
	                    ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
	                    return 1;
	                }
	                SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce amarelo !" );
	                sGivePlayerCash( playerid, - 20 );
					SetPlayerHealth( playerid, pVida + 10.0 );
					ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
					return 1;
	            }
	            case 4:
	            {
	             	if( GetPlayerCash( playerid ) < 20 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente ! ( Custo: $20 )" );
	                    return 1;
	                }
	                if( pVida >= 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode comer nada pois você está de barriga cheia !" );
	                    return 1;
	                }
	                if( pVida + 10.0 > 100.0 )
	                {
	                    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce branco !" );
	                    sGivePlayerCash( playerid, - 20 );
	                    SetPlayerHealth( playerid, 100.0 );
	                    ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
	                    return 1;
	                }
	                SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você comprou um algodão doce branco !" );
	                sGivePlayerCash( playerid, - 20 );
					SetPlayerHealth( playerid, pVida + 10.0 );
					ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 1, 1, 1, 1, 1 );
					return 1;
	            }
			}
		}
	} */
	if( dialogid == 8899 )
	{
		if( response )
		{
			if( listitem == 0 )
			{
			    if( dini_Int( f( playerid ), "KitAzul" ) == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem neon azul !" );
			        return 1;
			    }
			    resetNeon( playerid );
				//blue
				SetPVarInt( playerid, "Status", 1 );
            	SetPVarInt( playerid, "neon", CreateDynamicObject( 18648,0,0,0,0,0,0 ));
            	SetPVarInt( playerid, "neon1", CreateDynamicObject( 18648,0,0,0,0,0,0 ));
            	AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon" ), GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
            	AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon1" ), GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
   			}
			if( listitem == 1 )
			{
 			    if( dini_Int( f( playerid ), "KitVermelho" ) == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem neon vermelho !" );
			        return 1;
			    }
			    resetNeon( playerid );
			 	//red
				SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "neon2", CreateDynamicObject( 18647,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "neon3", CreateDynamicObject( 18647,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon2" ), GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon3" ), GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Neon Instalado" );
			}
			if( listitem == 2 )
			{
 			    if( dini_Int( f( playerid ), "KitVerde" ) == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem neon verde !" );
			        return 1;
			    }
			    resetNeon( playerid );
				//green
		   	   	SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "neon4", CreateDynamicObject( 18649,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "neon5", CreateDynamicObject( 18649,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon4" ), GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon5" ), GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Neon Instalado" );
	  		}
			if( listitem == 3 )
			{
 			    if( dini_Int( f( playerid ), "KitBranco" ) == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem neon branco !" );
			        return 1;
			    }
			    resetNeon( playerid );
				//white
		   	   	SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "neon6", CreateDynamicObject( 18652,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "neon7", CreateDynamicObject( 18652,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon6" ), GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon7" ), GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Neon Instalado" );
			}
			if( listitem == 4 )
			{
 			    if( dini_Int( f( playerid ), "KitRosa" ) == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem neon rosa !" );
			        return 1;
			    }
			    resetNeon( playerid );
				//pink
		   	   	SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "neon8", CreateDynamicObject( 18651,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "neon9", CreateDynamicObject( 18651,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon8" ), GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon9" ), GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Neon Instalado" );
			}
			if( listitem == 5 )
			{
 			    if( dini_Int( f( playerid ), "KitAmarelo" ) == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem neon amarelo !" );
			        return 1;
			    }
			    resetNeon( playerid );
				//yellow
  				SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "neon10", CreateDynamicObject( 18650,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "neon11", CreateDynamicObject( 18650,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon10" ), GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon11" ), GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Neon Instalado" );
			}
			if( listitem == 6 )
			{
				//remove neon
	            resetNeon( playerid );
			}
		}
	}
 	if( dialogid == 8810 )
	{
		if( response )
		{
			if( listitem == 0 )
			{
			    resetNeon( playerid );
				//police
   	 			SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "neon12", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "neon13", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon12" ), GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "neon13" ), GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Giroflex Instalado" );
	     	}
			if( listitem == 1 )
			{
			    resetNeon( playerid );
	            SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "interior", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "interior1", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "interior" ), GetPlayerVehicleID( playerid ), 0, -0.0, 0, 2.0, 2.0, 3.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "interior1" ), GetPlayerVehicleID( playerid ), 0, -0.0, 0, 2.0, 2.0, 3.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Giroflex Instalado" );
			}
          	if( listitem == 2 )
			{
			    resetNeon( playerid );
				//back
	            SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "back", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "back1", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "back" ), GetPlayerVehicleID( playerid ), -0.0, -1.5, -1, 2.0, 2.0, 3.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "back1" ), GetPlayerVehicleID( playerid ), -0.0, -1.5, -1, 2.0, 2.0, 3.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Giroflex Instalado" );
	      	}
         	if( listitem == 3 )
			{
			    resetNeon( playerid );
				//front
	            SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "front", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "front1", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "front" ), GetPlayerVehicleID( playerid ), -0.0, 1.5, -0.6, 2.0, 2.0, 3.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "front1" ), GetPlayerVehicleID( playerid ), -0.0, 1.5, -0.6, 2.0, 2.0, 3.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Giroflex Instalado" );
	 		}
	      	if( listitem == 4 )
			{
			    resetNeon( playerid );
	            //undercover
	            SetPVarInt( playerid, "Status", 1 );
	            SetPVarInt( playerid, "undercover", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            SetPVarInt( playerid, "undercover1", CreateDynamicObject( 18646,0,0,0,0,0,0 ));
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "undercover" ), GetPlayerVehicleID( playerid ), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0 );
	            AttachDynamicObjectToVehicle( GetPVarInt( playerid, "undercover1" ), GetPlayerVehicleID( playerid ), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0 );
	            SendClientMessage( playerid, 0xFFFFFFAA, "Giroflex Instalado" );
	     	}
			if( listitem == 5 )
			{
				//remove neon
	            resetNeon( playerid );
			}
		}
	}
	if( dialogid == D_ITEN1 )
	{
	    if( response )
	    {
	        if( GetPlayerCash( playerid ) < 1000 )
	        {
	            SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem $1000 para comprar esse óculos !" );
	            return 1;
	        }
	        format( gStr, sizeof( gStr ), "[ > ] Você adquiriu o óculos ID %d, Use: /usarOculos %d", useOculos[ playerid ], useOculos[ playerid ] );
	        SendClientMessage( playerid, -1, gStr );
	        new
				oOculos[ 24 ]
			;
			format( oOculos, sizeof( oOculos ), "Oculos%d", useOculos[ playerid ] );
	        dini_IntSet( f( playerid ), oOculos, 1 );
	        useOculos[ playerid ] = -1, useTipo[ playerid ] = 0;
	        RemovePlayerAttachedObject( playerid, 1 );
	        SetarItensPlayer( playerid );
	        sGivePlayerCash( playerid, -1000 );
	        return 1;
	    }
	    if( !response )
	    {
	        useOculos[ playerid ] = -1, useTipo[ playerid ] = 0;
	        RemovePlayerAttachedObject( playerid, 1 );
	        SetarItensPlayer( playerid );
	        return 1;
	    }
	}
	if( dialogid == D_ITEN2 )
	{
	    if( response )
	    {
	        if( GetPlayerCash( playerid ) < 2000 )
	        {
	            SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem $2000 para comprar essa máscara !" );
	            return 1;
	        }
	        format( gStr, sizeof( gStr ), "[ > ] Você adquiriu à máscara ID %d, Use: /usarMascara %d", useMascara[ playerid ], useMascara[ playerid ] );
	        SendClientMessage( playerid, -1, gStr );
	        new
				aMascara[ 24 ]
			;
			format( aMascara, sizeof( aMascara ), "Mascara%d", useMascara[ playerid ] );
	        dini_IntSet( f( playerid ), aMascara, 1 );
	        useMascara[ playerid ] = -1, useTipo[ playerid ] = 0;
            RemovePlayerAttachedObject( playerid, 2 );
            SetarItensPlayer( playerid );
            sGivePlayerCash( playerid, -2000 );
	        return 1;
	    }
	    if( !response )
	    {
	        useMascara[ playerid ] = -1, useTipo[ playerid ] = 0;
	        RemovePlayerAttachedObject( playerid, 2 );
	        SetarItensPlayer( playerid );
	        return 1;
	    }
	}
	if( dialogid == D_ITEN3 )
	{
	    if( response )
	    {
	        if( GetPlayerCash( playerid ) < 1500 )
	        {
	            SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem $1500 para comprar essa bandana !" );
	            return 1;
	        }
	        format( gStr, sizeof( gStr ), "[ > ] Você adquiriu à bandana ID %d, Use: /usarBandana %d", useBandana[ playerid ], useBandana[ playerid ] );
	        SendClientMessage( playerid, -1, gStr );
	        new
				aBandana[ 24 ]
			;
			format( aBandana, sizeof( aBandana ), "Bandana%d", useBandana[ playerid ] );
	        dini_IntSet( f( playerid ), aBandana, 1 );
	        useBandana[ playerid ] = -1, useTipo[ playerid ] = 0;
	        RemovePlayerAttachedObject( playerid, 3 );
	        SetarItensPlayer( playerid );
	        sGivePlayerCash( playerid, -1500 );
	        return 1;
	    }
	    if( !response )
	    {
	        useBandana[ playerid ] = -1, useTipo[ playerid ] = 0;
	        RemovePlayerAttachedObject( playerid, 3 );
	        SetarItensPlayer( playerid );
	        return 1;
	    }
	}
	if( dialogid == D_ITEN4 )
	{
	    if( response )
	    {
	        if( GetPlayerCash( playerid ) < 500 )
	        {
	            SendClientMessage( playerid, 0xFF0000AA, "[ x ] Você não tem $500 para comprar esse chapéu !" );
	            return 1;
	        }
	        format( gStr, sizeof( gStr ), "[ > ] Você adquiriu o chapéu ID %d, Use: /usarChapeu %d", useChapeu[ playerid ], useChapeu[ playerid ] );
	        SendClientMessage( playerid, -1, gStr );
	        new
				oChapeu[ 24 ]
			;
			format( oChapeu, sizeof( oChapeu ), "Chapeu%d", useChapeu[ playerid ] );
	        dini_IntSet( f( playerid ), oChapeu, 1 );
	        useChapeu[ playerid ] = -1, useTipo[ playerid ] = 0;
	        RemovePlayerAttachedObject( playerid, 4 );
	        SetarItensPlayer( playerid );
	        sGivePlayerCash( playerid, -500 );
	        return 1;
	    }
	    if( !response )
	    {
	        useChapeu[ playerid ] = -1, useTipo[ playerid ] = 0;
	        RemovePlayerAttachedObject( playerid, 4 );
	        SetarItensPlayer( playerid );
	        return 1;
	    }
	}
	if( dialogid == 1448 )
	{
		if( !response )
		{
			new
		        stg[ 1500 ]
			;
			format( gstring, sizeof( gstring ), "\t\t{5FFF00}[ Regras Gerais - [RPG] Brasil Play Online ] Página 2" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n•{FFE583} Não peça nada para moderadores e Administradores, tais como: Para o Administradores e" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\nmoderadores ficarem te teleportando ( o servidor é RPG e isso é anti-rpg ), level, dinheiro," );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\ncasa, empresa, utilitários e qualquer outra coisa que se ganha conquistando e não ganhando;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• É proibido ter outras contas ( contas fakes ). Outros jogadores podem sim jogar em seu computador ou" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\nno mesmo local que o seu assim ambos tendo o mesmo IP, porém não faça nenhum tipo de transfêrencias ou" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\nalgo parecido de conta para conta porque será considerado fake e causará ban em todas as contas;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFE583}• Ao ser banido do servidor, nunca troque o IP e volte sem ser desbanido com outros nicks e" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\ncontas pedindo para ser desbanido ( ou para jogar mesmo ) porque isso só irá piorar a situação e" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\npoderá causar um ban permanentemente. Para isso existe o tópico de revisão de banidos no nosso fórum;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Nunca passe a senha de sua conta no servidor ou no fórum para ninguém, pois o responsável pela sua conta é" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\nvocê e se essa pessoa sair das regras na sua conta do servidor ou na sua conta do fórum, tomará punição ou" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\nban e depoisnão irá adiantar ir ao nosso fórum e falar que não era você que estava jogando ou no fórum;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFE583}• Jogadores VIPS não tem nenhuma vantagem em relação as regras pois as regras são as mesmas para todos." );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n\n{FF7400}» Para saber mais acesse o nosso Discord: Malboro#5173 «" );
			strcat( stg, gstring );
			ShowPlayerDialog( playerid, 1449, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Regras Gerais - [RPG] Brasil Play Online «", stg, "OK", "Voltar" );
		}
		return 1;
	}
	if( dialogid == 1449 )
	{
		if( !response )
		{
			new
		        stg[ 1500 ]
			;
			format( gstring, sizeof( gstring ), "\t\t{5FFF00}[ Regras Gerais - [RPG] Brasil Play Online ]" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não cometa Death-Match/DM ( atirar ou matar ) dentro de interiores e em locais" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\npúblicos, tais como: Agências de empregos, bancos, prefeituras, lojas de utilitários, etc;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFE583}• Não cometa Drive-By/DB ( para quem não sabe, DB ( Drive-By ) é atirar de dentro de" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\num veículo contra a skin do jogador(a), atropelar ou atirar de jetpack;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• É extremamente proibido qualquer tipo de preconceito, tais como: Racismo, opção sexual ou qualquer outro tipo de preconceito;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFE583}• Não desrespeite o próximo, respeite para ser respeitado;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não peça para ser moderador ou Administrador pois não é pedindo que se ganha, é merecendo. E também não pergunte o que tem que" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\nfazer para virar um, isso é ser falso para conseguir o que quer. Tem que ser você mesmo e se o seu caráter, sua honestidade e" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\na sua vontade de ajudar o servidor no que puder merecer, você vira;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFE583}• É extremamente proibido o uso de cheaters ou qualquer modificação que faça com que você tenha vantagem sobre os outros jogadores;" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não acuse um jogador de ter feito algo fora das regras, de cheat ou algo parecido no chat, para isso existe o /Reportar [ ID do jogador(a) ] [ Motivo ] ou" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "\no tópico de denúncias no nosso fórum ( precisa ter provas ( prints ou vídeos ));" );
			strcat( stg, gstring );
			ShowPlayerDialog( playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Regras Gerais - [RPG] Brasil Play Online «", stg, "OK", "Avançar" );
			return 1;
		}
	}
	new
		vStr[ 128 ], CasaID = dini_Int( gFile, "Casa" )
	;
    format( vStr, sizeof( vStr ), "CarrosTunados/vCasa%d.ini", CasaID );

	if( dialogid == DIALOGID ) if( response )
	{
	    for( new i = 0; i <= ccount[ playerid ]; i++ )
	    {
			if( listitem == i )
			{
			    if( GetPlayerMoney( playerid ) < 100 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro para colocar nenhuma peça em seu veículo !" );
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Cada peça de tuning custa $1000 !" );
			        return 1;
			    }
				if( IsVehicleUpgradeCompatible( GetVehicleModel( GetPlayerVehicleID( playerid )), componentsid[ playerid ][ i ] ))
				{
					new
					  	string[ 128 ]
			  		;
					if( fexist( vStr ))
					{
						if( eNitro( componentsid[ playerid ][ i ] ))
						{
						    if( dini_Int( vStr, "Nitro" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Nitro", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Nitro ] = componentsid[ playerid ][ i ];
							}
						}
						if( eRoda( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Roda" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Roda", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Roda ] = componentsid[ playerid ][ i ];
							}
						}
						if( eSpoiler( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Spoiler" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Spoiler", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Spoiler ] = componentsid[ playerid ][ i ];
							}
						}
     					if( eHydraulico( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Hydraulico" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Hydraulico", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Hydraulico ] = componentsid[ playerid ][ i ];
							}
						}
						if( eParachoqueDianteiro( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "ParachoqueDianteiro" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "ParachoqueDianteiro", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_ParachoqueDianteiro ] = componentsid[ playerid ][ i ];
							}
						}
						if( eParachoqueTraseiro( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "ParachoqueTraseiro" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "ParachoqueTraseiro", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_ParachoqueTraseiro ] = componentsid[ playerid ][ i ];
							}
						}
      					if( eEscapamento( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Escapamento" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Escapamento", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Escapamento ] = componentsid[ playerid ][ i ];
							}
						}
						if( eBventr( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Bventr" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Bventr", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Bventr ] = componentsid[ playerid ][ i ];
							}
						}
						if( eBventl( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Bventl" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Bventl", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Bventl ] = componentsid[ playerid ][ i ];
							}
						}
						if( eBscoop( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Bscoop" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Bscoop", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Bscoop ] = componentsid[ playerid ][ i ];
							}
						}
						if( eRscoop( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Rscoop" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Rscoop", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Rscoop ] = componentsid[ playerid ][ i ];
							}
						}
						if( eLskirt( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Lskirt" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Lskirt", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Lskirt ] = componentsid[ playerid ][ i ];
							}
						}
						if( eRskirt( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Rskirt" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Rskirt", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Rskirt ] = componentsid[ playerid ][ i ];
							}
						}
						if( eBase( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Base" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Base", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Base ] = componentsid[ playerid ][ i ];
							}
						}
						if( eRbbars( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Rbbars" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Rbbars", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Rbbars ] = componentsid[ playerid ][ i ];
							}
						}
						if( eFbbars( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Fbbars" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Fbbars", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Fbbars ] = componentsid[ playerid ][ i ];
							}
						}
						if( eLights( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Lights" ) == componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo já possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/tunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Lights", componentsid[ playerid ][ i ] );
								cInfo[ CasaID ][ t_Lights ] = componentsid[ playerid ][ i ];
							}
						}
					}
					AddVehicleComponent( GetPlayerVehicleID( playerid ), componentsid[ playerid ][ i ] );
	  				format( string, sizeof( string ), "[ > ] Tuning %s adicionado no seu veículo.", GetComponentName( componentsid[ playerid ][ i ] ));
					SendClientMessage( playerid, COLOR_AMARELO, string );
					if( pInfo[ playerid ] [ PLAYER_VIP ] == 0 )
					{
						sGivePlayerCash( playerid, -1000 );
					}
					return OnPlayerCommandText( playerid, "/tunarveiculo" );
				}
				else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse componente não é compatível com esse modelo de veículo !" );
			}
		}
	}
	if( dialogid == DIALOGID+1 ) if( response )
	{
	    for( new i = 0; i <= ccount[ playerid ]; i++ )
	    {
			if( listitem == i )
			{
			    if( GetPlayerMoney( playerid ) < 100 && aInfo[ playerid ][ Dono ] == 0 && aInfo[ playerid ][ Admin ] == 0 && aInfo[ playerid ][ Moderador ] == 0 && pInfo[ playerid ][ PLAYER_VIP ] == 0 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro para remover nenhuma peça em seu veículo !" );
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Cada peça removida de tuning custa $500 !" );
			        return 1;
			    }
				if( IsVehicleUpgradeCompatible( GetVehicleModel( GetPlayerVehicleID( playerid )), componentsid[ playerid ][ i ] )) //just a verification
				{
					new
					  	string[ 128 ]
			  		;
					if( fexist( vStr ))
					{
						if( eNitro( componentsid[ playerid ][ i ] ))
						{
						    if( dini_Int( vStr, "Nitro" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Nitro", -1 );
								cInfo[ CasaID ][ t_Nitro ] = -1;
							}
						}
						if( eRoda( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Roda" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Roda", -1 );
								cInfo[ CasaID ][ t_Roda ] = -1;
							}
						}
						if( eSpoiler( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Spoiler" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Spoiler", -1 );
								cInfo[ CasaID ][ t_Spoiler ] = -1;
							}
						}
     					if( eHydraulico( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Hydraulico" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Hydraulico", -1 );
								cInfo[ CasaID ][ t_Hydraulico ] = -1;
							}
						}
						if( eParachoqueDianteiro( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "ParachoqueDianteiro" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "ParachoqueDianteiro", -1 );
								cInfo[ CasaID ][ t_ParachoqueDianteiro ] = -1;
							}
						}
						if( eParachoqueTraseiro( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "ParachoqueTraseiro" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "ParachoqueTraseiro", -1 );
								cInfo[ CasaID ][ t_ParachoqueTraseiro ] = -1;
							}
						}
      					if( eEscapamento( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Escapamento" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Escapamento", -1 );
								cInfo[ CasaID ][ t_Escapamento ] = -1;
							}
						}
						if( eBventr( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Bventr" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Bventr", -1 );
								cInfo[ CasaID ][ t_Bventr ] = -1;
							}
						}
						if( eBventl( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Bventl" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Bventl", -1 );
								cInfo[ CasaID ][ t_Bventl ] = -1;
							}
						}
						if( eBscoop( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Bscoop" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Bscoop", -1 );
								cInfo[ CasaID ][ t_Bscoop ] = -1;
							}
						}
						if( eRscoop( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Rscoop" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Rscoop", -1 );
								cInfo[ CasaID ][ t_Rscoop ] = -1;
							}
						}
						if( eLskirt( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Lskirt" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Lskirt", -1 );
								cInfo[ CasaID ][ t_Lskirt ] = -1;
							}
						}
						if( eRskirt( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Rskirt" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Rskirt", -1 );
								cInfo[ CasaID ][ t_Rskirt ] = -1;
							}
						}
						if( eBase( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Base" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Base", -1 );
								cInfo[ CasaID ][ t_Base ] = -1;
							}
						}
						if( eRbbars( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Rbbars" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Rbbars", -1 );
								cInfo[ CasaID ][ t_Rbbars ] = -1;
							}
						}
						if( eFbbars( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Fbbars" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Fbbars", -1 );
								cInfo[ CasaID ][ t_Fbbars ] = -1;
							}
						}
						if( eLights( componentsid[ playerid ][ i ] ))
						{
							if( dini_Int( vStr, "Lights" ) != componentsid[ playerid ][ i ] )
						    {
						        format( string, sizeof( string ), "[ x ] Seu veículo não possui %s !", GetComponentName( componentsid[ playerid ][ i ] ));
						        SendClientMessage( playerid, COLOR_ERRO, string );
						      	return OnPlayerCommandText( playerid, "/destunarveiculo" );
						    }
						    else
							{
								dini_IntSet( vStr, "Lights", -1 );
								cInfo[ CasaID ][ t_Lights ] = -1;
							}
						}
					}
					RemoveVehicleComponent( GetPlayerVehicleID( playerid ), componentsid[ playerid ][ i ] );
	  				format( string, sizeof( string ), "[ > ] Tuning %s removido.", GetComponentName( componentsid[ playerid ][ i ] ));
					SendClientMessage( playerid, COLOR_AMARELO, string );
					if( pInfo[ playerid ] [ PLAYER_VIP ] == 0 )
					{
						sGivePlayerCash( playerid, -500 );
					}
					return OnPlayerCommandText( playerid, "/destunarveiculo" );
				}
				else SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse componente não é compatível com esse modelo de veículo !" );
			}
		}
 	}
 	if( dialogid == D_GASOL )
	{
		if( response )
		{
			if( listitem == 0 )
			{
			    if( GetPlayerCash( playerid ) < 150 )
			    {
			        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não tem dinheiro o suficiente !" );
			        return 1;
			    }
			    if( pInfo[ playerid ][ Gas ] >= 100 )
				{
				    SendClientMessage( playerid, COLOR_AZULCLARO, "[ x ] Seu tanque já está completo !" );
					return 1;
				}
				SendClientMessage( playerid, COLOR_ROXOCLARO, "[ > ] Tanque de combustivel completo." );
				sGivePlayerCash( playerid, -150 );
				pInfo[ playerid ][ Gas ] = 100;
			}
		}
	}
	if( dialogid == 7954 )
	{
		if( response ) // Links das Web Rádios /radios
		{
			if( listitem == 0 ) // Jovem Pan
			{
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sintonizando rádio..." );
			    StopAudioStreamForPlayer( playerid );
				PlayAudioStreamForPlayer( playerid, "https://19293.live.streamtheworld.com/JP_SP_FM_SC" );
				return 1;
	        }
	        if( listitem == 1 ) // Jovem Pan Pagode
			{
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sintonizando rádio..." );
			    StopAudioStreamForPlayer( playerid );
				PlayAudioStreamForPlayer( playerid, "https://sc1s.cdn.upx.com:9061/stream" );
				return 1;
			}
	        if( listitem == 2 ) // Hunter - Piseiro
			{
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sintonizando rádio..." );
			    StopAudioStreamForPlayer( playerid );
				PlayAudioStreamForPlayer( playerid, "https://live.hunter.fm/pisadinha_high" );
				return 1;
			}
	        if( listitem == 3 ) // Hunter - Sertanejo
			{
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sintonizando rádio..." );
			    StopAudioStreamForPlayer( playerid );
				PlayAudioStreamForPlayer( playerid, "http://live.hunter.fm/sertanejo_high" );
				return 1;
			}
            if( listitem == 4 ) // Hunter - Rock
			{
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sintonizando rádio..." );
			    StopAudioStreamForPlayer( playerid );
				PlayAudioStreamForPlayer( playerid, "https://live.hunter.fm/rock_high" );
				return 1;
			}
	        if( listitem == 5 ) // Funk - Mandela
			{
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sintonizando rádio..." );
			    StopAudioStreamForPlayer( playerid );
				PlayAudioStreamForPlayer( playerid, "https://bit.ly/3vjJyOj" );
				return 1;
			}
            if( listitem == 6 ) // Desligar o Rádio
			{
            SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você desligou o seu rádio." );
            StopAudioStreamForPlayer( playerid );
			return 1;
			}
		}
	}
	//
	if( dialogid == D_DMEVENT )
    {
        if( response )
        {
	        if( listitem == 0 ) // Arena
	        {
	        	if( esDM[ evdmArenaIDDF ] == 1 )
	            {
	                format( gStr, 128, "{FFFFFF}Arena já definida {FF8115}Arena ID %d", esDM[ evdmArenaID ] );
					ShowPlayerDialog( playerid, D_DMEVENT+16, DIALOG_STYLE_MSGBOX, "Arena Definida", gStr, "OK", "Redefinir" );
	                return 0;
	            }
	            ShowPlayerDialog( playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Definir", "Voltar" );
			}
	        if( listitem == 1 ) // Arma ID
	        {
	            if( esDM[ evdmArmaPKDF ] == 1 )
	            {
	                format( gStr, 128, "{FF0000}O Pack de armas{FFFFFF}ID %d{FF0000} está definido!\nDeseja redefinir para armas por ID?", esDM[ evdmArmaPK ] );
					ShowPlayerDialog( playerid, D_DMEVENT+19, DIALOG_STYLE_MSGBOX, "Armas Definida", gStr, "Redefinir", "Voltar" );
	                return 0;
	            }
	            ShowPlayerDialog( playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar" );
			}
	        if( listitem == 2 ) // Arma Pack
	        {
	            if( esDM[ evdmArmaIDDF ][ 0 ] == 1 && esDM[ evdmArmaIDDF ][ 1 ] == 1 && esDM[ evdmArmaIDDF ][ 2 ] == 1 )
	            {
					ShowPlayerDialog( playerid, D_DMEVENT+20, DIALOG_STYLE_MSGBOX, "Armas Definida", "{FF0000}Já está definido para o evento armas por ID!\nDeseja redefinir para armas por Pack?", "Redefinir", "Voltar" );
	                return 0;
	            }
		        format( s5Doze, 512, "Pack 1 (M4/Sniper/Uzzie/Sawnoff/Taco basebal)\nPack 2 (Tec/Sawnoff/Eagle/Faca/AK-47)\nPack 3 (Ak47/Cassetete/9mm/MP5)\nPack 4 (Extinto/Pá/9mm com S)\nPack 5 (Minigun/Extintor/Satchel Charge/Detonator)" );
				ShowPlayerDialog( playerid, D_DMEVENT+18, DIALOG_STYLE_LIST, "Definir Armas Pack", s5Doze, "Definir", "Voltar" );
			}
			if( listitem == 3 ) // Tempo
	        {
	        	ShowPlayerDialog( playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", "{FFFFFF}Digite abaixo o tempo do evento:", "Definir", "Voltar" );
	        }
	        if( listitem == 4 ) // Colete
	        {
	            if( esDM[ evdmColeteDF ] != 0 && esDM[ evdmColeteDF ] == 1 || esDM[ evdmColeteDF ] == 2 )
	            {
	                new
						colName[ 24 ]
					;
					if( esDM[ evdmColeteDF ] == 1 )
					{
					    colName = "{48FF00}com";
					}
					else if( esDM[ evdmColeteDF ]  == 2 )
					{
					    colName = "{FF0000}sem";
					}
	                format( gStr, 128, "{FFFFFF}Evento definido %s {FFFFFF}colete.", colName );
	                ShowPlayerDialog( playerid, D_DMEVENT+13, DIALOG_STYLE_MSGBOX, "Definir Colete", gStr, "OK", "Redefinir" );
	                return 0;
	            }
	        	ShowPlayerDialog( playerid, D_DMEVENT+12, DIALOG_STYLE_LIST, "Definir Colete", "\nCom colete\nSem colete", "Definir", "Voltar" );
			}
	        if( listitem == 5 ) // Prêmio
	        {
	        	ShowPlayerDialog( playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", "Digite abaixo o prêmio do evento:", "Definir", "Voltar" );
	        }
	        if( listitem == 6 ) // Top
			{
			    if( esDM[ evdmTopDF ] == 1 )
			    {
			        format( gStr, 128, "{FFFFFF}Top já definido para top {00FF00}%d\n{FFFFFF}Deseja redefinir?", esDM[ evdmTop ] );
			        ShowPlayerDialog( playerid, D_DMEVENT+24, DIALOG_STYLE_MSGBOX, "Top Definido", gStr, "OK", "Redefinir" );
			        return 0;
	        	}
	        	ShowPlayerDialog( playerid, D_DMEVENT+23, DIALOG_STYLE_LIST, "Definir Top", "Top 1\nTop 2\nTop 3\nTop 4\nTop 5\nTop 6\nTop 7\nTop 8\nTop 9\nTop 10", "Definir", "Voltar" );
	        }
	        if( listitem == 7 ) // Carregar
	        {
	            if( esDM[ evdmCarregado ] == 1 )
	            {
	                SendClientMessage( playerid, COLOR_ERRO, "[ x ] O evento 'atual', já está carregado !" );
     				ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
	                return 1;
	            }
	            evDMcarregar( playerid );
	        }
	        if( listitem == 8 ) // Liberar
	        {
   				if( esDM[ evdmCarregado ] == 0 )
	            {
	                SendClientMessage( playerid, COLOR_ERRO, "[ x ] O evento 'atual', não está carregado !" );
	                SendClientMessage( playerid, COLOR_ERRO, "[ x ] Para libera-lo, você precisa carrega-lo !" );
	                ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
	                return 1;
	            }
	            SendClientMessage( playerid, COLOR_AMARELO, "[ > ] O evento 'atual', agora está liberado para os(as) jogadores participar." );
	            esDM[ evdmAnt_B ] = 1;
	            esDM[ evdmLiberado ] = 1;
	            SetTimer( "evdmGodPlayers", 1000, false );
	        }
	        if( listitem == 9 ) // Iniciar
	        {
	            if( esDM[ evdmLiberado ] == 0 )
	            {
	                SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você só pode iniciar o evento após libera-lo!" );
	                ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
	                return 1;
				}
				if( esDM[ evdmCarregado ] == 0 )
    			{
	    			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa carregar o evento, para poder iniciar a contagem !" );
	    			return 1;
				}
	        	ShowPlayerDialog( playerid, D_DMEVENT+21, DIALOG_STYLE_INPUT, "Definir Contagem Inicio", "{FFFFFF}Digite abaixo o tempo de contagem para iniciar o evento:", "Definir", "Voltar" );
	        }
	        if( listitem == 10 ) // Resetar
	        {
	            SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Evento de DM resetado." );
	            evDMreset( );
	        }
        }
    }
    if( dialogid == D_DMEVENT+1 )
    {
        if( response )
		{
			if( listitem == 0 ) // Arena 1
	        {
				ShowPlayerDialog( playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 1", "OK", "Redefinir" );
	            esDM[ evdmArenaID ] = 1;
				esDM[ evdmArenaIDDF ] = 1;
			}
	        if( listitem == 1 ) // Arena 2
	        {
				ShowPlayerDialog( playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 2", "OK", "Redefinir" );
	            esDM[ evdmArenaID ] = 2;
				esDM[ evdmArenaIDDF ] = 1;
			}
	        if( listitem == 2 ) // Arena 3
	        {
				ShowPlayerDialog( playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 3", "OK", "Redefinir" );
	            esDM[ evdmArenaID ] = 3;
				esDM[ evdmArenaIDDF ] = 1;
			}
	        if( listitem == 3 ) // Arena 4
	        {
				ShowPlayerDialog( playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 4", "OK", "Redefinir" );
	            esDM[ evdmArenaID ] = 4;
				esDM[ evdmArenaIDDF ] = 1;
			}
	        if( listitem == 4 ) // Arena 5
	        {
    			ShowPlayerDialog( playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 5", "OK", "Redefinir" );
	            esDM[ evdmArenaID ] = 5;
				esDM[ evdmArenaIDDF ] = 1;
			}
	        if( listitem == 5 ) // Local Atual
	        {
	            new
					Float:dm_x, Float:dm_y, Float:dm_z
				;
				GetPlayerPos( playerid, dm_x, dm_y, dm_z );
				dmePos[ 0 ] = dm_x;
				dmePos[ 1 ] = dm_y;
				dmePos[ 2 ] = dm_z;
	            esDM[ evdmArenaID ] = 6;
				esDM[ evdmArenaIDDF ] = 1;
				ShowPlayerDialog( playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}Local Atual", "OK", "Redefinir" );
			}
			if( listitem == 6 ) // Redefinir Arena
	    	{
	        	if( esDM[ evdmArenaIDDF ] == 1 )
	            {
	                format( gStr, 128, "{FFFFFF}Arena já definida {FF8115}Arena ID %d", esDM[ evdmArenaID ] );
					ShowPlayerDialog( playerid, D_DMEVENT+16, DIALOG_STYLE_MSGBOX, "Arena Definida", gStr, "OK", "Redefinir" );
	                return 0;
	            }
	            ShowPlayerDialog( playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Definir", "Voltar" );
			}
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
    }
    if( dialogid == D_DMEVENT+2 )
    {
        if( response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
        }
        if( !response )
        {
            esDM[ evdmArenaID ] = 0;
			esDM[ evdmArenaIDDF ] = 0;
            ShowPlayerDialog( playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Escolher", "Voltar" );
		}
    }
    if( dialogid == D_DMEVENT+3 )
    {
  		if( response )
		{
			if( listitem == 0 ) // Arma 1
	        {
	            if( esDM[ evdmArmaIDDF ][ 0 ] == 1 )
			    {
			    	format( gStr, 128, "{FF0000}Arma 1 já está definida para arma {FF2F00}%s", GetWeaponNameByID( esDM[ evdmArmaID ][ 0 ] ));
					ShowPlayerDialog( playerid, D_DMEVENT+7, DIALOG_STYLE_MSGBOX, "Arma 1 já definida", gStr, "OK", "Redefinir" );
			        return 0;
			    }
    			ShowPlayerDialog( playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar" );
	        }
	        if( listitem == 1 ) // Arma 2
	        {
	            if( esDM[ evdmArmaIDDF ][ 1 ] == 1 )
			    {
			    	format( gStr, 128, "{FF0000}Arma 2 já está definida para arma {FF2F00}%s", GetWeaponNameByID( esDM[ evdmArmaID ][ 1 ] ));
					ShowPlayerDialog( playerid, D_DMEVENT+8, DIALOG_STYLE_MSGBOX, "Arma 2 já definida", gStr, "OK", "Redefinir" );
			        return 0;
			    }
				ShowPlayerDialog( playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar" );
	        }
	        if( listitem == 2 ) // Arma 3
	        {
	            if( esDM[ evdmArmaIDDF ][ 2 ] == 1 )
			    {
			    	format( gStr, 128, "{FF0000}Arma 3 já está definida para arma {FF2F00}%s", GetWeaponNameByID( esDM[ evdmArmaID ][ 2 ] ));
					ShowPlayerDialog( playerid, D_DMEVENT+9, DIALOG_STYLE_MSGBOX, "Arma 3 já definida", gStr, "OK", "Redefinir" );
			        return 0;
			    }
				ShowPlayerDialog( playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar" );
	        }
		}
		if( !response )
		{
  			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
    }
    if( dialogid == D_DMEVENT+4 )
    {
        if( response )
        {
        	if( !strlen( inputtext ))
        	{
				ShowPlayerDialog( playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FF0000}Digite um ID!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar" );
				return 0;
			}
            new
				esArmaID = strval( inputtext )
			;
			if( !IsValidWeaponID( esArmaID ))
      		{
				ShowPlayerDialog( playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FF0000}Digite um ID de arma válido!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar" );
				return 0;
			}
			format( gStr, 128, "{FFFFFF}Arma 1 definida para arma {FF2F00}%s", GetWeaponNameByID( esArmaID ));
			ShowPlayerDialog( playerid, D_DMEVENT+7, DIALOG_STYLE_MSGBOX, "Arma 1 definida", gStr, "OK", "Redefinir" );
	    	esDM[ evdmArmaID ][ 0 ] = esArmaID;
			esDM[ evdmArmaIDDF ][ 0 ] = 1;
		}
        if( !response )
		{
  			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
    }
    if( dialogid == D_DMEVENT+5 )
    {
        if( response )
        {
        	if( !strlen( inputtext ))
        	{
				ShowPlayerDialog( playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FF0000}Digite um ID!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar" );
				return 0;
			}
            new
				esArmaID = strval( inputtext )
			;
			if( !IsValidWeaponID( esArmaID ))
      		{
				ShowPlayerDialog( playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FF0000}Digite um ID de arma válido!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar" );
				return 0;
			}
			format( gStr, 128, "{FFFFFF}Arma 2 definida para arma {FF2F00}%s", GetWeaponNameByID( esArmaID ));
			ShowPlayerDialog( playerid, D_DMEVENT+8, DIALOG_STYLE_MSGBOX, "Arma 2 definida", gStr, "OK", "Redefinir" );
	    	esDM[ evdmArmaID ][ 1 ] = esArmaID;
			esDM[ evdmArmaIDDF ][ 1 ] = 1;
		}
        if( !response )
		{
   			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
    }
    if( dialogid == D_DMEVENT+6 )
    {
        if( response )
        {
        	if( !strlen( inputtext ))
        	{
				ShowPlayerDialog( playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FF0000}Digite um ID!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar" );
				return 0;
			}
            new
				esArmaID = strval( inputtext )
			;
			if( !IsValidWeaponID( esArmaID ))
      		{
				ShowPlayerDialog( playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FF0000}Digite um ID de arma válido!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar" );
				return 0;
			}
			format( gStr, 128, "{FFFFFF}Arma 3 definida para arma {FF2F00}%s", GetWeaponNameByID( esArmaID ));
			ShowPlayerDialog( playerid, D_DMEVENT+9, DIALOG_STYLE_MSGBOX, "Arma 3 definida", gStr, "OK", "Redefinir" );
	    	esDM[ evdmArmaID ][ 2 ] = esArmaID;
			esDM[ evdmArmaIDDF ][ 2 ] = 1;
		}
        if( !response )
		{
   			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
    }
    if( dialogid == D_DMEVENT+7 )
    {
        if( response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar" );
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar" );
		}
    }
    if( dialogid == D_DMEVENT+8 )
    {
        if( response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar" );
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar" );
		}
    }
    if( dialogid == D_DMEVENT+9 )
    {
        if( response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar" );
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar" );
		}
    }
    if( dialogid == D_DMEVENT+10 ) // DEF_TEMPO
    {
        if( response )
        {
        	if( !strlen( inputtext ))
        	{
				ShowPlayerDialog( playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", "{FF0000}Digite um tempo!\n{FFFFFF}Digite abaixo o tempo do evento:", "Definir", "Voltar" );
				return 0;
			}
            new
				esTempo = strval( inputtext )
			;
			if( esTempo < EVENT_MINTEM || esTempo > EVENT_MAXTEM )
      		{
      		    format( gStr, 128, "{FF0000}Digite um tempo válido! (Min: %d / Máx: %d)\n{FFFFFF}Digite abaixo o tempo do evento:", EVENT_MINTEM, EVENT_MAXTEM );
      		    ShowPlayerDialog( playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", gStr, "Definir", "Voltar" );
				return 0;
			}
			format( gStr, 128, "{FFFFFF}Tempo do evento definido para {12E2FF}%d minutos{FFFFFF}.", esTempo );
			ShowPlayerDialog( playerid, D_DMEVENT+11, DIALOG_STYLE_MSGBOX, "Tempo Definido", gStr, "OK", "Redefinir" );
	    	esDM[ evdmTempo ] = esTempo*EVENT_MINUT;
	    	esDM[ evdmTempoAM ] = esTempo;
			esDM[ evdmTempoDF ] = 1;
		}
        if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
    }
	if( dialogid == D_DMEVENT+11 )
    {

        if( response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
        if( !response )
        {
        	ShowPlayerDialog( playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", "{FF0000}Digite um tempo!\n{FFFFFF}Digite abaixo o tempo do evento:", "Definir", "Voltar" );
		}
    }
	if( dialogid == D_DMEVENT+13 )
    {
        if( response )
		{
        	ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
        if( !response )
        {
        	ShowPlayerDialog( playerid, D_DMEVENT+12, DIALOG_STYLE_LIST, "Definir Colete", "\nCom colete\nSem colete", "Escolher", "Voltar" );
		}
    }
    if( dialogid == D_DMEVENT+12 )
    {
        if( response )
		{
		    if( listitem == 0 )
		    {
		     	ShowPlayerDialog( playerid, D_DMEVENT+13, DIALOG_STYLE_MSGBOX, "Colete Definido", "{FFFFFF}Evento definido {48FF00}com {FFFFFF}colete.", "OK", "Redefinir" );
                esDM[ evdmColete ] = 1;
				esDM[ evdmColeteDF ] = 1;
	       	}
	       	if( listitem == 1 )
		    {
		     	ShowPlayerDialog( playerid, D_DMEVENT+13, DIALOG_STYLE_MSGBOX, "Colete Definido", "{FFFFFF}Evento definido {FF0000}sem {FFFFFF}colete.", "OK", "Redefinir" );
                esDM[ evdmColete ] = 1;
				esDM[ evdmColeteDF ] = 2;
	       	}
		}
        if( !response )
        {
        	ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
	}
	if( dialogid == D_DMEVENT+14 )
    {
        if( response )
        {
            if( esDM[ evdmPremioDF ] == 1 )
            {
                format( gStr, 128, "{FFFFFF}Prêmio já definido para {48FF00}$%d", esDM[ evdmPremio ] );
				ShowPlayerDialog( playerid, D_DMEVENT+15, DIALOG_STYLE_MSGBOX, "Prêmio Definido", gStr, "OK", "Redefinir" );
                return 0;
            }
        	if( !strlen( inputtext ))
        	{
				ShowPlayerDialog( playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", "{FF0000}Digite um valor!\n{FFFFFF}Digite abaixo o valor do prêmio:", "Definir", "Voltar" );
				return 0;
			}
            new
				esPremio = strval( inputtext )
			;
			if( esPremio < EVENT_MINPRE || esPremio > EVENT_MAXPRE )
      		{
      		    format( gStr, 128, "{FF0000}Digite um valor entre %d a %d!\n{FFFFFF}Digite abaixo o valor do prêmio:", EVENT_MINPRE, EVENT_MAXPRE );
				ShowPlayerDialog( playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", gStr, "Definir", "Voltar" );
				return 0;
			}
			format( gStr, 128, "{FFFFFF}Prêmio definido para {48FF00}$%d", esPremio );
			ShowPlayerDialog( playerid, D_DMEVENT+15, DIALOG_STYLE_MSGBOX, "Prêmio Definido", gStr, "OK", "Redefinir" );
			esDM[ evdmPremio ] = esPremio;
			esDM[ evdmPremioDF ] = 1;
		}
        if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
    }
	if( dialogid == D_DMEVENT+15 )
    {
        if( response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
		if( !response )
        {
        	ShowPlayerDialog( playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", "Digite abaixo o prêmio do evento:", "Definir", "Voltar" );
	 	}
	}
	if( dialogid == D_DMEVENT+16 )
    {
        if( response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
		if( !response )
        {
        	ShowPlayerDialog( playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Definir", "Voltar" );
		}
	}
	if( dialogid == D_DMEVENT+17 )
    {
        if( response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
		if( !response )
        {
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar" );
		}
	}
	if( dialogid == D_DMEVENT+18 )
	{
	    if( response )
		{
		    if( listitem == 0 ) // Pack Armas 1
		    {
                esDM[ evdmArmaPK ] = 1;
				esDM[ evdmArmaPKDF ] = 1;
		    }
		    if( listitem == 1 ) // Pack Armas 2
		    {
                esDM[ evdmArmaPK ] = 2;
				esDM[ evdmArmaPKDF ] = 1;
		    }
		    if( listitem == 2 ) // Pack Armas 3
		    {
                esDM[ evdmArmaPK ] = 3;
				esDM[ evdmArmaPKDF ] = 1;
		    }
		    if( listitem == 3 ) // Pack Armas 4
		    {
                esDM[ evdmArmaPK ] = 4;
				esDM[ evdmArmaPKDF ] = 1;
		    }
		    if( listitem == 4 ) // Pack Armas 5
		    {
                esDM[ evdmArmaPK ] = 5;
				esDM[ evdmArmaPKDF ] = 1;
		    }
		    ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
	    }
	    if( !response )
	    {
	    	ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
	    }
	}
	if( dialogid == D_DMEVENT+19 )
	{
	    if( response )
	    {
	     	esDM[ evdmArmaPK ] = 0;
			esDM[ evdmArmaPKDF ] = 0;
			ShowPlayerDialog( playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar" );
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
		}
	}
	if( dialogid == D_DMEVENT+20 )
	{
	    if( response )
	    {
			for( new i; i < 3; ++i )
			{
				esDM[ evdmArmaID ][ i ] = 0;
				esDM[ evdmArmaIDDF ][ i ] = 0;
			}
			format( s5Doze, 512, "Pack 1 (M4/Sniper/Uzzie/Sawnoff/Taco basebal)\nPack 2 (Tec/Sawnoff/Eagle/Faca/AK-47)\nPack 3 (Ak47/Cassetete/9mm/MP5)\nPack 4 (Extinto/Pá/9mm com S)\nPack 5 (Minigun/Extintor/Satchel Charge/Detonator)" );
			ShowPlayerDialog( playerid, D_DMEVENT+18, DIALOG_STYLE_LIST, "Definir Armas Pack", s5Doze, "Definir", "Voltar" );
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
		}
	}
	if( dialogid == D_DMEVENT+21 )
	{
        if( response )
        {
        	if( !strlen( inputtext ))
        	{
				ShowPlayerDialog( playerid, D_DMEVENT+21, DIALOG_STYLE_INPUT, "Tempo Contagem", "{FF0000}Digite um tempo!\n{FFFFFF}Digite abaixo o tempo de contagem:", "Contar", "Voltar" );
				return 0;
			}
            new
				esTempo = strval( inputtext )
			;
			if( esTempo < 5 || esTempo > 60 )
      		{
      		    format( gStr, 128, "{FF0000}Digite um tempo válido! (Min: %d / Máx: %d)\n{FFFFFF}Digite abaixo o tempo de contagem:", EVENT_MINTEC, EVENT_MAXTEC );
      		    ShowPlayerDialog( playerid, D_DMEVENT+21, DIALOG_STYLE_INPUT, "Tempo Contagem", gStr, "Contar", "Voltar" );
				return 0;
			}
			esDM[ evdmCount ] = esTempo;
			SetTimer( "evdmContagem", 1000, false );
		}
        if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
		}
    }
    if( dialogid == D_DMEVENT+23 )
	{
	    if( response )
	    {
	        if( listitem == 0 )
	        {
	            esDM[ evdmTop ] = 1;
	        }
	        if( listitem == 1 )
	        {
	            esDM[ evdmTop ] = 2;
	        }
	        if( listitem == 2 )
	        {
	            esDM[ evdmTop ] = 3;
	        }
	        if( listitem == 3 )
	        {
	            esDM[ evdmTop ] = 4;
	        }
	        if( listitem == 4 )
	        {
	            esDM[ evdmTop ] = 5;
	        }
	        if( listitem == 5 )
	        {
	            esDM[ evdmTop ] = 6;
	        }
	        if( listitem == 6 )
	        {
	            esDM[ evdmTop ] = 7;
	        }
	        if( listitem == 7 )
	        {
	            esDM[ evdmTop ] = 8;
	        }
	        if( listitem == 8 )
	        {
	            esDM[ evdmTop ] = 9;
	        }
	        if( listitem == 9 )
	        {
	            esDM[ evdmTop ] = 10;
	        }
	        esDM[ evdmTopDF ] = 1;
	        format( gStr, 128, "Evento definido para top {00FF00}%d", esDM[ evdmTop ] );
	        ShowPlayerDialog( playerid, D_DMEVENT+24, DIALOG_STYLE_MSGBOX, "Top Definido", gStr, "OK", "Redefinir" );
		}
		if( !response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
		}
	}
	if( dialogid == D_DMEVENT+24 )
	{
	    if( response )
		{
			ShowPlayerDialog( playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar" );
		}
		if( !response )
		{
		    esDM[ evdmTop ] = 0;
		    esDM[ evdmTopDF ] = 0;
			ShowPlayerDialog( playerid, D_DMEVENT+23, DIALOG_STYLE_LIST, "Definir Top", "Top 1\nTop 2\nTop 3\nTop 4\nTop 5\nTop 6\nTop 7\nTop 8\nTop 9\nTop 10", "Definir", "Voltar" );
		}
	}
	if( dialogid == DIALOG_SET_LIST  )
	{
	    if( response )
	    {
		    if( PlayerCarModelo[ playerid ][ listitem ][ CarID ] == -1 )
			{
				return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Nenhum veículo para esse slot !" );
			}
		    SetPVarInt( playerid, "CarID", listitem );
		    ShowPlayerDialog( playerid, DIALOG_SET_LIST+1, DIALOG_STYLE_LIST, "Opções Dos Sets", "Conectar\nDesconectar\nEstacionar\nRespawn\nCores\nLocalizar", "OK", "Cancelar" );
		}
	}
	if( dialogid == DIALOG_SET_LIST+1 )
	{
	    if( response )
	    {
		    new
				slot = GetPVarInt( playerid, "CarID" )
			;
			if( listitem == 0 )
			{
				PCar_PlayerSetConnect( playerid, slot );
				return 1;
			}
			if( listitem == 1 )
		    {
		        PCar_PlayerSetdisConnect( playerid, slot );
		        return 1;
		    }
		    if( listitem == 2 ) // Estacionar
		    {
		    	if(	PlayerCarConectado[ playerid ][ slot ][ CarID ] != 1 )
				{
					format( gStr, 128, "[ x ] Seu veículo set próprio {FFFFFF}%s {FF0000}não está conectado !", GetVehicleModelName( PlayerCarModelo[ playerid ][ slot ][ CarID ] ));
	        		SendClientMessage( playerid, COLOR_ERRO, gStr );
	        		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Portanto você não pode modifica-lo !" );
	        		ShowPlayerSets( playerid );
	        		return 1;
				}
		        estacionarPlayerSet( playerid, slot );
		        ShowPlayerDialog( playerid, DIALOG_SET_LIST+4, DIALOG_STYLE_MSGBOX, "Set Estacionado", "{00FF00}Seu set foi estacionado no local atual que ele está.", "OK", "" );
		    }
		 	if( listitem == 3 ) // Respawn
			{
				if(	PlayerCarConectado[ playerid ][ slot ][ CarID ] != 1 )
				{
					format( gStr, 128, "[ x ] Seu veículo set próprio {FFFFFF}%s {FF0000}não está conectado !", GetVehicleModelName( PlayerCarModelo[ playerid ][ slot ][ CarID ] ));
	        		SendClientMessage( playerid, COLOR_ERRO, gStr );
	        		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Portanto você não pode modifica-lo !" );
	        		ShowPlayerSets( playerid );
	        		return 1;
				}
			    if( setOcupado( PlayerCarCreated[ playerid ] ))
			    {
			        ShowPlayerDialog( playerid, DIALOG_SET_LIST+4, DIALOG_STYLE_MSGBOX, "Set não respwnado", "{FF0000}Seu set não foi respawnado !\n{FF0000}O veículo precisa estar desocupado.", "OK", "" );
			        return 1;
			    }
			    respawnPlayerSet( playerid, slot );
				ShowPlayerDialog( playerid, DIALOG_SET_LIST+4, DIALOG_STYLE_MSGBOX, "Set Respwnado", "{00FF00}Seu set foi respawnado para o local estacionado.", "OK", "" );
		    }
			if( listitem == 4 ) // Cores
			{
				if(	PlayerCarConectado[ playerid ][ slot ][ CarID ] != 1 )
				{
					format( gStr, 128, "[ x ] Seu veículo set próprio {FFFFFF}%s {FF0000}não está conectado !", GetVehicleModelName( PlayerCarModelo[ playerid ][ slot ][ CarID ] ));
	        		SendClientMessage( playerid, COLOR_ERRO, gStr );
	        		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Portanto você não pode modifica-lo !" );
	        		ShowPlayerSets( playerid );
	        		return 1;
				}
			    ShowPlayerDialog( playerid, DIALOG_SET_LIST+2, DIALOG_STYLE_INPUT, "Definir Cor 1", "{FFFFFF}Cores ID de (0 à 255)\n{00FF00}Digite o ID de uma cor:", "Definir", "Voltar" );
			}
			if( listitem == 5 ) // Localizar
			{
				if(	PlayerCarConectado[ playerid ][ slot ][ CarID ] != 1 )
				{
					format( gStr, 128, "[ x ] Seu veículo set próprio {FFFFFF}%s {FF0000}não está conectado !", GetVehicleModelName( PlayerCarModelo[ playerid ][ slot ][ CarID ] ));
	        		SendClientMessage( playerid, COLOR_ERRO, gStr );
	        		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Portanto você não pode localiza-lo !" );
	        		ShowPlayerSets( playerid );
	        		return 1;
				}
			    localizarPlayerSet( playerid, slot );
		    }
		}
		if( !response )
		{
	    	ShowPlayerSets( playerid );
		}
	}
	if( dialogid == DIALOG_SET_LIST+2 )
	{
	    if( response )
	    {
	    	new
				slot = GetPVarInt( playerid, "CarID" )
			;
	    	if( !strlen( inputtext ))
	    	{
				ShowPlayerDialog( playerid, DIALOG_SET_LIST+2, DIALOG_STYLE_INPUT, "Definir Cor 1", "{FFFFFF}Cores ID de (0 à 255)\n{FF0000}Digite o ID de uma cor:", "Definir", "Voltar" );
				return 0;
			}
			new
				setColor = strval( inputtext )
			;
			if( setColor < 0 || setColor > 255 )
			{
				ShowPlayerDialog( playerid, DIALOG_SET_LIST+2, DIALOG_STYLE_INPUT, "Definir Cor 1",
				"{FF0000}Cor inválida! {FFFFFF}Cores de(0 à 255)\n{00FF00}Digite o ID de uma cor:", "Definir", "Voltar" );
				return 0;
			}
			coresPlayerSet( playerid, slot, setColor, PlayerCar[ playerid ][ slot ][ Color2 ] );
			format( gStr, 128, "{00FF00}Cor ID 1 definida para cor {FF0000}ID %d\n\n{FFFFFF}Deseja definir a Cor ID 2?", setColor );
			ShowPlayerDialog( playerid, DIALOG_SET_LIST+5, DIALOG_STYLE_MSGBOX, "Cor Definida", gStr, "Definir", "Voltar" );
		}
	    if( !response )
	    {
	        ShowPlayerSets( playerid );
	    }
	}
	if( dialogid == DIALOG_SET_LIST+3 )
	{
	    if( response )
	    {
	    	new
				slot = GetPVarInt( playerid, "CarID" )
			;
	    	if( !strlen( inputtext ))
	    	{
				ShowPlayerDialog( playerid, DIALOG_SET_LIST+3, DIALOG_STYLE_INPUT, "Definir Cor 2", "{FFFFFF}Cores ID de (0 à 255)\n{FF0000}Digite o ID de uma cor:", "Definir", "Voltar" );
				return 0;
			}
			new
				setColor = strval( inputtext )
			;
			if( setColor < 0 || setColor > 255 )
			{
				ShowPlayerDialog( playerid, DIALOG_SET_LIST+3, DIALOG_STYLE_INPUT, "Definir Cor 3",
				"{FF0000}Cor inválida! {FFFFFF}Cores de(0 à 255)\n{00FF00}Digite o ID de uma cor:", "Definir", "Voltar" );
				return 0;
			}
			coresPlayerSet( playerid, slot, PlayerCar[ playerid ][ slot ][ Color1 ], setColor );
			format( gStr, 128, "{FF00FF}Cor ID 2 definida para cor {FFFFFF}ID %d", setColor );
			ShowPlayerDialog( playerid, DIALOG_SET_LIST+4, DIALOG_STYLE_MSGBOX, "Cor 1 Definida", gStr, "OK", "" );
		}
	    if( !response )
	    {
	        ShowPlayerSets( playerid );
	    }
	}
	if( dialogid == DIALOG_SET_LIST+4 )
	{
		if( response )
		{
	    	ShowPlayerSets( playerid );
		}
		if( !response )
		{
	    	ShowPlayerSets( playerid );
		}
	}
 	if( dialogid == DIALOG_SET_LIST+5 )
	{
		if( response )
		{
			ShowPlayerDialog( playerid, DIALOG_SET_LIST+3, DIALOG_STYLE_INPUT, "Definir Cor 2", "{FFFFFF}Cores ID de (0 à 255)\n{00FF00}Digite o ID de uma cor:", "Definir", "Voltar" );
		}
		if( !response )
		{
	    	ShowPlayerSets( playerid );
		}
	}
	if( dialogid == D_JIMCAR )
	{
		if( response )
		{
		    FireTimerP[ playerid ] = SetTimerEx( "AtualizaGPSFire", 1000, false, "dd", playerid, FireAtual[ playerid ] );
		}
		if( !response )
		{
		    FireTimerP[ playerid ] = SetTimerEx( "AtualizaGPSFire", 1000, false, "dd", playerid, FireAtual[ playerid ] );
		}
	}
	if( dialogid == D_PARMA )
	{
		if( response )
		{
		    if( listitem == 0 )
		    {
		        armaEscol[ playerid ] = 1;
		    }
		    if( listitem == 1 )
		    {
		        armaEscol[ playerid ] = 2;
		    }
		    if( listitem == 2 )
		    {
		        armaEscol[ playerid ] = 3;
		    }
		    if( listitem == 3 )
		    {
		        armaEscol[ playerid ] = 4;
		    }
		    if( listitem == 4 )
		    {
		        armaEscol[ playerid ] = 5;
		    }
		    format( gStr, sizeof( gStr ), "\n\n{FFFFFF}> Você escolheu uma {FF7F00}%s {FFFFFF}para vender.\n\nDigite o preço da arma de $1000 à $10000:", ArmaNome( armaEscol[ playerid ] ));
            ShowPlayerDialog( playerid, D_PARMA+1, DIALOG_STYLE_INPUT, "Tráfico de Armas", gStr, "Definir", "Cancelar" );
		}
	}
	if( dialogid == D_PARMA+1 )
	{
		if( response )
		{
	    	if( !strlen( inputtext ))
	    	{
	    	    format( gstring, sizeof( gstring ), "\n\n{FF0000}x DIGITE UM VALOR ENTRE $1000 a $10000 !\n\n> Arma {FF7F00}%s\n\n{FFFFFF}Digite o preço da arma:", ArmaNome( armaEscol[ playerid ] ));
            	ShowPlayerDialog( playerid, D_PARMA+1, DIALOG_STYLE_INPUT, "Tráfico de Armas", gstring, "Oferecer", "Cancelar" );
				return 0;
			}
			new
				preco = strval( inputtext )
			;
			if( preco < 1000 || preco > 10000 )
			{
	    	    format( gstring, sizeof( gstring ), "\n\n{FF0000}x DIGITE UM VALOR ENTRE $1000 a $10000 !\n\n> Arma {FF7F00}%s\n\n{FFFFFF}Digite o preço da arma:", ArmaNome( armaEscol[ playerid ] ));
            	ShowPlayerDialog( playerid, D_PARMA+1, DIALOG_STYLE_INPUT, "Tráfico de Armas", gstring, "Oferecer", "Cancelar" );
				return 0;
			}
			preccArma[ playerid ] = preco;
			format( gstring, sizeof( gstring ), "\n\n{FFFFFF}> Digite o ID do(a) jogador(a) que você deseja vender a arma.\n\n> Arma {FF7F00}%s {00B038}$%d\n\n{FFFFFF}Digite o ID abaixo:", ArmaNome( armaEscol[ playerid ] ), preco );
            ShowPlayerDialog( playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar" );
		}
		if( !response )
		{
		    armaEscol[ playerid ] = -1;
		    preccArma[ playerid ] = -1;
		    compraArm[ playerid ] = -1;
		}
	}
	if( dialogid == D_PARMA+2 )
	{
		if( response )
		{
	    	if( !strlen( inputtext ))
	    	{
	    	    format( gstring, sizeof( gstring ), "\n\n{FF0000}x DIGITE UM ID !\n\n> Arma {FF7F00}%s\n\n{FFFFFF}Digite o ID do(a) jogador(a) que você deseja vender a arma:", ArmaNome( armaEscol[ playerid ] ));
            	ShowPlayerDialog( playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar" );
				return 0;
			}
			new
				id = strval( inputtext )
			;
			if( !IsPlayerConnected( id ))
			{
			   	format( gstring, sizeof( gstring ), "\n\n{FF0000}x NINGUÉM ONLINE COM ESSE ID !\n\n> Arma {FF7F00}%s\n\n{FFFFFF}Digite o ID do(a) jogador(a) que você deseja vender a arma:", ArmaNome( armaEscol[ playerid ] ));
          		ShowPlayerDialog( playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar" );
				return 0;
			}
			if( playerid == id )
			{
			   	format( gstring, sizeof( gstring ), "\n{FF0000}x NÃO PODE OFERECER PARA VOCÊ MESMO !\n\nArma %s\n\nDigite o ID do(a) jogador(a) que você deseja vender a arma:", ArmaNome( armaEscol[ playerid ] ));
          		ShowPlayerDialog( playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "Tráfico de Armas", gstring, "Oferecer", "Cancelar" );
				return 0;
			}
			if( GetDistanceBetweenPlayers( playerid, id ) > 15 )
			{
			   	format( gstring, sizeof( gstring ), "\n\n{FF0000}x JOGADOR(A) DO ID SELECIONADO MUITO DISTANTE !\n\n> Arma {FF7F00}%s\n\n{FFFFFF}Digite o ID do(a) jogador(a) próximo dele(a):", ArmaNome( armaEscol[ playerid ] ));
          		ShowPlayerDialog( playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar" );
				return 0;
			}
   			if( pInfo[ id ][ fardado ] == 1 )
   			{
			    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse(a) jogador(a) é um(a) policial e está fardado(a) !" );
			    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não pode vender armas para um(a) policial fardado(a) !" );
			    return 1;
			}
          	if( GetPlayerCash( id ) < preccArma[ playerid ] || GetPlayerCash( id ) <= 0 )
			{
			    format( gStr, sizeof( gStr ), "[ x ] %s não tem dinheiro suficiente para comprar está arma !", PlayerName( id ));
			    SendClientMessage( playerid, COLOR_ERRO, gStr );
			  	return 1;
			}
			compraArm[ playerid ] = id;
			compraArm[ id ] = playerid;
			preccArma[ id ] = preccArma[ playerid ];
			armaEscol[ id ] = armaEscol[ playerid ];
			showTextA@R( id );
			temptemp_[ id ] = 15;
			timerarms[ id ] = SetTimerEx( "tempomsgt", 1000, false, "d", id );
			format( gStr, 128, "[ > ] Arma oferecida para %s, aguarde entre 15 segundos a resposta.", PlayerName( id ));
			SendClientMessage( playerid, COLOR_AMARELO, gStr );
		}
		if( !response )
		{
		    armaEscol[ playerid ] = -1;
		    compraArm[ playerid ] = -1;
		    preccArma[ playerid ] = -1;
		}
	}
	if( dialogid == 6540 )
	{
		if( response )
		{
		    SpawnProf( playerid );
		}
	}
	if( dialogid == 6541 )
	{
		if( response )
		{
		    SpawnProf( playerid );
		}
	}
	if( dialogid == 6542 )
	{
		if( response )
		{
		    SpawnProf( playerid );
		}
	}
	if( dialogid == 6543 )
	{
		if( response )
		{
		    SpawnProf( playerid );
		}
	}
	if( dialogid == 6544 )
	{
		if( response )
		{
		    SpawnProf( playerid );
		}
	}
	if( dialogid == 6545 )
	{
		if( response )
		{
		    SpawnProf( playerid );
		}
	}
	if( dialogid == D_CELLL )
	{
		if( response )
		{
		    if( listitem == 0 )
		    {
		        // Créditos SMS
		        format( gStr, 128, "{FFFFFF}» Seu celular tem {CAFFAB}%d SMS", pInfo[ playerid ][ Celular_c ] );
		        ShowPlayerDialog( playerid, D_CELLL+1, DIALOG_STYLE_MSGBOX, "Créditos", gStr, "OK", "" );
		    }
		    if( listitem == 1 )
		    {
		        // Enviar SMS
		        ShowPlayerDialog( playerid, D_CELLL+1, DIALOG_STYLE_MSGBOX, "Envio de SMS", "{FFFFFF}» Para enviar SMS use o comando:\n\t/SMS [ ID ] [ Mesagem ]", "OK", "" );
			}
		}
	}
	if( dialogid == D_AJUDA )
	{
		if( response )
		{
			new
				stg[ 1500 ]
			;
		    if( listitem == 0 ) // Servidor
			{
				strcat( stg, "\t{FFFF00}[ Servidor RPG{FFFF00}]\n" );
                strcat( stg, "\n{FFFFFF}» Para conseguir emprego vá até uma agência de empregos, digite: /GPS para localizá-las." );
                strcat( stg, "\n{FFFFFF}» No modo de jogo RPG, é simulado uma vida 'real', mas não ao extremo." );
                strcat( stg, "\n{FFFFFF}» Nesse modo de jogo você trabalha para ganhar dinheiro e se divertir." );
                strcat( stg, "\n{FFFFFF}» Você gasta o dinheiro que você ganha, com itens in-game." );
                strcat( stg, "\n{FFFFFF}» Seja eles, utilitários, impostos multas, casas e veículos e muito mais." );
                strcat( stg, "\n{FFFFFF}» Aqui contém agência de empregos, bancos, delegacias, prefeituras e outros." );
                strcat( stg, "\n{FFFFFF}» Não é permitido matar em qualquer lugar, isso visando não atrapalhar a jogabilidade de outros." );
                strcat( stg, "\n{FFFFFF}» Tem locais especificos para matar como Favela(Área de DM) e Gangue Zonas." );
                strcat( stg, "\n{FFFFFF}» Contendo gangues e organizações, e policiamento para reter gerar a diversão." );
                strcat( stg, "\n{FFFFFF}» Aqui também temos eventos de corrida, luta, DM(Matar) entre outros..." );
                strcat( stg, "\n{FFFFFF}» Já em uma agência de empregos você deve entrar no checkpoint e usar: /Empregos ou /Profs" );
                strcat( stg, "\n{FFFFFF}» As profissões são váriadas e com levels diferentes, escolha uma de acordo com seu level." );
				strcat( stg, "\n{FFFFFF}» Portando tenha um ótimo jogo e divirta-se !" );
				ShowPlayerDialog( playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "• AJUDA •", stg, "OK", "" );
		    }
		    if( listitem == 1 ) // Créditos
			{
				strcat( stg, "\t{FFFF00}[Créditos Do Servidor{FFFF00}]\n" );
                strcat( stg, "\n{FFFFFF}» Criador geral e dono -> Malboro" );
                strcat( stg, "\n{FFFFFF}» Agradecimentos a ajuda manter o host -> Malboro \n" );
                strcat( stg, "\n{FFFFFF}» Agradecimentos aos testes e ajuda geral -> Malboro " );
                strcat( stg, "\n{FFFFFF}» Agradecimentos a todos os membros da staff por manter o server vivo(online) e diverdito a todos os(as) jogadores!" );
                strcat( stg, "\n\n{00FFFF}» Não chore por momentos Felizes acabados , mas sorria ao lembrar que um dia eles existiram." );
				strcat( stg, "\n\n{FFFF00}» Brasil Play Online" );
				ShowPlayerDialog( playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "• AJUDA •", stg, "OK", "" );
		    }
		    if( listitem == 2 ) // Administração Do Servidor
			{
				strcat( stg, "{FFFF00}[ Administração Do Servidor {FFFF00}]\n" );
                strcat( stg, "\n{FFFFFF}» {0000ff}Donos:" );
                strcat( stg, "\n{FFFFFF}» Malboro" );
                strcat( stg, "\n\n{FFFFFF}» {ff0000}Administradores:" );
                strcat( stg, "\n{FFFFFF}» Viper" );
				strcat( stg, "\n\n{FFFFFF}» {7fff00}Moderadores:" );
                strcat( stg, "\n{FFFFFF}» Aleh" );
                strcat( stg, "\n\n{FFFFFF}» {ff1493}Ajudantes:" );
                strcat( stg, "\n{FFFFFF}» Cakau" );
                ShowPlayerDialog( playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "• AJUDA •", stg, "OK", "" );
			}
		    if( listitem == 3 ) // Regras
		    {
				format( gstring, sizeof( gstring ), "\t\t{5FFF00}[ Regras Gerais - Brasil Play Online ]" );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não cometa Death-Match/DM ( atirar ou matar ) dentro de interiores e em locais." );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\npúblicos, tais como: Agências de empregos, bancos, prefeituras, lojas de utilitários, etc." );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\n\n{FFE583}• Não cometa Drive-By/DB ( para quem não sabe, DB ( Drive-By ) é atirar de dentro de um veículo contra a skin do jogador(a), atropelar, ou atirar de jetpack." );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• É extremamente proibido qualquer tipo de preconceito, tais como: Racismo, opção sexual ou qualquer outro tipo de preconceito." );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\n\n{FFE583}• Não desrespeite o próximo, respeite para ser respeitado." );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não peça para ser moderador ou Administrador pois não é pedindo que se ganha, é merecendo. E também não pergunte o que tem que" );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\nfazer para virar um, isso é ser falso para conseguir o que quer. Tem que ser você mesmo e se o seu caráter, sua honestidade e" );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\na sua vontade de ajudar o servidor no que puder merecer, você vira." );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\n\n{FFE583}• É extremamente proibido o uso de cheaters ou qualquer modificação que faça com que você tenha vantagem sobre os outros jogadores." );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Não acuse um jogador de ter feito algo fora das regras, de cheat ou algo parecido no chat, para isso existe o /Reportar [ ID do jogador(a) ] [ Motivo ] ou" );
				strcat( stg, gstring );
				format( gstring, sizeof( gstring ), "\no tópico de denúncias no nosso fórum ( precisa ter provas ( prints ou vídeos ))." );
				strcat( stg, gstring );
				ShowPlayerDialog( playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Regras Gerais - [RPG] Brasil Play Online «", stg, "OK", "Avançar" );
		    }
		    if( listitem == 4 ) // Comandos
		    {
    	format( gStr, sizeof( gStr ), "\t\t{FF0000}[ COMANDOS BÁSICOS DO SERVIDOR ]{00FF00}" );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Regras - Para ver as regras do servidor. " );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Tutorial - Para ver o tutorial do servidor." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Profissao - Para ver os comandos da profissão atual. " );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Infochat - Para ver como funciona o chat de nosso servidor. " );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /MeuStatus - Para ver os seus Status." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /MeuLevel - Para ver o seu level e experiências." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Mudarsenha - Comando para alterar sua senha." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Mudarpchave - Comando para alterar sua palavra passe." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Admins ou /Mods - Comando para ver os Admin's/Moderadores online." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /SOS ou /HELP [ Pergunta ] - Comandos para pedir ajuda e tirar suas dúvidas." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Reportar [ ID ] [ Motivo ] - Comando para denúnciar cheaters, abusers e bugs." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Casa - /Casa comandos - /Casa veiculo -> Comando para configurar sua casa e o veículo dela. " );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Continuar - Para continuar da ultima posição que você deslogou." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /ListaAFK - Para ver os jogadores que estão ausentes." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Transferir - Comando para transferir dinheiro." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /GPS - Comando para usar o GPS." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Radios - Para visualizar nossa lista de rádios disponíveis." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Comandosclan - Para ver os comandos de um Clan/Gangue." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Carrocmds - Para ver os comandos de um carro." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Veiculo Trancar - /Veiculo Destrancar -> Trancar/Destrancar um veículo." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Taxi - Para chamar um taxista." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /190 [ Mensagem ] - Para reportar algo para a policia." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /192 [ Mensagem ] - Para mandar uma mensagem para os médicos." );
		strcat( stg, gStr );
		format( gStr, sizeof( gStr ), "\n\t• /Comandos - Caso queira ver mais comandos do servidor." );
		strcat( stg, gStr );
	    ShowPlayerDialog( playerid, 1460, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Brasil Play Online", stg, "Fechar", "" );
		    }
		    if( listitem == 5 ) // Level
	   	    {
                strcat( stg, "\n{FFFFFF}» Você ganha 1 level a cada hora, e uma experiência a cada 10 minutos." );
                strcat( stg, "\n{FFFFFF}» Caso queira ver seu level ou quanto de experiência você tem digite: '/MeuLevel'." );
                strcat( stg, "\n{FFFFFF}» Caso queira saber quantos minutos para upar uma experiência compre um Relógio UP." );
				ShowPlayerDialog( playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "• AJUDA •", stg, "OK", "" );
		    }
		    if( listitem == 6 ) // Profissão
	   	    {
                strcat( stg, "\n{FFFFFF}» Para conseguir emprego vá até uma agência de empregos, digite: /GPS para localizá-las." );
                strcat( stg, "\n{FFFFFF}» Já em uma agência de empregos você deve entrar no checkpoint e usar: /Empregos ou '/Profs'." );
                strcat( stg, "\n{FFFFFF}» As profissões são váriadas e com levels diferentes, escolha uma de acordo com seu level." );
                strcat( stg, "\n{FFFFFF}» Para ver os comandos da sua profissão digite: '/profissao'." );
				ShowPlayerDialog( playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "• AJUDA •", stg, "OK", "" );
		    }
		    if( listitem == 7 ) // Salário
	   	    {
                strcat( stg, "\n{FFFFFF}» Você receberá o seu salário de 1 em 1 hora, cada profissão tem o seu salário definido." );
				ShowPlayerDialog( playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "• AJUDA •", stg, "OK", "" );
		    }
		    if( listitem == 8 ) // Eventos
	   	    {
                strcat( stg, "\n{FFFFFF}» Os eventos são organizados peloas adminstradores e com diversoso prêmios." );
                strcat( stg, "\n{FFFFFF}» Quando um evento for iniciado, para participar basta digitar '/Participar'." );
                strcat( stg, "\n{FFFFFF}» Já no evento e sem chances de vencer digite '/Desistir', para 'desistir'." );
				ShowPlayerDialog( playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "• AJUDA •", stg, "OK", "" );
		    }
		    /*if( listitem == 9 )
		    {
		    }*/
		}
	}
	return 1;
}
forward traficAReset( playerid, id );
public traficAReset( playerid, id )
{
    if( compraArm[ playerid ] >= 0 )
    {
        if( IsPlayerConnected( playerid ) && IsPlayerConnected( id ))
        {
            format( gStr, 128, "[ x ] %s demorou para responder e a oferta foi cancelada !", PlayerName( id ));
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			format( gStr, 128, "[ x ] Você demorou para responder a oferta feita por %s a mesma foi cancelada !", PlayerName( playerid ));
			SendClientMessage( id, COLOR_ERRO, gStr );
        }
        else if( !IsPlayerConnected( playerid ) && IsPlayerConnected( id ))
        {
			SendClientMessage( id, COLOR_ERRO, "[ x ] Você demorou para responder a oferta feita por um(a) traficante de armas !" );
        }
        else if( IsPlayerConnected( playerid ) && !IsPlayerConnected( id ))
        {
			SendClientMessage( id, COLOR_ERRO, "[ x ] O(A) cliente que você ofereceu armas desconectou-se e demorou para responder !" );
        }
        compraArm[ playerid ] = 0;
		armaEscol[ playerid ] = 0;
		compraArm[ id ] = 0;
		armaEscol[ id ] = 0;
    }
	return 1;
}

public OnPlayerClickPlayer( playerid, clickedplayerid, source ) // Espiar no TAB
{
	if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
	{
	    if( NoTuto[ clickedplayerid ] == true )
	    {
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Esse player está vendo o tutorial." );
			return 1;
	    }
		TogglePlayerSpectating( playerid, 1 );
		if( !IsPlayerInAnyVehicle( clickedplayerid )) PlayerSpectatePlayer( playerid, clickedplayerid );
		else PlayerSpectateVehicle( playerid, GetPlayerVehicleID( clickedplayerid ), SPECTATE_MODE_NORMAL );
		SetPlayerInterior( playerid, GetPlayerInterior( clickedplayerid ));
		SpectateType[ playerid ] = ADMIN_SPEC_TYPE_PLAYER;
		SpectateID[ playerid ] = clickedplayerid;
		format( gStr, sizeof( gStr ), "[ BPO Admin ] Você está espiando o jogador(a) %s para parar de espiar: /EspiarOff", PlayerName( clickedplayerid ));
		SendClientMessage( playerid, 0x00FF66AA, gStr );
	}
	return 1;
}

  stock GetPlayerSpeed( playerid, bool:kmh = true )
   {
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;

	if( IsPlayerInAnyVehicle( playerid ))
	{
		GetVehicleVelocity( GetPlayerVehicleID( playerid ), xx, yy, zz );
	}
	else
	{
		GetPlayerVelocity( playerid, xx, yy, zz );
	}
	pSpeed = floatsqroot(( xx * xx ) + ( yy * yy ) + ( zz * zz ));
	return kmh ? floatround(( pSpeed * 165.12 )) : floatround(( pSpeed * 103.9 ));
}

public OnPlayerUpdate(playerid) // Para os óculos não darem efeitos em outros jogadores
{
    new keys, ud, lr; // Night Vision - Thermal Vision
    GetPlayerKeys(playerid,keys,ud,lr);

    if(keys & KEY_FIRE && GetPlayerWeapon(playerid) == 44 || GetPlayerWeapon(playerid) == 45)
        return 0;
    return 1;
}

forward CheckPlayerInRadar( );
public CheckPlayerInRadar( )
{
    SetTimer( "CheckPlayerInRadar", 500, false );

	foreach(Player, i )
	{
	    new
			vehicleid = GetPlayerVehicleID( i )
		;
		if( GetPlayerState( i ) == PLAYER_STATE_DRIVER )
		{
			new
				vehicleidModel = GetVehicleModel( vehicleid ),
				vStr[ 64 ],
				lStr[ 30 ]
			;
			if( vehicleidModel == 481 || vehicleidModel == 509 || vehicleidModel == 510 )
	    	{
	      		TextDrawSetString( Gasolina[ i ], "~n~~r~~h~N/A" );
	    	}
	    	else
			{
				format( lStr, sizeof( lStr ), "~n~~y~~h~C Litros ~w~~h~%d", pInfo[ i ][ Gas ] );
				TextDrawSetString( Gasolina[ i ], lStr );
			}
			format( vStr, sizeof( vStr ), "~y~~h~Velocidade~n~[ %i ~y~~h~Km/H ]~n~[ %i ~y~~h~Mp/H ]", GetPlayerSpeed( i, true ), GetPlayerSpeed( i, false ));
			TextDrawSetString( Velocidade[ i ], vStr );
		}
	    if( GetPlayerState( i ) == PLAYER_STATE_DRIVER )
	    {
	        for( new e = 0; e < sizeof( SpikeInfo ); e++ )
	  	    {
	  	        if( IsPlayerInRangeOfPoint( i, 3.0, SpikeInfo[ e ][ sX ], SpikeInfo[ e ][ sY ], SpikeInfo[ e ][ sZ ] ))
	            {
	  	            if( SpikeInfo[ e ][ sCreated ] == 1 )
	  	            {
	  	                new
						  	panels, doors, lights, tires
			  			;
	  	                if( vehicleid != 597 || vehicleid != 599 || vehicleid != 523 || vehicleid != 497 || vehicleid != 598 || vehicleid != 596 )
			  			{
     				 		GetVehicleDamageStatus( vehicleid, panels, doors, lights, tires );
					       	tires = encode_tires( 1, 1, 1, 1 );
					     	UpdateVehicleDamageStatus( vehicleid, panels, doors, lights, tires );
						}
	  	            }
	  	        }
	  	    }
	  	}
 		CheckInRadar( i, 1529.6328, -1732.3198, 14.9468, 10.0, 120 ); // 0
		CheckInRadar( i, 1193.4443, -1852.2771, 14.9218, 10.0, 120 ); // 1
		CheckInRadar( i, -15.1126, -1518.2516, 3.6745, 15.0, 150 ); // 2
		CheckInRadar( i, 807.8500, -1400.5115, 15.0895, 11.0, 150 ); // 3
		CheckInRadar( i, 1125.8978, -1144.8754, 25.2703, 5.0, 120 ); // 4
		CheckInRadar( i, 1194.1735, -943.1405, 44.3574, 12.0, 150 ); // 5
		CheckInRadar( i, 2749.8408, -149.9315, 34.5190, 20.0, 190 ); // 6
		CheckInRadar( i, 1796.8328, 843.0880, 12.2468, 20.0, 190 ); // 7
		CheckInRadar( i, 1698.0563, -735.8344, 52.1640, 16.0, 190 ); // 8
		CheckInRadar( i, 1350.0825, -1280.4806, 14.9968, 13.0, 150 ); // 9
	}
	return 1;
}

stock CheckInRadar( playerid, Float:xx, Float:yy, Float:zz, Float:radius, speed )
{
	if( IsPlayerInRangeOfPoint( playerid, radius, xx, yy, zz ))
	{
		if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && PassouRadar[ playerid ] == 0 )
		{
    		new
				t_speedY = GetPlayerSpeed( playerid, true ),
				f_speedY = GetPlayerSpeed( playerid, false )
			;
			if( t_speedY > speed )
			{
				    if( PassouRadar[ playerid ] == 0 )
				    {
						SendClientMessage( playerid, COLOR_AZULCLARO, "× Policia Rodoviaria Federal ×" );
						format( gstring, sizeof( gstring ), "• %s, você excedeu o limite de velocidade permitido neste local. Seguem os dados:", PlayerName( playerid ));
	                    SendClientMessage( playerid, COLOR_BRANCO, gstring );
	                    format( gstring, sizeof( gstring ), "× Velocidade máxima permitida: {FF0000}%d KM/H{FFFFFF}.", speed );
	                    SendClientMessage( playerid, COLOR_BRANCO, gstring );
						format( gstring, sizeof( gstring ), "× Velocidade detectada: {FF0000}%d KM/H{FFFFFF} | {FF0000}%d MP/H{FFFFFF}.", t_speedY, f_speedY );
	                    SendClientMessage( playerid, COLOR_BRANCO, gstring );
						format( gstring, sizeof( gstring ), "× Veículo usado no momento da infração: {FF0000}%s{FFFFFF}.", vNome[ GetVehicleModel( GetPlayerVehicleID( playerid )) - 400 ] );
	                    SendClientMessage( playerid, COLOR_BRANCO, gstring );
						format( gstring, sizeof( gstring ), "× Valor da multa: {00DD00}$ %d{FFFFFF}.", t_speedY * 2 );
	                    SendClientMessage( playerid, COLOR_BRANCO, gstring );
	                    TextDrawShowForPlayer( playerid, Flash );
				        GameTextForPlayer( playerid, "~r~RADAR", 2000, 5 );
      					SetTimerEx( "LiberarRadar", 5000, false, "d", playerid );
						SetTimerEx( "FlashFotoSair", 1500, false, "d", playerid );
						sGivePlayerCash( playerid, -t_speedY*2 );
						PlayerPlaySound( playerid, 1132, 0.0, 0.0, 0.0 );
						PassouRadar[ playerid ] = 1;
					}
			}
			else if( t_speedY < speed )
			{
					if( PassouRadar[ playerid ] == 0 )
					{
					  	GameTextForPlayer( playerid, "~y~RADAR", 2000, 5 );
						format( gstring, sizeof( gstring ), "(( RADAR )) × Velocidade atual detectada: {FF0000}%d KM/H{FFFFFF} | {FF0000}%d MP/H{FFFFFF}.", t_speedY, f_speedY );
						SendClientMessage( playerid, COLOR_AMARELOCLARO, gstring );
						SetTimerEx( "LiberarRadar", 5000, false, "d", playerid );
						PassouRadar[ playerid ] = 1;
						PlayerPlaySound( playerid, 1132, 0.0, 0.0, 0.0 );
					}
			}
		}
	}
}

forward LiberarRadar( playerid );
public LiberarRadar( playerid )
{
	PassouRadar[ playerid ] = 0;
	return 1;
}

stock GetWeaponModel( weaponid )
{
	switch( weaponid )
	{
	    case 1:
	        return 331;
		case 2..8:
		    return weaponid+331;
        case 9:
		    return 341;
		case 10..15:
			return weaponid+311;
		case 16..18:
		    return weaponid+326;
		case 22..29:
		    return weaponid+324;
		case 30,31:
		    return weaponid+325;
		case 32:
		    return 372;
		case 33..45:
		    return weaponid+324;
		case 46:
		    return 371;
	}
	return 0;
}

forward CheckComandos( playerid );
public CheckComandos( playerid )
{
	if( Carregou[ playerid ] == 1 )
	{
		Carregou[ playerid ] = 0;
		SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você já pode carregar novamente !" );
	}
	return 1;
}

forward ContinuarFail( playerid );
public ContinuarFail( playerid )
{
	if( pInfo[ playerid ][ Continuar ] == true )
	{
	    SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] O seu tempo para usar o comando: /Continuar, acabou !" );
	    pInfo[ playerid ][ Continuar ] = false;
	}
    if( Teleporte[ playerid ] == 1 )
    {
        SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você é um(a) jogador(a) VIP, seu tempo para fazer um teleporte acabou !" );
        Teleporte[ playerid ] = 0;
    }
	return 1;
}

forward UPLevel( playerid );
public UPLevel( playerid )
{
	if( IsPlayerConnected( playerid ) && pInfo[ playerid ][ Logado ] == true )
	{
		if( pInfo[ playerid ][ AFK ] == false )
		{
			format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));

			if( pInfo[ playerid ][ Exp ] >= 6 )
			{
				pInfo[ playerid ][ Exp ] = 0;
				pInfo[ playerid ][ Level ] ++;
				SendClientMessage( playerid, COLOR_BRANCO, "{6666CC}[ UP ]{FFFFFF} Parabéns, você completou [ {6666CC}6{FFFFFF} / {6666CC}6{FFFFFF} ] de experiência e upou +1 level !" );
				format( gStr, sizeof( gStr ), "Level atual: {6666CC}%d{FFFFFF}.", pInfo[ playerid ][ Level ] );
				SendClientMessage( playerid, COLOR_BRANCO, gStr );
				GameTextForPlayer( playerid, "UP LEVEL", 3000, 6 );
				dini_IntSet( gFile, "Exp", pInfo[ playerid ][ Exp ] );
				dini_IntSet( gFile, "Level", pInfo[ playerid ][ Level ] );
				SetPlayerScore( playerid, dini_Int( gFile, "Level" ));
				SetTimerEx( "PagarSalario", 60000, false, "d", playerid );
			}
			else
			{
				format( gStr, sizeof( gStr ), "{6666CC}[ UP ]{FFFFFF} Você ganhou 1 ponto de expêriencia [ {6666CC}%d{FFFFFF} / {6666CC}6{FFFFFF} ]", pInfo[ playerid ][ Exp ] );
				SendClientMessage( playerid, COLOR_BRANCO, gStr );
				GameTextForPlayer( playerid, "UP EXP", 3000, 6 );
				pInfo[ playerid ][ Exp ] ++;
				dini_IntSet( gFile, "Exp", pInfo[ playerid ][ Exp ] );
			}
		}
		else
		{
			SendClientMessage( playerid, COLOR_AZULCLARO, "[ > ] Você não upou por estar no modo AFK ! ( Ausente )" );
		}
		return 1;
	}
	return 1;
}

forward SortearLoteria( );
public SortearLoteria( )
{
	new
		NumeroLoto = random( 60 )
	;
	new
		Premio = random( 50000 ) + 1000
	;
	if( NumeroLoto < 0 )
	{
		NumeroLoto = -( NumeroLoto + 1 );
  	}
  	if( Premio < 0 )
 	{
		Premio = -( Premio + 1000 );
  	}
  	format( gstring, sizeof( gstring ), "%i", NumeroLoto );

	if( strcmp( dini_Get( "Loteria.ini", gstring ), "1", true ) == 0 )
	{
		foreach(Player, i )
		{
			format( s5Doze, sizeof( s5Doze ), "~y~~h~Loteria~n~~y~~h~Ganhador(a): ~w~~h~Nenhum~n~~w~~h~Numero Sorteado: ~y~%d~n~~w~~h~Premio: ~y~$~w~~h~%d~n~~w~~h~Acumulado: ~y~$~w~~h~%d~n~~r~Total Acumulado: ~y~$~w~~h~%d", NumeroLoto, Premio, dini_Int( "Acumulado.ini", "Acumulado" ), dini_Int( "Acumulado.ini", "Acumulado" ) + Premio );
			TextDrawSetString( TextLoteria, s5Doze );
			TextDrawShowForPlayer( i, TextLoteria );
			SetTimer( "OcultarLoteria", 10000, false );
		}
		dini_IntSet( "Acumulado.ini", "Acumulado", dini_Int( "Acumulado.ini", "Acumulado" ) + Premio );
		LimparLoteria( );
 		return 1;
  	}
 	else if( strcmp( dini_Get( "Loteria.ini", gstring ), "1", false ))
	{
		foreach(Player, i )
		{
			format( s5Doze, sizeof( s5Doze ), "~y~~h~Loteria~n~~y~~h~Ganhador(a): ~w~~h~%s~n~~w~~h~Numero Sorteado: ~y~%d~n~~w~~h~Premio: ~y~$~w~~h~%d~n~~w~~h~Acumulado: ~y~$~w~~h~%d~n~~r~Total Premio: ~y~$~w~~h~%d", dini_Get( "Loteria.ini", gstring ), NumeroLoto, Premio, dini_Int( "Acumulado.ini", "Acumulado" ), dini_Int( "Acumulado.ini", "Acumulado" ) + Premio );
			TextDrawSetString( TextLoteria, s5Doze );
			TextDrawShowForPlayer( i, TextLoteria );
			SetTimer( "OcultarLoteria", 10000, false );
			format( gFile, sizeof( gFile ), "Contas/%s.ini", dini_Get( "Loteria.ini", gstring ));
			if( strcmp( PlayerName( i ), dini_Get( "Loteria.ini", gstring ), true ) == 0 )
			{
				if( dini_Int( "Acumulado.ini", "Acumulado" ) != 0 )
				{
					sGivePlayerCash( i, dini_Int( "Acumulado.ini", "Acumulado" ) + Premio );
				}
				else if( dini_Int( "Acumulado.ini", "Acumulado" ) == 0 )
				{
	            	sGivePlayerCash( i, Premio );
				}
			}
		}
		/*else
		{
			if( dini_Int( "Acumulado.ini", "Acumulado" ) == 0 )
			{
				dini_IntSet( gFile, "SaldoBanco", dini_Int( gFile, "SaldoBanco" ) + Premio );
				dini_IntSet( gFile, "GanhouLoto", 1 );
				dini_IntSet( gFile, "LotoPremio", Premio );
				dini_IntSet( gFile, "LotoNumero", NumeroLoto );
			}
			else
			{
				new
					aCumulo = dini_Int( "Acumulado.ini", "Acumulado" ), lotototal = aCumulo + Premio
				;
				dini_IntSet( gFile, "SaldoBanco", dini_Int( gFile, "SaldoBanco" ) + lotototal );
				dini_IntSet( gFile, "GanhouLoto", 1 );
				dini_IntSet( gFile, "LotoPremio", Premio );
				dini_IntSet( gFile, "LotoNumero", NumeroLoto );
			}
		}*/
		format( gStr, sizeof( gStr ), "* Sortudo: %s - N°: %d - Prêmio: %d - Acumulado: %d -  Prêmio Total: %d", dini_Get( "Loteria.ini", gstring ), NumeroLoto, Premio, dini_Int( "Acumulado.ini", "Acumulado" ), dini_Int( "Acumulado.ini", "Acumulado" ) + Premio );
		printf( "[ Loteria ] Sortudo: %s - N°: %d - Prêmio: %d - Acumulado: %d -  Prêmio Total: %d", dini_Get( "Loteria.ini", gstring ), NumeroLoto, Premio, dini_Int( "Acumulado.ini", "Acumulado" ), dini_Int( "Acumulado.ini", "Acumulado" ) + Premio );
        LotoGanhadores( gStr );
		LimparLoteria( );
		dini_IntSet( "Acumulado.ini", "Acumulado", 0 );
		return 1;
	}
	return 1;
}

forward OcultarLoteria( );
public OcultarLoteria( )
{
    TextDrawHideForAll( TextLoteria );
	return 1;
}

forward RodarTaximetro( playerid );
public RodarTaximetro( playerid )
{
	if( Taximetro[ playerid ][ 1 ] == 1 )
    {
    	if( GetPlayerCash( playerid ) > PrecoTaximetro[ playerid ] + 5 )
     	{
     	    if( Taxi_Bandeira == 1 )
     	    {
     	        SendClientMessage( playerid, COLOR_BRANCO, "[ BANDEIRA 1 ] {FFFF00}Você paga +$10 !" );
     	        SendClientMessage( Taximetro[ playerid ][ 2 ], COLOR_BRANCO, "[ BANDEIRA 1 ] {FFFF00}Você ganha +$10 !" );
      			PrecoTaximetro[ playerid ] += 10;
			}
			else if( Taxi_Bandeira == 2 )
     	    {
     	        SendClientMessage( playerid, COLOR_BRANCO, "[ BANDEIRA 2 ] {FFFF00}Você paga +$20 !" );
     	        SendClientMessage( Taximetro[ playerid ][ 2 ], COLOR_BRANCO, "[ BANDEIRA 2 ] {FFFF00}Você ganha +$20 !" );
      			PrecoTaximetro[ playerid ] += 10;
			}
   			format( gStr, sizeof( gStr ), "~n~~n~~n~Taximetro~n~Total a pagar: ~y~$%d~n~Tarifa: ~w~%d", PrecoTaximetro[ playerid ] + 20, Taxi_Bandeira );
            GameTextForPlayer( playerid, gStr, 3000, 5 );
			GameTextForPlayer( Taximetro[ playerid ][ 2 ], gStr, 3000, 5 );
		}
		else if( GetPlayerCash( playerid ) < PrecoTaximetro[ playerid ] + 5 )
		{
		    KillTimer( T_Taximetro[ playerid ] );
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Seu dinheiro acabou portando você não tem condições de pagar mais um táxi e ficará neste local !" );
            SendClientMessage( Taximetro[ playerid ][ 2 ], COLOR_ERRO, "[ x ] O dinheiro de seu passageiro acabou !" );
			sGivePlayerCash( playerid, -PrecoTaximetro[ playerid ] );
            sGivePlayerCash( Taximetro[ playerid ][ 2 ], PrecoTaximetro[ playerid ] + 20 );
            RemovePlayerFromVehicle( playerid );
			Taxista_P[ Taximetro[ playerid ][ 2 ] ] = 0;
			Taximetro[ playerid ][ 1 ] = 0;
			PrecoTaximetro[ playerid ] = 0;
			Taximetro[ playerid ][ 2 ] = 0;
        }
        return 1;
    }
	return 1;
}

forward AceitarCocaina( playerid );
public AceitarCocaina( playerid )
{
	if( AceitarCoca[ playerid ] == 1 )
	{
		KillTimer( T_Drogas[ playerid ] );
		T_Drogas[ playerid ] = SetTimerEx( "AceitarCocaina", 3000, true, "i", playerid );
 		format( gStr, sizeof( gStr ), "» %s está oferecendo para você %d pinos de farinha por $%d. ( /AceitarCocaina | /RecusarCocaina )", PlayerName( playerid ), QuantiaCoca[ playerid ], ValorCoca[ playerid ] );
	    SendClientMessage( playerid, COLOR_AMARELOCLARO, gStr );
	    AceitarCoca[ playerid ] = 2;
	    return 1;
	}
	if( AceitarCoca[ playerid ] == 2 )
	{
	    format( gStr, sizeof( gStr ), "» %s está oferecendo para você %d pinos de farinha por $%d. ( /AceitarCocaina | /RecusarCocaina )", PlayerName( playerid ), QuantiaCoca[ playerid ], ValorCoca[ playerid ] );
	    SendClientMessage( playerid, COLOR_AMARELOCLARO, gStr );
		AceitarCoca[ playerid ] = 3;
	    return 1;
	}
	if( AceitarCoca[ playerid ] == 3 )
	{
	    format( gStr, sizeof( gStr ), "» %s está oferecendo para você %d pinos de farinha por $%d. ( /AceitarCocaina | /RecusarCocaina )", PlayerName( playerid ), QuantiaCoca[ playerid ], ValorCoca[ playerid ] );
	    SendClientMessage( playerid, COLOR_AMARELOCLARO, gStr );
	    AceitarCoca[ playerid ] = 4;
	    return 1;
	}
	if( AceitarCoca[ playerid ] == 4 )
	{
	    format( gStr, sizeof( gStr ), "» %s está oferecendo para você %d pinos de farinha por $%d. ( /AceitarCocaina | /RecusarCocaina )", PlayerName( playerid ), QuantiaCoca[ playerid ], ValorCoca[ playerid ] );
	    SendClientMessage( playerid, COLOR_AMARELOCLARO, gStr );
	    AceitarCoca[ playerid ] = 5;
	    return 1;
	}
	if( AceitarCoca[ playerid ] == 5 )
	{
	    KillTimer( T_Drogas[ playerid ] );
	    SendClientMessage( OfereceuCoca[ RecebeuCoca[ playerid ] ], COLOR_AMARELOCLARO, "[ > ] o jogador(a) demorou para aceitar os pinos e a venda de cocaina foi recusada automaticamente !" );
	    SendClientMessage( playerid, COLOR_AMARELOCLARO, "[ > ] Você demorou para aceitar os pinos e a venda foi recusada automaticamente !" );
		ValorCoca[ playerid ] = 0;
	    AceitarCoca[ playerid ] = 0;
	    OfereceuCoca[ RecebeuCoca[ playerid ] ] = false;
	    RecebeuCoca[ playerid ] = -1;
	    QuantiaCoca[ playerid ] = 0;
	    return 1;
	}
	return 1;
}

forward CriarSet( m, Float:nsx, Float:nsy, Float:nsz, Float:nsr, c1, c2 );
public CriarSet( m, Float:nsx, Float:nsy, Float:nsz, Float:nsr, c1, c2 )
{
	new resid, resstr[ 256 ];
	resid = CreateVehicle( m, nsx, nsy, nsz, nsr, c1, c2, -1 );
	valstr( resstr, resid );
}

forward GetPlayerHospital( playerid );
public GetPlayerHospital( playerid )
{
    if( !IsPlayerConnected( playerid ))
    {
		return -1;
    }
    new
		Float:dist,
		prevhosp
	;
	new Float:distancia = 100000.000;

	for( new hospid = 0; hospid < 6; hospid++ )
	{
        if( hospid == 0 )
	        dist = GetPlayerDistanceToPoint( playerid, 1173.1145, -1323.7125 ); // Hospital de Los Santos Perto da Ammu-Nation
        else if( hospid == 1 )
			dist = GetPlayerDistanceToPoint( playerid, 2036.5521, -1412.5513 ); // Hospital de Los Santos Perto da Favela
        else if( hospid == 2 )
			dist = GetPlayerDistanceToPoint( playerid, 1607.4396, 1819.1462 ); // Hspital de Las Venturas
        else if( hospid == 3 )
			dist = GetPlayerDistanceToPoint( playerid, -2665.0503, 636.5155 ); // Hospital de San Fierro
        else if( hospid == 4 )
			dist = GetPlayerDistanceToPoint( playerid, -315.0838, 1050.7095 ); // Hospital de Fort Carson
        else if( hospid == 5 )
			dist = GetPlayerDistanceToPoint( playerid, -1514.6455, 2523.4263 ); // Hospital de El-Quebrados
        else if( hospid == 6 )
			dist = GetPlayerDistanceToPoint( playerid, -2208.2485, -2286.8516 ); // Hospital de Angel Pine
        if(( dist < distancia ))
		{
            distancia = dist;
		    prevhosp = hospid;
		}
	}
	return prevhosp;
}

forward Pescou( playerid );
public Pescou( playerid )
{
	if( bpopCount[ playerid ] > 0 && IsPlayerConnected( playerid ) && JaPescando[ playerid ] == 1 )
	{
	    if( !IsPlayerInPlace( playerid, 385.345092, -2512.000000, 529.345092, -2368.000000 ))
	    {
	        GameTextForPlayer( playerid, "~r~~h~Peixe perdido!", 1000, 0 );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você saiu da área de pesca enquanto pescava !" );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você perdeu o peixe atual sendo pescado !" );
	        JaPescando[ playerid ] = 0;
        	Pescando[ playerid ] = -1;
        	bpopCount[ playerid ] = -1;
	        return 1;
	    }
	    format( gStr, sizeof( gStr ), "~y~~h~Pesca concluida em ~w~~h~%d", bpopCount[ playerid ] );
	    PlayerTextDrawShow( playerid, gtPlayer );
        if( bpopCount[ playerid ] < 28 )
        {
			GameTextForPlayer( playerid, "~y~~h~Pescando~n~~r~~h~Nao saia da area!", 1000, 1 );
		}
	    bpopCount[ playerid ] -= 1;
		Pescando[ playerid ] = SetTimerEx( "Pescou", 1000, false, "d", playerid );
		return 1;
	}
    if( bpopCount[ playerid ] <= 0 && IsPlayerConnected( playerid ) && JaPescando[ playerid ] == 1 )
	{
		if( !IsPlayerInPlace( playerid, 385.345092, -2512.000000, 529.345092, -2368.000000 ))
	    {
	        GameTextForPlayer( playerid, "~r~~h~Peixe perdido!", 1000, 0 );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você saiu da área de pesca enquanto pescava !" );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você perdeu o peixe atual sendo pescado !" );
	        JaPescando[ playerid ] = 0;
        	Pescando[ playerid ] = -1;
        	bpopCount[ playerid ] = -1;
	        return 1;
	    }
	    GameTextForPlayer( playerid, "~n~~y~~h~Pescou ~w~~h~+1 ~y~~h~peixe.", 1000, 0 );
        SendClientMessage( playerid, COLOR_AZULAGUA, "[ > ] Sua rede voltou." );
		new
		    countPeixes = dini_Int( f( playerid ), "Peixes" )
		;
		dini_IntSet( f( playerid ), "Peixes", countPeixes + 1 );
		if( countPeixes+1 >= 15 )
		{
			format( gstring, sizeof( gstring ), "{00CCFF}• {FFFFFF}Agora você possui o total {FF0000}15 / 15{FFFFFF} de peixes.\n{FF0000}Você atingiu 15 peixes já pode vende-los." );
			ShowPlayerDialog( playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}•»{FFFFFF} Info Pesca", gstring, "OK", "" );
		}
		if( countPeixes+1 < 15 )
		{
			format( gstring, sizeof( gstring ), "{00CCFF}• {FFFFFF}Agora você possui o total %d / 15 de peixes.\n{FFFFFF}Ao antingir 15 peixes você poderá vende-los.", countPeixes + 1 );
			ShowPlayerDialog( playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}•»{FFFFFF} Info Pesca", gstring, "OK", "" );
		}
		JaPescando[ playerid ] = 0;
        Pescando[ playerid ] = -1;
        bpopCount[ playerid ] = -1;
	}
	return 1;
}

forward Cascou( playerid );
public Cascou( playerid )
{
	if( bpopCount[ playerid ] > 0 && IsPlayerConnected( playerid ) && JaCascando[ playerid ] == 1 )
	{
     	if( !IsPlayerInPlace( playerid, -746.633666, -2122.113037, -474.633666, -1874.113037 ))
	 	{
	        GameTextForPlayer( playerid, "~r~~h~Caca perdida!", 1000, 0 );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você saiu da área de caça enquanto caçava !" );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você perdeu a caça atual sendo caçada !" );
	        JaCascando[ playerid ] = 0;
        	Cascando[ playerid ] = -1;
        	bpopCount[ playerid ] = -1;
	        return 1;
	    }
        if( bpopCount[ playerid ] < 28 )
        {
			GameTextForPlayer( playerid, "~y~~h~Cacando~n~~r~~h~Nao saia da area!", 1000, 1 );
		}
	    bpopCount[ playerid ] -= 1;
		Cascando[ playerid ] = SetTimerEx( "Cascou", 1000, false, "d", playerid );
		return 1;
	}
    if( bpopCount[ playerid ] <= 0 && IsPlayerConnected( playerid ) && JaCascando[ playerid ] == 1 )
	{
		if( !IsPlayerInPlace( playerid, -746.633666, -2122.113037, -474.633666, -1874.113037 ))
	 	{
	        GameTextForPlayer( playerid, "~r~~h~Caca perdida!", 1000, 0 );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você saiu da área de caça enquanto caçava !" );
	        SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você perdeu a caça atual sendo caçada !" );
	        JaCascando[ playerid ] = 0;
        	Cascando[ playerid ] = -1;
        	bpopCount[ playerid ] = -1;
	        return 1;
	    }
	    GameTextForPlayer( playerid, "~n~~y~~h~Cacou ~w~~h~+1 ~y~~h~caca.", 1000, 0 );
        SendClientMessage( playerid, COLOR_VERDE, "[ > ] Você já pode caçar uma outra presa." );
		new
		    countCacas = dini_Int( f( playerid ), "Caca" )
		;
		dini_IntSet( f( playerid ), "Caca", countCacas + 1 );
		if( countCacas+1 >= 10 )
		{
			format( gstring, sizeof( gstring ), "{00CCFF}• {FFFFFF}Agora você possui o total {FF0000}10 / 10{FFFFFF} de caças.\n{FF0000}Você atingiu 10 caças já pode vende-las." );
			ShowPlayerDialog( playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}•»{FFFFFF} Info Caça", gstring, "OK", "" );
		}
		if( countCacas+1 < 10 )
		{
			format( gstring, sizeof( gstring ), "{00CCFF}• {FFFFFF}Agora você possui o total %d / 10 de caças.\n{FFFFFF}Ao antingir 10 caças você poderá vende-las.", countCacas + 1 );
			ShowPlayerDialog( playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}•»{FFFFFF} Info Caça", gstring, "OK", "" );
		}
		JaCascando[ playerid ] = 0;
     	Cascando[ playerid ] = -1;
		bpopCount[ playerid ] = -1;
	}
	return 1;
}

forward MudarTempo( );
public MudarTempo( )
{
    new
		hora,
		minuto,
		segundos
	;
	gettime( hora, minuto, segundos );
	if( hora == 6 )
		SetWorldTime( 8 );
    else if( hora == 12 )
		SetWorldTime( 10 );
    else if( hora == 13 )
		SetWorldTime( 16 );
    else if( hora == 17 )
		SetWorldTime( 21 );
    else if( hora == 20 )
		SetWorldTime( 23 );
    else if( hora == 22 )
		SetWorldTime( 0 );
    else if( hora == 0 )
		SetWorldTime( 3 );
    else if( hora == 5 )
		SetWorldTime( 5 );
    //Clima();
    return 1;
}

forward PagarSalario( playerid );
public PagarSalario( playerid )
{
	if( IsPlayerConnected( playerid ))
	{
		if( pInfo[ playerid ][ AFK ] == false )
		{
		    if( pInfo[ playerid ][ Prof ] == DESEMPREGADO )
		    {
    			SendClientMessage( playerid, 0xFF6336FF, "·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•··•·•·•·•·•·•·[ Salário ]·•·•·•·•·•·•··•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·" );
				SendClientMessage( playerid, 0xFFFFFFAA, "» Você é desempregado(a), recebe {009933}$500{FFFFFF} do governo." );
                sGivePlayerCash( playerid, 500 );
				if( aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Moderador ] != 1 && pInfo[ playerid ][ PLAYER_VIP ] != 1 )
				{
					new
					 	CasaID = dini_Int( gFile, "Casa" )
					;
					if( CasaID > 0 )
					{
						if( !strcmp( CasaInfo[ CasaID ][ Proprietario ], PlayerName( playerid ), true ))
						{
							new
								rand = -100 + random( 1000 )
							;
							dini_IntSet( gFile, "Impostos", dini_Int( gFile, "Impostos" ) + CasaInfo[ CasaID ][ Preco ] * 1 / 100 + rand );
							dini_IntSet( gFile, "Atrasados", dini_Int( gFile, "Atrasados" ) + 1 );

							MensagemFormatada( playerid, 0xFFFFFFAA, "» Sua casa número %d, somando ( Água + Luz + Dispensas ), somou um total de: {009933}$%d", CasaID, CasaInfo[ CasaID ][ Preco ] * 1 / 100 + rand );
							SendClientMessage( playerid, 0xFFFFFFAA, "» Pague seus impostos na prefeitura, caso deixe acumular 10 vezes você perde sua casa !" );
							MensagemFormatada( playerid, 0xFFFFFFAA, "» Impostos acumulados %d de 10. ( 10 de 10 sua casa é liberada automaticamente ).", dini_Int( gFile, "Atrasados" ));

							if( dini_Int( gFile, "Atrasados" ) >= 10 )
							{
								CasaLiberarPorImpostos( CasaID );
							}
						}
					}
				}
		 		else if( aInfo[ playerid ][ Dono ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 )
				{
				    if( pInfo[ playerid ][ PLAYER_VIP ] == 1 )
				    {
				        SendClientMessage( playerid, COLOR_AMARELO, "• JOGADOR VIP NÃO PAGA IMPOSTOS." );
				    }
				    if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
				    {
					    SendClientMessage( playerid, COLOR_AMARELO, "• MEMBROS DA STAFF NÃO PAGAM IMPOSTOS." );
				    }
				}                                                             // Salário de cada profissão
				SendClientMessage( playerid, 0xFF6336FF, "·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•··•·•·•·•·[ Salário ]·•·•·•·•·•··•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·" );
			}
			else if( pInfo[ playerid ][ Prof ] == MOTORISTA_ONIBUS )
			{
		    	Salario( playerid, 1000 );
		    }
			else if( pInfo[ playerid ][ Prof ] == TAXISTA )
			{
		    	Salario( playerid, 600 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == MOTO_TAXISTA )
			{
		    	Salario( playerid, 700 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == TAXI_AEREO )
			{
		    	Salario( playerid, 800 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == CAMINHONEIRO )
			{
		    	Salario( playerid, 700 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
			{
		    	Salario( playerid, 800 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == MOTOBOY )
			{
		    	Salario( playerid, 900 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == SEGURANCA_PART )
			{
		    	Salario( playerid, 900 );
		    }
			else if( pInfo[ playerid ][ Prof ] == MOTORISTA_PART )
			{
		    	Salario( playerid, 800 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
			{
		    	Salario( playerid, 900 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
			{
		    	Salario( playerid, 1500 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
			{
		    	Salario( playerid, 1900 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == DELEGADO )
			{
		    	Salario( playerid, 2200 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == BOPE )
			{
		    	Salario( playerid, 3000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
			{
		    	Salario( playerid, 2600 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == EXERCITO )
			{
		    	Salario( playerid, 3900 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == MARINHA )
			{
		    	Salario( playerid, 7000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == JUIZ )
			{
		    	Salario( playerid, 2500 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS )
			{
		    	Salario( playerid, 1000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS )
			{
		    	Salario( playerid, 1000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == ASSASSINO )
			{
		    	Salario( playerid, 1300 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == ATIRADOR )
			{
		    	Salario( playerid, 1000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == TERRORISTA )
			{
		    	Salario( playerid, 1200 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == CHEFE_MAFIA )
			{
		    	Salario( playerid, 2000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == SEG_ILHA )
			{
		    	Salario( playerid, 760 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PORT_ILHA )
			{
		    	Salario( playerid, 750 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PIZZABOY )
			{
		    	Salario( playerid, 550 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == HOTDOG )
			{
		    	Salario( playerid, 800 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == SORVETEIRO )
			{
		    	Salario( playerid, 800 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
			{
		    	Salario( playerid, 600 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == REPORTER )
			{
		    	Salario( playerid, 750 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == DRIFTER )
			{
		    	Salario( playerid, 800 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == DEPUTADO )
			{
		    	Salario( playerid, 2000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PREFEITO )
			{
		    	Salario( playerid, 3000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PRESIDENTE )
			{
		    	Salario( playerid, 5000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == INSTRUTOR )
			{
		    	Salario( playerid, 900 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == MECANICO )
			{
		    	Salario( playerid, 750 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PESCADOR )
			{
		    	Salario( playerid, 550 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == CACADOR )
			{
		    	Salario( playerid, 550 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == MEDICO )
			{
		    	Salario( playerid, 800 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == ADVOGADO )
			{
		    	Salario( playerid, 750 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == VENDEDOR_SKINS )
			{
		    	Salario( playerid, 650 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == FRENTISTA )
			{
		    	Salario( playerid, 650 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PADRE )
			{
		    	Salario( playerid, 600 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PROSTITUTA )
			{
		    	Salario( playerid, 850 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == SEG_VILA )
		    {
		        Salario( playerid, 700 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PORT_VILA )
		    {
		        Salario( playerid, 700 );
		    }
   		    else if( pInfo[ playerid ][ Prof ] == AVIAOZINHO )
		    {
		        Salario( playerid, 800 );
		    }
   		    else if( pInfo[ playerid ][ Prof ] == BOMBEIRO )
		    {
		        Salario( playerid, 950 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == PEDREIRO )
		    {
		        Salario( playerid, 1000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == LIXEIRO )
		    {
		        Salario( playerid, 1000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE )
		    {
		        Salario( playerid, 1000 );
		    }
		    else if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX )
		    {
		        Salario( playerid, 900 );
		    }
		}
		else
		{
		    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não recebeu salário por estar AFK ! ( Ausente )" );
		}
	}
	return 1;
}

stock Salario( playerid, quantia )
{
    format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
    SendClientMessage( playerid, 0xFF6336FF, "·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•··•·•·•·•·•·•·[ Salário ]·•·•·•·•·•·•··•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·" );
	if( pInfo[ playerid ][ ContaBanco ] == 1 )
	{
		dini_IntSet( gFile, "SaldoBanco", dini_Int( gFile, "SaldoBanco" ) + quantia );
		format( gStr, sizeof( gStr ), "» O salário atual da sua profissão é de: {009933}$%d", quantia );
		SendClientMessage( playerid, 0xFFFFFFAA, gStr );
		SendClientMessage( playerid, 0xFFFFFFAA, "» Seu salário foi depositado automaticamente em sua conta bancária !" );
		if( aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Moderador ] != 1 && pInfo[ playerid ][ PLAYER_VIP ] != 1 )
		{
			new
				CasaID = dini_Int( gFile, "Casa" )
			;
			if( CasaID > 0 )
			{
				if( strcmp( CasaInfo[ CasaID ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
				{
					new
						rand = -100 + random( 1000 )
					;
					dini_IntSet( gFile, "Impostos", dini_Int( gFile, "Impostos" ) + CasaInfo[ CasaID ][ Preco ] * 1 / 100 + rand );
					dini_IntSet( gFile, "Atrasados", dini_Int( gFile, "Atrasados" ) + 1 );
					MensagemFormatada( playerid, 0xFFFFFFAA, "» Sua casa número %d, somando ( Água + Luz + Dispensas ), somou um total de: {009933}$%d", CasaID, CasaInfo[ CasaID ][ Preco ] * 1 / 100 + rand );
					SendClientMessage( playerid, 0xFFFFFFAA, "» Pague seus impostos na prefeitura, caso deixe acumular 10 vezes você perde sua casa !" );
					MensagemFormatada( playerid, 0xFFFFFFAA, "» Impostos acumulados %d de 10. ( 10 de 10 sua casa é liberada automaticamente ).", dini_Int( gFile, "Atrasados" ));
					if( dini_Int( gFile, "Atrasados" ) >= 10 )
					{
						CasaLiberarPorImpostos( CasaID );
					}
				}
			}
		}
		else if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 )
		{
			if( pInfo[ playerid ][ PLAYER_VIP ] == 1 )
			{
				SendClientMessage( playerid, COLOR_AMARELO, "• JOGADOR(A) VIP NÃO PAGA IMPOSTOS." );
			}
			if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
			{
				SendClientMessage( playerid, COLOR_AMARELO, "• MEMBROS DA STAFF NÃO PAGAM IMPOSTOS." );
			}
		}
	}
	else if( pInfo[ playerid ][ ContaBanco ] == 0 )
	{
	    sGivePlayerCash( playerid, quantia );
		format( gStr, sizeof( gStr ), "» O salário atual da sua profissão é de: {009933}$%d", quantia );
		SendClientMessage( playerid, 0xFFFFFFAA, gStr );
 		SendClientMessage( playerid, 0xFFFFFFAA, "x Você não possui uma conta bancária, o dinheiro foi para suas mãos." );
 		SendClientMessage( playerid, 0xFFFFFFAA, "» Abra uma bancária e o salário será depositado automaticamente !" );
		if( aInfo[ playerid ][ Dono ] != 1 && aInfo[ playerid ][ Admin ] != 1 && aInfo[ playerid ][ Moderador ] != 1 && aInfo[ playerid ][ Ajudante ] != 1 && pInfo[ playerid ][ PLAYER_VIP ] != 1 )
		{
			new
				CasaID = dini_Int( gFile, "Casa" )
			;
			if( CasaID > 0 )
			{
				if( strcmp( CasaInfo[ CasaID ][ Proprietario ], PlayerName( playerid ), true ) == 0 )
				{
					new
						rand = -100 + random( 1000 )
					;
					dini_IntSet( gFile, "Impostos", dini_Int( gFile, "Impostos" ) + CasaInfo[ CasaID ][ Preco ] * 1 / 100 + rand );
					dini_IntSet( gFile, "Atrasados", dini_Int( gFile, "Atrasados" ) + 1 );
					MensagemFormatada( playerid, 0xFFFFFFAA, "» Sua casa número %d, somando ( Água + Luz + Dispensas ), somou um total de: {009933}$%d", CasaID, CasaInfo[ CasaID ][ Preco ] * 1 / 100 + rand );
					SendClientMessage( playerid, 0xFFFFFFAA, "» Pague seus impostos na prefeitura, caso deixe acumular 10 vezes você perde sua casa !" );
					MensagemFormatada( playerid, 0xFFFFFFAA, "» Impostos acumulados %d de 10. ( 10 de 10 sua casa é liberada automaticamente ).", dini_Int( gFile, "Atrasados" ));
					if( dini_Int( gFile, "Atrasados" ) >= 10 )
					{
						CasaLiberarPorImpostos( CasaID );
					}
				}
			}
		}
		else if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 || pInfo[ playerid ][ PLAYER_VIP ] == 1 )
		{
			if( pInfo[ playerid ][ PLAYER_VIP ] == 1 )
			{
				SendClientMessage( playerid, COLOR_AMARELO, "• JOGADOR(A) VIP NÃO PAGA IMPOSTOS." );
			}
			if( aInfo[ playerid ][ Dono ] == 1 || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1 || aInfo[ playerid ][ Ajudante ] == 1 )
			{
				SendClientMessage( playerid, COLOR_AMARELO, "• ADMINISTRADORES E MODERADORES NÃO PAGAM IMPOSTOS." );
			}
		}
	}
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 )
	{
	    SendClientMessage( playerid, COLOR_AMARELO, "• Você é um(a) jogador(a) VIP e recebe +3K de salário." );
	    sGivePlayerCash( playerid, 3000 );
	}
	SendClientMessage( playerid, 0xFF6336FF, "·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•··•·•·•·•·•·•·•·[ Salário ]·•·•·•·•·•·•··•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·•·" );
}

//	   |_-»			Stocks		«-_|
stock pass_hash( buf[ ] )
{
	new length = strlen( buf );
    new s1 = 1;
    new s2 = 0;
    new n;
    for( n = 0; n < length; n++ )
    {
       s1 = ( s1 + buf[ n ] ) % 65521;
       s2 = ( s2 + s1 )     % 65521;
    }
    return ( s2 << 16 ) + s1;
}

stock PlayerName( playerid )
{
	new
		gName[ MAX_PLAYER_NAME + 1 ];
	GetPlayerName( playerid, gName, sizeof( gName ));
	return gName;
}

stock strtok( const string[ ], &index )
{
	new length = strlen( string );
	while (( index < length ) && ( string[ index ] <= ' ' ))
	{
		index++;
	}

	new offset = index;
	new result[ 20 ];
	while (( index < length ) && ( string[ index ] > ' ' ) && (( index - offset ) < ( sizeof( result ) - 1 )) )
	{
		result[ index - offset ] = string[ index ];
		index++;
	}
	result[ index - offset ] = EOS;
	return result;
}

forward LiberarPrisao( playerid );
public LiberarPrisao( playerid )
{
	if( pInfo[ playerid ][ Preso ] <= 0 )
	{
	    KillTimer( T_Preso[ playerid ] );
	    TextDrawHideForPlayer( playerid, p_TextPreso[ playerid ] );
	    SendClientMessage( playerid, 0xA9C4E4AA, "[ x ] Você cumpriu sua pena e está livre novamente !" );
	    SetPlayerPos( playerid, 265.9714, 83.1550, 1001.0391 );
	    SetPlayerInterior( playerid, 6 );
	    SetPlayerWantedLevel( playerid, 0 );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ Preso ] = 0;
		SetPlayerHealth( playerid, 100.0 );
		GameTextForPlayer( playerid, "~w~SOLTO!", 3000, 0 );
 		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		dini_IntSet( gFile, "Abuser", 0 );
		pInfo[ playerid ][ entrouDEL ] = 1;
		return 1;
	}
	if( pInfo[ playerid ][ Preso ] >= 1 )
	{
	    pInfo[ playerid ][ Preso ] --;
        T_Preso[ playerid ] = SetTimerEx( "LiberarPrisao", 1000, false, "d", playerid );
		new
			d_Horas1,
			d_Minut1,
			d_Segun1
		;
		formatSeconds( pInfo[ playerid ][ Preso ], d_Horas1, d_Minut1, d_Segun1 );
		if( d_Horas1 > 0 )
		{
			format( gstring, sizeof( gstring ), "~r~~h~Tempo de Prisao~n~~y~~h~Hora(s): %d~n~~p~~h~Minutos: ~w~%d~n~~y~~h~Segundos: ~w~%d", d_Horas1, d_Minut1, d_Segun1 );
			TextDrawSetString( p_TextPreso[ playerid ], gstring );
		}
		else if( d_Horas1 <= 0 && d_Minut1 > 0 )
		{
			format( gStr, sizeof( gStr ), "~r~~h~Tempo de Prisao~n~~n~~p~~h~Minutos: ~w~%d~n~~y~~h~Segundos: ~w~%d", d_Minut1, d_Segun1 );
			TextDrawSetString( p_TextPreso[ playerid ], gStr );
		}
		else if( d_Horas1 <= 0 && d_Minut1 <= 0 && d_Segun1 > 0 )
		{
			format( gStr, sizeof( gStr ), "~r~~h~Tempo de Prisao~n~~n~~y~~h~Segundos: ~w~%d", d_Segun1 );
			TextDrawSetString( p_TextPreso[ playerid ], gStr );
		}
		TextDrawShowForPlayer( playerid, p_TextPreso[ playerid ] );
	}
	return 1;
}

stock SetPrisao( playerid )
{
    SetPlayerWantedLevel( playerid, 0 );
	ResetPlayerWeapons( playerid );
	SetPlayerInterior( playerid, 6 );
	SetPlayerPos( playerid, 264.5996, 77.7367, 1001.0391 );
	SetPlayerHealth( playerid, 9999999999.0 );
	KillTimer( T_Preso[ playerid ] );
	T_Preso[ playerid ] = SetTimerEx( "LiberarPrisao", 1000, false, "d", playerid );
}

stock Prender( playerid )
{
	if( GetPlayerWantedLevel( playerid ) == 1 )
	{
	    pInfo[ playerid ][ Preso ] = 600; // 10 Minutos
	}
	else if( GetPlayerWantedLevel( playerid ) == 2 )
	{
	    pInfo[ playerid ][ Preso ] = 900; // 15 Minutos
	}
	else if( GetPlayerWantedLevel( playerid ) == 3 )
	{
	    pInfo[ playerid ][ Preso ] = 900; // 15 Minutos
	}
	else if( GetPlayerWantedLevel( playerid ) == 4 )
	{
	    pInfo[ playerid ][ Preso ] = 1200; // 20 Minutos
	}
	else if( GetPlayerWantedLevel( playerid ) == 5 )
	{
	    pInfo[ playerid ][ Preso ] = 1500; // 25 Minutos
	}
	else if( GetPlayerWantedLevel( playerid ) >= 6 )
	{
	    pInfo[ playerid ][ Preso ] = 1800; // 30 Minutos
	}
	ResetPlayerWeapons( playerid );
	SetPlayerWantedLevel( playerid, 0 );
	SetPlayerInterior( playerid, 6 );
	SetPlayerPos( playerid, 264.5996, 77.7367, 1001.0391 );
	SetPlayerHealth( playerid, 9999999999.0 );
	KillTimer( T_Preso[ playerid ] );
	T_Preso[ playerid ] = SetTimerEx( "LiberarPrisao", 1000, false, "d", playerid );
}


stock LimparChat( playerid, linhas )
{
	for( new i; i < linhas; i++ )
	{
		SendClientMessage( playerid, 0xFFFF00AA, "  " );
	}
	return 1;
}

stock LimparChatTodos( linhas )
{
	for( new i = 0; i < linhas; i++ )
	{
		SendClientMessageToAll( -1, "  " );
	}
	return 1;
}

stock PlayerToPoint( Float:radius, playerid, Float:X, Float:Y, Float:Z )
{
    new Float:oldpos[ 3 ], Float:temppos[ 3 ];
    GetPlayerPos( playerid, oldpos[ 0 ], oldpos[ 1 ], oldpos[ 2 ] );
    temppos[ 0 ] = ( oldpos[ 0 ] -X );
    temppos[ 1 ] = ( oldpos[ 1 ] -Y );
    temppos[ 2 ] = ( oldpos[ 2 ] -Z );
    if(( ( temppos[ 0 ] < radius ) && ( temppos[ 0 ] > -radius )) && (( temppos[ 1 ] < radius ) && ( temppos[ 1 ] > -radius )) && (( temppos[ 2 ] < radius ) && ( temppos[ 2 ] > -radius )) )
    {
        return 1;
    }
    return 0;
}

stock IsPlayerInPlace( playerid, Float:XMin, Float:YMin, Float:XMax, Float:YMax )
{
	new
		RetValue = 0,
		Float:aX,
		Float:aY,
		Float:aZ
	;
    GetPlayerPos( playerid, aX, aY, aZ );
    if( aX >= XMin && aY >= YMin && aX < XMax && aY < YMax )
    {
		RetValue = 1;
    }
	return RetValue;
}

stock GetPlayerDistanceToPoint( playerid, Float:x, Float:y )
{
    new Float:tmpdis;
    new Float:x1, Float:y1, Float:z1;
    GetPlayerPos( playerid, x1, y1, z1 );
    tmpdis = floatsqroot( floatpower( floatabs( floatsub( x,x1 )),2 )+floatpower( floatabs( floatsub( y,y1 )),2 ));
    return floatround( tmpdis );
}

stock GetDistanceBetweenPlayers( playerid, giveplayerid )
{
	new Float:distancia;
    new Float:x1, Float:y1, Float:z1;
    new Float:x2, Float:y2, Float:z2;
    GetPlayerPos( playerid, x1, y1, z1 );
    GetPlayerPos( giveplayerid, x2, y2, z2 );
    distancia = floatsqroot( floatpower( floatabs( floatsub( x2,x1 )),2 )+floatpower( floatabs( floatsub( y2,y1 )),2 )+floatpower( floatabs( floatsub( z2,z1 )),2 ));
	return floatround( distancia );
}

stock PlayerZone( playerid, zone[ ] )
{
	new
		ReadTmpZone[ MAX_ZONE_NAME ]
	;
    GetPlayer3DZone( playerid, ReadTmpZone, sizeof( ReadTmpZone ));
	for( new i = 0; i != sizeof( SanAndreasZones ); i++ )
	{
		if( strfind( ReadTmpZone, zone, true ) != -1 )
		return 1;
	}
	return 0;
}

stock GetPlayer2DZone( playerid, zone[ ], len )
{
	new
		Float:x,
		Float:y,
		Float:z
	;
	GetPlayerPos( playerid, x, y, z );
 	for( new i = 0; i != sizeof( SanAndreasZones ); i++ )
	{
		if( x >= SanAndreasZones[ i ][ Zone_Area ][ 0 ] && x <= SanAndreasZones[ i ][ Zone_Area ][ 3 ] && y >= SanAndreasZones[ i ][ Zone_Area ][ 1 ] && y <= SanAndreasZones[ i ][ Zone_Area ][ 4 ] )
		{
			return format( zone, len, SanAndreasZones[ i ][ Zone_Name ], 0 );
		}
	}
	return 0;
}

stock GetPlayer3DZone( playerid, zone[ ], len )
{
	new
		Float:x,
		Float:y,
		Float:z
	;
	GetPlayerPos( playerid, x, y, z );
 	for( new i = 0; i != sizeof( SanAndreasZones ); i++ )
	{
		if( x >= SanAndreasZones[ i ][ Zone_Area ][ 0 ] && x <= SanAndreasZones[ i ][ Zone_Area ][ 3 ] && y >= SanAndreasZones[ i ][ Zone_Area ][ 1 ] && y <= SanAndreasZones[ i ][ Zone_Area ][ 4 ] && z >= SanAndreasZones[ i ][ Zone_Area ][ 2 ] && z <= SanAndreasZones[ i ][ Zone_Area ][ 5 ] )
		{
			return format( zone, len, SanAndreasZones[ i ][ Zone_Name ], 0 );
		}
	}
	return 0;
}

stock GetDotXY( Float:StartPosX, Float:StartPosY, &Float:NewX, &Float:NewY, Float:alpha, Float:dist )
{
	 NewX = StartPosX + ( dist * floatsin( alpha, degrees ));
	 NewY = StartPosY + ( dist * floatcos( alpha, degrees ));
}

stock SalvarFile( playerid )
{
	if( pInfo[ playerid ][ Logado ] == true )
	{
		format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
		dini_IntSet( gFile, "Dinheiro", GetPlayerCash( playerid ));
		dini_IntSet( gFile, "ContaBanco", pInfo[ playerid ][ ContaBanco ] );
		dini_IntSet( gFile, "Profissao", pInfo[ playerid ][ Prof ] );
		if( pInfo[ playerid ][ fardado ] == 0 )
		{
			dini_IntSet( gFile, "Skin", GetPlayerSkin( playerid ));
		}
		dini_IntSet( gFile, "Sexo", pInfo[ playerid ][ Sexo ] );
		dini_IntSet( gFile, "Exp", pInfo[ playerid ][ Exp ] );
		dini_IntSet( gFile, "SegUP", pInfo[ playerid ][ SegUP ] );
		dini_IntSet( gFile, "MinUP", pInfo[ playerid ][ MinUP ] );
		dini_IntSet( gFile, "Level", pInfo[ playerid ][ Level ] );
		dini_IntSet( gFile, "Gasolina", pInfo[ playerid ][ Gas ] );
		dini_IntSet( gFile, "HabT", pInfo[ playerid ][ HabT ] );
		dini_IntSet( gFile, "HabN", pInfo[ playerid ][ HabN ] );
		dini_IntSet( gFile, "HabA", pInfo[ playerid ][ HabA ] );
		dini_IntSet( gFile, "Procurado", GetPlayerWantedLevel( playerid ));
		dini_IntSet( gFile, "Preso", pInfo[ playerid ][ Preso ] );
		dini_IntSet( gFile, "T_Cocaina", pInfo[ playerid ][ Pego_QtaCoca ] );
		dini_IntSet( gFile, "T_Maconha", pInfo[ playerid ][ Pego_QtaMaco ] );
		dini_IntSet( gFile, "T_Crack", pInfo[ playerid ][ Pego_QtaCrac ] );
		dini_IntSet( gFile, "P_Cocaina", pInfo[ playerid ][ PT_Cocaina ] );
		dini_IntSet( gFile, "P_Maconha", pInfo[ playerid ][ PT_Maconha ] );
		dini_IntSet( gFile, "P_Crack", pInfo[ playerid ][ PT_Crack ] );
		dini_IntSet( gFile, "Tem_GPS", pInfo[ playerid ][ Tem_GPS ] );
		dini_IntSet( gFile, "Tem_RelogioUP", pInfo[ playerid ][ Tem_RelogioUP ] );
		dini_IntSet( gFile, "Cor_Relogio", pInfo[ playerid ][ RelogioCor ] );
		dini_IntSet( gFile, "RelogioONOFF", pInfo[ playerid ][ R_UP_ON_OFF ] );
	    dini_IntSet( gFile, "Tem_Velocimetro", pInfo[ playerid ][ Tem_Velocimetro ] );
	    dini_IntSet( gFile, "Velo_ON_OFF", pInfo[ playerid ][ VelocimetroO_F ] );
	    dini_IntSet( gFile, "Tem_Cura", pInfo[ playerid ][ Tem_Cura ] );
	    dini_IntSet( gFile, "Kit", pInfo[ playerid ][ Tem_Kit ] );
	   	dini_IntSet( gFile, "Matou", pInfo[ playerid ][ fMatou ] );
		dini_IntSet( gFile, "Morreu", pInfo[ playerid ][ fMorreu ] );
		dini_IntSet( gFile, "Creditos", pInfo[ playerid ][ Celular_c ] );
		// 'Posições Continuar'
		new
			Float:POS_[ 4 ]
		;
		GetPlayerPos( playerid, POS_[ 0 ], POS_[ 1 ], POS_[ 2 ] );
		GetPlayerFacingAngle( playerid, POS_[ 3 ] );
		dini_FloatSet( gFile, "Cx", POS_[ 0 ] );
		dini_FloatSet( gFile, "Cy", POS_[ 1 ] );
		dini_FloatSet( gFile, "Cz", POS_[ 2 ] );
		dini_FloatSet( gFile, "Cw", POS_[ 3 ] );
		dini_IntSet( gFile, "Ci", GetPlayerInterior( playerid ));
		new
			Float:s_vida
		;
		GetPlayerHealth( playerid, s_vida );
		dini_FloatSet( gFile, "Vida", s_vida );
	    // 'Admin / Mod'
	    aInfo[ playerid ][ Dono ] = 0;
	    aInfo[ playerid ][ Admin ] = 0;
	    aInfo[ playerid ][ Moderador ] = 0;
	    aInfo[ playerid ][ Ajudante ] = 0;
	 	SetPVarInt( playerid, "pDono", 0 );
	 	SetPVarInt( playerid, "pAdmin", 0 );
	 	SetPVarInt( playerid, "pModer", 0 );
	 	SetPVarInt( playerid, "pAjud", 0 );
	 	// 'Clan'
	 	format( playerClan[ playerid ], MAX_PLAYER_NAME+1, "Nenhum" );
	 	clanColor[ playerid ] = -1;
	 	pInfo[ playerid ][ Abuser ] = 0;
	}
}

stock CarregarFile( playerid )
{
	format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	pInfo[ playerid ][ ContaBanco ] = dini_Int( gFile, "ContaBanco" );
	pInfo[ playerid ][ Prof ] = dini_Int( gFile, "Profissao" );
	pInfo[ playerid ][ Sexo ] = dini_Int( gFile, "Sexo" );
	pInfo[ playerid ][ Exp ] = dini_Int( gFile, "Exp" );
	pInfo[ playerid ][ Level ] = dini_Int( gFile, "Level" );
	pInfo[ playerid ][ MinUP ] = dini_Int( gFile, "MinUP" );
	pInfo[ playerid ][ SegUP ] = dini_Int( gFile, "SegUP" );
	pInfo[ playerid ][ Gas ] = dini_Int( gFile, "Gasolina" );
	pInfo[ playerid ][ HabT ] = dini_Int( gFile, "HabT" );
	pInfo[ playerid ][ HabN ] = dini_Int( gFile, "HabN" );
	pInfo[ playerid ][ HabA ] = dini_Int( gFile, "HabA" );
	pInfo[ playerid ][ HabP ] = dini_Int( gFile, "HabP" );
	pInfo[ playerid ][ Preso ] = dini_Int( gFile, "Preso" );
	pInfo[ playerid ][ Abuser ] = dini_Int( gFile, "Abuser" );
 	pInfo[ playerid ][ Pego_QtaCoca ] = dini_Int( gFile, "T_Cocaina" );
 	pInfo[ playerid ][ Pego_QtaMaco ] = dini_Int( gFile, "T_Maconha" );
 	pInfo[ playerid ][ Pego_QtaCrac ] = dini_Int( gFile, "T_Crack" );
 	pInfo[ playerid ][ PT_Cocaina ] = dini_Int( gFile, "P_Cocaina" );
 	pInfo[ playerid ][ PT_Maconha ] = dini_Int( gFile, "P_Maconha" );
 	pInfo[ playerid ][ PT_Crack ] = dini_Int( gFile, "P_Crack" );
 	pInfo[ playerid ][ Tem_GPS ] = dini_Int( gFile, "Tem_GPS" );
  	pInfo[ playerid ][ Tem_RelogioUP ] = dini_Int( gFile, "Tem_RelogioUP" );
  	pInfo[ playerid ][ RelogioCor ] = dini_Int( gFile, "Cor_Relogio" );
  	pInfo[ playerid ][ R_UP_ON_OFF ] = dini_Int( gFile, "RelogioONOFF" );
  	pInfo[ playerid ][ Tem_Velocimetro ] = dini_Int( gFile, "Tem_Velocimetro" );
  	pInfo[ playerid ][ VelocimetroO_F ] = dini_Int( gFile, "Velo_ON_OFF" );
	pInfo[ playerid ][ Tem_Cura ] = dini_Int( gFile, "Tem_Cura" );
	pInfo[ playerid ][ Tem_Kit ] = dini_Int( gFile, "Kit" );
	pInfo[ playerid ][ Tem_Capacete ] = dini_Int( gFile, "Tem_Capact" );
	pInfo[ playerid ][ ModeloCapacete ] = dini_Int( gFile, "ModeloCapacete" );
	pInfo[ playerid ][ JetPack ] = dini_Int( gFile, "JetPack" );
	pInfo[ playerid ][ fMatou ] = dini_Int( gFile, "Matou" );
	pInfo[ playerid ][ fMorreu ] = dini_Int( gFile, "Morreu" );
	pInfo[ playerid ][ PLAYER_VIP ] = dini_Int(  gFile, "PLAYER_VIP" );
	pInfo[ playerid ][ Seguro ] = dini_Int(  gFile, "Seguro" );
	pInfo[ playerid ][ Convenio ] = dini_Int(  gFile, "Convenio" );
	pInfo[ playerid ][ Celular ] = dini_Int(  gFile, "Celular" );
	pInfo[ playerid ][ Celular_c ] = dini_Int(  gFile, "Creditos" );
	pInfo[ playerid ][ Spawn ] = dini_Int( gFile, "Spawn" );
	pInfo[ playerid ][ Casa ] = dini_Int( gFile, "Casa" );

	if( pInfo[ playerid ][ Casa ] < 1 && pInfo[ playerid ][ Spawn ] != 0 )
	{
	    pInfo[ playerid ][ Spawn ] = 0;
	    dini_IntSet( gFile, "Spawn", 0 );
	}
	if( pInfo[ playerid ][ Casa ] >= 1 )
	{
        format( gStr, sizeof( gStr ), "Casas/casa%d.ini", pInfo[ playerid ][ Casa ] );
        if( fexist( gStr ))
        {
			if( !strcmp( CasaInfo[ pInfo[ playerid ][ Casa ] ][ Proprietario ], PlayerName( playerid ), true ))
			{
			    pInfo[ playerid ][ Spawn ] = 1;
			    dini_IntSet( gFile, "Spawn", 1 );
			}
        }
        else
		{
		    pInfo[ playerid ][ Spawn ] = 0;
		    dini_IntSet( gFile, "Spawn", 0 );
		}
	}
	else if( pInfo[ playerid ][ Casa ] < 1 )
	{
	    new
	        MoradorCID = dini_Int( gFile, "MorandoID" )
		;
		if( MoradorCID >= 1 )
		{
		    format( gStr, sizeof( gStr ), "Casas/casa%d.ini", MoradorCID );
		}
        if( fexist( gStr ))
        {
			if( !strcmp( CasaInfo[ MoradorCID ][ Morador ], PlayerName( playerid ), true ) || !strcmp( CasaInfo[ MoradorCID ][ Morador2 ], PlayerName( playerid ), true ) || !strcmp( CasaInfo[ MoradorCID ][ Morador3 ], PlayerName( playerid ), true ))
			{
			    pInfo[ playerid ][ Spawn ] = 1;
			    dini_IntSet( gFile, "Spawn", 1 );
			}
        }
        else
		{
		    pInfo[ playerid ][ Spawn ] = 0;
		    dini_IntSet( gFile, "Spawn", 0 );
		}
	}
	SetPlayerScore( playerid, dini_Int( gFile, "Level" ));
	sGivePlayerCash( playerid, dini_Int( gFile, "Dinheiro" ));
	SetPlayerWantedLevel( playerid, dini_Int( gFile, "Procurado" ));
	//SetPlayerSkin( playerid, dini_Int( gFile, "Skin" ));
	if( dini_Int( gFile, "Luta" ) == 1 )
	{
		SetPlayerFightingStyle( playerid, FIGHT_STYLE_BOXING );
	}
	else if( dini_Int( gFile, "Luta" ) == 2 )
	{
		SetPlayerFightingStyle( playerid, FIGHT_STYLE_KUNGFU );
	}
	else if( dini_Int( gFile, "Luta" ) == 3 )
	{
		SetPlayerFightingStyle( playerid, FIGHT_STYLE_KNEEHEAD );
	}
	else if( dini_Int( gFile, "Luta" ) == 4 )
	{
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_GRABKICK );
	}
	else if( dini_Int( gFile, "Luta" ) == 5 )
	{
		SetPlayerFightingStyle( playerid, FIGHT_STYLE_NORMAL );
	}
	// 'Admin / Mod'
	aInfo[ playerid ][ Dono ] = dini_Int( gFile, "Dono" );
	aInfo[ playerid ][ Admin ] = dini_Int( gFile, "Administrador" );
	aInfo[ playerid ][ Moderador ] = dini_Int( gFile, "Moderador" );
	aInfo[ playerid ][ Ajudante ] = dini_Int( gFile, "Ajudante" );
	SetPVarInt( playerid, "pDono", aInfo[ playerid ][ Dono ] );
	SetPVarInt( playerid, "pAdmin", aInfo[ playerid ][ Admin ] );
	SetPVarInt( playerid, "pModer", aInfo[ playerid ][ Moderador ] );
	SetPVarInt( playerid, "pAjud", aInfo[ playerid ][ Ajudante ] );
	// 'Posições Continuar'
	pInfo[ playerid ][ ContX ] = dini_Float( gFile, "Cx" );
	pInfo[ playerid ][ ContY ] = dini_Float( gFile, "Cy" );
	pInfo[ playerid ][ ContZ ] = dini_Float( gFile, "Cz" );
	pInfo[ playerid ][ ContW ] = dini_Float( gFile, "Cw" );
	pInfo[ playerid ][ ContI ] = dini_Int( gFile, "Ci" );
	new
	  	Float:vida = dini_Float( gFile, "Vida" )
  	;
  	if( vida > 5.0 )
  	{
		SetPlayerHealth( playerid, vida );
	}
	else
	{
	    SetPlayerHealth( playerid, 5.0 );
	}
	// 'Clan'
	format( pFile, sizeof( pFile ), "Clans/MembrosClans/%s.ini", PlayerName( playerid ));
	if( fexist( pFile ))
	{
	    format( playerClan[ playerid ], MAX_PLAYER_NAME+1, dini_Get( pFile, "Clan" ));
	    format( gStr, sizeof( gStr ), "Clans/Clans/%s.ini", playerClan[ playerid ] );
		clanColor[ playerid ] = dini_Int( gStr, "Color" );
	}
	else if( !fexist( pFile ))
	{
		format( playerClan[ playerid ], MAX_PLAYER_NAME+1, "Nenhum" );
		clanColor[ playerid ] = -1;
	}
	new s[ 5 ];
	if( pInfo[ playerid ][ PLAYER_VIP ] == 1 )
	{
		s = "Sim";
	}
	else
	{
		s = "Nao";
	}
	format( gstring, sizeof( gstring ), "~r~~h~Level ~w~~h~%d | ~y~~h~Casa ~w~~h~%d | ~r~~h~VIP ~w~~h~%s | ~y~~h~Clan/Gangue ~w~~h~%s", pInfo[ playerid ][ Level ], pInfo[ playerid ][ Casa ], s, playerClan[ playerid ] );
	TextDrawSetString( InfoPlayer[ playerid ], gstring );
}

stock SetColor( playerid )
{
    if( oInfo[ playerid ][ Lider ] == 0 && oInfo[ playerid ][ SubLider ] == 0 && oInfo[ playerid ][ Membro ] == 0 )
    {
	if( pInfo[ playerid ][ Prof ] == DESEMPREGADO )
	    SetPlayerColor( playerid, COLOR_DESEMPREGADO );
    else if( pInfo[ playerid ][ Prof ] == MOTORISTA_ONIBUS )
  		SetPlayerColor( playerid, COLOR_MOTORISTABUS );
    else if( pInfo[ playerid ][ Prof ] == TAXISTA )
     	SetPlayerColor( playerid, COLOR_TAXISTA );
    else if( pInfo[ playerid ][ Prof ] == MOTO_TAXISTA )
    	SetPlayerColor( playerid, COLOR_MOTOTAXI );
    else if( pInfo[ playerid ][ Prof ] == TAXI_AEREO )
    	SetPlayerColor( playerid, COLOR_TAXIAEREO );
    else if( pInfo[ playerid ][ Prof ] == CAMINHONEIRO )
    	SetPlayerColor( playerid, COLOR_CAMINHONEIRO );
    else if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
    	SetPlayerColor( playerid, COLOR_MAQUINISTA );
    else if( pInfo[ playerid ][ Prof ] == MOTOBOY )
    	SetPlayerColor( playerid, COLOR_MOTOBOY );
    else if( pInfo[ playerid ][ Prof ] == SEGURANCA_PART )
    	SetPlayerColor( playerid, COLOR_SEGPART );
    else if( pInfo[ playerid ][ Prof ] == MOTORISTA_PART )
    	SetPlayerColor( playerid, COLOR_MOTPART );
    else if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
    	SetPlayerColor( playerid, COLOR_GUARDTRANS );
    else if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
    	SetPlayerColor( playerid, COLOR_POLCIVIL );
    else if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
    	SetPlayerColor( playerid, COLOR_POLMILITAR );
    else if( pInfo[ playerid ][ Prof ] == MARINHA )
    	SetPlayerColor( playerid, COLOR_MARINHA );
    else if( pInfo[ playerid ][ Prof ] == DELEGADO )
    	SetPlayerColor( playerid, COLOR_DELEGADO );
    else if( pInfo[ playerid ][ Prof ] == BOPE )
    	SetPlayerColor( playerid, COLOR_BOPE );
    else if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
    	SetPlayerColor( playerid, COLOR_POLRODOVIARIA );
    else if( pInfo[ playerid ][ Prof ] == JUIZ )
    	SetPlayerColor( playerid, COLOR_JUIZ );
    else if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS )
    	SetPlayerColor( playerid, COLOR_TRAFDROGAS );
    else if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS )
    	SetPlayerColor( playerid, COLOR_TRAFARMAS );
    else if( pInfo[ playerid ][ Prof ] == ASSASSINO )
    	SetPlayerColor( playerid, COLOR_ASSASSINO );
    else if( pInfo[ playerid ][ Prof ] == ATIRADOR )
    	SetPlayerColor( playerid, COLOR_ATIRADOR );
    else if( pInfo[ playerid ][ Prof ] == TERRORISTA )
    	SetPlayerColor( playerid, COLOR_TERRORISTA );
    else if( pInfo[ playerid ][ Prof ] == CHEFE_MAFIA )
    	SetPlayerColor( playerid, COLOR_CHEFEMAFIA );
    else if( pInfo[ playerid ][ Prof ] == SEG_ILHA )
    	SetPlayerColor( playerid, COLOR_SEGILHA );
    else if( pInfo[ playerid ][ Prof ] == PORT_ILHA )
    	SetPlayerColor( playerid, COLOR_PORILHA );
    else if( pInfo[ playerid ][ Prof ] == PIZZABOY )
    	SetPlayerColor( playerid, COLOR_PIZZABOY );
    else if( pInfo[ playerid ][ Prof ] == HOTDOG )
    	SetPlayerColor( playerid, COLOR_HOTDOG );
    else if( pInfo[ playerid ][ Prof ] == SORVETEIRO )
    	SetPlayerColor( playerid, COLOR_SORVETEIRO );
    else if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
    	SetPlayerColor( playerid, COLOR_FOTOGRAFO );
    else if( pInfo[ playerid ][ Prof ] == REPORTER )
    	SetPlayerColor( playerid, COLOR_REPORTER );
    else if( pInfo[ playerid ][ Prof ] == DRIFTER )
    	SetPlayerColor( playerid, COLOR_DRIFTER );
    else if( pInfo[ playerid ][ Prof ] == DEPUTADO )
    	SetPlayerColor( playerid, COLOR_DEPUTADO );
    else if( pInfo[ playerid ][ Prof ] == PREFEITO )
    	SetPlayerColor( playerid, COLOR_PREFEITO );
    else if( pInfo[ playerid ][ Prof ] == PRESIDENTE )
    	SetPlayerColor( playerid, COLOR_PRESIDENTE );
    else if( pInfo[ playerid ][ Prof ] == EXERCITO )
    	SetPlayerColor( playerid, COLOR_EXERCITO );
    else if( pInfo[ playerid ][ Prof ] == INSTRUTOR )
    	SetPlayerColor( playerid, COLOR_INSTRUTOR );
    else if( pInfo[ playerid ][ Prof ] == MECANICO )
    	SetPlayerColor( playerid, COLOR_MECANICO );
    else if( pInfo[ playerid ][ Prof ] == PESCADOR )
    	SetPlayerColor( playerid, COLOR_PESCADOR );
    else if( pInfo[ playerid ][ Prof ] == CACADOR )
    	SetPlayerColor( playerid, COLOR_CACADOR );
    else if( pInfo[ playerid ][ Prof ] == MEDICO )
    	SetPlayerColor( playerid, COLOR_MEDICO );
    else if( pInfo[ playerid ][ Prof ] == ADVOGADO )
    	SetPlayerColor( playerid, COLOR_ADVOGADO );
    else if( pInfo[ playerid ][ Prof ] == VENDEDOR_SKINS )
    	SetPlayerColor( playerid, COLOR_VENDEDORSKINS );
    else if( pInfo[ playerid ][ Prof ] == FRENTISTA )
    	SetPlayerColor( playerid, COLOR_FRENTISTA );
    else if( pInfo[ playerid ][ Prof ] == PADRE )
    	SetPlayerColor( playerid, COLOR_PADRE );
    else if( pInfo[ playerid ][ Prof ] == PROSTITUTA )
    	SetPlayerColor( playerid, COLOR_PROSTITUTA );
    else if( pInfo[ playerid ][ Prof ] == SEG_VILA )
    	SetPlayerColor( playerid, COLOR_SEGVILA );
    else if( pInfo[ playerid ][ Prof ] == PORT_VILA )
    	SetPlayerColor( playerid, COLOR_PORVILA );
    else if( pInfo[ playerid ][ Prof ] == AVIAOZINHO )
    	SetPlayerColor( playerid, COLOR_AVIAOZINHO );
	else if( pInfo[ playerid ][ Prof ] == BOMBEIRO )
		SetPlayerColor( playerid, COLOR_BOMBEIRO );
	else if( pInfo[ playerid ][ Prof ] == PEDREIRO )
		SetPlayerColor( playerid, COLOR_PEDREIRO );
	else if( pInfo[ playerid ][ Prof ] == LIXEIRO )
		SetPlayerColor( playerid, COLOR_LIXEIRO );
	else if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE )
		SetPlayerColor( playerid, COLOR_MCF );
 	else if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX )
		SetPlayerColor( playerid, COLOR_AMARELO );
	}
}

stock SpawnProf( playerid ) // Respawn de cada profissão
{
	if( pInfo[ playerid ][ Prof ] == DESEMPREGADO )
	{
		SetPlayerColor( playerid, COLOR_DESEMPREGADO );
		SetPlayerPos( playerid, 1229.6904, -1838.3192, 13.6856 );
		SetPlayerFacingAngle( playerid, 6.1188 );
		SetCameraBehindPlayer(playerid);
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MOTORISTA_ONIBUS )
	{
		new rnd = random( sizeof( SpawnMotoBus ));
		SetPlayerPos( playerid, SpawnMotoBus[ rnd ][ 0 ], SpawnMotoBus[ rnd ][ 1 ], SpawnMotoBus[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnMotoBus[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_MOTORISTABUS );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == TAXISTA )
	{
		new rnd = random( sizeof( SpawnTaxistas ));
		SetPlayerPos( playerid, SpawnTaxistas[ rnd ][ 0 ], SpawnTaxistas[ rnd ][ 1 ], SpawnTaxistas[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnTaxistas[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_TAXISTA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == CAMINHONEIRO )
	{
		new rnd = random( sizeof( SpawnCaminhoneiros ));
		SetPlayerPos( playerid, SpawnCaminhoneiros[ rnd ][ 0 ], SpawnCaminhoneiros[ rnd ][ 1 ], SpawnCaminhoneiros[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnCaminhoneiros[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_CAMINHONEIRO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == DRIFTER )
	{
		new rnd = random( sizeof( SpawnDrifters ));
		SetPlayerPos( playerid, SpawnDrifters[ rnd ][ 0 ], SpawnDrifters[ rnd ][ 1 ], SpawnDrifters[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnDrifters[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_DRIFTER );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	{
		SetPlayerPos( playerid, 1087.2679, -1225.2441, 15.8203 );
		SetPlayerFacingAngle( playerid, 179.8710 );
		SetPlayerColor( playerid, COLOR_MOTOBOY );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE )
	{
		SetPlayerPos( playerid, 1762.5000,-1688.5999,13.3999 );
		SetPlayerFacingAngle( playerid, 180.0000 );
		SetPlayerColor( playerid, COLOR_MCF );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX )
	{
		SetPlayerPos( playerid, 2449.8999,-1548.8000,22.9209 );
		SetPlayerFacingAngle( playerid, 180.0000 );
		SetPlayerColor( playerid, COLOR_AMARELO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == PILOTO )
	{
		SetPlayerPos( playerid, 1685.8595,-2432.9956,13.5547 );
		SetPlayerFacingAngle( playerid, 184.8469 );
		SetPlayerColor( playerid, COLOR_AMARELO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS )
	{
		new rnd = random( sizeof( SpawnTraficDorgas ));
		SetPlayerPos( playerid, SpawnTraficDorgas[ rnd ][ 0 ], SpawnTraficDorgas[ rnd ][ 1 ], SpawnTraficDorgas[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnTraficDorgas[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_TRAFDROGAS );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS )
	{
		new rnd = random( sizeof( SpawnTraficArmas ));
		SetPlayerPos( playerid, SpawnTraficArmas[ rnd ][ 0 ], SpawnTraficArmas[ rnd ][ 1 ], SpawnTraficArmas[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnTraficArmas[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_TRAFARMAS );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == CHEFE_MAFIA )
	{
		new rnd = random( sizeof( SpawnChefeMafia ));
		SetPlayerPos( playerid, SpawnChefeMafia[ rnd ][ 0 ], SpawnChefeMafia[ rnd ][ 1 ], SpawnChefeMafia[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnChefeMafia[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_CHEFEMAFIA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == EXERCITO )
	{
		SetPlayerPos( playerid, 248.8000,1858.0000,14.1000 );
		SetPlayerFacingAngle( playerid, 268.2100 );
		SetPlayerColor( playerid, COLOR_EXERCITO );
        pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MEDICO )
	{
		new rnd = random( sizeof( SpawnMedico ));
		SetPlayerPos( playerid, SpawnMedico[ rnd ][ 0 ], SpawnMedico[ rnd ][ 1 ], SpawnMedico[ rnd ][ 2 ] );
		SetPlayerFacingAngle( playerid, SpawnMedico[ rnd ][ 3 ] );
		SetPlayerColor( playerid, COLOR_MEDICO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == PESCADOR )
	{
		SetPlayerPos( playerid, 446.9689,-1879.2867,3.2256 );
		SetPlayerFacingAngle( playerid, 180.8393 );
		SetPlayerColor( playerid, COLOR_PESCADOR );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == CACADOR )
	{
		SetPlayerPos( playerid, 34.7897,-2648.0889,40.7285 );
		SetPlayerFacingAngle( playerid, 2.9115 );
		SetPlayerColor( playerid, COLOR_CACADOR );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == SEGURANCA_PART )
	{
		SetPlayerPos( playerid, 302.1427,-1528.2958,24.9219 );
		SetPlayerFacingAngle( playerid, 53.7477 );
		SetPlayerColor( playerid, COLOR_SEGPART );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MOTORISTA_PART )
	{
		SetPlayerPos( playerid, 1282.8711,-1316.7058,13.3827 );
		SetPlayerFacingAngle( playerid, 93.5866 );
		SetPlayerColor( playerid, COLOR_MOTPART );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MOTO_TAXISTA )
	{
		SetPlayerPos( playerid, 1791.9552,-1869.7761,13.5673 );
		SetPlayerFacingAngle( playerid, 357.9466 );
		SetPlayerColor( playerid, COLOR_MOTOTAXI );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == TAXI_AEREO )
	{
		SetPlayerPos( playerid, 1753.7502,-1920.5940,13.5719 );
		SetPlayerFacingAngle( playerid, 269.1855 );
		SetPlayerColor( playerid, COLOR_TAXIAEREO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
	{
		SetPlayerPos( playerid, 1686.0665,-1968.3176,14.1172 );
		SetPlayerFacingAngle( playerid, 269.4521 );
		SetPlayerColor( playerid, COLOR_MAQUINISTA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == ASSASSINO )
	{
		SetPlayerPos( playerid, 2123.8608,-967.9537,57.7656 );
		SetPlayerFacingAngle( playerid, 253.7338 );
		SetPlayerColor( playerid, COLOR_ASSASSINO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == ATIRADOR )
	{
		SetPlayerPos( playerid, 2230.6968,-1120.5590,48.7500 );
		SetPlayerFacingAngle( playerid, 61.8766 );
		SetPlayerColor( playerid, COLOR_ATIRADOR );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == TERRORISTA )
	{
		SetPlayerPos( playerid, -378.0573,2242.0767,42.6185 );
		SetPlayerFacingAngle( playerid, 106.2302 );
		SetPlayerColor( playerid, COLOR_TERRORISTA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == PORT_ILHA )
	{
		SetPlayerPos( playerid, 835.3889,-2060.5396,12.8672 );
		SetPlayerFacingAngle( playerid, 357.8696 );
		SetPlayerColor( playerid, COLOR_PORILHA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == SEG_ILHA )
	{
		SetPlayerPos( playerid, 832.3940,-2520.9224,28.3489 );
		SetPlayerFacingAngle( playerid, 358.3842 );
		SetPlayerColor( playerid, COLOR_SEGILHA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == PIZZABOY )
	{
		SetPlayerPos( playerid, 2104.3772,-1810.1393,13.5547 );
		SetPlayerFacingAngle( playerid, 2.6313 );
		SetPlayerColor( playerid, COLOR_PIZZABOY );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
	{
		SetPlayerPos( playerid, 2338.1501,1724.3357,10.8203 );
		SetPlayerFacingAngle( playerid, 147.9959 );
		SetPlayerColor( playerid, COLOR_FOTOGRAFO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == HOTDOG )
	{
		SetPlayerPos( playerid, 1199.2419,-890.7679,43.1006 );
		SetPlayerFacingAngle( playerid, 11.0850 );
		SetPlayerColor( playerid, COLOR_HOTDOG );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == SORVETEIRO )
	{
		SetPlayerPos( playerid, 1070.2622,-1340.1315,13.5547 );
		SetPlayerFacingAngle( playerid, 89.9529 );
		SetPlayerColor( playerid, COLOR_SORVETEIRO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == REPORTER )
	{
		SetPlayerPos( playerid, 737.6852,-1357.6514,13.5000 );
		SetPlayerFacingAngle( playerid, 270.7092 );
		SetPlayerColor( playerid, COLOR_REPORTER );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == INSTRUTOR )
	{
		SetPlayerPos( playerid, -2023.2615,-100.6966,35.1641 );
		SetPlayerFacingAngle( playerid, 89.5622 );
		SetPlayerColor( playerid, COLOR_INSTRUTOR );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MECANICO )
	{
		SetPlayerPos( playerid, 2655.1062,-2047.3895,13.6101 );
		SetPlayerFacingAngle( playerid, 0.3950 );
		SetPlayerColor( playerid, COLOR_MECANICO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == MEDICO )
	{
		SetPlayerPos( playerid, 1172.8439,-1328.4154,15.3999 );
		SetPlayerFacingAngle( playerid, 180.1147 );
		SetPlayerColor( playerid, COLOR_MEDICO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == PADRE )
	{
		SetPlayerPos( playerid, 2232.3843,-1333.1102,23.9815 );
		SetPlayerFacingAngle( playerid, 90.5004 );
		SetPlayerColor( playerid, COLOR_PADRE );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == VENDEDOR_SKINS )
	{
	    SetPlayerInterior( playerid, 1 );
		SetPlayerPos( playerid, 203.6846,-40.3285,1001.8047 );
		SetPlayerFacingAngle( playerid, 179.1196 );
		SetPlayerColor( playerid, COLOR_VENDEDORSKINS );
		pInfo[ playerid ][ EntrouL ] = true;
	}
	if( pInfo[ playerid ][ Prof ] == FRENTISTA )
	{
		SetPlayerPos( playerid, 1203.7594,-1823.1450,13.5921 );
		SetPlayerFacingAngle( playerid, 270.2303 );
		SetPlayerColor( playerid, COLOR_FRENTISTA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == DEPUTADO )
	{
	    SetPlayerInterior( playerid, 3 );
		SetPlayerPos( playerid, 362.1534,212.2576,1008.3828 );
		SetPlayerFacingAngle( playerid, 183.0366 );
		SetPlayerColor( playerid, COLOR_DEPUTADO );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ entroupref ] = 1;
	}
	if( pInfo[ playerid ][ Prof ] == PREFEITO )
	{
	    SetPlayerInterior( playerid, 3 );
		SetPlayerPos( playerid, 359.7139,173.5759,1008.3893 );
		SetPlayerFacingAngle( playerid, 270.3953 );
		SetPlayerColor( playerid, COLOR_PREFEITO );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ entroupref ] = 1;
	}
	if( pInfo[ playerid ][ Prof ] == PRESIDENTE )
	{
	    SetPlayerInterior( playerid, 3 );
		SetPlayerPos( playerid, 348.4346,162.0909,1025.7891 );
		SetPlayerFacingAngle( playerid, 270.8365 );
		SetPlayerColor( playerid, COLOR_PRESIDENTE );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ entroupref ] = 1;
	}
	if( pInfo[ playerid ][ Prof ] == ADVOGADO )
	{
		SetPlayerPos( playerid, 1410.7465,-1789.7605,14.0323 );
		SetPlayerFacingAngle( playerid, 90.6654 );
		SetPlayerColor( playerid, COLOR_ADVOGADO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
	{
	    SetPlayerInterior( playerid, 6 );
		SetPlayerPos( playerid, 253.6531,79.8947,1003.6406 );
		SetPlayerFacingAngle( playerid, 260.6865 );
		SetPlayerColor( playerid, COLOR_POLMILITAR );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ entrouDEL ] = 1;
	}
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
	{
	    SetPlayerInterior( playerid, 6 );
		SetPlayerPos( playerid, 220.7984,66.8953,1005.0391 );
		SetPlayerFacingAngle( playerid, 0.6209 );
		SetPlayerColor( playerid, COLOR_POLCIVIL );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ entrouDEL ] = 1;
	}
	if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
	{
	    SetPlayerInterior( playerid, 6 );
		SetPlayerPos( playerid, 218.1643,75.9672,1005.0391 );
		SetPlayerFacingAngle( playerid, 357.5587 );
		SetPlayerColor( playerid, COLOR_GUARDTRANS );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ entrouDEL ] = 1;
	}
	if( pInfo[ playerid ][ Prof ] == DELEGADO )
	{
	    SetPlayerInterior( playerid, 6 );
		SetPlayerPos( playerid, 229.1595,74.0279,1005.0391 );
		SetPlayerFacingAngle( playerid, 267.6039 );
		SetPlayerColor( playerid, COLOR_DELEGADO );
		pInfo[ playerid ][ EntrouL ] = true;
		pInfo[ playerid ][ entrouDEL ] = 1;
	}
	if( pInfo[ playerid ][ Prof ] == BOPE )
	{
		SetPlayerPos( playerid, 2239.3120,2449.3279,11.0372 );
		SetPlayerFacingAngle( playerid, 268.2100 );
		SetPlayerColor( playerid, COLOR_BOPE );
        pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
	{
	    SetPlayerInterior( playerid, 10 );
		SetPlayerPos( playerid, 246.7142,124.9751,1003.2188 );
		SetPlayerFacingAngle( playerid, 182.0204 );
		SetPlayerColor( playerid, COLOR_POLRODOVIARIA );
		pInfo[ playerid ][ EntrouL ] = true;
	}
	if( pInfo[ playerid ][ Prof ] == MARINHA )
	{
		SetPlayerPos( playerid, -1348.2618,496.9817,11.1953 );
		SetPlayerFacingAngle( playerid, 179.8860 );
		SetPlayerColor( playerid, COLOR_MARINHA );
        pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == SEG_VILA )
	{
		SetPlayerPos( playerid, -552.2868,-1015.7592,24.0661 );
		SetPlayerFacingAngle( playerid, 240.5695 );
		SetPlayerColor( playerid, COLOR_SEGVILA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == PORT_VILA )
	{
		SetPlayerPos( playerid, -552.2868,-1015.7592,24.0661 );
		SetPlayerFacingAngle( playerid, 240.5695 );
		SetPlayerColor( playerid, COLOR_PORVILA );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == AVIAOZINHO )
	{
		SetPlayerPos( playerid, 2204.0818, -991.9768, 63.9297 );
		SetPlayerFacingAngle( playerid, 337.2716 );
		SetPlayerColor( playerid, COLOR_AVIAOZINHO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == BOMBEIRO )
	{
		SetPlayerPos( playerid, 2770.8696, -1627.8556, 12.1775 );
		SetPlayerFacingAngle( playerid, 356.3281 );
		SetPlayerColor( playerid, COLOR_AVIAOZINHO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == PEDREIRO )
	{
		SetPlayerPos( playerid, 589.6979, 869.7552, -42.4973 );
		SetPlayerFacingAngle( playerid, 263.6572 );
		SetPlayerColor( playerid, COLOR_PEDREIRO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	if( pInfo[ playerid ][ Prof ] == LIXEIRO )
	{
		SetPlayerPos( playerid, 2146.8000, -2290, 14.8000 );
		SetPlayerFacingAngle( playerid, 226.0004 );
		SetPlayerColor( playerid, COLOR_LIXEIRO );
		pInfo[ playerid ][ EntrouL ] = false;
	}
	SetCameraBehindPlayer( playerid );
}

stock FormatarHorario( ) // Horário do servidor
{
	new
		Tempo[ 64 ]
	;
	new
		Hora, Minuto
	;
	gettime( Hora, Minuto );
	Hora += FUSORARIO;
    format( Tempo, sizeof( Tempo ), "%02d:%02d", Hora, Minuto );
	return Tempo;
}

stock FormatarData( )
{
    new
		data[ 64 ], ano, mes, dia
	;
	getdate( ano, mes, dia );
	format( data, sizeof( data ), "%02d/%02d/%02d", dia, mes, ano );
	TextDrawSetString( Data, data );
	return data;
}

stock ObjetosInSanAndreas()
{
	// Inválid Object ID
	CreateDynamicObject(2647,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //object(airportgate)(2)
	// Objetos South.
	CreateDynamicObject(19127,991.6300000,-1051.1700000,30.1500000,0.0000000,0.0000000,359.6000000); //
	CreateDynamicObject(19127,995.6000000,-1051.1700000,30.1500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3749,-2485.5000000,-614.7000000,137.3000000,0.0000000,0.0000000,88.0000000); //
	CreateDynamicObject(987,-2486.2000000,-606.8000000,131.6000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(987,-2486.1000000,-594.8000000,131.6000000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(987,-2498.0000000,-594.8000000,131.6000000,0.0000000,0.0000000,179.9900000); //
	CreateDynamicObject(987,-2510.0000000,-594.8000000,131.6000000,0.0000000,0.0000000,179.9900000); //
	CreateDynamicObject(987,-2521.9000000,-594.8000000,131.6000000,0.0000000,0.0000000,179.9900000); //
	CreateDynamicObject(987,-2530.3000000,-594.8000000,131.6000000,0.0000000,0.0000000,179.9900000); //
	CreateDynamicObject(980,-2485.4000000,-614.7000000,134.3000000,0.0000000,0.0000000,266.0000000); //
	CreateDynamicObject(987,-2514.6000000,-719.5000000,138.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(987,-2514.6000000,-707.6000000,138.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(987,-2514.6000000,-695.7000000,138.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3934,-2500.8000000,-699.2000000,138.4000000,0.0000000,0.0000000,92.0000000); //
	CreateDynamicObject(1775,-2526.4200000,-624.8100000,132.8800000,0.0000000,0.0000000,180.0600000); //
	CreateDynamicObject(18885,-2529.4600000,-624.8800000,132.8800000,0.0000000,0.0000000,180.0700000); //
	CreateDynamicObject(3262,-2476.6500000,-610.4300000,131.6000000,0.0000000,0.0000000,72.2500000); //
	CreateDynamicObject(19122,-2493.9500000,-621.8100000,132.1700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19123,-2498.1600000,-621.8100000,132.1700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19124,-2502.4700000,-621.8100000,132.1700000,-0.0100000,0.0000000,0.0000000); //
	CreateDynamicObject(19126,-2506.3200000,-621.8100000,132.1700000,0.0000000,0.0000000,0.0000000); //
	// Portão casa ID 21
	pcasa21 = CreateDynamicObject(971, 1003.51, -643.66, 123.86,   0.00, 359.00, 203.37);
	CreateDynamicObject(10244, 1004.90, -672.00, 120.20,   0.00, 0.00, 300.00);
	// Vila CSI
	CreateDynamicObject(3485,2256.7998047,584.0000000,13.7399998,0.0000000,0.0000000,90.0000000); //object(vegasxrexhse04) (1)
	CreateDynamicObject(3486,2349.8994141,585.3994141,13.7500000,0.0000000,0.0000000,0.0000000); //object(vegasxrexhse05) (1)
	CreateDynamicObject(3488,2256.6992188,558.3994141,13.2700005,0.0000000,0.0000000,89.9945068); //object(vegasxrexhse07) (1)
	CreateDynamicObject(3484,2379.8999023,585.4000244,13.4060001,0.0000000,0.0000000,359.7363281); //object(vegasxrexhse03) (1)
	CreateDynamicObject(3483,2319.6992188,585.3994141,13.7399998,0.0000000,0.0000000,0.0000000); //object(vegasxrexhse09) (1)
	CreateDynamicObject(8209,2347.1999512,602.9000244,13.0000000,0.0000000,0.0000000,180.0000000); //object(vgsselecfence11) (1)
	CreateDynamicObject(8210,2396.8000488,575.4000244,4.0999999,0.0000000,0.0000000,90.0000000); //object(vgsselecfence12) (1)
	CreateDynamicObject(8210,2396.8000488,575.4000244,13.0000000,0.0000000,0.0000000,90.0000000); //object(vgsselecfence12) (2)
	CreateDynamicObject(8210,2249.6999512,602.9000244,12.6999998,0.0000000,0.0000000,180.0000000); //object(vgsselecfence12) (3)
	CreateDynamicObject(3749,2287.3999023,605.0999756,15.6999998,0.0000000,0.0000000,0.0000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(8652,2304.5996094,583.1992188,7.6999998,0.0000000,0.0000000,90.0000000); //object(shbbyhswall12_lvs) (1)
	CreateDynamicObject(3934,2209.1999512,596.5999756,14.0000000,0.0000000,0.0000000,180.0000000); //object(helipad01) (3)
	CreateDynamicObject(8210,2224.8000488,603.0000000,12.6999998,0.0000000,0.0000000,179.9945068); //object(vgsselecfence12) (4)
	CreateDynamicObject(8210,2198.3999023,575.5999756,12.6999998,0.0000000,0.0000000,271.9945068); //object(vgsselecfence12) (5)
	CreateDynamicObject(8210,2198.3999023,575.5999756,3.7000000,0.0000000,0.0000000,271.9940186); //object(vgsselecfence12) (6)
	CreateDynamicObject(10183,2332.5000000,550.7998047,6.8000002,0.0000000,0.0000000,225.2471771); //object(ferspaces) (1)
	CreateDynamicObject(4199,2217.7998047,596.7998047,11.8999996,0.0000000,0.0000000,269.7473145); //object(garages1_lan) (1)
	CreateDynamicObject(4199,2217.6999512,585.2999878,11.8999996,0.0000000,0.0000000,269.7473145); //object(garages1_lan) (2)
	CreateDynamicObject(3934,2227.1999512,596.2999878,14.0000000,0.0000000,0.0000000,180.0000000); //object(helipad01) (5)
	CreateDynamicObject(3934,2209.0000000,585.2000122,14.0000000,0.0000000,0.0000000,180.0000000); //object(helipad01) (6)
	CreateDynamicObject(3934,2226.8000488,585.2999878,14.0000000,0.0000000,0.0000000,179.9945068); //object(helipad01) (7)
	CreateDynamicObject(10244,2213.6000977,577.5999756,10.3999996,0.0000000,0.0000000,1.0000000); //object(vicjump_sfe) (1)
	CreateDynamicObject(3494,2197.1000977,603.0000000,13.8000002,0.0000000,0.0000000,0.0000000); //object(luxorpillar04_lvs) (3)
	CreateDynamicObject(3494,2396.6999512,603.0000000,13.8000002,0.0000000,0.0000000,0.0000000); //object(luxorpillar04_lvs) (4)
	CreateDynamicObject(18368,2216.6000977,556.0999756,1.9000000,0.0000000,0.0000000,266.0000000); //object(cs_mountplat) (1)
	CreateDynamicObject(3934,2218.3000488,590.7000122,14.0000000,0.0000000,0.0000000,269.9945068); //object(helipad01) (8)
	CreateDynamicObject(10183,2322.4399414,550.7999878,6.8000002,0.0000000,0.0000000,225.2471924); //object(ferspaces) (1)
	CreateDynamicObject(12950,2238.8000488,564.4000244,6.5000000,0.0000000,0.0000000,0.0000000); //object(cos_sbanksteps03) (1)
	CreateDynamicObject(1215,2294.8999023,621.0999756,10.3999996,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,2294.8999023,614.9000244,10.3999996,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,2294.8999023,608.7999878,10.3999996,0.0000000,0.0000000,0.0000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,2279.8000488,608.9000244,10.3999996,0.0000000,0.0000000,0.0000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,2279.8000488,614.9000244,10.3999996,0.0000000,0.0000000,0.0000000); //object(bollardlight) (6)
	CreateDynamicObject(1215,2279.8000488,621.0999756,10.3999996,0.0000000,0.0000000,2.0000000); //object(bollardlight) (7)
	CreateDynamicObject(1215,2287.6000977,522.0000000,1.5000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (8)
	CreateDynamicObject(1215,2300.5000000,522.0000000,1.5000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (9)
	CreateDynamicObject(1215,2348.0000000,521.9000244,1.5000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (10)
	CreateDynamicObject(1215,2371.8000488,521.9000244,1.5000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (11)
	CreateDynamicObject(1215,2294.1999512,521.9000244,1.5000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (12)
	CreateDynamicObject(1215,2360.0000000,521.7999878,1.5000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (13)
	//
	pcasa285 = CreateDynamicObject(980, 345.96, -1193.28, 78.31,   0.00, 0.00, 39.81);
	//
	pcasa338 = CreateDynamicObject(976, 2199.92, -1290.48, 23.00,   0.00, 0.00, 180.00);
	//
	pcasa334 = CreateDynamicObject(991, 2096.16, -1312.73, 24.20,   0.00, 0.00, 0.00);
	//
	pcasa331 = CreateDynamicObject(991,2105.1999512,-1230.9000244,24.2000008,0.0000000,0.0000000,0.0000000); //fechado
	// Casa 32
    pcasa32 = CreateDynamicObject(980,169.5000000,-1350.0999756,71.0999985,0.0000000,0.0000000,355.2500000); //object(airportgate)(1)
    // Casa 49
    pcasa49 = CreateDynamicObject(975,1794.2000000,-2125.8000000,14.2000000,0.0000000,0.0000000,0.0000000);
	//
	// Casa 137
	pcasa137 = CreateDynamicObject(980,801.67000000,-2500.45000000,25.29000000,0.00000000,0.00000000,90.06000000);
	//
	// Casa 185
	pcasa185 = CreateDynamicObject(980, 2747.67, -1177.51, 71.35,   0.00, 0.00, 89.87);
	//
	// Casa 29
	pcasa29[ 0 ] = CreateDynamicObject(975,283.3999939,-1262.5999756,74.5999985,0.0000000,0.0000000,327.9982910); // portão fechado
	pcasa29[ 1 ] = CreateDynamicObject(2885,247.5000000,-1266.3994141,74.9000015,0.0000000,0.0000000,40.9954834); //entrada pedestres fechada
	CreateDynamicObject(18368,265.3999939,-1297.8000488,68.4000015,0.0000000,0.0000000,298.0000000); //
	CreateDynamicObject(16151,250.6000061,-1303.5000000,73.3000031,0.0000000,0.0000000,37.9962158); //
	CreateDynamicObject(1481,283.1000061,-1288.3000488,73.5000000,0.0000000,0.0000000,218.0000000); //
	CreateDynamicObject(2630,277.2000122,-1291.3000488,72.9000015,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2627,273.5000000,-1293.8000488,72.8000031,0.0000000,0.0000000,187.9999695); //
	CreateDynamicObject(2533,251.7998047,-1304.1992188,72.8000031,0.0000000,0.0000000,307.9907227); //

 	// Casa 22
 	pcasa22 = CreateDynamicObject(980, 937.72, -685.92, 120.64,   0.00, 0.00, 40.87);
	CreateDynamicObject(3475,928.79998779,-694.09997559,118.80000305,0.00000000,0.00000000,318.00000000); //object(vgsn_fncelec_pst) (2)
	CreateDynamicObject(987,927.09997559,-696.40002441,116.90000153,0.00000000,348.00000000,304.00000000); //object(elecfence_bar) (2)
	CreateDynamicObject(3475,945.09997559,-677.20001221,121.69999695,0.00000000,0.00000000,308.00000000); //object(vgsn_fncelec_pst) (3)
	CreateDynamicObject(987,933.09997559,-705.09997559,120.19999695,0.00000000,358.00000000,300.00000000); //object(elecfence_bar) (17)
	CreateDynamicObject(987,938.79998779,-715.00000000,120.90000153,0.00000000,0.00000000,302.00000000); //object(elecfence_bar) (20)
	CreateDynamicObject(987,940.90002441,-718.50000000,119.40000153,0.00000000,0.00000000,304.00000000); //object(elecfence_bar) (22)
	CreateDynamicObject(987,947.59997559,-728.40002441,120.50000000,0.00000000,0.00000000,30.00000000); //object(elecfence_bar) (23)
	CreateDynamicObject(987,957.90002441,-722.70001221,120.80000305,0.00000000,0.00000000,32.00000000); //object(elecfence_bar) (24)
	CreateDynamicObject(987,968.20001221,-716.59997559,120.00000000,0.00000000,0.00000000,110.00000000); //object(elecfence_bar) (25)
	CreateDynamicObject(3749,937.59997559,-686.09997559,123.50000000,0.00000000,356.00000000,44.00000000); //object(clubgate01_lax) (3)
	CreateDynamicObject(14467,929.90002441,-688.90002441,119.40000153,0.00000000,2.00000000,219.99996948); //object(carter_statue) (2)
	CreateDynamicObject(14467,941.29998779,-677.90002441,121.69999695,0.00000000,0.00000000,223.99993896); //object(carter_statue) (3)
	CreateDynamicObject(1775,951.59997559,-707.79998779,122.69999695,0.00000000,0.00000000,208.00000000); //object(cj_sprunk1) (1)

	// Casa 354  // Festa - Praia
/*	pcasa354 = CreateDynamicObject(980,267.4400000,-1809.2900000,5.9000000,0.0000000,0.0000000,272.0000000); //object(airportgate) (1)
	CreateDynamicObject(987,255.0000000,-1830.8000500,2.5000000,0.0000000,0.0000000,0.0000000); //object(elecfence_bar) (2)
	CreateDynamicObject(987,243.1000100,-1830.9000200,2.8000000,0.0000000,0.0000000,0.0000000); //object(elecfence_bar) (3)
	CreateDynamicObject(987,231.3000000,-1830.8000500,2.8000000,0.0000000,0.0000000,0.0000000); //object(elecfence_bar) (4)
	CreateDynamicObject(987,219.3000000,-1830.8000500,2.8000000,0.0000000,0.0000000,0.0000000); //object(elecfence_bar) (5)
	CreateDynamicObject(987,207.5000000,-1830.8000500,2.9000000,0.0000000,0.0000000,0.0000000); //object(elecfence_bar) (6)
	CreateDynamicObject(987,207.6000100,-1818.5999800,3.0000000,0.0000000,2.0000000,269.9950000); //object(elecfence_bar) (7)
	CreateDynamicObject(3486,226.3999900,-1814.6999500,9.8000000,0.0000000,0.0000000,90.0000000); //object(vegasxrexhse05) (16)
	CreateDynamicObject(987,267.1000100,-1831.0000000,2.9000000,0.0000000,0.0000000,90.0000000); //object(elecfence_bar) (12)
	CreateDynamicObject(987,207.7000000,-1808.5000000,3.4000000,0.0000000,2.0000000,270.0000000); //object(elecfence_bar) (8)
	CreateDynamicObject(987,207.5000000,-1799.5000000,3.3000000,0.0000000,2.0000000,270.0000000); //object(elecfence_bar) (9)
	CreateDynamicObject(987,207.6000100,-1787.6999500,3.2000000,0.0000000,0.0000000,270.0000000); //object(elecfence_bar) (13)
	CreateDynamicObject(987,219.8000000,-1787.5000000,3.1000000,0.0000000,0.0000000,182.0000000); //object(elecfence_bar) (15)
	CreateDynamicObject(987,231.6000100,-1787.5000000,3.3000000,0.0000000,0.0000000,180.0000000); //object(elecfence_bar) (16)
	CreateDynamicObject(987,243.6000100,-1787.5000000,3.3000000,0.0000000,0.0000000,180.0000000); //object(elecfence_bar) (17)
	CreateDynamicObject(987,255.3999900,-1787.5999800,3.3000000,0.0000000,0.0000000,180.0000000); //object(elecfence_bar) (18)
	CreateDynamicObject(987,267.3999900,-1787.6999500,3.3000000,0.0000000,0.0000000,180.0000000); //object(elecfence_bar) (19)
	CreateDynamicObject(987,267.2999900,-1799.5999800,3.4000000,0.0000000,0.0000000,90.0000000); //object(elecfence_bar) (20)
	CreateDynamicObject(3749,267.2999900,-1809.3000500,8.8000000,0.0000000,0.0000000,90.0000000); //object(clubgate01_lax) (2) */
 	// Base
	pbasea = CreateDynamicObject(980,1840.69995117,-2781.89990234,18.20000076,0.00000000,0.00000000,0.00000000); //object(airportgate) (1)
	CreateDynamicObject(11084,1949.00000000,-2976.19995117,15.39999962,0.00000000,0.00000000,270.00000000); //object(roadssfse47) (2)
	CreateDynamicObject(7434,1869.50000000,-2885.00000000,15.39999962,0.00000000,0.00000000,90.00000000); //object(vegaswedge02) (2)
	CreateDynamicObject(7327,1848.80004883,-2820.89990234,15.39999866,0.00000000,0.00000000,0.00000000); //object(vegasnroadspl079) (22)
	CreateDynamicObject(7434,2058.69921875,-2979.00000000,15.39999962,0.00000000,0.00000000,0.00000000); //object(vegaswedge02) (3)
	CreateDynamicObject(7383,2078.79980469,-2857.00000000,15.39999962,0.00000000,0.00000000,0.00000000); //object(vegasnroad071b) (9)
	CreateDynamicObject(7558,2018.59960938,-2830.89941406,15.39999866,0.00000000,0.00000000,0.00000000); //object(vegaswedge19) (1)
	CreateDynamicObject(7383,1918.90002441,-2810.60009766,15.30000019,0.00000000,0.00000000,270.00000000); //object(vegasnroad071b) (11)
	CreateDynamicObject(7383,1998.69921875,-2810.69921875,15.34999943,0.00000000,0.00000000,269.98901367); //object(vegasnroad071b) (12)
	CreateDynamicObject(16088,2023.59960938,-2790.89941406,15.30000019,0.00000000,0.00000000,0.74951172); //object(des_pipestrut01) (1)
	CreateDynamicObject(8034,1978.59997559,-2980.69995117,19.29999924,0.00000000,0.00000000,0.00000000); //object(flghtschl01_lvs) (1)
	CreateDynamicObject(8841,2004.09960938,-2819.09960938,18.70000076,0.00000000,0.00000000,0.00000000); //object(rsdncarprk01_lvs) (1)
	CreateDynamicObject(8841,1959.59997559,-2819.30004883,18.79999924,0.00000000,0.00000000,0.00000000); //object(rsdncarprk01_lvs) (2)
	CreateDynamicObject(8841,1914.59997559,-2819.10009766,18.79999924,0.00000000,0.00000000,0.00000000); //object(rsdncarprk01_lvs) (3)
	CreateDynamicObject(7383,1918.89941406,-2790.89941406,15.39990044,0.00000000,0.00000000,269.98901367); //object(vegasnroad071b) (13)
	CreateDynamicObject(9192,1877.50000000,-2799.10009766,20.29999924,0.00000000,0.00000000,0.00000000); //object(vgegassgn01_lvs) (1)
	CreateDynamicObject(3749,1840.69921875,-2782.79980469,21.20000076,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(6448,1873.50000000,-2727.50000000,9.30000019,0.00000000,0.00000000,181.99951172); //object(pier01_law2) (1)
	CreateDynamicObject(7520,1924.79980469,-2970.00000000,15.00000000,0.00000000,0.00000000,89.99450684); //object(vgnlowbuild203) (1)
	CreateDynamicObject(8149,2087.89941406,-2860.50000000,18.60000038,0.00000000,0.00000000,0.00000000); //object(vgsselecfence03) (1)
	CreateDynamicObject(8152,2058.30004883,-2877.10009766,18.39999962,0.00000000,0.00000000,269.99996948); //object(vgsselecfence06) (1)
	CreateDynamicObject(8150,2025.09960938,-2781.59960938,18.60000038,0.00000000,0.00000000,0.00000000); //object(vgsselecfence04) (1)
	CreateDynamicObject(8150,1911.09960938,-2781.50000000,18.50000000,0.00000000,0.00000000,0.00000000); //object(vgsselecfence04) (2)
	CreateDynamicObject(8150,1831.39941406,-2843.79980469,18.60000038,0.00000000,0.00000000,90.00000000); //object(vgsselecfence04) (3)
	CreateDynamicObject(8210,2028.00000000,-2984.60009766,18.39999962,0.00000000,0.00000000,90.00000000); //object(vgsselecfence12) (1)
	CreateDynamicObject(987,1831.00000000,-2906.39990234,15.50000000,0.00000000,0.00000000,272.00000000); //object(elecfence_bar) (1)
	CreateDynamicObject(987,1831.30004883,-2918.39990234,15.50000000,0.00000000,0.00000000,287.99951172); //object(elecfence_bar) (2)
	CreateDynamicObject(987,1834.50000000,-2929.29980469,15.50000000,0.00000000,0.00000000,327.99279785); //object(elecfence_bar) (3)
	CreateDynamicObject(8210,1862.59997559,-2934.50000000,18.60000038,0.00000000,0.00000000,0.00000000); //object(vgsselecfence12) (4)
	CreateDynamicObject(987,2027.59997559,-3007.10009766,15.39999962,0.00000000,0.00000000,225.99996948); //object(elecfence_bar) (4)
	CreateDynamicObject(987,2019.69995117,-3015.39990234,15.50000000,0.00000000,0.00000000,195.99975586); //object(elecfence_bar) (5)
	CreateDynamicObject(8210,1981.29980469,-3018.29980469,18.39999962,0.00000000,0.00000000,359.99450684); //object(vgsselecfence12) (5)
	CreateDynamicObject(8210,1941.69995117,-3018.10009766,18.60000038,0.00000000,0.00000000,358.48901367); //object(vgsselecfence12) (6)
	CreateDynamicObject(987,1920.89941406,-3017.39941406,15.50000000,0.00000000,0.00000000,159.99938965); //object(elecfence_bar) (6)
	CreateDynamicObject(987,1910.40002441,-3013.00000000,15.50000000,0.00000000,0.00000000,145.99938965); //object(elecfence_bar) (7)
	CreateDynamicObject(987,1900.80004883,-3005.89990234,15.50000000,0.00000000,0.00000000,123.99734497); //object(elecfence_bar) (8)
	CreateDynamicObject(987,1894.30004883,-2995.89990234,15.50000000,0.00000000,0.00000000,105.99719238); //object(elecfence_bar) (9)
	CreateDynamicObject(8210,1891.90002441,-2962.69995117,18.50000000,0.00000000,0.00000000,271.99450684); //object(vgsselecfence12) (7)
	CreateDynamicObject(982,2068.89990234,-2926.19995117,16.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit) (1)
	CreateDynamicObject(982,2069.00000000,-2828.80004883,16.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit) (5)
	CreateDynamicObject(982,2069.00000000,-2814.60009766,16.20000076,0.00000000,0.00000000,0.00000000); //object(fenceshit) (6)
	CreateDynamicObject(982,2056.10009766,-2939.00000000,16.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit) (7)
	CreateDynamicObject(982,2043.30004883,-2939.00000000,16.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit) (8)
	CreateDynamicObject(983,2027.40002441,-2939.50000000,16.20000076,0.00000000,0.00000000,280.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,2021.59997559,-2941.69995117,16.20000076,0.00000000,0.00000000,301.99758911); //object(fenceshit3) (2)
	CreateDynamicObject(983,2016.40002441,-2945.30004883,16.20000076,0.00000000,0.00000000,301.99218750); //object(fenceshit3) (3)
	CreateDynamicObject(983,2011.90002441,-2949.80004883,16.20000076,0.00000000,0.00000000,325.99218750); //object(fenceshit3) (4)
	CreateDynamicObject(983,2009.50000000,-2955.60009766,16.20000076,0.00000000,0.00000000,347.99182129); //object(fenceshit3) (5)
	CreateDynamicObject(984,2008.80004883,-2965.19995117,16.10000038,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(982,1936.09997559,-2996.89990234,16.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit) (9)
	CreateDynamicObject(984,1918.59997559,-2992.80004883,15.89999962,0.00000000,0.00000000,230.00000000); //object(fenceshit2) (3)
	CreateDynamicObject(4848,1864.69995117,-2908.80004883,18.79999924,0.00000000,0.00000000,180.00000000); //object(sanpedbeaut) (1)
	CreateDynamicObject(984,1886.50000000,-2915.00000000,16.10000038,0.00000000,0.00000000,267.99877930); //object(fenceshit2) (4)
	CreateDynamicObject(984,1897.50000000,-2918.10009766,16.10000038,0.00000000,358.00000000,239.99499512); //object(fenceshit2) (5)
	CreateDynamicObject(984,1905.19995117,-2927.30004883,16.10000038,0.00000000,353.99499512,199.99084473); //object(fenceshit2) (6)
	CreateDynamicObject(984,1909.59997559,-2939.10009766,16.10000038,0.00000000,353.99047852,199.98962402); //object(fenceshit2) (7)
	CreateDynamicObject(984,1849.59997559,-2895.60009766,16.10000038,0.00000000,0.00000000,179.99450684); //object(fenceshit2) (8)
	CreateDynamicObject(984,1849.50000000,-2882.50000000,16.10000038,0.00000000,0.00000000,179.99450684); //object(fenceshit2) (9)
	CreateDynamicObject(984,1849.30004883,-2838.50000000,16.10000038,0.00000000,0.00000000,179.99450684); //object(fenceshit2) (10)
	CreateDynamicObject(984,1849.30004883,-2850.80004883,16.10000038,0.00000000,0.00000000,179.99047852); //object(fenceshit2) (11)
	CreateDynamicObject(3749,1848.79980469,-2865.79980469,21.29999924,0.00000000,0.00000000,269.99450684); //object(clubgate01_lax) (2)
	CreateDynamicObject(7504,1895.19921875,-2820.19921875,17.00000000,0.00000000,0.00000000,0.00000000); //object(glfcrsgate2_vgn) (4)
	CreateDynamicObject(984,1849.59997559,-2813.39990234,15.89999962,0.00000000,0.00000000,179.99450684); //object(fenceshit2) (12)
	CreateDynamicObject(8841,2049.00000000,-2819.79980469,18.79999924,0.00000000,0.00000000,0.00000000); //object(rsdncarprk01_lvs) (1)
	CreateDynamicObject(8841,1870.09997559,-2818.69995117,18.79999924,0.00000000,0.00000000,0.00000000); //object(rsdncarprk01_lvs) (3)
	CreateDynamicObject(982,2013.19921875,-2801.79980469,16.20000076,0.00000000,0.00000000,90.00000000); //object(fenceshit) (10)
	CreateDynamicObject(982,2038.79980469,-2801.79980469,16.10000038,0.00000000,0.00000000,90.00000000); //object(fenceshit) (11)
	CreateDynamicObject(982,1987.59997559,-2801.80004883,16.10000038,0.00000000,0.00000000,90.00000000); //object(fenceshit) (13)
	CreateDynamicObject(982,1962.00000000,-2801.80004883,16.10000038,0.00000000,0.00000000,90.00000000); //object(fenceshit) (14)
	CreateDynamicObject(982,1936.40002441,-2801.80004883,16.10000038,0.00000000,0.00000000,90.00000000); //object(fenceshit) (15)
	CreateDynamicObject(982,1910.80004883,-2801.80004883,16.10000038,0.00000000,0.00000000,90.00000000); //object(fenceshit) (16)
	CreateDynamicObject(982,1885.19995117,-2801.80004883,16.10000038,0.00000000,0.00000000,90.00000000); //object(fenceshit) (17)
	CreateDynamicObject(984,1849.09997559,-2827.19995117,16.10000038,0.00000000,0.00000000,179.99450684); //object(fenceshit2) (10)
	CreateDynamicObject(2314,1942.09997559,-2986.60009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(cj_tv_table3) (1)
	CreateDynamicObject(2314,1939.80004883,-2986.60009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(cj_tv_table3) (2)
	CreateDynamicObject(2314,1938.00000000,-2986.60009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(cj_tv_table3) (3)
	CreateDynamicObject(2314,1940.00000000,-2986.50000000,15.80000019,0.00000000,0.00000000,0.00000000); //object(cj_tv_table3) (4)
	CreateDynamicObject(993,1940.80004883,-2992.10009766,16.89999962,0.00000000,0.00000000,0.00000000); //object(bar_barrier10) (1)
	CreateDynamicObject(7885,2047.40002441,-2882.10009766,15.19999981,0.00000000,0.00000000,0.00000000); //object(vegasglfhse1) (1)
	CreateDynamicObject(1262,2022.50000000,-2790.80004883,22.79999924,0.00000000,0.00000000,90.00000000); //object(mtraffic4) (1)
	CreateDynamicObject(5003,1965.69995117,-2924.00000000,21.39999962,0.00000000,0.00000000,0.00000000); //object(lasrnway5_las) (1)
	CreateDynamicObject(5004,1973.40002441,-2855.50000000,14.89999962,0.00000000,0.00000000,0.00000000); //object(lasrnway6_las) (1)
	CreateDynamicObject(7505,1991.80004883,-2820.19995117,17.00000000,0.00000000,0.00000000,0.00000000); //object(glfcrsgate3_vgn) (1)
	// Casa 32 Ryder
	pcasa35 = CreateDynamicObject(971,2473.17529297,-1690.15417480,12.43366241,0.00000000,0.00000000,207.50000000); //object(subwaygate) (1)
    CreateDynamicObject(3475,2446.1999500,-1699.5999800,14.9000000,0.0000000,0.0000000,92.0000000); //object(vgsn_fncelec_pst) (1)
	// Casa 353
	pcasa352 = CreateDynamicObject(971,937.90002441,-834.79998779,94.80000305,0.00000000,0.00000000,208.22387695); //object(subwaygate)(1)
	CreateDynamicObject(11496, 916.6396484375, -852, 92.254997253418, 0, 0, 115.99914550781, -1, -1, -1, 150.0);
	CreateDynamicObject(3114, 932.1591796875, -867.1494140625, 91.900001525879, 0, 0, 203.99963378906, -1, -1, -1, 150.0);
	CreateDynamicObject(8647, 933.79998779297, -872.59997558594, 92.900001525879, 0, 0, 114.60000610352, -1, -1, -1, 150.0);
	CreateDynamicObject(11496, 921.13000488281, -869.40002441406, 92.23999786377, 0, 0, 205.5, -1, -1, -1, 150.0);
	CreateDynamicObject(8647, 913.90002441406, -865.09997558594, 92.900001525879, 0, 0, 25.800048828125, -1, -1, -1, 150.0);
	CreateDynamicObject(3496, 922.40002441406, -850.79998779297, 92.300003051758, 0, 0, 296, -1, -1, -1, 150.0);
	CreateDynamicObject(3494, 942.29998779297, -832.59997558594, 98, 0, 0, 27.998657226563, -1, -1, -1, 150.0);
	CreateDynamicObject(3494, 936, -835.90002441406, 97.599998474121, 0, 0, 27.998657226563, -1, -1, -1, 150.0);
	CreateDynamicObject(3494, 907.70001220703, -852, 89.699996948242, 0, 0, 27.998657226563, -1, -1, -1, 150.0);
	CreateDynamicObject(3114, 917.20001220703, -846.79998779297, 93.199996948242, 90, 180.00549316406, 28.731750488281, -1, -1, -1, 150.0);
	CreateDynamicObject(3114, 927.29998779297, -841.20001220703, 93.199996948242, 90, 180.00549316406, 29.477203369141, -1, -1, -1, 150.0);
	CreateDynamicObject(3114, 948.70001220703, -841, 93.800003051758, 90, 180.00549316406, 308.72714233398, -1, -1, -1, 150.0);
	CreateDynamicObject(3114, 912.59997558594, -861.09997558594, 86.5, 90, 180.00549316406, 116.22723388672, -1, -1, -1, 150.0);
	CreateDynamicObject(987, 945.79998779297, -855.59997558594, 91.599998474121, 0, 358, 36.249969482422, -1, -1, -1, 150.0);
	CreateDynamicObject(3494, 907.70001220703, -852, 97.699996948242, 0, 0, 27.998657226563, -1, -1, -1, 150.0);
	// Status portão ILHA CSI  (0 = fechado) - (1 = aberto)
	statusCSI = 0;
	// Caveira CSI
	pCSIcave = CreateDynamicObject(8483,82.79980469,-2288.69921875,5.09999990,0.00000000,0.00000000,311.99523926); //object(pirateland02_lvs)(1)
	// Portões ILHA CSI esquerdo
    pilhaCSI[ 0 ] = CreateDynamicObject(2990,-116.50000000,-1728.09960938,5.19999981,0.00000000,0.00000000,187.99804688); //object(wongs_gate) (1)
    // Portões ILHA CSI direito
    pilhaCSI[ 1 ] = CreateDynamicObject(2990,-126.50000000,-1729.50781250,5.19999981,0.00000000,0.00000000,187.99255371); //object(wongs_gate) (2)
    // Submarino
    pilhaCSI[ 2 ] = CreateDynamicObject(9958,-58.59999847,-1673.80004883,-1.89999998,0.00000000,0.00000000,264.99023438); //object(submarr_sfe) (1)
    // Ponte
    pilhaCSI[ 3 ] = CreateDynamicObject(18450,-115.59999847,-1766.00000000,-0.50000000,0.00000000,0.00000000,278.74511719); //object(cs_roadbridge04) (1)
	// Ilha CSI
	CreateDynamicObject(16613,-13.09960938,-1763.89941406,5.69999981,0.00000000,0.00000000,8.49792480); //object(des_bigtelescope) (1)
	CreateDynamicObject(5184,-151.59960938,-1791.19921875,20.20000076,0.00000000,0.00000000,277.99804688); //object(mdock1a_las2) (1)
	CreateDynamicObject(5184,-46.79980469,-1736.50000000,20.20000076,0.00000000,0.00000000,187.99255371); //object(mdock1a_las2) (4)
	CreateDynamicObject(5184,18.09960938,-1839.50000000,20.20000076,0.00000000,0.00000000,97.98706055); //object(mdock1a_las2) (5)
	CreateDynamicObject(5184,-134.39941406,-1913.29980469,20.20000076,0.00000000,0.00000000,277.99804688); //object(mdock1a_las2) (7)
	CreateDynamicObject(5184,34.00000000,-1962.19921875,20.20000076,0.00000000,0.00000000,97.98156738); //object(mdock1a_las2) (9)
	CreateDynamicObject(10377,-129.89941406,-1864.09960938,19.60000038,0.00000000,0.00000000,7.99255371); //object(cityhall_sfs) (1)
	CreateDynamicObject(5184,-94.69921875,-2038.19921875,20.20000076,0.00000000,0.00000000,95.98754883); //object(mdock1a_las2) (11)
	CreateDynamicObject(5184,-49.69921875,-1849.00000000,20.20000076,0.00000000,0.00000000,97.98706055); //object(mdock1a_las2) (14)
	CreateDynamicObject(5184,-34.50000000,-1968.19921875,20.20000076,0.00000000,0.00000000,97.98706055); //object(mdock1a_las2) (15)
	CreateDynamicObject(5184,45.39941406,-2088.00000000,20.20000076,0.00000000,0.00000000,95.97656250); //object(mdock1a_las2) (16)
	CreateDynamicObject(5184,-20.19921875,-2092.79980469,20.20000076,0.00000000,0.00000000,95.97656250); //object(mdock1a_las2) (17)
	CreateDynamicObject(5184,-101.39941406,-2161.09960938,20.20000076,0.00000000,0.00000000,279.99755859); //object(mdock1a_las2) (18)
	CreateDynamicObject(5184,9.50000000,-2197.29980469,20.20000076,0.00000000,0.00000000,5.98754883); //object(mdock1a_las2) (20)
	CreateDynamicObject(18226,-82.79980469,-1725.09960938,-7.59999990,0.00000000,0.00000000,253.99841309); //object(cunt_rockgp2_19) (1)
	CreateDynamicObject(18226,-37.79999924,-1718.00000000,-6.59999990,0.00000000,0.00000000,245.98937988); //object(cunt_rockgp2_19) (2)
	CreateDynamicObject(18226,22.10000038,-1742.40002441,-6.59999990,0.00000000,0.00000000,167.99743652); //object(cunt_rockgp2_19) (3)
	CreateDynamicObject(18226,35.20000076,-1822.19995117,-7.90000010,0.00000000,0.00000000,167.99743652); //object(cunt_rockgp2_19) (4)
	CreateDynamicObject(18226,44.00000000,-1906.19995117,-7.90000010,0.00000000,0.00000000,167.99743652); //object(cunt_rockgp2_19) (5)
	CreateDynamicObject(18226,52.59960938,-1988.50000000,-7.90000010,0.00000000,0.00000000,167.99194336); //object(cunt_rockgp2_19) (6)
	CreateDynamicObject(18226,60.39941406,-2063.59960938,-7.90000010,0.00000000,0.00000000,167.99194336); //object(cunt_rockgp2_19) (7)
	CreateDynamicObject(18226,70.50000000,-2148.30004883,-7.90000010,0.00000000,0.00000000,167.99194336); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(17068,44.00000000,-2225.10009766,1.10000002,0.00000000,0.00000000,5.99853516); //object(xjetty01) (1)
	CreateDynamicObject(17068,23.70000076,-2226.80004883,1.10000002,0.00000000,0.00000000,5.99853516); //object(xjetty01) (3)
	CreateDynamicObject(17068,1.89999998,-2229.39990234,1.10000002,0.00000000,0.00000000,5.99853516); //object(xjetty01) (4)
	CreateDynamicObject(17068,-19.89999962,-2231.80004883,1.10000002,0.00000000,0.00000000,5.99853516); //object(xjetty01) (5)
	CreateDynamicObject(17068,-42.00000000,-2234.10009766,1.10000002,0.00000000,0.00000000,5.99853516); //object(xjetty01) (6)
	CreateDynamicObject(18226,88.69921875,-2227.69921875,-7.90000010,0.00000000,0.00000000,167.99194336); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,45.09960938,-2296.19921875,-8.89999962,0.00000000,0.00000000,61.98986816); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-34.89941406,-2279.50000000,-9.10000038,0.00000000,0.00000000,35.98571777); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-101.09960938,-2224.89941406,-7.90000010,0.00000000,0.00000000,359.97802734); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-127.59999847,-2145.19995117,-7.90000010,0.00000000,0.00000000,343.97802734); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-137.00000000,-2065.00000000,-7.90000010,0.00000000,0.00000000,343.97644043); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-147.50000000,-1979.09997559,-7.90000010,0.00000000,0.00000000,343.97644043); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-160.39999390,-1899.30004883,-7.90000010,0.00000000,0.00000000,343.97644043); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-170.69999695,-1813.30004883,-10.10000038,0.00000000,0.00000000,343.97644043); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(16771,4.50000000,-1864.30004883,7.90000010,0.00000000,0.00000000,97.99255371); //object(des_savhangr) (2)
	CreateDynamicObject(16771,15.10000038,-1938.90002441,7.90000010,0.00000000,0.00000000,97.99255371); //object(des_savhangr) (3)
	CreateDynamicObject(9241,19.60000038,-1996.90002441,3.04999995,0.00000000,0.00000000,6.00000000); //object(copbits_sfn) (1)
	CreateDynamicObject(9241,24.89999962,-2041.69995117,2.59999990,0.00000000,0.00000000,5.99804688); //object(copbits_sfn) (2)
	CreateDynamicObject(9241,29.79999924,-2086.19995117,3.04999995,0.00000000,0.00000000,5.99804688); //object(copbits_sfn) (3)
	CreateDynamicObject(9241,34.79999924,-2134.60009766,3.04999995,0.00000000,0.00000000,5.99755859); //object(copbits_sfn) (4)
	CreateDynamicObject(9241,39.40000153,-2182.39990234,2.59999990,0.00000000,0.00000000,5.99304199); //object(copbits_sfn) (5)
	CreateDynamicObject(18226,-179.89999390,-1766.00000000,-10.10000038,0.00000000,0.00000000,311.97644043); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(18226,-168.30000305,-1773.50000000,-6.59999990,348.00000000,0.00000000,303.97119141); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(10763,-106.30000305,-1967.90002441,34.09999847,0.00000000,0.00000000,233.99926758); //object(controltower_sfse) (1)
	CreateDynamicObject(3279,-107.30000305,-1739.09997559,1.29999995,0.00000000,0.00000000,10.00000000); //object(a51_spottower) (1)
	CreateDynamicObject(3279,-131.30000305,-1743.90002441,1.29999995,0.00000000,0.00000000,11.99755859); //object(a51_spottower) (2)
	CreateDynamicObject(10808,31.70000076,-1832.00000000,4.40000010,0.00000000,0.00000000,216.00000000); //object(airfence_03_sfse) (1)
	CreateDynamicObject(10808,48.79999924,-1940.09997559,4.40000010,0.00000000,0.00000000,215.99664307); //object(airfence_03_sfse) (2)
	CreateDynamicObject(10808,73.40000153,-2165.89990234,2.70000005,0.00000000,0.00000000,219.99670410); //object(airfence_03_sfse) (3)
	CreateDynamicObject(10806,-48.59999847,-2238.80004883,3.00000000,0.00000000,0.00000000,274.00000000); //object(airfence_01_sfse) (1)
	CreateDynamicObject(8263,-128.60000610,-2076.89990234,3.70000005,0.00000000,0.00000000,96.00000000); //object(vgsselecfence14) (1)
	CreateDynamicObject(8263,-157.30000305,-1777.59997559,3.70000005,0.00000000,0.00000000,77.99853516); //object(vgsselecfence14) (2)
	CreateDynamicObject(8263,-140.19999695,-1966.50000000,3.70000005,0.00000000,0.00000000,95.99853516); //object(vgsselecfence14) (3)
	CreateDynamicObject(8263,-39.09999847,-1718.90002441,3.70000005,0.00000000,0.00000000,5.99755859); //object(vgsselecfence14) (4)
	CreateDynamicObject(18226,93.79980469,-2227.59960938,-22.20000076,0.00000000,0.00000000,155.98937988); //object(cunt_rockgp2_19) (8)
	CreateDynamicObject(981,-67.09999847,-1845.50000000,2.29999995,0.00000000,0.00000000,8.00000000); //object(helix_barrier) (1)
	CreateDynamicObject(10816,-25.79999924,-2025.19995117,0.25000000,0.00000000,0.00000000,97.00549316); //object(airprtgnd_01_sfse) (1)
	CreateDynamicObject(3526,-126.69999695,-1651.00000000,1.60000002,0.00000000,0.00000000,275.99853516); //object(vegasairportlight) (8)
	CreateDynamicObject(3526,-139.89999390,-1652.59997559,1.60000002,0.00000000,0.00000000,275.99853516); //object(vegasairportlight) (9)
	CreateDynamicObject(3852,-43.22999954,-2220.19995117,2.86999989,0.00000000,0.00000000,276.00000000); //object(sf_jump) (1)
	CreateDynamicObject(3852,0.30000001,-2214.69995117,2.85999990,0.00000000,0.00000000,275.99853516); //object(sf_jump) (2)
	CreateDynamicObject(981,-21.50000000,-2217.30004883,2.06999993,0.00000000,0.00000000,187.00000000); //object(helix_barrier) (2)
	CreateDynamicObject(11472,11.80000019,-2212.50000000,0.30000001,0.00000000,0.00000000,274.00000000); //object(des_swtstairs1) (1)
	CreateDynamicObject(11472,24.29999924,-2211.62988281,0.30000001,0.00000000,0.00000000,273.99902344); //object(des_swtstairs1) (2)
	CreateDynamicObject(11472,36.79999924,-2210.75000000,0.30000001,0.00000000,0.00000000,273.99902344); //object(des_swtstairs1) (3)
	CreateDynamicObject(955,-112.00000000,-1852.18994141,3.70000005,0.00000000,0.00000000,98.00000000); //object(cj_ext_sprunk) (1)
	CreateDynamicObject(4691,-72.80000305,-1776.69995117,1.45000005,0.00000000,0.00000000,98.00000000); //object(csp3gm_lan2) (1)
	CreateDynamicObject(16136,-13.89999962,-1767.09997559,2.09999990,0.00000000,0.00000000,9.01098633); //object(des_telefenc) (1)
	CreateDynamicObject(8251,-111.09999847,-2011.09997559,5.19999981,0.00000000,0.00000000,6.00000000); //object(pltschlhnger02_lvs) (1)
	CreateDynamicObject(8251,-105.09999847,-2065.19995117,5.19999981,0.00000000,0.00000000,5.99853516); //object(pltschlhnger02_lvs) (2)
	CreateDynamicObject(16599,-101.80000305,-2097.19995117,6.09999990,0.00000000,0.00000000,6.16186523); //object(by_fuel06) (1)
	CreateDynamicObject(3287,-99.19999695,-2110.89990234,6.09999990,0.00000000,0.00000000,0.00000000); //object(cxrf_oiltank) (1)
	// Festa - Praia
	CreateObject(3660,184.3000000,-1776.0000000,5.8000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (1)
	CreateObject(3660,203.7000000,-1776.0000000,5.8000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (2)
	CreateObject(3660,223.0000000,-1776.0000000,5.8000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (3)
	CreateObject(3660,242.0000000,-1776.0000000,5.8000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (4)
	CreateObject(3660,261.1000100,-1776.0000000,5.8000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (5)
	CreateObject(3660,280.1000100,-1776.0000000,5.8000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (6)
	CreateObject(3660,299.1000100,-1776.0000000,5.8000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (7)
	CreateObject(3660,308.2000100,-1786.8000500,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (8)
	CreateObject(3660,308.2000100,-1806.0999800,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (9)
	CreateObject(3660,308.2000100,-1825.5000000,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (10)
	CreateObject(3660,308.2000100,-1825.5000000,4.6000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (13)
	CreateObject(3749,308.1992200,-1845.0996100,8.1000000,0.0000000,0.0000000,272.0000000); //object(clubgate01_lax) (1)
	CreateObject(3660,308.2000100,-1863.0000000,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (15)
	CreateObject(3660,308.2000100,-1863.0000000,4.6000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (16)
	CreateObject(3660,308.2000100,-1881.9000200,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (17)
	CreateObject(3660,308.2000100,-1881.9000200,4.6000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (18)
	CreateObject(3660,308.2000100,-1881.9000200,3.4000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (19)
	CreateObject(3660,308.2000100,-1863.0000000,3.4000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (20)
	CreateObject(3660,308.2000100,-1900.6999500,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (21)
	CreateObject(3660,308.1992200,-1900.6992200,4.6000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (22)
	CreateObject(3660,308.2000100,-1900.6999500,3.4000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (23)
	CreateObject(3660,308.2000100,-1900.6999500,2.2000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (24)
	CreateObject(3660,308.2000100,-1900.6999500,1.0000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (25)
	CreateObject(3660,308.2000100,-1900.6999500,0.0000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (26)
	CreateObject(3268,179.5996100,-1813.0000000,6.3000000,0.0000000,0.0000000,179.9950000); //object(mil_hangar1_) (1)
	CreateObject(3749,155.6000100,-1778.1999500,8.9000000,0.0000000,0.0000000,0.0000000); //object(clubgate01_lax) (2)
	CreateObject(3475,189.1992200,-1782.7998000,5.2000000,0.0000000,0.0000000,179.9950000); //object(vgsn_fncelec_pst) (1)
	CreateObject(3475,189.2000000,-1777.0000000,5.2000000,0.0000000,0.0000000,179.9950000); //object(vgsn_fncelec_pst) (2)
	CreateObject(3475,186.3999900,-1774.4000200,5.2000000,0.0000000,0.0000000,269.9950000); //object(vgsn_fncelec_pst) (3)
	CreateObject(3475,180.6000100,-1774.4000200,5.2000000,0.0000000,0.0000000,269.9890000); //object(vgsn_fncelec_pst) (4)
	CreateObject(3475,174.8000000,-1774.4000200,5.2000000,0.0000000,0.0000000,269.9890000); //object(vgsn_fncelec_pst) (5)
	CreateObject(3475,169.0000000,-1774.4000200,5.2000000,0.0000000,0.0000000,269.9890000); //object(vgsn_fncelec_pst) (6)
	CreateObject(3475,166.0000000,-1774.4000200,5.2000000,0.0000000,0.0000000,269.9890000); //object(vgsn_fncelec_pst) (7)
	CreateObject(3475,163.2000000,-1777.1999500,5.2000000,0.0000000,0.0000000,359.9890000); //object(vgsn_fncelec_pst) (8)
	CreateObject(3660,184.3000000,-1776.0000000,4.6000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (27)
	CreateObject(3660,203.7000000,-1776.0000000,4.6000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (28)
	CreateObject(3660,223.0000000,-1776.0000000,4.6000000,0.0000000,0.0000000,0.0000000); //object(lasairfbed_las) (29)
	CreateObject(3475,188.7000000,-1840.6999500,4.9000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (10)
	CreateObject(718,188.5000000,-1828.8000500,6.3000000,0.0000000,0.0000000,0.0000000); //object(vgs_palm04) (1)
	CreateObject(718,188.3999900,-1797.1999500,6.3000000,0.0000000,0.0000000,0.0000000); //object(vgs_palm04) (2)
	CreateObject(1361,188.5000000,-1837.6999500,3.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (1)
	CreateObject(1361,188.5000000,-1837.6999500,4.8000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (2)
	CreateObject(1361,188.5000000,-1837.6999500,6.1000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (3)
	CreateObject(1361,188.5000000,-1837.6999500,7.4000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (4)
	CreateObject(1361,188.8999900,-1786.3000500,3.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (5)
	CreateObject(1361,188.8999900,-1786.3000500,4.8000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (6)
	CreateObject(1361,188.8999900,-1786.3000500,6.1000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (7)
	CreateObject(1361,188.8999900,-1786.3000500,7.4000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (8)
	CreateObject(3475,188.7000000,-1846.6999500,4.7000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (12)
	CreateObject(3475,188.7000000,-1852.6999500,4.7000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (13)
	CreateObject(3475,188.7000000,-1858.6999500,4.7000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (14)
	CreateObject(3475,188.7000000,-1864.5000000,4.4000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (15)
	CreateObject(3475,188.7000000,-1870.3000500,3.9000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (16)
	CreateObject(3475,188.7000000,-1876.0999800,3.4000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (17)
	CreateObject(3475,188.7000000,-1881.9000200,3.2000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (18)
	CreateObject(3475,188.7000000,-1887.8000500,1.9000000,0.0000000,0.0000000,179.9840000); //object(vgsn_fncelec_pst) (19)
	CreateObject(3475,185.8999900,-1890.4000200,1.9000000,0.0000000,0.0000000,85.9840000); //object(vgsn_fncelec_pst) (20)
	CreateObject(3475,179.8999900,-1890.0000000,1.9000000,0.0000000,0.0000000,85.9790000); //object(vgsn_fncelec_pst) (21)
	CreateObject(3475,174.2000000,-1889.5999800,1.9000000,0.0000000,0.0000000,85.9790000); //object(vgsn_fncelec_pst) (22)
	CreateObject(3475,168.5000000,-1889.1999500,1.9000000,0.0000000,0.0000000,85.9790000); //object(vgsn_fncelec_pst) (23)
	CreateObject(3475,165.5000000,-1889.0000000,1.9000000,0.0000000,0.0000000,85.9740000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,162.1992200,-1892.0000000,2.4000000,0.0000000,0.0000000,179.9780000); //object(vgsn_fncelec_pst) (25)
	CreateObject(3475,162.2000000,-1898.0000000,2.4000000,0.0000000,0.0000000,179.9780000); //object(vgsn_fncelec_pst) (26)
	CreateObject(3475,162.2000000,-1904.0000000,2.4000000,0.0000000,0.0000000,179.9780000); //object(vgsn_fncelec_pst) (27)
	CreateObject(3475,162.2000000,-1910.0000000,2.4000000,0.0000000,0.0000000,179.9780000); //object(vgsn_fncelec_pst) (28)
	CreateObject(3475,162.2000000,-1916.0000000,2.4000000,0.0000000,0.0000000,179.9780000); //object(vgsn_fncelec_pst) (29)
	CreateObject(3475,162.2000000,-1922.0000000,2.4000000,0.0000000,0.0000000,179.9780000); //object(vgsn_fncelec_pst) (30)
	CreateObject(3475,162.2000000,-1928.0000000,2.4000000,0.0000000,0.0000000,179.9780000); //object(vgsn_fncelec_pst) (31)
	CreateObject(3475,159.5000000,-1930.8000500,5.2000000,0.0000000,0.0000000,89.9780000); //object(vgsn_fncelec_pst) (33)
	CreateObject(1361,189.3000000,-1837.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (9)
	CreateObject(1361,189.3000000,-1836.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (11)
	CreateObject(1361,189.3000000,-1835.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (12)
	CreateObject(1361,189.3000000,-1834.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (13)
	CreateObject(1361,189.3000000,-1833.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (14)
	CreateObject(1361,189.3000000,-1832.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (15)
	CreateObject(1361,189.3000000,-1831.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (16)
	CreateObject(1361,189.3000000,-1830.0000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (17)
	CreateObject(1361,189.3000000,-1796.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (18)
	CreateObject(1361,189.3000000,-1795.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (19)
	CreateObject(1361,189.3000000,-1794.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (20)
	CreateObject(1361,189.3000000,-1793.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (21)
	CreateObject(1361,189.3000000,-1792.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (22)
	CreateObject(1361,189.3000000,-1791.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (23)
	CreateObject(1361,189.3000000,-1790.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (24)
	CreateObject(1361,189.3000000,-1789.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (25)
	CreateObject(1361,189.3000000,-1788.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (26)
	CreateObject(1361,189.3000000,-1787.5000000,7.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (27)
	CreateObject(1361,162.3000000,-1930.9000200,1.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (28)
	CreateObject(1361,162.3000000,-1930.9000200,2.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (29)
	CreateObject(1361,162.3000000,-1930.9000200,3.8000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (30)
	CreateObject(1361,162.3000000,-1930.9000200,5.1000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (31)
	CreateObject(1361,162.3000000,-1930.9000200,6.4000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (32)
	CreateObject(1361,162.3000000,-1930.9000200,7.7000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (33)
	CreateObject(3475,153.7000000,-1930.8000500,5.2000000,0.0000000,0.0000000,89.9780000); //object(vgsn_fncelec_pst) (34)
	CreateObject(3475,150.7000000,-1930.8000500,5.2000000,0.0000000,0.0000000,89.9780000); //object(vgsn_fncelec_pst) (35)
	CreateObject(3475,147.8999900,-1928.0999800,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (36)
	CreateObject(3475,147.8999900,-1922.3000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (37)
	CreateObject(3475,147.8999900,-1916.3000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (38)
	CreateObject(3475,147.8999900,-1910.5999800,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (39)
	CreateObject(3475,147.8999900,-1904.8000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (40)
	CreateObject(3475,147.8999900,-1898.8000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (41)
	CreateObject(3475,147.8999900,-1893.0000000,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (42)
	CreateObject(3475,147.8999900,-1887.3000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (43)
	CreateObject(3475,147.8999900,-1881.3000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (44)
	CreateObject(3475,147.8999900,-1875.3000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (45)
	CreateObject(3475,147.8999900,-1869.3000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (46)
	CreateObject(3475,147.8999900,-1863.3000500,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (47)
	CreateObject(3475,147.8999900,-1857.5000000,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (48)
	CreateObject(3475,147.8999900,-1851.5000000,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (49)
	CreateObject(3475,147.8999900,-1845.5000000,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (50)
	CreateObject(3475,147.8999900,-1839.5000000,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (51)
	CreateObject(3475,147.8999900,-1833.5000000,5.2000000,0.0000000,0.0000000,359.9780000); //object(vgsn_fncelec_pst) (52)
	CreateObject(3475,148.0000000,-1827.6999500,5.2000000,0.0000000,0.0000000,357.9780000); //object(vgsn_fncelec_pst) (53)
	CreateObject(3475,148.2000000,-1821.9000200,5.2000000,0.0000000,0.0000000,357.9730000); //object(vgsn_fncelec_pst) (54)
	CreateObject(3475,148.3999900,-1816.0999800,5.2000000,0.0000000,0.0000000,357.9730000); //object(vgsn_fncelec_pst) (57)
	CreateObject(3475,148.6000100,-1810.3000500,5.2000000,0.0000000,0.0000000,357.9730000); //object(vgsn_fncelec_pst) (58)
	CreateObject(3475,148.8000000,-1804.5000000,5.2000000,0.0000000,0.0000000,357.9730000); //object(vgsn_fncelec_pst) (59)
	CreateObject(3475,148.8000000,-1798.5000000,5.2000000,0.0000000,0.0000000,1.9730000); //object(vgsn_fncelec_pst) (60)
	CreateObject(3475,148.6000100,-1792.6999500,5.2000000,0.0000000,0.0000000,1.9720000); //object(vgsn_fncelec_pst) (61)
	CreateObject(3475,148.3999900,-1786.9000200,5.2000000,0.0000000,0.0000000,1.9720000); //object(vgsn_fncelec_pst) (64)
	CreateObject(3475,148.2000000,-1781.0999800,5.2000000,0.0000000,0.0000000,1.9720000); //object(vgsn_fncelec_pst) (65)
	CreateObject(3660,149.0000000,-1766.5999800,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (30)
	CreateObject(3660,149.0000000,-1757.4000200,5.8000000,0.0000000,0.0000000,270.0000000); //object(lasairfbed_las) (31)
	CreateObject(16782,189.5996100,-1826.5000000,11.4000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(3385,189.7000000,-1822.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (1)
	CreateObject(3385,189.7000000,-1821.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (2)
	CreateObject(3385,189.7000000,-1821.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (3)
	CreateObject(3385,189.7000000,-1820.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (4)
	CreateObject(3385,189.7000000,-1820.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (5)
	CreateObject(3385,189.7000000,-1819.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (6)
	CreateObject(3385,189.7000000,-1819.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (7)
	CreateObject(3385,189.7000000,-1818.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (8)
	CreateObject(3385,189.7000000,-1818.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (9)
	CreateObject(3385,189.7000000,-1817.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (10)
	CreateObject(3385,189.7000000,-1817.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (11)
	CreateObject(3385,189.7000000,-1816.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (12)
	CreateObject(3385,189.7000000,-1816.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (13)
	CreateObject(3385,189.7000000,-1815.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (14)
	CreateObject(3385,189.7000000,-1815.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (15)
	CreateObject(3385,189.7000000,-1814.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (16)
	CreateObject(3385,189.7000000,-1814.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (17)
	CreateObject(3385,189.7000000,-1813.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (18)
	CreateObject(3385,189.7000000,-1813.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (19)
	CreateObject(3385,189.7000000,-1812.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (20)
	CreateObject(3385,189.7000000,-1812.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (21)
	CreateObject(3385,189.7000000,-1811.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (22)
	CreateObject(3385,189.7000000,-1811.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (23)
	CreateObject(3385,189.7000000,-1810.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (24)
	CreateObject(3385,189.7000000,-1810.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (25)
	CreateObject(3385,189.7000000,-1809.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (26)
	CreateObject(3385,189.7000000,-1809.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (27)
	CreateObject(3385,189.7000000,-1808.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (28)
	CreateObject(3385,189.7000000,-1808.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (29)
	CreateObject(3385,189.7000000,-1807.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (30)
	CreateObject(3385,189.7000000,-1807.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (31)
	CreateObject(3385,189.7000000,-1806.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (32)
	CreateObject(3385,189.7000000,-1806.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (33)
	CreateObject(3385,189.7000000,-1805.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (34)
	CreateObject(3385,189.7000000,-1805.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (35)
	CreateObject(3385,189.7000000,-1804.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (36)
	CreateObject(3385,189.7000000,-1804.1999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (37)
	CreateObject(3385,189.7000000,-1803.6999500,6.1000000,90.0000000,0.0000000,91.0000000); //object(a51_light1_) (38)
	CreateObject(1361,189.2000000,-1811.8000500,4.4000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (34)
	CreateObject(16782,189.6000100,-1826.5000000,9.6000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1826.5000000,7.4000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1824.5000000,7.4000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1824.5000000,9.6000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1824.5000000,11.4000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1825.5000000,11.4000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1825.5000000,9.6000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1825.5000000,7.6000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1802.4000200,7.6000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1802.4000200,9.9000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1802.4000200,12.1000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1800.6999500,12.1000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1800.6999500,10.1000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1800.6999500,7.6000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1799.6999500,7.6000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1799.6999500,10.1000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(16782,189.6000100,-1799.6999500,12.1000000,0.0000000,0.0000000,0.0000000); //object(a51_radar_scan) (1)
	CreateObject(7073,190.5000000,-1790.9000200,24.5000000,0.0000000,6.0000000,0.0000000); //object(vegascowboy1) (1)
	CreateObject(3526,189.7000000,-1821.9000200,13.2000000,0.0000000,270.0000000,180.0000000); //object(vegasairportlight) (1)
	CreateObject(3526,189.7000000,-1821.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (2)
	CreateObject(3526,189.6992200,-1820.8994100,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (3)
	CreateObject(3526,189.7000000,-1820.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (4)
	CreateObject(3526,189.7000000,-1819.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (5)
	CreateObject(3526,189.7000000,-1819.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (6)
	CreateObject(3526,189.7000000,-1818.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (7)
	CreateObject(3526,189.7000000,-1818.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (8)
	CreateObject(3526,189.7000000,-1817.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (9)
	CreateObject(3526,189.7000000,-1817.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (10)
	CreateObject(3526,189.7000000,-1816.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (11)
	CreateObject(3526,189.7000000,-1816.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (12)
	CreateObject(3526,189.7000000,-1815.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (13)
	CreateObject(3526,189.7000000,-1815.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (14)
	CreateObject(3526,189.7000000,-1814.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (15)
	CreateObject(3526,189.7000000,-1814.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (16)
	CreateObject(3526,189.7000000,-1813.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (17)
	CreateObject(3526,189.7000000,-1813.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (18)
	CreateObject(3526,189.7000000,-1812.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (19)
	CreateObject(3526,189.7000000,-1812.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (20)
	CreateObject(3526,189.7000000,-1811.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (21)
	CreateObject(3526,189.7000000,-1811.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (22)
	CreateObject(3526,189.7000000,-1810.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (23)
	CreateObject(3526,189.7000000,-1810.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (24)
	CreateObject(3526,189.7000000,-1809.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (25)
	CreateObject(3526,189.7000000,-1809.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (26)
	CreateObject(3526,189.7000000,-1808.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (27)
	CreateObject(3526,189.7000000,-1808.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (28)
	CreateObject(3526,189.7000000,-1807.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (29)
	CreateObject(3526,189.7000000,-1807.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (30)
	CreateObject(3526,189.7000000,-1806.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (31)
	CreateObject(3526,189.7000000,-1806.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (32)
	CreateObject(3526,189.7000000,-1805.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (33)
	CreateObject(3526,189.7000000,-1805.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (34)
	CreateObject(3526,189.7000000,-1804.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (35)
	CreateObject(3526,189.7000000,-1804.4000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (36)
	CreateObject(3526,189.7000000,-1803.9000200,13.2000000,0.0000000,270.0000000,179.9950000); //object(vegasairportlight) (37)
	CreateObject(3475,304.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9740000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,298.7999900,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,293.0000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,287.0000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,281.0000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,275.0000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,269.0000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,263.2000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,257.2000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,251.2000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,245.2000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,239.3999900,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,233.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,227.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,221.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,215.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,209.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,203.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,197.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,191.6000100,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,185.8000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,180.0000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,174.0000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,168.2000000,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(3475,162.3999900,-1910.0999800,-1.4000000,0.0000000,0.0000000,89.9730000); //object(vgsn_fncelec_pst) (24)
	CreateObject(997,310.0000000,-1849.1999500,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (2)
	CreateObject(997,309.8999900,-1847.5000000,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (3)
	CreateObject(997,309.7999900,-1845.8000500,2.6000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (4)
	CreateObject(997,309.2999900,-1837.5999800,2.6000000,0.0000000,0.0000000,272.0000000); //object(lhouse_barrier3) (9)
	CreateObject(997,310.0000000,-1849.1992200,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (10)
	CreateObject(997,310.0000000,-1849.1992200,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (11)
	CreateObject(997,309.8994100,-1847.5000000,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (12)
	CreateObject(997,309.8994100,-1847.5000000,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (13)
	CreateObject(997,309.7998000,-1845.7998000,2.6000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (14)
	CreateObject(997,309.7998000,-1845.7998000,2.6000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (15)
	CreateObject(997,309.8999900,-1849.1999500,2.6000000,0.0000000,0.0000000,272.0000000); //object(lhouse_barrier3) (23)
	CreateObject(997,309.7000100,-1844.0999800,2.6000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (24)
	CreateObject(997,309.6000100,-1842.4000200,2.6000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (25)
	CreateObject(997,309.6000100,-1840.9000200,2.6000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (26)
	CreateObject(997,313.8999900,-1838.8000500,2.6000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier3) (27)
	CreateObject(997,312.3999900,-1838.8000500,2.6000000,0.0000000,0.0000000,0.0000000); //object(lhouse_barrier3) (28)
	CreateObject(997,314.3999900,-1851.0000000,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (29)
	CreateObject(997,312.8999900,-1851.0999800,2.3000000,0.0000000,0.0000000,2.0000000); //object(lhouse_barrier3) (30)
	CreateObject(996,317.0996100,-1839.3994100,3.2000000,0.0000000,0.0000000,272.0000000); //object(lhouse_barrier1) (3)
	CreateObject(996,317.1992200,-1843.3994100,3.2000000,0.0000000,0.0000000,272.0000000); //object(lhouse_barrier1) (6)
	CreateObject(5130,158.2000000,-1812.8000500,3.5000000,0.0000000,0.0000000,136.0000000); //object(imcompstrs02) (1)
	CreateObject(9241,175.0996100,-1858.2998000,3.3000000,0.0000000,0.0000000,0.0000000); //object(copbits_sfn) (1)
	CreateObject(14537,199.0000000,-1784.4000200,4.9000000,0.0000000,0.0000000,0.0000000); //object(pdomesbar) (1)
	CreateObject(5737,201.1992200,-1787.1992200,-3.0000000,0.0000000,0.0000000,0.0000000); //object(archshop07_law02) (1)
	CreateObject(354,187.0000000,-1815.8994100,12.3000000,0.0000000,0.0000000,0.0000000); //object(7)
	CreateObject(354,185.8999900,-1805.0000000,12.3000000,0.0000000,0.0000000,0.0000000); //object(9)
	CreateObject(354,188.1000100,-1822.0999800,12.3000000,0.0000000,0.0000000,0.0000000); //object(29)
	CreateObject(354,186.7000000,-1811.6999500,12.3000000,0.0000000,0.0000000,0.0000000); //object(31)
	CreateObject(14546,-2653.5000000,1402.4000200,916.7999900,0.0000000,0.0000000,0.0000000); //object(pleasure-mid) (2)
	CreateObject(2232,178.2000000,-1818.6999500,6.9000000,0.0000000,0.0000000,0.0000000); //object(med_speaker_4) (5)
	CreateObject(2232,178.3000000,-1818.5999800,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (7)
	CreateObject(2232,178.3000000,-1817.9000200,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (8)
	CreateObject(2232,178.3000000,-1817.3000500,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (9)
	CreateObject(2232,178.3000000,-1816.5999800,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (10)
	CreateObject(2232,178.3000000,-1815.4000200,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (11)
	CreateObject(2232,178.3000000,-1814.6999500,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (12)
	CreateObject(2232,178.3000000,-1814.0999800,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (13)
	CreateObject(2232,178.3000000,-1813.4000200,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (14)
	CreateObject(2232,178.2998000,-1812.7998000,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,178.3000000,-1812.0999800,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (17)
	CreateObject(2232,178.3000000,-1811.4000200,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (18)
	CreateObject(2232,178.3000000,-1810.8000500,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (19)
	CreateObject(2232,178.3000000,-1810.0999800,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (20)
	CreateObject(2232,178.3000000,-1809.4000200,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (23)
	CreateObject(2232,178.3000000,-1808.6999500,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (24)
	CreateObject(2232,178.2000000,-1808.5999800,6.9000000,0.0000000,0.0000000,179.9950000); //object(med_speaker_4) (30)
	CreateObject(2232,177.6000100,-1808.6999500,6.9000000,0.0000000,0.0000000,179.9950000); //object(med_speaker_4) (31)
	CreateObject(2232,177.1000100,-1808.6999500,6.9000000,0.0000000,0.0000000,179.9950000); //object(med_speaker_4) (33)
	CreateObject(2232,176.6000100,-1808.6999500,6.9000000,0.0000000,0.0000000,179.9950000); //object(med_speaker_4) (34)
	CreateObject(2232,176.1000100,-1808.6999500,6.9000000,0.0000000,0.0000000,179.9950000); //object(med_speaker_4) (35)
	CreateObject(2232,175.6000100,-1808.6999500,6.9000000,0.0000000,0.0000000,179.9950000); //object(med_speaker_4) (36)
	CreateObject(2232,175.1000100,-1808.6999500,6.9000000,0.0000000,0.0000000,179.9950000); //object(med_speaker_4) (37)
	CreateObject(2104,178.3000000,-1812.8000500,6.6000000,0.0000000,0.0000000,270.0000000); //object(swank_hi_fi) (1)
	CreateObject(2232,178.3000000,-1816.0000000,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (39)
	CreateObject(14820,178.3000000,-1814.0999800,7.6000000,0.0000000,0.0000000,270.0000000); //object(dj_stuff) (1)
	CreateObject(2232,177.5000000,-1818.6999500,6.9000000,0.0000000,0.0000000,0.0000000); //object(med_speaker_4) (40)
	CreateObject(2232,177.0000000,-1818.6999500,6.9000000,0.0000000,0.0000000,0.0000000); //object(med_speaker_4) (41)
	CreateObject(2232,176.5000000,-1818.6999500,6.9000000,0.0000000,0.0000000,0.0000000); //object(med_speaker_4) (42)
	CreateObject(2232,176.0000000,-1818.6999500,6.9000000,0.0000000,0.0000000,0.0000000); //object(med_speaker_4) (43)
	CreateObject(2232,175.5000000,-1818.6999500,6.9000000,0.0000000,0.0000000,0.0000000); //object(med_speaker_4) (47)
	CreateObject(2232,175.0000000,-1818.6999500,6.9000000,0.0000000,0.0000000,0.0000000); //object(med_speaker_4) (48)
	CreateObject(354,202.8999900,-1783.6999500,6.6000000,0.0000000,0.0000000,0.0000000); //object(7)
	CreateObject(354,198.3999900,-1788.5999800,6.6000000,0.0000000,0.0000000,0.0000000); //object(7)
	CreateObject(354,193.8999900,-1784.0000000,6.6000000,0.0000000,0.0000000,0.0000000); //object(7)
	CreateObject(354,198.3999900,-1779.6999500,6.6000000,0.0000000,0.0000000,0.0000000); //object(7)
	CreateObject(354,198.2000000,-1783.5999800,6.6000000,0.0000000,0.0000000,0.0000000); //object(7)
	CreateObject(2780,189.3999900,-1813.0999800,12.1000000,0.0000000,0.0000000,92.0000000); //object(cj_smoke_mach) (19)
	CreateObject(5737,176.6000100,-1824.9000200,0.3000000,0.0000000,0.0000000,0.0000000); //object(archshop07_law02) (1)
	CreateObject(2780,189.6000100,-1804.0999800,12.1000000,0.0000000,0.0000000,92.0000000); //object(cj_smoke_mach) (25)
	CreateObject(2780,189.5000000,-1821.9000200,12.1000000,0.0000000,0.0000000,92.0000000); //object(cj_smoke_mach) (26)
	CreateObject(2780,189.5000000,-1817.0999800,12.1000000,0.0000000,0.0000000,92.0000000); //object(cj_smoke_mach) (27)
	CreateObject(2780,189.5000000,-1809.3000500,12.1000000,0.0000000,0.0000000,92.0000000); //object(cj_smoke_mach) (28)
	CreateObject(3515,185.5000000,-1832.0000000,7.1000000,0.0000000,0.0000000,0.0000000); //object(vgsfountain) (1)
	CreateObject(3515,185.1000100,-1791.1999500,7.1000000,0.0000000,0.0000000,0.0000000); //object(vgsfountain) (2)
	CreateObject(3515,178.8999900,-1807.5000000,5.3000000,0.0000000,0.0000000,0.0000000); //object(vgsfountain) (3)
	CreateObject(3515,178.8999900,-1820.1999500,5.3000000,0.0000000,0.0000000,0.0000000); //object(vgsfountain) (4)
	CreateObject(3437,188.3000000,-1822.1999500,12.2000000,0.0000000,0.0000000,354.4360000); //object(ballypllr01_lvs) (1)
	CreateObject(3437,186.0000000,-1822.0999800,12.2000000,0.0000000,0.0000000,358.4350000); //object(ballypllr01_lvs) (2)
	CreateObject(3437,183.5000000,-1822.0000000,12.2000000,0.0000000,0.0000000,358.4350000); //object(ballypllr01_lvs) (3)
	CreateObject(3437,181.0000000,-1822.0000000,12.2000000,0.0000000,0.0000000,358.4350000); //object(ballypllr01_lvs) (4)
	CreateObject(3437,178.5000000,-1821.9000200,12.2000000,0.0000000,0.0000000,0.4350000); //object(ballypllr01_lvs) (5)
	CreateObject(3437,176.0000000,-1821.9000200,12.2000000,0.0000000,0.0000000,0.4350000); //object(ballypllr01_lvs) (6)
	CreateObject(3437,173.5000000,-1821.9000200,12.2000000,0.0000000,0.0000000,0.4350000); //object(ballypllr01_lvs) (7)
	CreateObject(3437,188.3999900,-1803.1999500,12.2000000,0.0000000,0.0000000,358.4350000); //object(ballypllr01_lvs) (8)
	CreateObject(3437,186.1000100,-1803.1999500,12.2000000,0.0000000,0.0000000,358.4340000); //object(ballypllr01_lvs) (9)
	CreateObject(3437,183.7000000,-1803.1999500,12.2000000,0.0000000,0.0000000,358.4340000); //object(ballypllr01_lvs) (10)
	CreateObject(3437,181.2000000,-1803.1999500,12.2000000,0.0000000,0.0000000,358.4340000); //object(ballypllr01_lvs) (11)
	CreateObject(3437,178.7000000,-1803.1999500,12.2000000,0.0000000,0.0000000,358.4340000); //object(ballypllr01_lvs) (12)
	CreateObject(3437,176.2000000,-1803.1999500,12.2000000,0.0000000,0.0000000,358.4340000); //object(ballypllr01_lvs) (13)
	CreateObject(3437,173.7000000,-1803.1999500,12.2000000,0.0000000,0.0000000,358.4340000); //object(ballypllr01_lvs) (14)
	CreateObject(7392,188.7000000,-1836.5999800,14.5000000,0.0000000,6.0000000,0.0000000); //object(vegcandysign1) (1)
	CreateObject(2780,189.2000000,-1838.5000000,16.4000000,0.0000000,0.0000000,92.0000000); //object(cj_smoke_mach) (29)
	CreateObject(2780,189.2000000,-1790.1999500,21.4000000,0.0000000,0.0000000,92.0000000); //object(cj_smoke_mach) (30)
	CreateObject(3461,188.8000000,-1821.0999800,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (2)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (3)
	CreateObject(3461,188.8000000,-1820.0999800,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (4)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (5)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (6)
	CreateObject(3461,188.8000000,-1819.0999800,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (7)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (8)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (9)
	CreateObject(3461,188.8000000,-1817.8000500,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (10)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (11)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (12)
	CreateObject(3461,188.7000000,-1804.4000200,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (13)
	CreateObject(3461,188.6992200,-1804.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (14)
	CreateObject(3461,188.6992200,-1804.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (15)
	CreateObject(13667,190.0000000,-1812.1999500,30.6000000,0.0000000,0.0000000,12.0000000); //object(monkeyman) (1)
	CreateObject(13641,175.6000100,-1813.0000000,-3.4000000,0.0000000,0.0000000,0.0000000); //object(kickramp04) (1)
	CreateObject(3461,188.7000000,-1805.4000200,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (27)
	CreateObject(3461,188.6992200,-1805.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (28)
	CreateObject(3461,188.6992200,-1805.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (29)
	CreateObject(3461,188.7000000,-1806.4000200,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (30)
	CreateObject(3461,188.6992200,-1806.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (31)
	CreateObject(3461,188.6992200,-1806.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (32)
	CreateObject(3461,188.7000000,-1807.4000200,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (33)
	CreateObject(3461,188.6992200,-1807.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (34)
	CreateObject(3461,188.6992200,-1807.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (35)
	CreateObject(3461,188.6992200,-1807.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (36)
	CreateObject(3461,188.6992200,-1807.3994100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (37)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (38)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (39)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (40)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (42)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (43)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (44)
	CreateObject(3461,188.7998000,-1817.7998000,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (45)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (46)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (47)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (48)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (49)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (50)
	CreateObject(3461,188.7998000,-1819.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (51)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (52)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (53)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (54)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (55)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (56)
	CreateObject(3461,188.7998000,-1820.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (57)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (58)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (59)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (60)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (61)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (62)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (63)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (64)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (65)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (66)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (67)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (68)
	CreateObject(3461,188.7998000,-1821.0996100,4.8000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (69)
	CreateObject(5737,176.6000100,-1798.6999500,0.3000000,0.0000000,0.0000000,0.0000000); //object(archshop07_law02) (1)
	CreateObject(3666,188.2000000,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (1)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (2)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (3)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (4)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (5)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (6)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (7)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (8)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (9)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (10)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (11)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (12)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (13)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (14)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (15)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (16)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (17)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (18)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (19)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (20)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (21)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (22)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (23)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (24)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (25)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (26)
	CreateObject(3666,188.1992200,-1822.0000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (27)
	CreateObject(3666,188.5000000,-1803.0999800,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (28)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (29)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (30)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (31)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (32)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (33)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (34)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (35)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (36)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (37)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (38)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (39)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (40)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (41)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (42)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (43)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (44)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (45)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (46)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (47)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (48)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (49)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (50)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (51)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (52)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (53)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (54)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (55)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (56)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (57)
	CreateObject(3666,188.5000000,-1803.0996100,18.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (58)
	CreateObject(2232,189.2000000,-1821.6999500,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1821.6999500,8.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1821.6999500,9.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1821.6999500,10.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1821.6999500,11.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1804.0000000,6.9000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1804.0000000,8.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1804.0000000,9.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1804.0000000,10.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	CreateObject(2232,189.2000000,-1804.0000000,11.1000000,0.0000000,0.0000000,90.0000000); //object(med_speaker_4) (15)
	//Portão Festa
	CreateObject(980,155.6000100,-1776.5999800,6.1000000,0.0000000,0.0000000,0.0000000); //object(airportgate) (1)
	// Casa Vitor
	CreateDynamicObject(988,-670.29998779,967.20001221,12.00000000,0.00000000,0.00000000,90.00000000); //
	pVito[ 0 ] = CreateDynamicObject(976,-693.70001221,961.40002441,11.39999962,0.00000000,0.00000000,90.00000000); //
	pVito[ 1 ] = CreateDynamicObject(988,-656.09997559,871.00000000,0.00000000,0.00000000,0.00000000,45.00000000); //
	// Base
	pFury = CreateDynamicObject(980,652.09997558594,-455.20001220703,18.10000038147,0,0,90); //object(airportgate) (1)
	CreateDynamicObject(8210,699.00000000,-437.39999390,18.39999962,0.00000000,0.00000000,0.00000000); //object(vgsselecfence12) (1)
	CreateDynamicObject(8210,679.59960938,-437.39941406,18.39999962,0.00000000,0.00000000,0.00000000); //object(vgsselecfence12) (2)
	CreateDynamicObject(987,652.00000000,-437.39999390,15.19999981,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (3)
	CreateDynamicObject(3749,652.59997559,-455.20001221,21.20000076,0.00000000,0.00000000,270.00000000); //object(clubgate01_lax) (2)
	CreateDynamicObject(987,711.29998779,-472.60000610,14.69999981,0.00000000,0.00000000,60.00000000); //object(elecfence_bar) (4)
	CreateDynamicObject(8210,683.70001221,-472.20001221,18.39999962,0.00000000,0.00000000,0.00000000); //object(vgsselecfence12) (4)
	CreateDynamicObject(987,651.00000000,-461.79980469,15.19999981,0.00000000,0.00000000,295.99914551); //object(elecfence_bar) (7)
	CreateDynamicObject(987,711.29998779,-472.60000610,17.70000076,0.00000000,0.00000000,59.99633789); //object(elecfence_bar) (9)
	CreateDynamicObject(987,724.21997070,-449.38000488,15.80000019,0.00000000,0.00000000,77.98645020); //object(elecfence_bar) (10)
	CreateDynamicObject(955,673.50000000,-466.39999390,15.93000031,0.00000000,0.00000000,270.00000000); //object(cj_ext_sprunk) (1)
	CreateDynamicObject(14467,672.00000000,-474.60000610,18.29999924,0.00000000,0.00000000,0.00000000); //object(carter_statue) (1)
	CreateDynamicObject(14467,691.59997559,-474.50000000,18.29999924,0.00000000,0.00000000,0.00000000); //object(carter_statue) (2)
	CreateDynamicObject(5821,690.09997559,-447.32998657,15.66699982,0.00000000,0.00000000,268.00000000); //object(odrampbit03) (1)
	CreateDynamicObject(5821,678.59997559,-454.72000122,17.58499908,0.00000000,0.00000000,269.00000000); //object(odrampbit03) (2)
	CreateDynamicObject(3934,683.59997559,-464.39999390,21.55999947,0.00000000,0.00000000,270.00000000); //object(helipad01) (1)
	// Casa 2
	pCasa2 = CreateDynamicObject(980,1497.4000244141,-700.00000000,96.50000000,0.00000000,0.00000000,0.00000000); //object (airportgate) (1)
	CreateDynamicObject(3749,1497.50000000,-700.40002441406,99.599998474121,0.00000000,0.00000000,0.00000000); //object (ClubGate01_LAx) (1)
	CreateDynamicObject(8674,1511.0999755859,-699.90002441406,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence02_lvs) (1)
	CreateDynamicObject(8673,1521.0999755859,-699.79998779297,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence03_lvs) (1)
	CreateDynamicObject(8673,1530.9000244141,-690.20001220703,95.900001525879,0.00000000,0.00000000,268.00000000);//object (csrsfence03_lvs) (3)
	CreateDynamicObject(8673,1531.1999511719,-670.09997558594,95.900001525879,0.00000000,0.00000000,270.00000000);//object (csrsfence03_lvs) (4)
	CreateDynamicObject(8674,1531.1999511719,-662.40002441406,96.00000000,0.00000000,0.00000000,270.00000000);//object (csrsfence02_lvs) (2)
	CreateDynamicObject(8673,1521.0999755859,-656.90002441406,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence03_lvs) (5)
    CreateDynamicObject(8673,1500.6999511719,-656.90002441406,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence03_lvs) (6)
	CreateDynamicObject(8673,1480.4000244141,-657.09997558594,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence03_lvs) (7)
	CreateDynamicObject(8673,1466.9000244141,-657.20001220703,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence03_lvs) (8)
	CreateDynamicObject(8673,1456.6999511719,-667.40002441406,95.900001525879,0.00000000,0.00000000,270.00000000);//object (csrsfence03_lvs) (9)
	CreateDynamicObject(8673,1456.8000488281,-684.29998779297,95.900001525879,0.00000000,0.00000000,270.00000000);//object (csrsfence03_lvs) (10)
	CreateDynamicObject(8673,1467.0999755859,-694.00000000,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence03_lvs) (12)
	CreateDynamicObject(3515,1503.7001953125,-709.900390625,95.599998474121,0.00000000,0.00000000,0.00000000);//object (vgsfountain) (1)
	CreateDynamicObject(3515,1492.099609375,-709.900390625,95.699996948242,0.00000000,0.00000000,0.00000000);//object (vgsfountain) (2)
	CreateDynamicObject(3508,1503.6999511719,-709.70001220703,96.50000000,0.00000000,0.00000000,0.00000000);//object (VgsN_nitree_g02) (2)
    CreateDynamicObject(3508,1492.0999755859,-709.90002441406,96.599998474121,0.00000000,0.00000000,0.00000000);//object (VgsN_nitree_g02) (1)
	CreateDynamicObject(7392,1496.7998046875,-680.599609375,114.30000305176,0.00000000,0.00000000,275.99853515625);//object (vegcandysign1) (1)
	CreateDynamicObject(14467,1505.3000488281,-703.79998779297,96.50000000,0.00000000,0.00000000,0.00000000);//object (VgsN_nitree_g02) (2)
	CreateDynamicObject(14467,1490.4000244141,-703.90002441406,96.50000000,0.00000000,0.00000000,0.00000000);//object (VgsN_nitree_g02) (1)
	CreateDynamicObject(8674,1475.9000244141,-694.0000000,95.900001525879,0.00000000,0.00000000,0.00000000);//object (csrsfence02_lvs) (5)
    CreateDynamicObject(992,1481.0999755859,-695.50000000,96.00000000,0.00000000,0.00000000,270.00000000);//object (bar_barrier10b) (1)
    CreateDynamicObject(992,1481.0999755859,-698.20001220703,96.00000000,0.00000000,0.00000000,270.00000000);//object (bar_barrier10b) (3)
    CreateDynamicObject(8674,1486.4000244141,-700.40002441406,95.900001525879,0.00000000,0.00000000,356.00000000);//object (csrsfence02_lvs) (3)
    // Casa Do Golf ( ID 33 )
    CreateDynamicObject(980,665,-1309.6999511719,15.10000038147,0.00000000,0.00000000,180.00000000);//object (airportgate) (1)
    CreateDynamicObject(980,660.20001220703,-1227.4000244141,17,0.00000000,0.00000000,60.00000000);//object (airportgate) (2)
    pCasaGolf =  CreateDynamicObject(980,785.5,-1152.5,25.39999961853,0.00000000,0.00000000,274.00000000);//object (airportgate) (3)
    CreateDynamicObject (987,671.5,-1217,22.60000038147,0,90,204); //object (elecfender_BAR)
    CreateDynamicObject (979,665,-1309.1999511719,13.10000038147,0,0,0); //object (sub_roadleft)
    CreateDynamicObject (978,660.70001220703,-1227.6999511719,15.39999961853,0,1,242); //object (sub_roadright)
    CreateDynamicObject (16362,767.09997558594,-1258.6999511719,15.699999809265,0,0,0); //object (desn2_tscanopy)
    CreateDynamicObject (16362,746.29998779297,-1258.5999755859,15.699999809265,0,0,0); //object (desn2_tscanopy)
	// Portões Mad Dog
	pMad[ 0 ] = CreateDynamicObject(980,1245.47277832,-766.79357910,93.63903046,0.00000000,0.00000000,0.00000000); //object(airportgate) (4)
	pMad[ 1 ] = CreateDynamicObject(980,1364.70019531,-846.83117676,46.62973404,0.00000000,0.00000000,228.00000000); //object(airportgate) (2)
	// Mad Dog Cercada
	CreateDynamicObject(3749,1363.68078613,-845.61450195,49.88700485,0.00000000,0.00000000,44.00000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(3749,1245.54077148,-767.57580566,96.05965424,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (2)
	// Base
	pUSAp = CreateDynamicObject(980,2868.59960938,-1783.39941406,12.80000114,0.00000000,0.00000000,83.99597168);
	pUSAb = CreateDynamicObject(3113,2914.69995117,-1840.19995117,1.50000000,0.00000000,0.00000000,84.25000000);
	pUSAe = CreateDynamicObject(3115,2915.50000000,-1831.09960938,9.89999962,0.00000000,0.00000000,263.99597168);
	CreateDynamicObject(10771,2925.89941406,-1732.69921875,5.40000010,0.00000000,0.00000000,83.98498535); //object(carrier_hull_sfse)(1)
	CreateDynamicObject(11145,2919.19921875,-1795.29980469,4.30000019,0.00000000,0.00000000,83.98498535); //object(carrier_lowdeck_sfs)(1)
	CreateDynamicObject(11149,2930.50000000,-1739.39941406,11.89999962,0.00000000,0.00000000,83.98498535); //object(accorridors_sfs)(1)
	CreateDynamicObject(11146,2924.39941406,-1741.59960938,12.30000019,0.00000000,0.00000000,83.98498535); //object(carrier_hangar_sfs)(1)
	CreateDynamicObject(10770,2933.79980469,-1730.29980469,38.59999847,0.00000000,0.00000000,83.99597168); //object(carrier_bridge_sfse)(1)
	CreateDynamicObject(3885,2936.89990234,-1701.40002441,20.89999962,0.00000000,0.00000000,90.00000000); //object(sambase_sfxrf)(1)
	CreateDynamicObject(3885,2929.50000000,-1768.59960938,18.00000000,0.00000000,0.00000000,92.74658203); //object(sambase_sfxrf)(2)
	CreateDynamicObject(11237,2933.79980469,-1730.29980469,38.59999847,0.00000000,0.00000000,83.99597168); //object(carrier_bits_sfse)(1)
	CreateDynamicObject(3884,2929.60009766,-1768.59997559,18.10000038,0.00000000,0.00000000,84.75000000); //object(samsite_sfxrf)(1)
	CreateDynamicObject(3884,2936.89990234,-1701.40002441,21.00000000,0.00000000,0.00000000,84.75000000); //object(samsite_sfxrf)(2)
	CreateDynamicObject(3114,2901.54980469,-1787.18457031,10.14920044,5.99853516,0.00000000,83.98498535); //object(carrier_lift2_sfse)(1)
	CreateDynamicObject(10772,2926.19921875,-1731.39941406,17.20000076,0.00000000,0.00000000,83.99597168); //object(carrier_lines_sfse)(1)
	CreateDynamicObject(11374,2930.50000000,-1739.39941406,11.69999981,0.00000000,0.00000000,83.74877930); //object(accorail_sfs)(1)
	CreateDynamicObject(3114,2885.80859375,-1785.50781250,10.72550011,0.00000000,0.00000000,263.99047852); //object(carrier_lift2_sfse)(2)
	CreateDynamicObject(3114,2874.57226562,-1784.28417969,10.14920044,353.99597168,0.00000000,83.98498535); //object(carrier_lift2_sfse)(3)
	CreateDynamicObject(3934,2937.29980469,-1687.69921875,17.20000076,0.00000000,0.00000000,353.99597168); //object(helipad01)(2)
	CreateDynamicObject(3934,2939.69995117,-1665.69995117,17.20000076,0.00000000,0.00000000,354.00000000); //object(helipad01)(3)
	CreateDynamicObject(3934,2942.10009766,-1643.69995117,17.20000076,0.00000000,0.00000000,354.00000000); //object(helipad01)(4)
	CreateDynamicObject(3114,2890.17578125,-1786.02343750,10.72000027,0.00000000,0.00000000,83.99597168); //object(carrier_lift2_sfse)(2)
	CreateDynamicObject(3114,2904.91552734,-1787.53186035,9.65600014,0.00000000,0.00000000,84.00000000); //object(carrier_lift2_sfse)(7)
	CreateDynamicObject(987,2869.50000000,-1794.09960938,10.50000000,0.00000000,356.99523926,354.49584961); //object(elecfence_bar)(1)
	CreateDynamicObject(987,2883.19921875,-1774.89941406,11.10000038,0.00000000,2.99926758,173.74328613); //object(elecfence_bar)(2)
	CreateDynamicObject(3749,2868.59960938,-1783.39941406,15.89999962,0.00000000,0.00000000,263.99597168); //object(clubgate01_lax)(1)
	CreateDynamicObject(3390,2933.50000000,-1717.00000000,10.10000038,0.00000000,0.00000000,84.25000000); //object(a51_sdsk_ncol1_)(1)
	CreateDynamicObject(3391,2938.69995117,-1722.30004883,10.10000038,0.00000000,0.00000000,354.25000000); //object(a51_sdsk_ncol2_)(1)
	CreateDynamicObject(3393,2936.30004883,-1726.09997559,10.10000038,0.00000000,0.00000000,263.75000000); //object(a51_sdsk_ncol4_)(1)
	CreateDynamicObject(3392,2932.80004883,-1725.69995117,10.10000038,0.00000000,0.00000000,263.50000000); //object(a51_sdsk_ncol3_)(1)
	CreateDynamicObject(1671,2933.10009766,-1718.80004883,10.80000019,0.00000000,0.00000000,154.25000000); //object(swivelchair_a)(4)
	CreateDynamicObject(1671,2936.50000000,-1724.30004883,10.80000019,0.00000000,0.00000000,357.00000000); //object(swivelchair_a)(1)
	CreateDynamicObject(1671,2933.30004883,-1724.19995117,10.80000019,0.00000000,0.00000000,350.00000000); //object(swivelchair_a)(2)
	CreateDynamicObject(1671,2937.19995117,-1721.59997559,10.80000019,0.00000000,0.00000000,64.24804688); //object(swivelchair_a)(3)
	CreateDynamicObject(16155,2938.60009766,-1717.50000000,11.69999981,0.00000000,0.00000000,278.00000000); //object(ufo_backrmstuff)(1)
	CreateDynamicObject(2609,2928.19995117,-1717.59997559,11.19999981,0.00000000,0.00000000,83.50000000); //object(cj_p_fileing1)(1)
	CreateDynamicObject(2610,2928.10009766,-1718.30004883,11.30000019,0.00000000,0.00000000,83.49609375); //object(cj_p_fileing2)(1)
	CreateDynamicObject(1271,2938.50000000,-1717.69995117,10.50000000,0.00000000,0.00000000,0.00000000); //object(gunbox)(1)
	CreateDynamicObject(14791,2939.60009766,-1700.50000000,12.30000019,0.00000000,0.00000000,353.00000000); //object(a_vgsgymboxa)(1)
	CreateDynamicObject(2628,2939.69995117,-1715.40002441,10.19999981,0.00000000,0.00000000,175.25000000); //object(gym_bench2)(1)
	CreateDynamicObject(2627,2935.19995117,-1714.69995117,10.19999981,0.00000000,0.00000000,174.75000000); //object(gym_treadmill)(1)
	CreateDynamicObject(2627,2933.30004883,-1714.50000000,10.19999981,0.00000000,0.00000000,174.74853516); //object(gym_treadmill)(2)
	CreateDynamicObject(2629,2937.30004883,-1715.19995117,10.19999981,0.00000000,0.00000000,174.50000000); //object(gym_bench1)(1)
	CreateDynamicObject(2631,2939.50000000,-1706.30004883,10.30000019,0.00000000,0.00000000,354.00000000); //object(gym_mat1)(1)
	CreateDynamicObject(2630,2930.69995117,-1706.09997559,10.19999981,0.00000000,0.00000000,263.50000000); //object(gym_bike)(1)
	CreateDynamicObject(2630,2930.89990234,-1704.09997559,10.19999981,0.00000000,0.00000000,263.49609375); //object(gym_bike)(2)
	CreateDynamicObject(3798,2913.00000000,-1754.80004883,2.09999990,0.00000000,0.00000000,0.00000000); //object(acbox3_sfs)(1)
	CreateDynamicObject(3798,2912.69995117,-1757.90002441,2.09999990,0.00000000,0.00000000,0.00000000); //object(acbox3_sfs)(2)
	CreateDynamicObject(3799,2916.60009766,-1754.30004883,2.09999990,0.00000000,0.00000000,0.00000000); //object(acbox2_sfs)(2)
	CreateDynamicObject(3761,2922.30004883,-1758.40002441,4.09999990,0.00000000,0.00000000,354.25000000); //object(industshelves)(1)
	CreateDynamicObject(3787,2932.19995117,-1770.30004883,10.80000019,0.00000000,0.00000000,349.75000000); //object(missile_02_sfxr)(1)
	CreateDynamicObject(3787,2925.19995117,-1769.19995117,11.10000038,0.00000000,0.00000000,0.00000000); //object(missile_02_sfxr)(2)
	CreateDynamicObject(3791,2931.89990234,-1772.30004883,10.89999962,0.00000000,0.00000000,354.50000000); //object(missile_10_sfxr)(1)
	CreateDynamicObject(3793,2932.50000000,-1769.80004883,12.50000000,90.00000000,0.00000000,352.00000000); //object(missile_06_sfxr)(1)
	CreateDynamicObject(3066,2906.09960938,-1813.69921875,11.30000019,0.00000000,0.00000000,353.49609375); //object(ammotrn_obj)(1)
	CreateDynamicObject(2991,2906.69921875,-1803.00000000,10.80000019,0.00000000,0.00000000,262.99621582); //object(imy_bbox)(1)
	CreateDynamicObject(2358,2921.30004883,-1662.40002441,10.60000038,0.00000000,0.00000000,0.00000000); //object(ammo_box_c2)(1)
	CreateDynamicObject(2359,2924.10009766,-1662.59997559,10.89999962,0.00000000,0.00000000,357.00000000); //object(ammo_box_c5)(1)
	CreateDynamicObject(2358,2921.30004883,-1662.50000000,11.30000019,0.00000000,0.00000000,0.00000000); //object(ammo_box_c2)(2)
	CreateDynamicObject(1776,2930.60009766,-1699.09997559,11.69999981,0.00000000,0.00000000,83.75000000); //object(cj_candyvendor)(1)
	CreateDynamicObject(1209,2930.89990234,-1696.80004883,10.19999981,0.00000000,0.00000000,83.74877930); //object(vendmach)(1)
	CreateDynamicObject(2358,2920.79980469,-1664.50000000,10.60000038,0.00000000,0.00000000,74.99816895); //object(ammo_box_c2)(3)
	CreateDynamicObject(987,2895.10009766,-1776.40002441,11.30000019,0.00000000,1.00000000,173.24328613); //object(elecfence_bar)(2)
	CreateDynamicObject(987,2881.39990234,-1795.30004883,11.00000000,0.00000000,358.70007324,353.49584961); //object(elecfence_bar)(1)
	CreateDynamicObject(987,2906.39990234,-1777.59997559,10.50000000,0.00000000,356.00000000,174.23791504); //object(elecfence_bar)(2)
	CreateDynamicObject(987,2892.69995117,-1796.59997559,11.19999981,0.00000000,4.00000000,354.49060059); //object(elecfence_bar)(1)
	// Portão Casa ID 31
	pcasa31 = CreateDynamicObject(980,282.62796021,-1320.36730957,55.70366669,0.00000000,0.00000000,34.25000000); //object(airportgate)(2)
	// Casa ID 30 portão
	pcasa30 = CreateDynamicObject(976,260.49185181,-1335.74426270,52.46945953,0.00000000,0.00000000,34.75000000); //object(phils_compnd_gate) (1)
	// Vilinha
	pVilinha = CreateDynamicObject(980, 905.41, -1664.45, 15.39,   0.00, 0.00, -89.34);
	CreateDynamicObject(980, 905.40, -1664.45, 20.58, 0.00, 0.00, -89.34);
	CreateDynamicObject(983,823.50000000,-1672.59997559,20.39999962,0.00000000,0.00000000,89.00000000); //
	CreateDynamicObject(983,820.29998779,-1669.40002441,20.39999962,0.00000000,0.00000000,0.24499512); //
	CreateDynamicObject(983,820.29998779,-1663.00000000,20.39999962,0.00000000,0.00000000,359.99169922); //
	CreateDynamicObject(3475,907.00000000,-1640.00000000,14.89999962,0.00000000,0.00000000,182.00000000); //
	CreateDynamicObject(3475,907.09997559,-1645.80004883,14.89999962,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(3475,907.09997559,-1651.69995117,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3749,905.40002441,-1664.40002441,18.39999962,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(3475,907.09997559,-1677.00000000,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1682.90002441,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1688.80004883,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1694.69995117,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1700.59997559,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1706.50000000,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1712.40002441,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1718.30004883,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1724.30004883,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1730.19995117,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1736.09997559,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1742.00000000,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1747.80004883,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1753.59997559,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,907.09997559,-1759.09997559,14.89999962,0.00000000,0.00000000,179.99450684); //
	CreateDynamicObject(3475,904.20001221,-1761.69995117,14.89999962,0.00000000,0.00000000,88.24450684); //
	CreateDynamicObject(3475,898.20001221,-1761.50000000,14.89999962,0.00000000,0.00000000,87.24243164); //
	CreateDynamicObject(3475,892.20001221,-1761.19995117,14.89999962,0.00000000,0.00000000,87.74243164); //
	CreateDynamicObject(3475,886.20001221,-1760.90002441,14.89999962,0.00000000,0.00000000,87.24243164); //
	CreateDynamicObject(3475,880.20001221,-1760.59997559,14.89999962,0.00000000,0.00000000,87.24243164); //
	CreateDynamicObject(3475,874.20001221,-1760.30004883,14.89999962,0.00000000,0.00000000,87.24243164); //
	CreateDynamicObject(3475,868.20001221,-1760.00000000,14.89999962,0.00000000,0.00000000,87.24243164); //
	CreateDynamicObject(3475,862.20001221,-1759.69995117,14.89999962,0.00000000,0.00000000,87.24243164); //
	CreateDynamicObject(3475,856.20001221,-1759.40002441,14.89999962,0.00000000,0.00000000,87.24243164); //
	CreateDynamicObject(983,843.59997559,-1628.00000000,20.39999962,0.00000000,0.00000000,271.24731445); //
	CreateDynamicObject(5816,846.20001221,-1631.90002441,19.70000076,0.00000000,0.00000000,269.50000000); //
	CreateDynamicObject(983,850.00000000,-1628.00000000,20.39999962,0.00000000,0.00000000,268.74755859); //
	CreateDynamicObject(3934,840.00000000,-1654.80004883,23.20000076,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3934,840.00000000,-1641.80004883,23.20000076,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3928,846.29998779,-1666.00000000,19.70000076,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(5816,854.59997559,-1634.09997559,16.20000076,0.00000000,0.00000000,268.74462891); //
	CreateDynamicObject(946,854.09997559,-1656.09997559,14.80000019,0.00000000,0.00000000,269.50000000);
	// Casa
	CreateDynamicObject(990,977.64086914,-938.13116455,43.09877396,0.00000000,0.00000000,265.50000000); //object(bar_barrier12)(1)
	CreateDynamicObject(990,972.62353516,-942.15948486,43.14877701,0.00000000,0.00000000,175.99560547); //object(bar_barrier12)(2)
	CreateDynamicObject(990,978.03668213,-933.21051025,44.70059967,0.00000000,0.00000000,266.00000000); //object(bar_barrier12)(3)
	CreateDynamicObject(990,972.63171387,-942.23431396,45.25279999,0.00000000,0.00000000,176.75000000); //object(bar_barrier12)(4)
	CreateDynamicObject(990,977.71917725,-938.12664795,44.77664566,0.00000000,0.00000000,265.50000000); //object(bar_barrier12)(5)
	CreateDynamicObject(990,949.21459961,-942.12896729,44.05185699,0.00000000,0.00000000,184.00000000); //object(bar_barrier12)(6)
	CreateDynamicObject(4100,972.03216553,-928.48260498,47.08105469,0.00000000,0.00000000,324.00000000); //object(meshfence1_lan)(1)
	CreateDynamicObject(4100,978.24273682,-921.45239258,47.08105469,0.00000000,0.00000000,233.99780273); //object(meshfence1_lan)(2)
	CreateDynamicObject(4100,977.91137695,-918.34436035,47.08105469,0.00000000,0.00000000,233.99780273); //object(meshfence1_lan)(3)
	CreateDynamicObject(4100,970.36230469,-911.77441406,47.08105469,0.00000000,0.00000000,143.99230957); //object(meshfence1_lan)(4)
	CreateDynamicObject(4100,963.35546875,-905.14550781,46.33100891,0.00000000,0.00000000,54.23950195); //object(meshfence1_lan)(6)
	CreateDynamicObject(4100,962.62493896,-895.36151123,46.30600739,0.00000000,0.00000000,54.23950195); //object(meshfence1_lan)(7)
	CreateDynamicObject(7371,954.26562500,-888.83496094,46.28173828,0.00000000,0.00000000,275.99853516); //object(vgsnelec_fence_02)(1)
	CreateDynamicObject(7371,892.41638184,-826.06060791,41.60675812,0.00000000,0.00000000,3.49853516); //object(vgsnelec_fence_02)(2)
	CreateDynamicObject(7371,892.51898193,-826.06579590,46.35686493,0.00000000,0.00000000,3.49365234); //object(vgsnelec_fence_02)(3)
	CreateDynamicObject(8210,927.02862549,-943.49432373,42.20209885,0.00000000,0.00000000,3.75000000); //object(vgsselecfence12)(1)
	CreateDynamicObject(3361,903.62792969,-928.92230225,43.40043640,0.00000000,0.00000000,274.50000000); //object(cxref_woodstair)(1)
	CreateDynamicObject(4100,962.47412109,-893.29724121,49.00595856,0.00000000,0.00000000,54.23950195); //object(meshfence1_lan)(7)
	CreateDynamicObject(4100,970.36230469,-911.77441406,49.83122253,0.00000000,0.00000000,143.99230957); //object(meshfence1_lan)(4)
	CreateDynamicObject(4100,963.35546875,-905.14550781,49.05609894,0.00000000,0.00000000,54.23950195); //object(meshfence1_lan)(6)
	CreateDynamicObject(3749,960.71105957,-940.65527344,44.63352203,0.00000000,0.00000000,0.25000000); //object(clubgate01_lax)(1)
	pdody = CreateDynamicObject(980,960.77038574,-942.17126465,41.73073959,0.00000000,0.00000000,181.99951172); // //object(airportgate)(3)
	// Base
    pElite[ 0 ] = CreateDynamicObject(980,2299.21850586,-2193.67041016,7.83589125,0.00000000,0.00000000,73.28594971); //object( airportgate ) ( 1 )//  FECHADO
	CreateDynamicObject(987,2299.15000000,-2203.98000000,5.06000000,0.00000000,0.00000000,253.56000000); //
	CreateDynamicObject(3749,2300.11000000,-2193.92000000,10.92000000,0.00000000,0.00000000,71.54000000); //
	CreateDynamicObject(987,2312.28000000,-2186.34000000,5.14000000,0.00000000,0.00000000,48.85000000); //
	CreateDynamicObject(987,2389.68000000,-2301.73000000,5.06000000,0.00000000,0.00000000,225.64000000); //
	CreateDynamicObject(987,2312.00000000,-2186.56000000,5.06000000,0.00000000,0.00000000,185.50000000); //
	CreateDynamicObject(987,2406.85000000,-2284.48000000,5.06000000,0.00000000,0.00000000,42.42000000); //
	CreateDynamicObject(8615,2405.16000000,-2288.78000000,3.03000000,0.00000000,0.00000000,47.66000000); //
	CreateDynamicObject(11495,2407.32000000,-2296.83000000,0.00000000,0.00000000,0.00000000,229.13000000); //
	CreateDynamicObject(11494,2320.49000000,-2228.82000000,5.06000000,0.00000000,0.00000000,271.01000000); //
	CreateDynamicObject(11494,2339.96000000,-2248.27000000,5.06000000,0.00000000,0.00000000,271.01000000); //
	CreateDynamicObject(3418,2350.26000000,-2228.51000000,7.23000000,0.00000000,0.00000000,309.40000000); //
	CreateDynamicObject(11324,2386.87000000,-2281.00000000,5.21000000,0.00000000,0.00000000,45.37000000); //
	CreateDynamicObject(1215,2353.15000000,-2232.68000000,5.64000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2346.23000000,-2224.62000000,5.65000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2327.64000000,-2237.98000000,5.78000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1775,2347.39000000,-2232.09000000,6.16000000,0.00000000,0.00000000,312.89000000); //
	CreateDynamicObject(3279,2298.80000000,-2177.53000000,5.06000000,0.00000000,0.00000000,227.39000000); //
	CreateDynamicObject(3095,2415.85000000,-2294.73000000,0.00000000,0.00000000,0.00000000,316.38000000); //
	CreateDynamicObject(3934,2416.26000000,-2294.85000000,0.56000000,0.00000000,0.00000000,316.38000000); //
	CreateDynamicObject(3526,2421.33000000,-2294.35000000,0.62000000,0.00000000,0.00000000,318.12000000); //
	CreateDynamicObject(3526,2415.84000000,-2300.12000000,0.62000000,0.00000000,0.00000000,318.12000000); //
	CreateDynamicObject(3526,2416.35000000,-2289.67000000,0.62000000,0.00000000,0.00000000,318.12000000); //
	CreateDynamicObject(3526,2410.98000000,-2295.48000000,0.62000000,0.00000000,0.00000000,318.12000000); //
	CreateDynamicObject(5153,2412.22000000,-2299.78000000,0.00000000,0.00000000,0.00000000,48.86000000);
	//
    pcasa274 = CreateDynamicObject(976,197.62548828,-1389.62084961,48.03273010,359.75018311,357.74996948,44.49017334); // //object( phils_compnd_gate ) ( 1 )
	// Base ?????
	/*CreateDynamicObject(3246,-812.79998779,2419.69995117,155.69999695,0.00000000,0.00000000,42.00000000); //object( des_westrn7_ )( 1 )
	CreateDynamicObject(3928,-766.40002441,2408.60009766,156.05000305,0.00000000,0.00000000,272.00000000); //object( helipad )( 1 )
	CreateDynamicObject(1447,-775.90002441,2429.60009766,157.30000305,0.00000000,0.00000000,90.00000000); //object( dyn_mesh_4 )( 1 )
	CreateDynamicObject(1447,-775.90002441,2434.89990234,157.39999390,0.00000000,0.00000000,90.00000000); //object( dyn_mesh_4 )( 2 )
	CreateDynamicObject(1447,-775.90002441,2440.19995117,157.30000305,0.00000000,0.00000000,90.00000000); //object( dyn_mesh_4 )( 3 )
	CreateDynamicObject(1447,-775.90002441,2445.50000000,157.30000305,0.00000000,0.00000000,90.00000000); //object( dyn_mesh_4 )( 4 )
	CreateDynamicObject(1447,-778.70001221,2448.10009766,157.30000305,0.00000000,0.00000000,0.00000000); //object( dyn_mesh_4 )( 5 )
	CreateDynamicObject(1447,-784.00000000,2448.10009766,157.30000305,0.00000000,0.00000000,0.00000000); //object( dyn_mesh_4 )( 6 )
	CreateDynamicObject(1447,-789.29998779,2448.10009766,157.30000305,0.00000000,0.00000000,0.00000000); //object( dyn_mesh_4 )( 7 )
	CreateDynamicObject(1447,-794.59997559,2448.10009766,157.30000305,0.00000000,0.00000000,0.00000000); //object( dyn_mesh_4 )( 8 )
	CreateDynamicObject(1447,-797.29998779,2445.39990234,157.39999390,0.00000000,0.00000000,270.00000000); //object( dyn_mesh_4 )( 9 )
	CreateDynamicObject(1447,-797.29998779,2440.10009766,157.30000305,0.00000000,0.00000000,269.99450684); //object( dyn_mesh_4 )( 10 )
	CreateDynamicObject(1251,-793.50000000,2444.39990234,156.19999695,0.00000000,0.00000000,0.00000000); //object( smashbar )( 1 )
	CreateDynamicObject(1251,-789.70001221,2444.39990234,156.10000610,0.00000000,0.00000000,0.00000000); //object( smashbar )( 2 )
	CreateDynamicObject(1251,-785.90002441,2444.39990234,156.19999695,0.00000000,0.00000000,0.00000000); //object( smashbar )( 3 )
	CreateDynamicObject(1251,-782.20001221,2444.39990234,156.19999695,0.00000000,0.00000000,0.00000000); //object( smashbar )( 4 )
	CreateDynamicObject(1251,-778.50000000,2444.39990234,156.10000610,0.00000000,0.00000000,0.00000000); //object( smashbar )( 5 )
	CreateDynamicObject(3279,-785.59997559,2392.89990234,149.30000305,0.00000000,0.00000000,356.00000000); *///object( a51_spottower )( 1 )
	// Portão da casa ID 289
	pcasa289 = CreateDynamicObject( 991,833.45507812,-866.12628174,69.24628448,0.00000000,0.00000000,200.00000000 ); //object( bar_barriergate1 ) ( 1 )
	// Casa Miliito
    C_MILITO = CreateDynamicObject(980,310.70001221,-1175.90002441,82.40000153,0.00000000,0.00000000,41.99523926); //object( airportgate )( 2 )
	CreateDynamicObject(3749,311.39999390,-1176.69995117,85.30000305,0.00000000,0.00000000,41.98974609); //object( clubgate01_lax )( 1 )
	CreateDynamicObject(7033,281.50000000,-1184.69921875,84.09999847,0.00000000,0.00000000,313.24768066); //object( vgnhsegate02 )( 1 )
	CreateDynamicObject(10244,271.70001221,-1156.80004883,79.69999695,0.00000000,1.00000000,310.75000000); //object( vicjump_sfe )( 1 )
	// Portão Piscina e Garagem
	openGate[ 2 ] = CreateDynamicObject(9087,229.79539490,-1185.87683105,74.13111115,0.00000000,0.00000000,35.72979736); //
	openGate[ 0 ] = CreateDynamicObject(980,262.07492065,-1231.86279297,74.45706177,0.00000000,0.00000000,215.09606934); //
	openGate[ 1 ] = CreateDynamicObject(974,238.00971985,-1180.19653320,74.09024048,0.00000000,0.00000000,35.72979736); //
	CreateDynamicObject(3749,260.97271729,-1230.54711914,77.24333954,0.00000000,0.00000000,35.72979736); //
	CreateDynamicObject(11480,232.81808472,-1172.72424316,76.50621033,0.00000000,0.00000000,35.72979736); //
	CreateDynamicObject(11480,236.33093262,-1177.65625000,76.50621033,0.00000000,0.00000000,35.72985840); //
	CreateDynamicObject(10244,239.66767883,-1173.47106934,73.41091919,0.00000000,0.00000000,125.05453491); //
	CreateDynamicObject(974,230.98124695,-1170.36791992,73.84024048,0.00000000,0.00000000,35.72979736); //
	CreateDynamicObject(14467,265.02688599,-1230.40612793,75.00413513,0.00000000,358.01501465,1.98498535); //
	CreateDynamicObject(14467,260.15856934,-1233.82116699,74.48204041,0.00000000,0.00000000,0.00000000); //
	// Base
	P_ELITE = CreateDynamicObject(980,1283.39941406,-1651.39941406,15.30000019,0.00000000,0.00000000,90.00000000); // //object( airportgate ) ( 1 )
	CreateDynamicObject(10969,1244.89941406,-1652.29980469,12.50000000,0.00000000,0.00000000,0.00000000); //object( groundbit_06_sfs )( 1 )
	CreateDynamicObject(3361,1214.50000000,-1666.19921875,32.40000153,0.00000000,0.00000000,90.00000000); //object( cxref_woodstair )( 1 )
	CreateDynamicObject(3361,1214.50000000,-1660.89941406,28.60000038,0.00000000,0.00000000,90.00000000); //object( cxref_woodstair )( 2 )
	CreateDynamicObject(3749,1283.69921875,-1651.39941406,18.20000076,0.00000000,0.00000000,90.00000000); //object( clubgate01_lax )( 1 )
	CreateDynamicObject(3939,1253.69921875,-1674.59960938,14.30000019,0.00000000,0.00000000,87.99499512); //object( hanger01 )( 1 )
	CreateDynamicObject(3939,1247.59997559,-1674.50000000,14.30000019,0.00000000,0.00000000,88.00000000); //object( hanger01 )( 2 )
	CreateDynamicObject(3939,1235.50000000,-1674.09997559,14.30000019,0.00000000,0.00000000,87.99499512); //object( hanger01 )( 4 )
	CreateDynamicObject(3939,1241.50000000,-1674.29980469,14.30000019,0.00000000,0.00000000,87.99499512); //object( hanger01 )( 5 )
	CreateDynamicObject(3939,1229.59997559,-1673.90002441,14.30000019,0.00000000,0.00000000,87.99499512); //object( hanger01 )( 6 )
	CreateDynamicObject(3939,1223.69995117,-1673.59997559,14.30000019,0.00000000,0.00000000,87.99499512); //object( hanger01 )( 7 )
	CreateDynamicObject(3939,1217.69995117,-1673.50000000,14.30000019,0.00000000,0.00000000,87.99499512); //object( hanger01 )( 8 )
	CreateDynamicObject(10281,1288.30004883,-1651.50000000,22.10000038,0.00000000,0.00000000,90.00000000); //object( michsign_sfe )( 1 )
	CreateDynamicObject(6976,1220.30004883,-1640.00000000,13.50000000,0.00000000,352.00000000,270.00000000); //object( shamheliprt04 )( 1 )
	CreateDynamicObject(14467,1287.40002441,-1658.19995117,15.30000019,0.00000000,0.00000000,90.00000000);///object( carter_statue )( 1 )
	// Base
    P_USC = CreateDynamicObject(980,-75.30000305,-352.89999390,3.20000005,0.00000000,0.00000000,90.00000000); // //object( airportgate ) ( 1 )
	CreateDynamicObject(987,-75.29980469,-357.89941406,0.40000001,0.00000000,0.00000000,270.00000000); //object( elecfence_bar )( 3 )
	CreateDynamicObject(987,-75.29980469,-335.89941406,0.40000001,0.00000000,0.00000000,269.98901367); //object( elecfence_bar )( 4 )
	CreateDynamicObject(8147,17.50000000,-291.29980469,9.00000000,0.00000000,0.00000000,0.00000000); //object( vgsselecfence01 )( 1 )
	CreateDynamicObject(8369,-22.00000000,-381.09960938,10.35000038,0.00000000,0.00000000,90.00000000); //object( vgsselecfence05b )( 2 )
	CreateDynamicObject(8369,-23.79980469,-229.50000000,10.39999962,0.00000000,0.00000000,263.99047852); //object( vgsselecfence05b )( 3 )
	CreateDynamicObject(8369,-60.89941406,-355.89941406,10.39999962,0.00000000,0.00000000,0.00000000); //object( vgsselecfence05b )( 5 )
	CreateDynamicObject(8210,-75.50000000,-288.09960938,9.00000000,0.00000000,0.00000000,270.00000000); //object( vgsselecfence12 )( 1 )
	CreateDynamicObject(8147,17.50000000,-291.29980469,15.00000000,0.00000000,0.00000000,0.00000000); //object( vgsselecfence01 )( 1 )
	CreateDynamicObject(8369,-23.79980469,-229.50000000,16.39999962,0.00000000,0.00000000,264.00000000); //object( vgsselecfence05b )( 3 )
	CreateDynamicObject(8650,-62.19921875,-225.50000000,5.50000000,0.00000000,0.00000000,0.00000000); //object( shbbyhswall06_lvs )( 1 )
	CreateDynamicObject(8650,-75.52929688,-366.79980469,5.50000000,0.00000000,0.00000000,0.00000000); //object( shbbyhswall06_lvs )( 2 )
	CreateDynamicObject(8650,-75.52929688,-342.29980469,5.50000000,0.00000000,0.00000000,0.00000000); //object( shbbyhswall06_lvs )( 3 )
	CreateDynamicObject(5816,-74.39941406,-273.00000000,12.00000000,0.00000000,0.00000000,270.00000000); //object( odrampbit )( 1 )
	CreateDynamicObject(3279,-69.69921875,-326.79980469,4.40000010,0.00000000,0.00000000,0.00000000); //object( a51_spottower )( 1 )
	CreateDynamicObject(3279,6.69921875,-287.00000000,5.40000010,0.00000000,0.00000000,179.99450684); //object( a51_spottower )( 2 )
	CreateDynamicObject(3279,6.59960938,-384.50000000,5.40000010,0.00000000,0.00000000,179.99450684); //object( a51_spottower )( 3 )
	CreateDynamicObject(9241,-126.59960938,-282.09960938,29.39999962,0.00000000,0.00000000,90.00000000); //object( copbits_sfn )( 2 )
	CreateDynamicObject(5816,-105.90000153,-273.00000000,23.70000076,0.00000000,0.00000000,270.00000000); //object( odrampbit )( 1 )
	CreateDynamicObject(9241,-126.59960938,-305.50000000,29.39999962,0.00000000,0.00000000,90.00000000); //object( copbits_sfn )( 3 )
	CreateDynamicObject(9241,-92.00000000,-280.69921875,17.39999962,0.00000000,0.00000000,0.00000000); //object( copbits_sfn )( 4 )
	CreateDynamicObject(2921,-75.89941406,-360.89941406,5.19999981,0.00000000,0.00000000,0.00000000); //object( kmb_cam )( 1 )
	CreateDynamicObject(3864,-91.90000153,-271.89999390,22.00000000,0.00000000,0.00000000,90.00000000); //object( ws_floodlight )( 1 )
	CreateDynamicObject(3872,-92.19921875,-278.59960938,22.89999962,0.00000000,0.00000000,87.35229492); //object( ws_floodbeams )( 2 )
	CreateDynamicObject(3864,-137.39941406,-305.29980469,35.00000000,0.00000000,0.00000000,179.99450684); //object( ws_floodlight )( 2 )
	CreateDynamicObject(3864,-137.29980469,-282.19921875,35.00000000,0.00000000,0.00000000,179.99450684); //object( ws_floodlight )( 3 )
	CreateDynamicObject(3872,-130.69921875,-305.29980469,35.79999924,0.00000000,0.00000000,180.76904297); //object( ws_floodbeams )( 4 )
	CreateDynamicObject(3872,-130.79980469,-282.00000000,35.79999924,0.00000000,0.00000000,182.27416992); //object( ws_floodbeams )( 5 )
	CreateDynamicObject(8650,-75.50000000,-351.20001221,5.50000000,0.00000000,180.00000000,0.00000000); //object( shbbyhswall06_lvs )( 2 )
	CreateDynamicObject(4638,-73.69999695,-346.50000000,2.09999990,0.00000000,0.00000000,0.00000000); //object( paypark_lan01 )( 1 )
	CreateDynamicObject(987,17.50000000,-372.00000000,8.39999962,0.00000000,0.00000000,90.00000000); //object( elecfence_bar )( 1 )
	// Base
	P_S = CreateDynamicObject(980,-220.89999390,2615.00000000,64.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3749,-220.89941406,2615.09960938,67.59999847,0.00000000,0.00000000,0.00000000); //object( clubgate01_lax )( 1 )
	CreateDynamicObject(987,-201.69999695,2613.69995117,61.90000153,0.00000000,0.00000000,180.00000000); //object( elecfence_bar )( 1 )
	CreateDynamicObject(987,-195.80000305,2613.69995117,61.90000153,0.00000000,0.00000000,179.99450684); //object( elecfence_bar )( 2 )
	CreateDynamicObject(987,-195.80000305,2601.69995117,61.90000153,0.00000000,0.00000000,90.00000000); //object( elecfence_bar )( 3 )
	CreateDynamicObject(987,-195.80000305,2591.10009766,61.90000153,0.00000000,0.00000000,90.00000000); //object( elecfence_bar )( 4 )
	CreateDynamicObject(987,-207.69999695,2591.10009766,61.90000153,0.00000000,0.00000000,0.00000000); //object( elecfence_bar )( 5 )
	CreateDynamicObject(987,-219.60000610,2591.10009766,61.90000153,0.00000000,0.00000000,0.00000000); //object( elecfence_bar )( 6 )
	CreateDynamicObject(987,-231.60000610,2591.10009766,61.90000153,0.00000000,0.00000000,0.00000000); //object( elecfence_bar )( 7 )
	CreateDynamicObject(987,-243.59960938,2591.09960938,61.90000153,0.00000000,0.00000000,0.00000000); //object( elecfence_bar )( 8 )
	CreateDynamicObject(987,-228.80000305,2613.75561523,61.90000153,0.00000000,0.00000000,179.99450684); //object( elecfence_bar )( 10 )
	CreateDynamicObject(987,-240.69999695,2613.69995117,61.90000153,0.00000000,0.00000000,179.99450684); //object( elecfence_bar )( 11 )
	CreateDynamicObject(987,-252.60000610,2613.69995117,61.90000153,0.00000000,0.00000000,179.99450684); //object( elecfence_bar )( 12 )
	CreateDynamicObject(987,-264.50000000,2613.69995117,61.90000153,0.00000000,0.00000000,179.99450684); //object( elecfence_bar )( 13 )
	CreateDynamicObject(987,-273.50000000,2613.69995117,61.90000153,0.00000000,0.00000000,179.99450684); //object( elecfence_bar )( 14 )
	CreateDynamicObject(987,-285.29998779,2613.80004883,61.90000153,0.00000000,0.00000000,270.00000000); //object( elecfence_bar )( 15 )
	CreateDynamicObject(987,-285.29980469,2605.29980469,61.90000153,0.00000000,0.00000000,269.98901367); //object( elecfence_bar )( 16 )
	CreateDynamicObject(987,-285.29998779,2596.30004883,61.90000153,0.00000000,0.00000000,269.98901367); //object( elecfence_bar )( 16 )
	CreateDynamicObject(987,-243.89999390,2580.19995117,61.90000153,0.00000000,0.00000000,100.00000000); //object( elecfence_bar )( 16 )
	CreateDynamicObject(987,-245.80000305,2591.10009766,61.90000153,0.00000000,0.00000000,0.00000000); //object( elecfence_bar )( 8 )
	// Porta loteria
	CreateDynamicObject(1567,-2171.10498047,640.00915527,1051.37500000,0.00000000,0.00000000,0.00000000); //
	// Caixas eletrônicos
	CreateDynamicObject(2942,1928.56958008,-1785.87097168,13.18977451,0.00000000,0.00000000,90.50000000); //
	CreateDynamicObject(2942,1001.21057129,-924.92028809,41.97102356,0.00000000,0.00000000,278.00000000); //
	CreateDynamicObject(2942,1729.55627441,-1755.10534668,13.13928223,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(2942,1229.03918457,-1742.58361816,13.24129200,0.00000000,0.00000000,269.25000000); //
	CreateDynamicObject(2942,1367.22436523,-1282.38183594,13.18977451,0.00000000,0.00000000,270.50000000); //
	CreateDynamicObject(2942,459.47866821,-1494.06066895,30.74734116,0.00000000,0.00000000,294.50000000); //
	CreateDynamicObject(2942,2241.52270508,-1664.69836426,14.80565262,0.00000000,0.00000000,164.75000000); //
	// Bombas Posto Norte
	CreateDynamicObject(1676,998.56805420,-937.61212158,42.90899277,0.00000000,0.00000000,6.99829102); //
	CreateDynamicObject(1676,1002.22772217,-937.06262207,42.90899277,0.00000000,0.00000000,6.99829102); //
	CreateDynamicObject(1676,1005.58190918,-936.56286621,42.90899277,0.00000000,0.00000000,6.99829102); //
	CreateDynamicObject(1676,1009.14178467,-936.08551025,42.90899277,0.00000000,0.00000000,7.00000000); //
	// Radares
	CreateDynamicObject(2600,1529.63280000,-1732.31980000,13.17991066,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(2600,1193.44430000,-1852.27710000,13.15491104,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(2600,-15.11260000,-1518.25160000,1.90761423,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(2600,807.85000000,-1400.51150000,13.32255173,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(2600,1125.89780000,-1144.87540000,23.50334740,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(2600,1194.17350000,-943.14050000,42.59041977,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(2600,2749.84080000,-149.93150000,32.75204468,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(2600,1796.83280000,843.08800000,10.47990990,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(2600,1698.05630000,-735.83440000,50.39701843,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(2600,1350.08250000,-1280.48060000,13.22990990,0.00000000,0.00000000,360.00000000); //
	// Garagem de Tuning
	CreateDynamicObject(8947,1663.12268066,-1715.73718262,22.33715820,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(1083,1650.84118652,-1715.80590820,23.97650909,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(1080,1650.75024414,-1711.35839844,22.21903419,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(1079,1650.83630371,-1720.15026855,22.25152016,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(1179,1650.77380371,-1712.18786621,23.07206726,0.00000000,0.00000000,91.50000000); //
	CreateDynamicObject(1179,1650.71850586,-1717.21447754,23.07206726,0.00000000,0.00000000,91.49963379); //
	CreateDynamicObject(1172,1651.36474609,-1716.71301270,23.35544014,0.00000000,0.00000000,92.00000000); //
	CreateDynamicObject(18649,1650.84472656,-1713.26074219,23.02020073,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(18649,1650.68920898,-1718.23327637,23.02020073,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(18647,1651.32446289,-1715.66137695,23.12963867,0.00000000,0.00000000,0.00000000); //
	// Vila
	CreateDynamicObject(3749,-519.41668701,-1034.01318359,29.12201691,0.00000000,0.00000000,60.00000000); //
	CreateDynamicObject(3749,-568.80438232,-1113.13989258,27.51245880,0.00000000,0.00000000,60.00000000); //
	CreateDynamicObject(987,-562.72418213,-1105.33093262,22.11245918,0.00000000,0.00000000,58.00000000); //
	CreateDynamicObject(987,-556.43316650,-1095.21264648,22.11245918,0.00000000,0.00000000,58.00000000); //
	CreateDynamicObject(987,-550.00366211,-1085.09680176,22.11245918,0.00000000,0.00000000,58.00000000); //
	CreateDynamicObject(987,-543.71234131,-1074.90295410,22.11245918,0.00000000,0.00000000,58.00000000); //
	CreateDynamicObject(987,-537.39947510,-1064.73510742,22.11245918,0.00000000,0.00000000,58.00000000); //
	CreateDynamicObject(987,-531.18841553,-1054.71630859,22.11245918,0.00000000,0.00000000,58.00000000); //
	CreateDynamicObject(987,-528.00000000,-1049.61193848,22.11245918,0.00000000,0.00000000,58.00000000); //
	CreateDynamicObject(987,-517.77239990,-1026.66870117,22.11245918,0.00000000,0.00000000,151.99682617); //
	CreateDynamicObject(987,-528.34564209,-1021.00000000,22.11245918,0.00000000,0.00000000,151.99182129); //
	CreateDynamicObject(987,-538.94171143,-1015.42730713,22.11245918,0.00000000,0.00000000,151.99182129); //
	CreateDynamicObject(987,-549.45977783,-1009.81066895,22.11245918,0.00000000,0.00000000,151.99035645); //
	CreateDynamicObject(987,-559.82482910,-1004.22534180,22.11245918,0.00000000,0.00000000,151.99035645); //
	CreateDynamicObject(1597,-564.52642822,-1052.86022949,25.68896866,0.00000000,0.00000000,328.00000000); //
	CreateDynamicObject(1597,-584.55981445,-1085.58239746,25.27896881,0.00000000,0.00000000,328.00000000); //
	CreateDynamicObject(1597,-545.12054443,-1021.21282959,25.68896866,0.00000000,0.00000000,329.99682617); //
	CreateDynamicObject(987,-581.52087402,-1109.26074219,22.11245918,0.00000000,0.00000000,317.99682617); //
	CreateDynamicObject(987,-626.87426758,-1056.12097168,22.12459183,0.00000000,0.00000000,315.99682617); //
	CreateDynamicObject(987,-616.34863281,-1076.01135254,22.39702988,0.00000000,0.00000000,313.99426270); //
	CreateDynamicObject(987,-608.10369873,-1084.62658691,22.11245918,0.00000000,0.00000000,315.99365234); //
	CreateDynamicObject(987,-599.45233154,-1093.10717773,22.11245918,0.00000000,0.00000000,317.99365234); //
	CreateDynamicObject(987,-590.61407471,-1101.15258789,22.11245918,0.00000000,0.00000000,317.98828125); //
	CreateDynamicObject(987,-618.31958008,-1064.39233398,22.11245918,0.00000000,0.00000000,279.98925781); //
	CreateDynamicObject(9241,-520.7000100,-974.5999800,25.6000000,0.0000000,0.0000000,54.0000000); //
	//PortaoVilaCSI
	PortaoVilaCSI = CreateDynamicObject(980,2287.6000977,606.5000000,12.3999996,0.0000000,0.0000000,0.0000000); //
	PortaoVila1 = CreateDynamicObject(980,-568.07818604,-1113.63159180,24.63195610,0.00000000,0.00000000,240.00000000); //
	PortaoVila2 = CreateDynamicObject(980,-518.78344727,-1034.38720703,25.97696304,0.00000000,0.00000000,239.99633789); //
	// Delegacia
	CreateDynamicObject(3749,1548.13085938,-1627.33984375,17.66623497,0.00000000,0.00000000,90.00000000); // Parede Portão
	CreateDynamicObject(9241,1565.13964844,-1618.45117188,23.18077278,0.00000000,0.00000000,270.00000000); // Heliporto
	CreateDynamicObject(6959,1570.81347656,-1622.38476562,21.36286545,0.00000000,0.00000000,0.00000000); // Teto
	CreateDynamicObject(6959,1560.35937500,-1602.45507812,2.31286573,270.49987793,179.99450684,179.99450684); // Teto
	CreateDynamicObject(6959,1588.58068848,-1602.51611328,2.33786583,270.49987793,179.99450684,179.99450684); // Teto
	CreateDynamicObject(6959,1587.23925781,-1622.38964844,21.36286545,0.00000000,0.00000000,0.00000000); // Teto
	CreateDynamicObject(6959,1609.33984375,-1621.99804688,4.38787127,0.00000000,89.49462891,0.00000000); // Teto
	CreateDynamicObject(1980,1543.41760254,-1617.70556641,17.43524361,0.00000000,0.00000000,90.25000000); // Portão
	CreateDynamicObject(1980,1543.41699219,-1617.70507812,18.83524895,0.00000000,0.00000000,90.24719238); // Portão
	CreateDynamicObject(987,1539.83105469,-1602.40771484,15.83014870,0.00000000,0.00000000,270.00000000); // Grade
	CreateDynamicObject(987,1540.10791016,-1605.79040527,15.85514832,0.00000000,0.00000000,270.00000000); // Grade
	CreateDynamicObject(988,1606.48632812,-1637.97583008,16.61872864,0.00000000,0.00000000,0.00000000); // Portão pequeno
	CreateDynamicObject(988,1606.48632812,-1637.97558594,11.71872330,0.00000000,0.00000000,0.00000000); // Portão pequeno
	CreateDynamicObject(8167,1581.94201660,-1638.01831055,19.77277565,0.00000000,0.00000000,90.00000000); // Grade Parede
	CreateDynamicObject(8167,1589.38720703,-1638.01940918,19.77277565,0.00000000,0.00000000,90.00000000); // Grade Parede
	CreateDynamicObject(8167,1596.78442383,-1638.02783203,19.77277565,0.00000000,0.00000000,90.00000000); // Grade Parede
	CreateDynamicObject(8167,1601.03210449,-1638.03247070,19.77277565,0.00000000,0.00000000,90.00000000); // Grade Parede
	CreateDynamicObject(987,1553.72204590,-1606.52111816,23.42296028,0.00000000,0.00000000,265.75000000);  // Grade
	CreateDynamicObject(987,1552.80297852,-1630.80627441,23.42296028,0.00000000,0.00000000,0.00000000);  // Grade
	CreateDynamicObject(987,1564.73303223,-1630.83300781,23.42296028,0.00000000,0.00000000,0.00000000);  // Grade
	CreateDynamicObject(987,1576.64819336,-1630.93408203,23.42296028,0.00000000,0.00000000,96.00000000);  // Grade
	CreateDynamicObject(987,1575.40991211,-1619.09301758,23.42296028,0.00000000,0.00000000,119.99853516);  // Grade
	CreateDynamicObject(987,1569.45312500,-1608.76477051,23.42296028,0.00000000,0.00000000,171.99816895);  // Grade
	CreateDynamicObject(987,1565.54638672,-1608.30041504,23.42296028,0.00000000,0.00000000,171.99645996);  // Grade
	CreateDynamicObject(988,1552.82287598,-1628.11938477,24.40889168,0.00000000,0.00000000,270.00000000); // Portão pequeno
	CreateDynamicObject(988,1552.67370605,-1619.17285156,24.40889168,0.00000000,0.00000000,270.00000000); // Portão pequeno
	CreateDynamicObject(1423,1551.61914062,-1625.14843750,24.71832848,0.00000000,0.00000000,0.00000000); // Muretinha
	CreateDynamicObject(16782,1550.32482910,-1619.57873535,15.68999481,0.00000000,0.00000000,0.00000000); // Radar area 51
	CreateDynamicObject(2921,1545.88171387,-1633.23510742,17.56608772,0.00000000,0.00000000,0.00000000); // Câmera
	CreateDynamicObject(991,1552.62438965,-1605.73449707,22.66902924,0.00000000,0.00000000,89.75000000); // Grade Branca
	CreateDynamicObject(991,1552.63098145,-1612.31555176,22.66902924,0.00000000,0.00000000,89.74731445); // Grade Branca
	CreateDynamicObject(991,1552.63586426,-1618.81787109,22.66902924,0.00000000,0.00000000,89.74731445); // Grade Branca
	CreateDynamicObject(991,1552.61572266,-1625.32031250,22.66902924,0.00000000,0.00000000,89.74731445); // Grade Branca
	CreateDynamicObject(991,1552.63183594,-1631.17309570,22.66902924,0.00000000,0.00000000,89.74731445); // Grade Branca
	CreateDynamicObject(991,1552.63305664,-1637.68627930,22.66902924,0.00000000,0.00000000,89.74731445); // Grade Branca
	CreateDynamicObject(991,1551.44470215,-1624.87756348,22.59403038,0.00000000,0.00000000,359.99731445); // Grade Branca
	CreateDynamicObject(991,1552.36230469,-1606.22448730,22.66902924,0.00000000,0.00000000,179.99731445); // Grade Branca
	CreateDynamicObject(1423,1549.20202637,-1615.70886230,22.16834450,0.00000000,0.00000000,270.00000000); // Muretinha
	CreateDynamicObject(1423,1549.21801758,-1613.14953613,22.16834450,0.00000000,0.00000000,270.00000000); // Muretinha
	Elevador = CreateDynamicObject(3674,1548.22265625,-1611.45703125,-6.25315905,0.00000000,0.00000000,272.49938965); //
	pd1 = CreateDynamicObject(980,1548.46496582,-1627.28002930,15.13118553,0.00000000,0.00000000,90.00000000); // Portão DP
	pd2 = CreateDynamicObject(980,1588.34265137,-1638.11047363,14.90620422,0.00000000,0.00000000,0.00000000); // Portão DP
	 // Pedagio LS - SF // POSTO PRF
	CreateObject(8168, 48.79981, -1531.0996, 6.1, 0, 0, 7.998); // Casinha
	CreateObject(1596, 49.5, -1531.1, 10.3, 0, 0, 82); // Satelite
	CreateObject(3264, 35.1, -1531.4, 3.9, 0, 0, 270); // Placa Danger
	CreateObject(3264, 68.1, -1532.2, 3.6, 0, 0, 88); // Placa Danger
	CreateObject(3049, 51.5, -1539.5, 6.4, 0, 0, 84); // Parede
	CreateObject(3049, 46.1, -1523.2, 6.6, 0, 0, 264); // Parede
	pp1 = CreateDynamicObject(989,45, -1530.3,6,0,0,10); // Portão
	pp2 = CreateDynamicObject(989,52.7, -1531.7,6,0,0,190); // Portão
	// Cestas de Lixo
	CreateObject(1430,2490.3000488,-1684.5000000,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (2)
	CreateObject(1430,2181.8000488,-1682.9000244,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (3)
	CreateObject(1430,2119.6000977,-1746.6999512,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (4)
	CreateObject(1430,1804.8000488,-1726.8000488,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (5)
	CreateObject(1430,1290.8000488,-1834.4000244,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (6)
	CreateObject(1430,923.2000122,-1728.0000000,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (7)
	CreateObject(1430,947.9000244,-1244.8000488,15.6000004,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (8)
	CreateObject(1430,1189.6999512,-1045.3000488,31.2000008,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (9)
	CreateObject(1430,1900.1999512,-1141.4000244,23.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (10)
	CreateObject(1430,2897.6999512,-1489.6999512,10.3999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (11)
	CreateObject(1430,2764.1999512,-1966.5000000,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (12)
	CreateObject(1430,2658.1000977,-1998.3000488,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (13)
	CreateObject(1430,2657.6000977,-2009.5000000,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (14)
	CreateObject(1430,2432.8999023,-1926.8000488,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (15)
	CreateObject(1430,2345.5000000,-1966.6999512,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (16)
	CreateObject(1430,2262.1000977,-1888.8000488,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (17)
	CreateObject(1430,2053.0000000,-1926.6999512,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (18)
	CreateObject(1430,1899.0999756,-2046.5000000,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (19)
	CreateObject(1430,1701.1999512,-2107.1999512,12.8000002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (20)
	CreateObject(1430,1877.0000000,-2172.1000977,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (21)
	// Pontos de Ônibus
	CreateDynamicObject(1257,1246.09960938,-1845.19921875,13.80000019,0.00000000,0.00000000,90.00000000); //object( bustopm )( 1 )
	CreateDynamicObject(1257,1549.00000000,-1738.59960938,13.80000019,0.00000000,0.00000000,269.74731445); //object( bustopm )( 2 )
	CreateDynamicObject(1257,1756.00000000,-1679.19921875,13.80000019,0.00000000,0.00000000,0.00000000); //object( bustopm )( 3 )
	CreateDynamicObject(1257,1535.89941406,-1660.29980469,13.80000019,0.00000000,0.00000000,0.00000000); //object( bustopm )( 4 )
	CreateDynamicObject(1257,1828.19921875,-1673.50000000,13.80000019,0.00000000,0.00000000,0.00000000); //object( bustopm )( 5 )
	CreateDynamicObject(1257,1921.39941406,-1758.69921875,13.80000019,0.00000000,0.00000000,270.00000000); //object( bustopm )( 6 )
	CreateDynamicObject(1257,2260.59960938,-1667.50000000,15.69999981,0.00000000,0.00000000,270.00000000); //object( bustopm )( 7 )
	CreateDynamicObject(1257,2112.50000000,-1100.59960938,25.50000000,0.00000000,0.00000000,73.24584961); //object( bustopm )( 8 )
	CreateDynamicObject(1257,1616.59960938,-1167.19921875,24.39999962,0.00000000,0.00000000,270.00000000); //object( bustopm )( 9 )
	CreateDynamicObject(1257,2264.60009766,-1652.80004883,15.89999962,0.00000000,0.00000000,90.00000000); //object( bustopm )( 10 )
	CreateDynamicObject(1257,1246.40002441,-1858.40002441,13.69999981,0.00000000,0.00000000,270.00000000); //object( bustopm )( 11 )
	CreateDynamicObject(1257,821.09997559,-1983.30004883,13.10000038,0.00000000,0.00000000,180.00000000); //object( bustopm )( 12 )
	CreateDynamicObject(1257,1556.59997559,-1726.00000000,13.80000019,0.00000000,0.00000000,90.00000000); //object( bustopm )( 13 )
	CreateDynamicObject(1257,1523.19995117,-1660.50000000,13.80000019,0.00000000,0.00000000,180.00000000); //object( bustopm )( 14 )
	CreateDynamicObject(1257,1743.50000000,-1676.00000000,13.80000019,0.00000000,0.00000000,180.00000000); //object( bustopm )( 3 )
	CreateDynamicObject(1257,1815.19995117,-1673.59997559,13.80000019,0.00000000,0.00000000,180.00000000); //object( bustopm )( 5 )
	CreateDynamicObject(1257,1921.59997559,-1746.00000000,13.80000019,0.00000000,0.00000000,90.00000000); //object( bustopm )( 6 )
	CreateDynamicObject(1257,2108.89990234,-1112.90002441,25.50000000,0.00000000,0.00000000,252.24584961); //object( bustopm )( 8 )
	CreateDynamicObject(1257,1617.80004883,-1154.50000000,24.39999962,0.00000000,0.00000000,90.00000000); //object( bustopm )( 9 )
	CreateDynamicObject(1257,851.29998779,-2035.69995117,13.10000038,0.00000000,0.00000000,0.00000000); //object( bustopm )( 10 )
	// Barraquinha do algodão doce // ALGODÃO - AGÊNCIA
//	CreateDynamicObject(1342,1250.00000000,-1805.50000000,13.50000000,0.00000000,0.00000000,306.00000000); //object( noodlecart_prop )( 1 )
	// Spawn Exercito
	CreateObject(2927,283.7999878,1972.6999512,22.7000008,90.0000000,165.0132446,194.1209717); //object(a51_blastdoorr) (2)
	CreateObject(2927,283.6000061,2006.5999756,22.7000008,90.0000000,165.0091553,194.1174316); //object(a51_blastdoorr) (3)
	CreateObject(4654,250.6000061,1916.5000000,25.0000000,0.0000000,0.0000000,0.0000000); //object(road09_lan2) (1)
	CreateObject(4654,249.1999969,2035.4000244,20.7999992,4.0000000,0.0000000,180.0000000); //object(road09_lan2) (1)
	CreateObject(980,255.0000000,1854.3000488,17.7999992,298.0000000,0.0000000,0.0000000); //object(airportgate) (1)
	CreateObject(6976,287.0000000,1939.8000488,14.1999998,0.0000000,0.0000000,180.2500000); //object(shamheliprt04) (1)
	/* ILHA */
	CreateDynamicObject(10366,836.45000000,-2098.35000000,10.03000000,359.75000000,7.99000000,274.28000000); //
	CreateDynamicObject(10366,836.20000000,-2158.93000000,6.54000000,0.00000000,0.00000000,273.99000000); //
	CreateDynamicObject(4656,835.82000000,-2263.88000000,9.50000000,0.00000000,0.00000000,7.99000000); //
	CreateDynamicObject(5112,824.82000000,-2417.00000000,17.15000000,359.75000000,3.25000000,89.75000000); //
	CreateDynamicObject(5112,843.65000000,-2409.51000000,16.90000000,0.00000000,357.00000000,269.74000000); //
	CreateDynamicObject(4827,932.86000000,-2387.01000000,10.72000000,0.00000000,0.00000000,159.24000000); //
	CreateDynamicObject(4823,678.52000000,-2378.34000000,41.02000000,0.00000000,0.00000000,333.99000000); //
	CreateDynamicObject(8397,795.72000000,-2338.89000000,27.41000000,0.00000000,0.00000000,333.50000000); //
	CreateDynamicObject(3749,870.54000000,-2335.42000000,22.71000000,0.00000000,0.00000000,25.00000000); //
	CreateDynamicObject(3749,1007.12000000,-2437.44000000,22.23000000,0.00000000,0.00000000,68.99000000); //
	CreateDynamicObject(3749,580.33000000,-2409.90000000,68.52000000,0.00000000,0.00000000,333.25000000); //
	CreateDynamicObject(8171,836.37000000,-2505.48000000,26.26000000,0.00000000,355.98000000,269.74000000); //
	CreateDynamicObject(8171,832.60000000,-2594.38000000,27.66000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(8171,871.68000000,-2594.22000000,27.65000000,0.00000000,0.00000000,179.99000000); //
	CreateDynamicObject(8171,792.96000000,-2593.88000000,27.66000000,0.00000000,0.00000000,179.99000000); //
	CreateDynamicObject(8171,910.59000000,-2592.52000000,27.64000000,0.00000000,0.00000000,180.74000000); //
	CreateDynamicObject(8171,754.38000000,-2593.48000000,27.64000000,0.00000000,0.00000000,179.99000000); //
	CreateDynamicObject(3749,822.44000000,-2525.80000000,33.52000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3749,841.99000000,-2525.78000000,33.52000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(9241,549.69000000,-2379.29000000,64.99000000,0.00000000,0.00000000,64.00000000); //
	CreateDynamicObject(8656,822.17000000,-2202.61000000,6.94000000,354.00000000,0.00000000,359.25000000); //
	CreateDynamicObject(8656,849.98000000,-2205.43000000,6.98000000,6.75000000,0.00000000,181.00000000); //
	CreateDynamicObject(8656,850.49000000,-2235.06000000,10.10000000,5.25000000,0.00000000,181.00000000); //
	CreateDynamicObject(8656,853.11000000,-2265.16000000,12.77000000,5.00000000,0.00000000,189.00000000); //
	CreateDynamicObject(8656,870.08000000,-2317.43000000,16.97000000,4.25000000,0.00000000,203.25000000); //
	CreateDynamicObject(8656,858.57000000,-2324.83000000,17.02000000,356.00000000,0.00000000,21.75000000); //
	CreateDynamicObject(8656,862.86000000,-2300.66000000,15.62000000,4.25000000,0.00000000,203.25000000); //
	CreateDynamicObject(8656,854.33000000,-2271.92000000,13.22000000,4.99000000,0.00000000,189.75000000); //
	CreateDynamicObject(8656,820.85000000,-2232.79000000,10.12000000,354.00000000,0.00000000,355.75000000); //
	CreateDynamicObject(8656,817.07000000,-2262.53000000,12.87000000,355.50000000,0.00000000,349.74000000); //
	CreateDynamicObject(8656,809.57000000,-2291.74000000,15.07000000,356.25000000,0.00000000,341.49000000); //
	CreateDynamicObject(8656,798.43000000,-2320.01000000,17.07000000,356.24000000,0.00000000,335.49000000); //
	CreateDynamicObject(8656,809.05000000,-2324.63000000,16.57000000,2.74000000,0.00000000,155.48000000); //
	CreateDynamicObject(8656,883.85000000,-2342.81000000,17.80000000,0.75000000,0.00000000,204.75000000); //
	CreateDynamicObject(8656,898.78000000,-2368.94000000,18.05000000,0.24000000,0.00000000,214.75000000); //
	CreateDynamicObject(8656,919.74000000,-2390.19000000,18.02000000,359.74000000,0.00000000,234.49000000); //
	CreateDynamicObject(8656,946.20000000,-2404.55000000,17.87000000,359.73000000,0.00000000,248.49000000); //
	CreateDynamicObject(8656,974.58000000,-2415.52000000,17.72000000,359.73000000,0.00000000,249.24000000); //
	CreateDynamicObject(8656,995.07000000,-2423.35000000,17.62000000,359.71000000,0.00000000,248.98000000); //
	CreateDynamicObject(8656,988.70000000,-2440.10000000,17.62000000,359.71000000,0.00000000,69.48000000); //
	CreateDynamicObject(8656,960.49000000,-2429.54000000,17.47000000,359.71000000,0.00000000,69.48000000); //
	CreateDynamicObject(8656,932.40000000,-2418.02000000,17.32000000,359.71000000,0.00000000,65.98000000); //
	CreateDynamicObject(8656,906.48000000,-2402.53000000,17.60000000,1.46000000,0.00000000,51.98000000); //
	CreateDynamicObject(8656,885.72000000,-2381.03000000,17.90000000,359.71000000,0.00000000,35.98000000); //
	CreateDynamicObject(8656,870.28000000,-2355.04000000,17.75000000,359.70000000,0.00000000,25.47000000); //
	CreateDynamicObject(8656,869.97000000,-2354.42000000,17.75000000,359.70000000,0.00000000,25.47000000); //
	CreateDynamicObject(8656,784.08000000,-2341.83000000,18.07000000,358.49000000,0.00000000,334.23000000); //
	CreateDynamicObject(8656,784.92000000,-2342.23000000,18.07000000,358.49000000,0.00000000,334.23000000); //
	CreateDynamicObject(8656,785.81000000,-2342.66000000,18.07000000,358.48000000,0.00000000,334.23000000); //
	CreateDynamicObject(8656,798.93000000,-2349.02000000,17.89000000,2.49000000,0.00000000,154.48000000); //
	CreateDynamicObject(8656,799.78000000,-2349.44000000,17.89000000,2.49000000,0.00000000,154.48000000); //
	CreateDynamicObject(8656,800.69000000,-2349.94000000,17.89000000,2.49000000,0.00000000,154.48000000); //
	CreateDynamicObject(9076,835.12000000,-2156.90000000,27.65000000,0.00000000,358.00000000,90.75000000); //
	CreateDynamicObject(3502,844.88000000,-2067.63000000,10.27000000,0.00000000,0.00000000,90.25000000); //
	CreateDynamicObject(3502,839.51000000,-2067.62000000,10.30000000,0.00000000,0.00000000,269.75000000); //
	CreateDynamicObject(3502,827.47000000,-2067.64000000,10.30000000,0.00000000,0.00000000,271.74000000); //
	CreateDynamicObject(3502,831.90000000,-2067.55000000,10.27000000,0.00000000,0.00000000,89.24000000); //
	CreateDynamicObject(6980,843.19000000,-2195.13000000,7.25000000,0.00000000,0.00000000,180.75000000); //
	CreateDynamicObject(6980,828.80000000,-2195.08000000,7.25000000,0.00000000,0.00000000,178.75000000); //
	CreateDynamicObject(7191,831.91000000,-2170.01000000,11.16000000,360.00000000,269.75000000,359.50000000); //
	CreateDynamicObject(7191,835.42000000,-2170.05000000,11.16000000,359.99000000,269.75000000,359.49000000); //
	CreateDynamicObject(7191,839.38000000,-2170.08000000,11.16000000,359.99000000,269.75000000,359.49000000); //
	CreateDynamicObject(7191,836.30000000,-2189.80000000,-10.92000000,88.57000000,224.56000000,41.72000000); //
	CreateDynamicObject(7191,835.13000000,-2190.75000000,-10.92000000,88.57000000,224.56000000,127.72000000); //
	CreateDynamicObject(7191,837.17000000,-2191.56000000,-10.92000000,88.57000000,224.56000000,315.96000000); //
	CreateDynamicObject(973,792.84000000,-2367.28000000,18.61000000,357.25000000,3.25000000,65.16000000); //
	CreateDynamicObject(973,771.32000000,-2357.30000000,19.79000000,358.03000000,350.24000000,173.66000000); //
	CreateDynamicObject(973,778.50000000,-2353.92000000,18.21000000,358.02000000,351.99000000,235.47000000); //
	CreateDynamicObject(8656,753.27000000,-2349.66000000,21.99000000,355.23000000,359.49000000,241.43000000); //
	CreateDynamicObject(8656,728.20000000,-2333.27000000,24.49000000,355.23000000,359.49000000,232.18000000); //
	CreateDynamicObject(8656,705.11000000,-2315.08000000,26.94000000,355.23000000,359.49000000,231.43000000); //
	CreateDynamicObject(8656,681.80000000,-2297.15000000,29.42000000,355.23000000,359.49000000,233.43000000); //
	CreateDynamicObject(973,665.64000000,-2285.11000000,30.81000000,360.00000000,354.25000000,146.75000000); //
	CreateDynamicObject(973,657.75000000,-2280.32000000,31.79000000,359.99000000,353.49000000,150.74000000); //
	CreateDynamicObject(973,650.61000000,-2276.75000000,32.69000000,359.99000000,353.49000000,156.74000000); //
	CreateDynamicObject(973,665.95000000,-2285.36000000,30.81000000,359.99000000,354.24000000,146.74000000); //
	CreateDynamicObject(973,642.27000000,-2274.32000000,33.46000000,359.98000000,355.99000000,170.74000000); //
	CreateDynamicObject(973,636.91000000,-2273.56000000,33.89000000,359.98000000,354.49000000,172.24000000); //
	CreateDynamicObject(973,636.90000000,-2273.56000000,35.14000000,359.98000000,354.48000000,172.23000000); //
	CreateDynamicObject(973,642.27000000,-2274.32000000,34.64000000,359.98000000,355.99000000,170.74000000); //
	CreateDynamicObject(973,650.61000000,-2276.75000000,33.84000000,359.98000000,353.49000000,156.74000000); //
	CreateDynamicObject(973,657.75000000,-2280.32000000,32.94000000,359.99000000,353.49000000,150.74000000); //
	CreateDynamicObject(973,665.95000000,-2285.36000000,31.84000000,359.99000000,354.24000000,146.74000000); //
	CreateDynamicObject(973,665.51000000,-2285.04000000,31.94000000,359.99000000,354.24000000,146.74000000); //
	CreateDynamicObject(973,792.84000000,-2367.28000000,19.44000000,357.25000000,3.25000000,65.15000000); //
	CreateDynamicObject(973,778.50000000,-2353.92000000,18.89000000,358.01000000,351.99000000,235.46000000); //
	CreateDynamicObject(973,771.32000000,-2357.30000000,20.69000000,358.02000000,350.24000000,173.66000000); //
	CreateDynamicObject(973,628.54000000,-2275.00000000,34.69000000,359.98000000,356.98000000,203.23000000); //
	CreateDynamicObject(973,628.86000000,-2274.84000000,35.69000000,359.97000000,356.98000000,203.23000000); //
	CreateDynamicObject(973,625.26000000,-2276.44000000,34.86000000,359.97000000,356.98000000,203.23000000); //
	CreateDynamicObject(973,625.26000000,-2276.44000000,35.89000000,359.97000000,356.98000000,203.23000000); //
	CreateDynamicObject(973,618.45000000,-2281.71000000,35.29000000,358.72000000,357.73000000,233.18000000); //
	CreateDynamicObject(973,618.45000000,-2281.71000000,36.29000000,358.72000000,357.73000000,233.18000000); //
	CreateDynamicObject(973,613.78000000,-2289.33000000,35.39000000,358.72000000,0.73000000,245.25000000); //
	CreateDynamicObject(973,613.69000000,-2289.62000000,36.39000000,358.71000000,0.73000000,245.24000000); //
	CreateDynamicObject(8656,737.60000000,-2362.86000000,22.32000000,3.73000000,359.50000000,55.50000000); //
	CreateDynamicObject(8656,713.28000000,-2344.81000000,24.24000000,3.48000000,359.49000000,51.25000000); //
	CreateDynamicObject(8656,690.34000000,-2326.36000000,26.42000000,4.98000000,359.49000000,51.26000000); //
	CreateDynamicObject(8656,666.15000000,-2308.32000000,29.42000000,6.48000000,359.49000000,55.27000000); //
	CreateDynamicObject(973,649.88000000,-2297.62000000,31.61000000,357.77000000,9.50000000,330.62000000); //
	CreateDynamicObject(973,650.05000000,-2297.61000000,32.61000000,357.77000000,9.50000000,330.62000000); //
	CreateDynamicObject(973,641.71000000,-2293.98000000,33.16000000,357.77000000,9.50000000,342.62000000); //
	CreateDynamicObject(973,641.90000000,-2294.10000000,34.11000000,357.76000000,9.49000000,343.37000000); //
	CreateDynamicObject(1237,636.55000000,-2292.51000000,33.68000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,635.43000000,-2292.31000000,33.81000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,634.30000000,-2292.51000000,33.96000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,633.34000000,-2292.98000000,34.38000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,632.70000000,-2293.81000000,34.56000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,632.08000000,-2294.60000000,34.71000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,631.56000000,-2295.42000000,34.76000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,631.17000000,-2296.42000000,34.68000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,630.91000000,-2297.51000000,34.61000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,630.80000000,-2298.60000000,34.43000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,630.77000000,-2299.77000000,34.28000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,630.91000000,-2300.92000000,34.11000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,631.20000000,-2302.14000000,33.93000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,631.44000000,-2303.39000000,33.78000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(973,633.84000000,-2308.12000000,33.89000000,359.23000000,357.98000000,116.96000000); //
	CreateDynamicObject(973,633.83000000,-2308.12000000,34.86000000,359.23000000,357.98000000,116.96000000); //
	CreateDynamicObject(8656,646.95000000,-2322.86000000,33.92000000,359.23000000,359.49000000,226.70000000); //
	CreateDynamicObject(8656,669.61000000,-2342.77000000,33.99000000,1.23000000,359.73000000,230.71000000); //
	CreateDynamicObject(8656,693.36000000,-2360.89000000,35.34000000,3.97000000,359.73000000,234.72000000); //
	CreateDynamicObject(8656,717.82000000,-2377.18000000,38.67000000,8.97000000,359.72000000,237.99000000); //
	CreateDynamicObject(8656,563.80000000,-2420.40000000,64.09000000,0.97000000,359.73000000,62.45000000); //
	CreateDynamicObject(8656,590.63000000,-2434.41000000,63.54000000,0.97000000,359.73000000,62.45000000); //
	CreateDynamicObject(8656,617.42000000,-2447.95000000,62.69000000,2.22000000,359.73000000,63.96000000); //
	CreateDynamicObject(8656,644.65000000,-2460.13000000,61.54000000,2.21000000,359.72000000,67.96000000); //
	CreateDynamicObject(8656,673.46000000,-2469.20000000,60.37000000,2.21000000,359.71000000,77.21000000); //
	CreateDynamicObject(8656,676.13000000,-2469.86000000,60.37000000,2.21000000,359.71000000,77.20000000); //
	CreateDynamicObject(8656,706.07000000,-2473.84000000,58.64000000,4.21000000,359.71000000,87.71000000); //
	CreateDynamicObject(8656,602.59000000,-2420.00000000,63.22000000,358.25000000,0.00000000,243.25000000); //
	CreateDynamicObject(8656,629.11000000,-2432.83000000,62.32000000,358.25000000,0.00000000,245.25000000); //
	CreateDynamicObject(8656,656.64000000,-2444.31000000,61.39000000,358.25000000,0.00000000,249.25000000); //
	CreateDynamicObject(8656,685.48000000,-2452.83000000,60.02000000,356.75000000,0.00000000,257.75000000); //
	CreateDynamicObject(8656,715.20000000,-2454.77000000,58.07000000,355.99000000,0.00000000,274.74000000); //
	CreateDynamicObject(973,740.00000000,-2420.98000000,51.06000000,359.25000000,346.48000000,292.56000000); //
	CreateDynamicObject(973,742.40000000,-2429.49000000,53.29000000,359.25000000,346.48000000,276.80000000); //
	CreateDynamicObject(973,741.36000000,-2438.27000000,54.74000000,359.22000000,354.73000000,249.91000000); //
	CreateDynamicObject(973,737.07000000,-2446.14000000,55.56000000,359.22000000,354.72000000,233.16000000); //
	CreateDynamicObject(973,727.32000000,-2453.60000000,56.79000000,359.22000000,354.72000000,185.15000000); //
	CreateDynamicObject(973,734.60000000,-2449.52000000,55.96000000,359.22000000,354.72000000,233.15000000); //
	CreateDynamicObject(973,725.71000000,-2473.55000000,57.41000000,359.22000000,3.22000000,9.27000000); //
	CreateDynamicObject(973,734.71000000,-2471.51000000,56.91000000,359.21000000,3.21000000,15.27000000); //
	CreateDynamicObject(973,742.32000000,-2467.76000000,56.46000000,359.21000000,2.71000000,37.26000000); //
	CreateDynamicObject(973,748.85000000,-2461.79000000,56.06000000,359.20000000,2.71000000,46.75000000); //
	CreateDynamicObject(973,753.94000000,-2455.39000000,55.67000000,359.20000000,2.71000000,58.75000000); //
	CreateDynamicObject(973,758.08000000,-2447.43000000,55.17000000,359.19000000,3.71000000,65.26000000); //
	CreateDynamicObject(973,760.88000000,-2439.13000000,54.57000000,359.19000000,3.71000000,79.51000000); //
	CreateDynamicObject(973,761.46000000,-2430.20000000,53.74000000,358.94000000,6.96000000,93.58000000); //
	CreateDynamicObject(973,760.30000000,-2421.33000000,52.44000000,358.95000000,9.70000000,101.63000000); //
	CreateDynamicObject(973,757.87000000,-2412.91000000,50.77000000,359.44000000,11.95000000,111.57000000); //
	CreateDynamicObject(973,753.75000000,-2405.12000000,48.64000000,359.45000000,14.45000000,125.59000000); //
	CreateDynamicObject(973,748.14000000,-2398.64000000,46.42000000,359.45000000,14.45000000,135.59000000); //
	CreateDynamicObject(973,741.57000000,-2392.87000000,44.09000000,359.44000000,14.45000000,143.59000000); //
	CreateDynamicObject(973,734.54000000,-2387.80000000,41.99000000,359.44000000,12.95000000,145.57000000); //
	CreateDynamicObject(3485,865.36000000,-2542.73000000,34.65000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3487,754.60000000,-2567.26000000,34.29000000,0.00000000,0.00000000,90.25000000); //
	CreateDynamicObject(3484,754.58000000,-2592.90000000,34.29000000,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(3484,908.79000000,-2541.52000000,34.29000000,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(3446,911.90000000,-2565.77000000,31.12000000,0.00000000,0.00000000,270.25000000); //
	CreateDynamicObject(3485,909.35000000,-2590.29000000,34.87000000,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(3487,909.50000000,-2615.28000000,34.29000000,0.00000000,0.00000000,270.25000000); //
	CreateDynamicObject(3506,777.70000000,-2358.66000000,17.75000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,752.58000000,-2352.55000000,20.78000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,735.20000000,-2341.01000000,22.75000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,708.54000000,-2320.31000000,25.25000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,681.72000000,-2299.08000000,27.50000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,665.73000000,-2287.43000000,29.90000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,634.89000000,-2275.89000000,33.48000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,620.09000000,-2283.67000000,34.58000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,616.65000000,-2312.50000000,33.53000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,638.15000000,-2338.15000000,32.28000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,662.38000000,-2358.06000000,32.03000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,690.70000000,-2379.10000000,34.58000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,719.80000000,-2398.15000000,39.25000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,741.63000000,-2418.99000000,49.23000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,742.71000000,-2440.86000000,54.23000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,723.61000000,-2456.26000000,56.43000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,693.28000000,-2457.15000000,58.68000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,661.15000000,-2448.39000000,60.08000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,634.56000000,-2437.42000000,61.33000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,609.09000000,-2426.40000000,61.33000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,595.90000000,-2419.74000000,61.33000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,563.75000000,-2402.30000000,63.08000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,557.18000000,-2414.87000000,62.83000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,556.87000000,-2406.32000000,63.20000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,572.92000000,-2423.20000000,62.33000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,585.46000000,-2429.43000000,62.33000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,609.88000000,-2441.95000000,61.58000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,637.10000000,-2453.76000000,60.75000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,664.52000000,-2464.25000000,59.50000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,682.31000000,-2469.30000000,59.00000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,717.20000000,-2471.89000000,57.00000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,750.40000000,-2457.52000000,55.03000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,759.38000000,-2425.87000000,51.93000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,745.39000000,-2398.92000000,44.43000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,723.35000000,-2382.80000000,38.93000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,697.24000000,-2366.49000000,34.43000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,671.40000000,-2347.80000000,32.78000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,644.71000000,-2324.35000000,32.45000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,628.94000000,-2303.44000000,32.58000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,630.21000000,-2292.87000000,34.60000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,654.40000000,-2297.15000000,29.90000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,676.82000000,-2313.37000000,27.15000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,698.25000000,-2330.25000000,25.15000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,719.73000000,-2347.12000000,22.90000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,741.16000000,-2362.60000000,20.90000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,761.73000000,-2373.02000000,19.65000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,775.39000000,-2374.60000000,18.40000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(3506,791.75000000,-2364.09000000,16.90000000,0.00000000,0.00000000,266.00000000); //
	CreateDynamicObject(987,861.76000000,-2489.37000000,24.65000000,0.00000000,0.00000000,181.00000000); //
	CreateDynamicObject(987,873.74000000,-2489.48000000,24.65000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,885.69000000,-2489.62000000,24.65000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,897.62000000,-2489.77000000,24.65000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,905.47000000,-2489.86000000,24.65000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,905.31000000,-2502.31000000,25.50000000,0.00000000,4.50000000,89.50000000); //
	CreateDynamicObject(987,905.16000000,-2514.10000000,26.47000000,0.00000000,4.50000000,89.49000000); //
	CreateDynamicObject(987,905.02000000,-2523.61000000,27.10000000,0.00000000,4.50000000,89.49000000); //
	CreateDynamicObject(987,817.22000000,-2489.47000000,25.10000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,805.24000000,-2489.43000000,25.10000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,793.34000000,-2489.36000000,25.12000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,787.36000000,-2489.33000000,25.12000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,779.11000000,-2489.25000000,25.12000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(987,767.56000000,-2489.70000000,25.12000000,0.00000000,356.25000000,269.75000000); //
	CreateDynamicObject(987,767.55000000,-2501.67000000,25.92000000,0.00000000,356.25000000,269.74000000); //
	CreateDynamicObject(987,767.52000000,-2512.96000000,26.67000000,0.00000000,356.25000000,270.49000000); //
	CreateDynamicObject(8656,866.80000000,-2525.18000000,28.63000000,359.73000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,897.20000000,-2525.32000000,28.73000000,359.71000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,866.80000000,-2525.18000000,30.75000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,897.20000000,-2525.32000000,30.90000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,913.61000000,-2525.39000000,28.73000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,913.61000000,-2525.38000000,30.98000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,866.80000000,-2525.18000000,32.92000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,897.20000000,-2525.32000000,33.08000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,913.61000000,-2525.38000000,33.20000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,797.48000000,-2524.86000000,28.63000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,766.94000000,-2524.73000000,28.48000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,750.96000000,-2524.66000000,28.48000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,797.48000000,-2524.86000000,30.62000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,797.48000000,-2524.86000000,32.78000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,766.94000000,-2524.73000000,30.47000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,766.94000000,-2524.73000000,32.63000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,750.96000000,-2524.66000000,30.45000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,750.96000000,-2524.66000000,32.55000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(3484,888.00000000,-2509.61000000,33.21000000,0.00000000,355.99000000,270.00000000); //
	CreateDynamicObject(8656,890.94000000,-2495.31000000,26.62000000,359.71000000,0.00000000,89.74000000); //
	CreateDynamicObject(8656,886.05000000,-2495.31000000,26.62000000,359.72000000,0.00000000,89.74000000); //
	CreateDynamicObject(3485,784.78000000,-2509.20000000,33.52000000,0.00000000,3.99000000,90.00000000); //
	CreateDynamicObject(3485,909.61000000,-2640.58000000,34.65000000,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(3485,754.95000000,-2622.65000000,34.60000000,0.00000000,0.00000000,89.75000000); //
	CreateDynamicObject(3487,754.97000000,-2648.00000000,34.31000000,0.00000000,0.00000000,90.25000000); //
	CreateDynamicObject(3485,754.95000000,-2622.65000000,34.60000000,0.00000000,0.00000000,89.75000000); //
	CreateDynamicObject(3605,808.19000000,-2641.91000000,33.71000000,0.00000000,0.00000000,359.75000000); //
	CreateDynamicObject(3607,860.17000000,-2641.64000000,33.71000000,0.00000000,0.00000000,359.75000000); //
	CreateDynamicObject(3604,833.26000000,-2644.91000000,30.22000000,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(3605,859.34000000,-2597.43000000,33.66000000,0.00000000,0.00000000,180.25000000); //
	CreateDynamicObject(3607,807.36000000,-2597.33000000,33.71000000,0.00000000,0.00000000,179.75000000); //
	CreateDynamicObject(3604,834.23000000,-2594.55000000,30.22000000,0.00000000,0.00000000,359.99000000); //
	CreateDynamicObject(3484,798.47000000,-2542.36000000,34.36000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(8656,906.77000000,-2526.35000000,28.23000000,359.71000000,0.00000000,89.74000000); //
	CreateDynamicObject(11490,593.28000000,-2380.59000000,61.78000000,0.00000000,0.00000000,154.25000000); //
	CreateDynamicObject(11502,597.24000000,-2401.64000000,62.43000000,0.00000000,0.00000000,64.00000000); //
	CreateDynamicObject(3485,754.48000000,-2541.83000000,34.62000000,0.00000000,360.00000000,90.00000000); //
	CreateDynamicObject(8171,927.08000000,-2594.22000000,14.24000000,0.00000000,92.25000000,180.24000000); //
	CreateDynamicObject(8171,859.00000000,-2660.38000000,14.24000000,0.00000000,92.25000000,90.24000000); //
	CreateDynamicObject(8171,803.49000000,-2660.09000000,14.24000000,0.00000000,92.24000000,89.73000000); //
	CreateDynamicObject(8171,737.08000000,-2593.62000000,14.24000000,0.00000000,92.24000000,359.98000000); //
	CreateDynamicObject(10826,1061.80000000,-2507.81000000,0.84000000,0.00000000,0.00000000,338.75000000); //
	CreateDynamicObject(8656,1023.04000000,-2432.63000000,18.72000000,359.71000000,0.00000000,248.98000000); //
	CreateDynamicObject(8656,1051.33000000,-2443.51000000,18.57000000,359.71000000,0.00000000,248.98000000); //
	CreateDynamicObject(8656,1079.62000000,-2454.38000000,18.42000000,359.71000000,0.00000000,248.98000000); //
	CreateDynamicObject(8656,1106.68000000,-2464.78000000,18.30000000,359.71000000,0.00000000,248.98000000); //
	CreateDynamicObject(8656,1129.42000000,-2473.57000000,18.17000000,359.71000000,0.00000000,248.98000000); //
	CreateDynamicObject(10377,1100.74000000,-2522.57000000,33.06000000,0.00000000,0.00000000,159.00000000); //
	CreateDynamicObject(6522,1009.35000000,-2514.62000000,25.08000000,0.00000000,0.00000000,338.50000000); //
	CreateDynamicObject(7885,1059.03000000,-2469.83000000,16.82000000,0.00000000,0.00000000,69.50000000); //
	CreateDynamicObject(8656,996.43000000,-2458.86000000,17.77000000,359.71000000,0.00000000,338.73000000); //
	CreateDynamicObject(8656,985.42000000,-2487.12000000,17.92000000,359.71000000,0.00000000,338.73000000); //
	CreateDynamicObject(8656,982.06000000,-2495.75000000,17.92000000,359.71000000,0.00000000,338.73000000); //
	CreateDynamicObject(8656,987.16000000,-2538.79000000,18.72000000,359.71000000,0.00000000,69.73000000); //
	CreateDynamicObject(8656,1015.02000000,-2549.10000000,18.72000000,359.71000000,0.00000000,69.73000000); //
	CreateDynamicObject(8656,1042.12000000,-2559.29000000,18.85000000,359.71000000,0.00000000,68.98000000); //
	CreateDynamicObject(8656,1060.81000000,-2566.49000000,18.95000000,359.71000000,0.00000000,68.98000000); //
	CreateDynamicObject(987,978.25000000,-2505.80000000,16.65000000,0.00000000,0.00000000,277.25000000); //
	CreateDynamicObject(987,979.74000000,-2517.65000000,16.65000000,0.00000000,0.00000000,249.25000000); //
	CreateDynamicObject(987,977.54000000,-2523.20000000,16.65000000,0.00000000,0.00000000,249.24000000); //
	CreateDynamicObject(5056,601.95000000,-2401.99000000,64.07000000,0.00000000,0.00000000,334.00000000); //
	CreateDynamicObject(987,550.81000000,-2413.24000000,63.18000000,0.00000000,0.00000000,63.25000000); //
	CreateDynamicObject(987,553.51000000,-2407.88000000,63.18000000,0.00000000,0.00000000,63.25000000); //
	CreateDynamicObject(987,556.89000000,-2400.84000000,63.36000000,0.00000000,0.00000000,58.50000000); //
	CreateDynamicObject(987,564.43000000,-2387.88000000,63.36000000,0.00000000,0.00000000,70.25000000); //
	CreateDynamicObject(987,568.47000000,-2376.67000000,63.38000000,0.00000000,0.00000000,63.25000000); //
	CreateDynamicObject(987,572.38000000,-2368.91000000,63.38000000,0.00000000,0.00000000,63.24000000); //
	CreateDynamicObject(987,577.86000000,-2358.21000000,63.38000000,0.00000000,0.75000000,332.99000000); //
	CreateDynamicObject(987,588.45000000,-2363.59000000,63.23000000,0.00000000,1.50000000,332.99000000); //
	CreateDynamicObject(987,598.97000000,-2368.97000000,62.93000000,0.00000000,2.50000000,332.99000000); //
	CreateDynamicObject(987,607.03000000,-2373.23000000,62.51000000,0.00000000,2.25000000,332.99000000); //
	CreateDynamicObject(987,617.70000000,-2378.82000000,62.06000000,0.00000000,0.00000000,242.99000000); //
	CreateDynamicObject(987,612.30000000,-2389.42000000,62.06000000,0.00000000,0.00000000,242.99000000); //
	CreateDynamicObject(987,606.90000000,-2400.07000000,62.06000000,0.00000000,0.00000000,242.99000000); //
	CreateDynamicObject(987,603.28000000,-2407.17000000,62.06000000,0.00000000,0.00000000,242.99000000); //
	CreateDynamicObject(987,597.78000000,-2417.59000000,62.06000000,0.00000000,0.00000000,152.49000000); //
	CreateDynamicObject(987,575.27000000,-2406.65000000,63.36000000,0.00000000,0.00000000,152.25000000); //
	CreateDynamicObject(987,569.17000000,-2403.42000000,63.36000000,0.00000000,0.00000000,152.24000000); //
	CreateDynamicObject(619,851.23000000,-2470.16000000,24.92000000,0.00000000,0.00000000,320.00000000); //
	CreateDynamicObject(619,816.88000000,-2465.82000000,24.62000000,0.00000000,0.00000000,156.00000000); //
	CreateDynamicObject(619,817.66000000,-2432.57000000,23.17000000,0.00000000,0.00000000,155.99000000); //
	CreateDynamicObject(619,818.33000000,-2396.77000000,21.52000000,0.00000000,0.00000000,155.99000000); //
	CreateDynamicObject(619,817.92000000,-2358.39000000,18.77000000,0.00000000,0.00000000,155.99000000); //
	CreateDynamicObject(619,850.42000000,-2430.53000000,23.22000000,0.00000000,0.00000000,320.00000000); //
	CreateDynamicObject(619,850.85000000,-2394.88000000,21.47000000,0.00000000,0.00000000,320.00000000); //
	CreateDynamicObject(619,851.14000000,-2353.05000000,18.37000000,0.00000000,0.00000000,320.00000000); //
	CreateDynamicObject(3666,834.53000000,-2355.92000000,20.37000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3666,834.35000000,-2389.92000000,22.72000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3666,834.11000000,-2434.95000000,25.19000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3666,833.97000000,-2479.37000000,26.72000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3666,835.68000000,-2236.58000000,9.83000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3666,835.78000000,-2220.07000000,8.13000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3666,835.96000000,-2201.37000000,6.21000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,870.62000000,-2351.42000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,883.25000000,-2346.40000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,901.12000000,-2375.97000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,879.64000000,-2369.44000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,901.09000000,-2396.07000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,923.92000000,-2396.32000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,939.23000000,-2418.55000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,957.40000000,-2411.61000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,965.03000000,-2429.45000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,990.72000000,-2423.80000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(737,992.95000000,-2439.26000000,17.14000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1597,1063.67000000,-2566.74000000,19.40000000,0.00000000,0.00000000,68.50000000); //
	CreateDynamicObject(1597,1054.36000000,-2563.06000000,19.40000000,0.00000000,0.00000000,69.00000000); //
	CreateDynamicObject(1597,1045.21000000,-2559.39000000,19.40000000,0.00000000,0.00000000,68.99000000); //
	CreateDynamicObject(1597,1036.01000000,-2555.62000000,19.40000000,0.00000000,0.00000000,68.99000000); //
	CreateDynamicObject(1597,1026.23000000,-2551.76000000,19.40000000,0.00000000,0.00000000,68.99000000); //
	CreateDynamicObject(1597,1016.83000000,-2548.34000000,19.40000000,0.00000000,0.00000000,68.99000000); //
	CreateDynamicObject(3506,1059.14000000,-2565.05000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1049.88000000,-2561.19000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1040.59000000,-2557.59000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1031.08000000,-2553.74000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1021.49000000,-2549.85000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1012.20000000,-2546.14000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,980.82000000,-2533.81000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,983.87000000,-2497.93000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,988.26000000,-2485.37000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,993.53000000,-2472.12000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,998.30000000,-2460.55000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1002.21000000,-2450.25000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1013.69000000,-2431.87000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3506,1023.20000000,-2435.14000000,16.32000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(6965,1058.59000000,-2513.77000000,20.43000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3279,1001.26000000,-2455.31000000,16.72000000,0.00000000,0.00000000,340.00000000); //
	CreateDynamicObject(3279,835.07000000,-2325.95000000,15.15000000,0.00000000,0.00000000,270.50000000); //
	CreateDynamicObject(3279,834.10000000,-2496.72000000,25.46000000,0.00000000,0.00000000,268.00000000); //
	CreateDynamicObject(3279,832.52000000,-2496.64000000,40.46000000,0.00000000,0.00000000,357.99000000); //
	CreateDynamicObject(3279,832.51000000,-2496.86000000,54.81000000,0.00000000,0.00000000,87.99000000); //
	CreateDynamicObject(3279,835.65000000,-2026.30000000,11.57000000,0.00000000,0.00000000,88.00000000); //
	CreateDynamicObject(3749,843.34000000,-2067.59000000,16.71000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3749,829.26000000,-2067.68000000,16.65000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3749,843.18000000,-2491.19000000,30.05000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3749,824.63000000,-2490.93000000,30.07000000,0.00000000,0.00000000,358.20000000); //
	// Portões Ilha
	PortaoCentralIlha = CreateDynamicObject(980,842.05523682,-2525.35498047,30.43726158,0.00000000,0.00000000,0.00000000); //
	PortaoCentralIlha2 = CreateDynamicObject(980,822.47497559,-2525.16552734,30.43726158,0.00000000,0.00000000,0.00000000); //
	PortaoEsquerdolIlha = CreateDynamicObject(980,1006.89306641,-2437.37475586,19.59761620,0.00000000,0.00000000,69.25000000); //
	PortaoDireitolIlha = CreateDynamicObject(980,580.05853271,-2410.45849609,65.49389648,0.00000000,0.00000000,151.25000000); //
}

forward PassarEfeitoCura( playerid );
public PassarEfeitoCura( playerid )
{
	SetPlayerHealth( playerid, 100.0 );
	SetPlayerDrunkLevel( playerid, 0 );
	SetPlayerWeather( playerid, 0 );
	return 1;
}

forward FlashFoto( playerid );
public FlashFoto( playerid )
{
	TextDrawShowForPlayer( playerid, Flash );
	SetTimerEx( "FlashFotoSair", 1000, false, "i", playerid );
	return 1;
}

forward FlashFotoSair( playerid );
public FlashFotoSair( playerid )
{
	TextDrawHideForPlayer( playerid, Flash );
	return 1;
}

forward PassarEfeitoDrogas( playerid );
public  PassarEfeitoDrogas( playerid )
{
	SetPlayerWeather( playerid, 10 );
    SetPlayerDrunkLevel( playerid, 0 );
	return 1;
}

forward NovaBomba( playerid );
public NovaBomba( playerid )
{
    PlantouBomba[ playerid ] = 0;
	SendClientMessage( playerid, COLOR_SISTEMA, "[ > ] Você já pode plantar outra bomba !" );
	return 1;
}

forward DestruirObjeto( objid );
public DestruirObjeto( objid ) DestroyDynamicObject( objid );
forward CriarExplosao( Float:X,Float:Y,Float:Z,tipo,Float:diam );
public CriarExplosao( Float:X,Float:Y,Float:Z,tipo,Float:diam ) CreateExplosion( X,Y,Z,tipo,diam );

forward AtualizaGPS( playerid, playerid2 );
public AtualizaGPS( playerid, playerid2 )
{
	if( IsPlayerConnected( playerid2 ))
	{
		new
			Float:Distance
		;
		Distance = GetDistanceBetweenPlayers( playerid, playerid2 );
		new
			Float:X,
			Float:Y,
			Float:Z
		;
		GetPlayerPos( playerid2, X, Y, Z );
		DisablePlayerCheckpoint( playerid );
		SetPlayerCheckpoint( playerid, X, Y, Z, 0.1 );
		new
			string[ 128 ]
		;
		new
			zone[ MAX_ZONE_NAME ]
		;
		GetPlayer2DZone( playerid2, zone, MAX_ZONE_NAME );
		format( string, sizeof( string ), "~n~~n~~n~~n~~n~~p~Distancia: ~w~%.1f ~p~Local: ~w~%s", Distance, zone );
		GameTextForPlayer( playerid, string, 1100, 5 );
		if( Distance <= 4.0 )
		{
			DisablePlayerCheckpoint( playerid );
			KillTimer( T_GPS[ playerid ] );
			GPS[ playerid ] = false;
			T_GPS[ playerid ] = 0;
		}
	}
	else
	{
		DisablePlayerCheckpoint( playerid );
		KillTimer( T_GPS[ playerid ] );
		GPS[ playerid ] = false;
		T_GPS[ playerid ] = 0;
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Ninguém online com esse ID !" );
	}
	return 1;
}

forward LiberadoParaAndar( playerid );
public LiberadoParaAndar( playerid )
{
    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você foi desalgemado." );
    TogglePlayerControllable( playerid, true );
	return 1;
}

stock GetDriverID( vehicleid )
{
    foreach(Player, i )
    {
        if( GetPlayerVehicleID( i ) == vehicleid && GetPlayerState( i ) == 2 ) return i;
    }
    return -1;
}

stock Congelado( playerid, on = 0 )
{
	switch( on )
	{
		case 0: TogglePlayerControllable( playerid, false );
		case 1: TogglePlayerControllable( playerid, true );
	}
}

/*stock CreateStrip( Float:x, Float:y, Float:z, Float:Angle )
{
    for( new i = 0; i < sizeof( SpikeInfo ); i++ )
  	{
  	    if( SpikeInfo[ i ][ sCreated ] == 0 )
  	    {
            SpikeInfo[ i ][ sCreated ] = 1;
            SpikeInfo[ i ][ sX ] = x;
            SpikeInfo[ i ][ sY ] = y;
            SpikeInfo[ i ][ sZ ] = z-0.7;
            SpikeInfo[ i ][ sObject ] = CreateDynamicObject( 2899, x, y, z-0.9, 0, 0, Angle-90 );
	        return 1;
  	    }
  	}
  	return 0;
}*/

stock DeleteAllStrip( )
{
    for( new i = 0; i < sizeof( SpikeInfo ); i++ )
  	{
  	    if( SpikeInfo[ i ][ sCreated ] == 1 )
  	    {
  	        SpikeInfo[ i ][ sCreated ]=0;
            SpikeInfo[ i ][ sX ]=0.0;
            SpikeInfo[ i ][ sY ]=0.0;
            SpikeInfo[ i ][ sZ ]=0.0;
            DestroyDynamicObject( SpikeInfo[ i ][ sObject ] );
  	    }
	}
    return 0;
}

stock DeleteClosestStrip( playerid )
{
    for( new i = 0; i < sizeof( SpikeInfo ); i++ )
  	{
  	    if( IsPlayerInRangeOfPoint( playerid, 2.0, SpikeInfo[ i ][ sX ], SpikeInfo[ i ][ sY ], SpikeInfo[ i ][ sZ ] ))
        {
  	        if( SpikeInfo[ i ][ sCreated ] == 1 )
            {
                SpikeInfo[ i ][ sCreated ] = 0;
                SpikeInfo[ i ][ sX ] = 0.0;
                SpikeInfo[ i ][ sY ] = 0.0;
                SpikeInfo[ i ][ sZ ] = 0.0;
                DestroyDynamicObject( SpikeInfo[ i ][ sObject ] );
                return 1;
  	        }
  	    }
  	}
    return 0;
}

forward CarregarKit( playerid );
public CarregarKit( playerid )
{
	if( pInfo[ playerid ][ Tem_Kit ] == 1 )
	{
		ResetPlayerWeapons( playerid );
  		GivePlayerWeapon( playerid, 24, 9999 ); // Eagle
    	GivePlayerWeapon( playerid, 26, 9999 ); // Sawn-Off
  		GivePlayerWeapon( playerid, 32, 9999 ); // Tec9
  		GivePlayerWeapon( playerid, 34, 9999 ); // Sniper
  		GivePlayerWeapon( playerid, 31, 9999 ); // M4
  		GivePlayerWeapon( playerid, 5, 1 ); // Serra
  		return 1;
	}
	return 1;
}

forward Banido( playerid );
public Banido( playerid )
{
	Kick( playerid );
	return 1;
}

GetXYInFrontOfPlayer( playerid, &Float:x, &Float:y, Float:distance )
{
	new
		Float:a
	;
	GetPlayerPos( playerid, x, y, a );
	GetPlayerFacingAngle( playerid, a );
	if( GetPlayerVehicleID( playerid ))
	{
		GetVehicleZAngle( GetPlayerVehicleID( playerid ), a );
	}
	x += ( distance * floatsin( -a, degrees ));
	y += ( distance * floatcos( -a, degrees ));
}

encode_tires( tires1, tires2, tires3, tires4 )
{
	return tires1 | ( tires2 << 1 ) | ( tires3 << 2 ) | ( tires4 << 3 );
}

forward ContagemDuelo( playerid );
public ContagemDuelo( playerid )
{
    new
		gDuelo[ 24 ]
	;
	TempoCounTD[ playerid ] --;
	format( gDuelo, sizeof( gDuelo ), "~n~~n~~y~~h~~h~%d", TempoCounTD[ playerid ] );
	GameTextForPlayer( playerid, gDuelo, 900, 5 );
    if( TempoCounTD[ playerid ] <= 0 )
    {
        KillTimer( TimerDuelo[ playerid ] );
        ResetPlayerWeapons( playerid );
        GivePlayerWeapon( playerid, 24, 9999 );
        GivePlayerWeapon( playerid, 26, 9999 );
        GivePlayerWeapon( playerid, 28, 9999 );
        GameTextForPlayer( playerid, "~n~~n~~r~~h~~h~VAI! VAI! VAI!~n~~w~~h~VALENDO!", 1000, 5 );
        TogglePlayerControllable( playerid, true );
    }
    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0 );
	return 1;
}

stock SetPlayerNoveiculo( playerid, Float:X, Float:Y, Float:Z, Float:Angulo, Interior )
{
	new veiculo = GetPlayerVehicleID( playerid );
	new State = GetPlayerState( playerid );
	SetPlayerInterior( playerid, Interior );
	{
		if( State!=PLAYER_STATE_DRIVER ) { SetPlayerPos( playerid, X, Y, Z ); }
		else if( IsPlayerInVehicle( playerid, veiculo ) == 1 ) { SetVehiclePos( veiculo, X, Y, Z ); SetVehicleZAngle( veiculo, Angulo );}
		else { SetPlayerPos( playerid, X, Y, Z ); }
		SetPlayerFacingAngle( playerid, Angulo );
	}
}

stock RenomearArquivo( fileorigem[ ],filerename[ ] )
{
    new
		string[ 512 ]
	;
    new
		File:fileo = fopen( fileorigem, io_read )
	;
    new
		File:filer = fopen( filerename, io_write )
	;
    while( fread( fileo, string ))
    {
        fwrite( filer,string );
    }
    fclose( filer );
    fclose( fileo );
    fremove( fileorigem );
}

forward TempoComprarNick( playerid );
public TempoComprarNick( playerid )
{
	N_Liberado[ playerid ] = 0;
	return 1;
}

forward TempoComprarCasa( playerid );
public TempoComprarCasa( playerid )
{
	LiberadoCasa[ playerid ] = 0;
	return 1;
}

forward Transferencias( string[ ] );
public Transferencias( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "Transferencias.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

forward Reports( string[ ] );
public Reports( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "Reports.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

forward LogSetGrana( string[ ] );
public LogSetGrana( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "SetadosGrana.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

forward log_setados_sms( string[ ] );
public log_setados_sms( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "setados_sms.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

forward log_setados_level( string[ ] );
public log_setados_level( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "SetadosLevel.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

forward LogNick( string[ ] );
public LogNick( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "MudancadeNick.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

public OnPlayerInteriorChange( playerid, newinteriorid, oldinteriorid )
{
    foreach(Player, i )
    {
		if( GetPlayerState( i ) == PLAYER_STATE_SPECTATING )
		{
			if( SpectateID[ i ] == playerid )
			{
				if( SpectateType[ i ] == ADMIN_SPEC_TYPE_PLAYER )
				{
               		SetPlayerInterior( i, newinteriorid );
				}
			}
		}
    }
	return 1;
}

stock IsVehicleOccupied( vehicleid )
{
	foreach(Player, i ) if( IsPlayerInVehicle( i, vehicleid ) && GetPlayerState( i ) == PLAYER_STATE_DRIVER )
	return 1; return 0;
}

stock strrest( const string[ ], &index )
{
	new length = strlen( string );
	while (( index < length ) && ( string[ index ] <= ' ' ))
	{
		index++;
	}
	new offset = index;
	new result[ 128 ];
	while (( index < length ) && (( index - offset ) < ( sizeof( result ) - 1 )) )
	{
		result[ index - offset ] = string[ index ];
		index++;
	}
	result[ index - offset ] = EOS;
	return result;
}

stock GetVehicleModelID( nome[ ] )
{
	for( new i = 0; i < 211; i++ )
	{
		if ( strfind( vNome[ i ], nome, true ) != -1 ) return i + 400;
	}
	return -1;
}

stock SetPlayerRemoteFunction( senderid, const str[ ] )
{
    CallRemoteFunction( "OnPlayerCommandText", "is", senderid, str );
}

stock LimparLoteria( )
{
	dini_Remove( "Loteria.ini" );
	dini_Create( "Loteria.ini" );
	dini_Set( "Loteria.ini", "1", "1" );
	dini_Set( "Loteria.ini", "2", "1" );
	dini_Set( "Loteria.ini", "3", "1" );
	dini_Set( "Loteria.ini", "4", "1" );
	dini_Set( "Loteria.ini", "5", "1" );
	dini_Set( "Loteria.ini", "6", "1" );
	dini_Set( "Loteria.ini", "7", "1" );
	dini_Set( "Loteria.ini", "8", "1" );
	dini_Set( "Loteria.ini", "9", "1" );
	dini_Set( "Loteria.ini", "10", "1" );
	dini_Set( "Loteria.ini", "11", "1" );
	dini_Set( "Loteria.ini", "12", "1" );
	dini_Set( "Loteria.ini", "13", "1" );
	dini_Set( "Loteria.ini", "14", "1" );
	dini_Set( "Loteria.ini", "15", "1" );
	dini_Set( "Loteria.ini", "16", "1" );
	dini_Set( "Loteria.ini", "17", "1" );
	dini_Set( "Loteria.ini", "18", "1" );
	dini_Set( "Loteria.ini", "19", "1" );
	dini_Set( "Loteria.ini", "20", "1" );
	dini_Set( "Loteria.ini", "21", "1" );
	dini_Set( "Loteria.ini", "22", "1" );
	dini_Set( "Loteria.ini", "23", "1" );
	dini_Set( "Loteria.ini", "24", "1" );
	dini_Set( "Loteria.ini", "25", "1" );
	dini_Set( "Loteria.ini", "26", "1" );
	dini_Set( "Loteria.ini", "27", "1" );
	dini_Set( "Loteria.ini", "28", "1" );
	dini_Set( "Loteria.ini", "29", "1" );
	dini_Set( "Loteria.ini", "30", "1" );
	dini_Set( "Loteria.ini", "31", "1" );
	dini_Set( "Loteria.ini", "32", "1" );
	dini_Set( "Loteria.ini", "33", "1" );
	dini_Set( "Loteria.ini", "34", "1" );
	dini_Set( "Loteria.ini", "35", "1" );
	dini_Set( "Loteria.ini", "36", "1" );
	dini_Set( "Loteria.ini", "37", "1" );
	dini_Set( "Loteria.ini", "38", "1" );
	dini_Set( "Loteria.ini", "39", "1" );
	dini_Set( "Loteria.ini", "40", "1" );
	dini_Set( "Loteria.ini", "41", "1" );
	dini_Set( "Loteria.ini", "42", "1" );
	dini_Set( "Loteria.ini", "43", "1" );
	dini_Set( "Loteria.ini", "44", "1" );
	dini_Set( "Loteria.ini", "45", "1" );
	dini_Set( "Loteria.ini", "46", "1" );
	dini_Set( "Loteria.ini", "47", "1" );
	dini_Set( "Loteria.ini", "48", "1" );
	dini_Set( "Loteria.ini", "49", "1" );
	dini_Set( "Loteria.ini", "50", "1" );
	dini_Set( "Loteria.ini", "51", "1" );
	dini_Set( "Loteria.ini", "52", "1" );
	dini_Set( "Loteria.ini", "53", "1" );
	dini_Set( "Loteria.ini", "54", "1" );
	dini_Set( "Loteria.ini", "55", "1" );
	dini_Set( "Loteria.ini", "56", "1" );
	dini_Set( "Loteria.ini", "57", "1" );
	dini_Set( "Loteria.ini", "58", "1" );
	dini_Set( "Loteria.ini", "59", "1" );
	dini_Set( "Loteria.ini", "60", "1" );
}

stock CriarEmpresa( empresaid, eNome[ ], Float:Pickupx, Float:Pickupy, Float:Pickupz, Float:interiorX, Float:interiorY, Float:interiorZ, Interior, virtualworld, cPreco )
{
	new
		empresas[ 256 ]
	;
	format( empresas, sizeof( empresas ), "Empresas/Empresa%d.ini", empresaid );

	if( !fexist( empresas ))
	{
		dini_Create( empresas );

	    EmpresaInfo[ empresaid ][ Numero ] = empresaid;
   		format( EmpresaInfo[ empresaid ][ Proprietario ], 12, "Ninguem" );
		dini_Set( empresas, "Proprietario", "Ninguem" );
   		format( EmpresaInfo[ empresaid ][ Funcionario1 ], 12, "Ninguem" );
		dini_Set( empresas, "Funcionario1", "Ninguem" );
   		format( EmpresaInfo[ empresaid ][ Funcionario2 ], 12, "Ninguem" );
		dini_Set( empresas, "Funcionario2", "Ninguem" );
   		format( EmpresaInfo[ empresaid ][ Funcionario3 ], 12, "Ninguem" );
   		dini_Set( empresas, "Funcionario3", "Ninguem" );
 		format( EmpresaInfo[ empresaid ][ NomeEmp ], 12, eNome );
		format( EmpresaInfo[ empresaid ][ NomeEmpresa ], 12, "Nenhum" );
		dini_Set( empresas, "NomeEmpresa", "Nenhum" );
		format( EmpresaInfo[ empresaid ][ Mensagem ], 12, "Nenhuma" );
		dini_Set( empresas, "Login", "00/00/0000" );
		format( EmpresaInfo[ empresaid ][ Login ], 12, "00/00/0000" );
		dini_Set( empresas, "Horario", "00:00:00" );
		format( EmpresaInfo[ empresaid ][ Horario ], 12, "00:00:00" );
		dini_Set( empresas, "Mensagem", "Nada" );
		dini_IntSet( empresas, "Producao1", 0 );
		dini_IntSet( empresas, "Producao2", 0 );
		dini_IntSet( empresas, "Producao3", 0 );
		dini_IntSet( empresas, "P1Atual", 0 );
		dini_IntSet( empresas, "P2Atual", 0 );
		dini_IntSet( empresas, "P3Atual", 0 );
        EmpresaInfo[ empresaid ][ PickupX ] = Pickupx;
        EmpresaInfo[ empresaid ][ PickupY ] = Pickupy;
        EmpresaInfo[ empresaid ][ PickupZ ] = Pickupz;
       	EmpresaInfo[ empresaid ][ InteriorX ] = interiorX;
		EmpresaInfo[ empresaid ][ InteriorY ] = interiorY;
		EmpresaInfo[ empresaid ][ InteriorZ ] = interiorZ;
		EmpresaInfo[ empresaid ][ InteriorID ] = Interior;
		EmpresaInfo[ empresaid ][ Preco ] = cPreco;
		EmpresaInfo[ empresaid ][ VirtualWorld ] = virtualworld;
		EmpresaInfo[ empresaid ][ Aberta ] = 1;
		dini_IntSet( empresas, "Numero", empresaid );
		dini_FloatSet( empresas, "InteriorX", interiorX );
		dini_FloatSet( empresas, "InteriorY", interiorY );
		dini_FloatSet( empresas, "InteriorZ", interiorZ );
		dini_IntSet( empresas, "Interior", Interior );
		dini_IntSet( empresas, "Valor", cPreco );
		dini_IntSet( empresas, "VirtualWorld", virtualworld );
		dini_IntSet( empresas, "Dono", 0 );
		dini_IntSet( empresas, "Aberta", 1 );
	}
	else
	{
	    format( EmpresaInfo[ empresaid ][ NomeEmp ], 64, eNome );
	    format( EmpresaInfo[ empresaid ][ EmpresaNome ], 64, dini_Get( empresas, "NomeEmpresa" ));
 		format( EmpresaInfo[ empresaid ][ Proprietario ], 24, dini_Get( empresas, "Proprietario" ));
 		format( EmpresaInfo[ empresaid ][ Funcionario1 ], 24, dini_Get( empresas, "Funcionario1" ));
 		format( EmpresaInfo[ empresaid ][ Funcionario2 ], 24, dini_Get( empresas, "Funcionario2" ));
 		format( EmpresaInfo[ empresaid ][ Funcionario3 ], 24, dini_Get( empresas, "Funcionario3" ));
	    format( EmpresaInfo[ empresaid ][ NomeEmpresa ], 64, dini_Get( empresas, "NomeEmpresa" ));
	    format( EmpresaInfo[ empresaid ][ Mensagem ], 64, dini_Get( empresas, "Mensagem" ));
		//
		format( pFile, 128, "Contas/%s.ini", dini_Get( empresas, "Proprietario" ));
	    format( EmpresaInfo[ empresaid ][ Horario ], 12, dini_Get( pFile, "ulHorario" ));
	    format( EmpresaInfo[ empresaid ][ Login ], 12, dini_Get( pFile, "ulData" ));
	    //
		EmpresaInfo[ empresaid ][ Numero ] = dini_Int( empresas, "Numero" );
		EmpresaInfo[ empresaid ][ Preco ] = dini_Int( empresas, "Valor" );
		EmpresaInfo[ empresaid ][ Aberta ] = dini_Int( empresas, "Aberta" );
		EmpresaInfo[ empresaid ][ InteriorID ] = dini_Int( empresas, "Interior" );
		EmpresaInfo[ empresaid ][ InteriorX ] = dini_Float( empresas, "InteriorX" );
		EmpresaInfo[ empresaid ][ InteriorY ] = dini_Float( empresas, "InteriorY" );
		EmpresaInfo[ empresaid ][ InteriorZ ] = dini_Float( empresas, "InteriorZ" );
		EmpresaInfo[ empresaid ][ VirtualWorld ] = dini_Int( empresas, "VirtualWorld" );
	}

	EmpresaInfo[ empresaid ][ PickupX ] = Pickupx;
	EmpresaInfo[ empresaid ][ PickupY ] = Pickupy;
	EmpresaInfo[ empresaid ][ PickupZ ] = Pickupz;

	if( dini_Int( empresas, "Dono" ) == 0 )
	{
	    EmpresaPickup[ empresaid ] = CreatePickup( 1577, 23, Pickupx, Pickupy, Pickupz );
 		format( gstring, sizeof( gstring ), "{00FFFF}%s ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}Subnome {FFE735}%s\n{6F62F6}+Info digite:\n{FFFFFF}/Empresa Info", EmpresaInfo[ empresaid ][ NomeEmp ], EmpresaInfo[ empresaid ][ Numero ], EmpresaInfo[ empresaid ][ Proprietario ], EmpresaInfo[ empresaid ][ EmpresaNome ] );
		EmpresaInfo[ empresaid ][ TxTt ] = Create3DTextLabel( gstring, -1, Pickupx, Pickupy, Pickupz+0.75, 35.0, 0, 1 );
	}
	if( dini_Int( empresas, "Dono" ) == 1 )
	{
	    EmpresaPickup[ empresaid ] = CreatePickup( 1579, 23, Pickupx, Pickupy, Pickupz );
 		format( gstring, sizeof( gstring ), "{00FFFF}%s ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}Subnome {FFE735}%s\n{6F62F6}+Info digite:\n{FFFFFF}/Empresa Info", EmpresaInfo[ empresaid ][ NomeEmp ], EmpresaInfo[ empresaid ][ Numero ], EmpresaInfo[ empresaid ][ Proprietario ], EmpresaInfo[ empresaid ][ EmpresaNome ] );
		EmpresaInfo[ empresaid ][ TxTt ] = Create3DTextLabel( gstring, -1, Pickupx, Pickupy, Pickupz+0.75, 35.0, 0, 1 );
	}
}

stock CreateHouse( casaid, Float:Pickupx, Float:Pickupy, Float:Pickupz, Float:interiorX, Float:interiorY, Float:interiorZ, Interior, cVenda, cPreco, virtualworld, mapicon )
{
	format( hFile, sizeof( hFile ), "Casas/casa%d.ini", casaid );

	if( !fexist( hFile ))
	{
	    dini_Create( hFile );
		CasaInfo[ casaid ][ Numero ] = casaid;
		format( CasaInfo[ casaid ][ Proprietario ], 12, "Ninguem" );
		dini_Set( hFile, "Proprietario", "Ninguem" );
		format( CasaInfo[ casaid ][ Morador ], 12, "Ninguem" );
		dini_Set( hFile, "Morador", "Ninguem" );
 		format( CasaInfo[ casaid ][ Morador2 ], 12, "Ninguem" );
		dini_Set( hFile, "Morador2", "Ninguem" );
  		format( CasaInfo[ casaid ][ Morador3 ], 12, "Ninguem" );
		dini_Set( hFile, "Morador3", "Ninguem" );
		format( CasaInfo[ casaid ][ Login ], 12, "00/00/0000" );
		dini_Set( hFile, "Login", "00/00/0000" );
		format( CasaInfo[ casaid ][ Mensagem ], 12, "Nada" );
		dini_Set( hFile, "Horario", "00:00:00" );
		format( CasaInfo[ casaid ][ Horario ], 12, "00:00:00" );
		dini_Set( hFile, "Mensagem", "Nada" );
		CasaInfo[ casaid ][ PickupX ] = Pickupx;
		CasaInfo[ casaid ][ PickupY ] = Pickupy;
		CasaInfo[ casaid ][ PickupZ ] = Pickupz;
		CasaInfo[ casaid ][ InteriorX ] = interiorX;
		CasaInfo[ casaid ][ InteriorY ] = interiorY;
		CasaInfo[ casaid ][ InteriorZ ] = interiorZ;
		CasaInfo[ casaid ][ InteriorID ] = Interior;
		CasaInfo[ casaid ][ Venda ] = cVenda;
		CasaInfo[ casaid ][ Preco ] = cPreco;
		CasaInfo[ casaid ][ VirtualWorld ] = virtualworld;
		CasaInfo[ casaid ][ Status ] = 0;
        CasaInfo[ casaid ][ MapIcon ] = mapicon;
		dini_IntSet( hFile, "Numero", casaid );
		dini_FloatSet( hFile, "InteriorX", interiorX );
		dini_FloatSet( hFile, "InteriorY", interiorY );
		dini_FloatSet( hFile, "InteriorZ", interiorZ );
		dini_IntSet( hFile, "Interior", Interior );
		dini_IntSet( hFile, "Venda", cVenda );
		dini_IntSet( hFile, "Valor", cPreco );
		dini_IntSet( hFile, "VirtualWorld", virtualworld );
		dini_IntSet( hFile, "Dono", 0 );
		dini_IntSet( hFile, "Status", 0 );
        dini_IntSet( hFile, "MapIcon", mapicon );
        dini_FloatSet( hFile, "X", Pickupx );
        dini_FloatSet( hFile, "Y", Pickupy );
        dini_FloatSet( hFile, "Z", Pickupz );
        dini_IntSet( hFile, "vLiberado", 0 );
        dini_IntSet( hFile, "vM1", 0 );
        dini_IntSet( hFile, "vM2", 0 );
        dini_IntSet( hFile, "vM3", 0 );
        dini_IntSet( hFile, "useCar", 0 );
        printf( "================[ CASA %d CRIADA ]================", casaid );
        printf( "~ Casa %d criada com sucesso !", casaid );
        printf( "================[ CASA %d CRIADA ]================", casaid );
	}
	else
	{
	    format( CasaInfo[ casaid ][ Proprietario ], 24, dini_Get( hFile, "Proprietario" ));
	    format( CasaInfo[ casaid ][ Morador ], 24, dini_Get( hFile, "Morador" ));
	    format( CasaInfo[ casaid ][ Morador2 ], 24, dini_Get( hFile, "Morador2" ));
	    format( CasaInfo[ casaid ][ Morador3 ], 24, dini_Get( hFile, "Morador3" ));
	    format( CasaInfo[ casaid ][ Mensagem ], 64, dini_Get( hFile, "Mensagem" ));
	    format( CasaInfo[ casaid ][ Horario ], 12, dini_Get( hFile, "Horario" ));
	    format( CasaInfo[ casaid ][ Login ], 12, dini_Get( hFile, "Login" ));
		CasaInfo[ casaid ][ Numero ] = dini_Int( hFile, "Numero" );
		CasaInfo[ casaid ][ Venda ] = dini_Int( hFile, "Venda" );
		CasaInfo[ casaid ][ Preco ] = dini_Int( hFile, "Valor" );
		CasaInfo[ casaid ][ Status ] = dini_Int( hFile, "Status" );
		CasaInfo[ casaid ][ InteriorID ] = dini_Int( hFile, "Interior" );
		CasaInfo[ casaid ][ InteriorX ] = dini_Float( hFile, "InteriorX" );
		CasaInfo[ casaid ][ InteriorY ] = dini_Float( hFile, "InteriorY" );
		CasaInfo[ casaid ][ InteriorZ ] = dini_Float( hFile, "InteriorZ" );
		CasaInfo[ casaid ][ VirtualWorld ] = dini_Int( hFile, "VirtualWorld" );
        CasaInfo[ casaid ][ MapIcon ] = dini_Int( hFile, "MapIcon" );
        CasaInfo[ casaid ][ vLiberado ] = dini_Int( hFile, "vLiberado" );
        CasaInfo[ casaid ][ vM1 ] = dini_Int( hFile, "vM1" );
        CasaInfo[ casaid ][ vM2 ] = dini_Int( hFile, "vM2" );
        CasaInfo[ casaid ][ vM3 ] = dini_Int( hFile, "vM3" );
        dini_FloatSet( hFile, "X", Pickupx );
        dini_FloatSet( hFile, "Y", Pickupy );
        dini_FloatSet( hFile, "Z", Pickupz );
	}
	CasaInfo[ casaid ][ PickupX ] = Pickupx;
	CasaInfo[ casaid ][ PickupY ] = Pickupy;
	CasaInfo[ casaid ][ PickupZ ] = Pickupz;

	if( !strcmp( dini_Get( hFile, "Proprietario" ), "Ninguem", true ))
	{
	    CasaPickup[ casaid ] = CreatePickup( 1273, 23, Pickupx, Pickupy, Pickupz );
     	format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {00FF00}Liberada", dini_Int( hFile, "Numero" ));
    	CasaLabel[ casaid ] = Create3DTextLabel( gStr, COLOR_BRANCO, Pickupx, Pickupy, Pickupz + 0.75, 20.0, 0, 1 );
	}
	else if( strcmp( dini_Get( hFile, "Proprietario" ), "Ninguem", false ))
	{
	    CasaPickup[ casaid ] = CreatePickup( 1272, 23, Pickupx, Pickupy, Pickupz );
    	format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {FF0000}Possui Dono(a)", dini_Int( hFile, "Numero" ));
    	CasaLabel[ casaid ] = Create3DTextLabel( gStr, COLOR_BRANCO, Pickupx, Pickupy, Pickupz + 0.75, 20.0, 0, 1 );
	}
}

forward CasaLiberarPorImpostos( casaid );
public CasaLiberarPorImpostos( casaid )
{
	format( hFile, sizeof( hFile ), "Casas/casa%d.ini", casaid );
	format( gFile, sizeof( gFile ), "Contas/%s.ini", CasaInfo[ casaid ][ Proprietario ] );
	new
		str[ 256 ]
	;
	format( str, sizeof( str ), "Casa [ ID %d ] ex-Dono(a): %s - Liberada data: %s às %s - Motivo: IMPOSTOS AT", casaid, CasaInfo[ casaid ][ Proprietario ], Gdata(), Ghora());
    CasasLiberadas( str );
	format( gstring, sizeof( gstring ), "[ INFO ] Casa ID {FFFFFF}%d {00FF00}Liberada por falta de pagar impostos, ex-Dono(a): %s", CasaInfo[ casaid ][ Numero ], CasaInfo[ casaid ][ Proprietario ] );
	SendClientMessageToAll( 0xE86B3FFF, gstring );
	dini_IntSet( gFile, "Casa", -1 );
	dini_IntSet( gFile, "Impostos", 0 );
	dini_IntSet( gFile, "Atrasados", 0 );
	dini_IntSet( gFile, "Spawn", 0 );
	new
		strC[ 128 ]
	;
	if( strcmp( CasaInfo[ casaid ][ Morador ], "Ninguem", false ))
	{
		format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ casaid ][ Morador ] );
		dini_IntSet( strC, "MorandoID", -1 );
		dini_IntSet( strC, "Spawn", 0 );
	}
	if( strcmp( CasaInfo[ casaid ][ Morador2 ], "Ninguem", false ))
	{
		format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ casaid ][ Morador2 ] );
		dini_IntSet( strC, "MorandoID", -1 );
		dini_IntSet( strC, "Spawn", 0 );
	}
	if( strcmp( CasaInfo[ casaid ][ Morador3 ], "Ninguem", false ))
	{
		format( strC, sizeof( strC ), "Contas/%s.ini", CasaInfo[ casaid ][ Morador3 ] );
		dini_IntSet( strC, "MorandoID", -1 );
		dini_IntSet( strC, "Spawn", 0 );
	}
	DestroyPickup( CasaPickup[ casaid ] );
	CasaPickup[ casaid ] = CreatePickup( 1273, 23, CasaInfo[ casaid ][ PickupX ], CasaInfo[ casaid ][ PickupY ], CasaInfo[ casaid ][ PickupZ ] );
	format( CasaInfo[ casaid ][ Proprietario ], 12, "Ninguem" );
	format( CasaInfo[ casaid ][ Morador ], 12, "Ninguem" );
	format( CasaInfo[ casaid ][ Morador2 ], 12, "Ninguem" );
	format( CasaInfo[ casaid ][ Morador3 ], 12, "Ninguem" );
	format( CasaInfo[ casaid ][ Login ], 12, "00/00/0000" );
	format( CasaInfo[ casaid ][ Horario ], 12, "00:00:00" );
	format( CasaInfo[ casaid ][ Mensagem ], 6, "Nada" );
	CasaInfo[ casaid ][ Status ] = 0;
	dini_Set( hFile, "Proprietario", "Ninguem" );
	dini_Set( hFile, "Morador", "Ninguem" );
	dini_Set( hFile, "Morador2", "Ninguem" );
	dini_Set( hFile, "Morador3", "Ninguem" );
	dini_Set( hFile, "Login", "00/00/0000" );
	dini_Set( hFile, "Horario", "00:00:00" );
	dini_Set( hFile, "Mensagem", "Nada" );
	dini_Set( hFile, "Status", "0" );
	dini_Set( hFile, "Dono", "0" );
	dini_Set( hFile, "vNome", "Sem Nome" );
	dini_IntSet( hFile, "CarModel", 0 );
	dini_IntSet( hFile, "Cor1", 0 );
	dini_IntSet( hFile, "Cor2", 0 );
	cInfo[ CasaInfo[ casaid ][ Numero ] ][ CarModel ] = 0;
	cInfo[ CasaInfo[ casaid ][ Numero ] ][ Cor1 ] = 0;
	cInfo[ CasaInfo[ casaid ][ Numero ] ][ Cor2 ] = 0;
	Update3DTextLabelText( cInfo[ CasaInfo[ casaid ][ Numero ] ][ Label ], 0xFFFFFFAA, "   " );
	SetVehicleVirtualWorld( cInfo[ CasaInfo[ casaid ][ Numero ] ][ HouseCar ], 999 );
	format( gStr, sizeof( gStr ), "Casa {F03400}[ {FFFFFF}ID %d {F03400} ] {FFFFFF}- {00FF00}Liberada", CasaInfo[ casaid ][ Numero ] );
	Update3DTextLabelText( CasaLabel[ casaid ], COLOR_BRANCO, gStr );
}

forward CasasLiberadas( string[ ] );
public CasasLiberadas( string[ ] )
{
	new File:var_2;
	format( gstring, sizeof( gstring ), "%s\r\n", string );
	var_2 = fopen( "CasasLiberadas.txt", io_append );
	fwrite( var_2, gstring );
	fclose( var_2 );
}

forward LotoGanhadores( string[ ] );
public LotoGanhadores( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "GanhadoresLoto.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

forward LogPM( string[ ] );
public LogPM( string[ ] )
{
	new
		var_1[ 256 ]
	;
	new
		File:var_2
	;
	format( var_1, sizeof( var_1 ), "%s\r\n", string );
	var_2 = fopen( "LogPM.txt", io_append );
	fwrite( var_2, var_1 );
	fclose( var_2 );
}

stock CreateHouseCar( casaid, modelid, Float:Carx, Float:Cary, Float:Carz, Float:Angulo, cor1, cor2, respawn )
{
	format( hFile, sizeof( hFile ), "Casas/casa%d.ini", casaid );
	if( dini_Int( hFile, "useCar" ) == 0 )
	{
	    dini_IntSet( hFile, "useCar", 1 );
	}
	if( fexist( hFile ))
	{
		if( dini_Int( hFile, "CarModel" ) == 0 )
		{
		    dini_Set( hFile, "vNome", "Sem Nome" );
      		dini_IntSet( hFile, "CarModel", modelid );
		    cInfo[ casaid ][ CarModel ] = modelid;
		    cInfo[ casaid ][ CarX ] = Carx;
			cInfo[ casaid ][ CarY ] = Cary;
			cInfo[ casaid ][ CarZ ] = Carz;
			cInfo[ casaid ][ CarAng ] = Angulo;
			dini_FloatSet( hFile, "CarX", Carx );
			dini_FloatSet( hFile, "CarY", Cary );
			dini_FloatSet( hFile, "CarZ", Carz );
			dini_FloatSet( hFile, "CarAng", Angulo );
			cInfo[ casaid ][ Cor1 ] = cor1;
			cInfo[ casaid ][ Cor2 ] = cor2;
			dini_IntSet( hFile, "Cor1", cor1 );
			dini_IntSet( hFile, "Cor2", cor2 );
			dini_IntSet( hFile, "Respawn", respawn );
			cInfo[ casaid ][ Respawn ] = respawn;
		}
		else
		{
			vHouseRespawn[ cInfo[ casaid ][ HouseCar ] ] = dini_Int( hFile, "Respawn" );
			if( dini_Int( hFile, "newSpawn" ) == 0 )
			{
	  			new
				 	vH_Modelo = dini_Int( hFile, "CarModel" ),
				  	Float:vH_X = dini_Float( hFile, "CarX" ),
					Float:vH_Y = dini_Float( hFile, "CarY" ),
					Float:vH_Z = dini_Float( hFile, "CarZ" ),
					Float:vH_A = dini_Float( hFile, "CarAng" ),
				  	vH_CorID1 = dini_Int( hFile, "Cor1" ),
					vH_CorID2 = dini_Int( hFile, "Cor2" ),
				 	vH_Respawn = vHouseRespawn[ cInfo[ casaid ][ HouseCar ] ]
				;
				cInfo[ casaid ][ HouseCar ] = CreateVehicle( vH_Modelo, vH_X, vH_Y, vH_Z, vH_A, vH_CorID1, vH_CorID2, vH_Respawn );
	   			new
					color = dini_Int( hFile, "vColorID" )
				;
			 	cInfo[ casaid ][ Label ] = Create3DTextLabel( dini_Get( hFile, "vNome" ), SetZonaCorClan( color ), vH_X, vH_Y, vH_Z, 40.0, 0, 1 );
				Attach3DTextLabelToVehicle( cInfo[ casaid ][ Label ], cInfo[ casaid ][ HouseCar ], 0.0, -2.5, 0.5 );
	    	}
	     	else
			{
	  			new
				 	vH_Modelo = dini_Int( hFile, "CarModel" ),
				  	Float:vH_X = dini_Float( hFile, "newCarX" ),
					Float:vH_Y = dini_Float( hFile, "newCarY" ),
					Float:vH_Z = dini_Float( hFile, "newCarZ" ),
					Float:vH_A = dini_Float( hFile, "newCarAng" ),
				  	vH_CorID1 = dini_Int( hFile, "Cor1" ),
					vH_CorID2 = dini_Int( hFile, "Cor2" ),
				 	vH_Respawn = vHouseRespawn[ cInfo[ casaid ][ HouseCar ] ]
				;
				cInfo[ casaid ][ HouseCar ] = CreateVehicle( vH_Modelo, vH_X, vH_Y, vH_Z, vH_A, vH_CorID1, vH_CorID2, vH_Respawn );
	   			new
					color = dini_Int( hFile, "vColorID" )
				;
			 	cInfo[ casaid ][ Label ] = Create3DTextLabel( dini_Get( hFile, "vNome" ), SetZonaCorClan( color ), vH_X, vH_Y, vH_Z, 40.0, 0, 1 );
				Attach3DTextLabelToVehicle( cInfo[ casaid ][ Label ], cInfo[ casaid ][ HouseCar ], 0.0, -2.5, 0.5 );
			}
			new
				veh[ 128 ]
			;
			format( veh, sizeof( veh ), "CarrosTunados/vCasa%d.ini", casaid );
			if( fexist( veh ))
			{
		        cInfo[ casaid ][ t_Cor_1 ] = dini_Int( veh, "Cor1" );
		        cInfo[ casaid ][ t_Cor_2 ] = dini_Int( veh, "Cor2" );
		        cInfo[ casaid ][ t_PaintJob ] = dini_Int( veh, "PaintJob" );
		        cInfo[ casaid ][ t_Nitro ] = dini_Int( veh, "Nitro" );
		        cInfo[ casaid ][ t_Roda ] = dini_Int( veh, "Roda" );
		        cInfo[ casaid ][ t_Spoiler ] = dini_Int( veh, "Spoiler" );
		        cInfo[ casaid ][ t_Hydraulico ] = dini_Int( veh, "Hydraulico" );
				cInfo[ casaid ][ t_ParachoqueDianteiro ] = dini_Int( veh, "ParachoqueDianteiro" );
				cInfo[ casaid ][ t_ParachoqueTraseiro ] = dini_Int( veh, "ParachoqueTraseiro" );
				cInfo[ casaid ][ t_Escapamento ] = dini_Int( veh, "Escapamento" );
				cInfo[ casaid ][ t_Bventr ] = dini_Int( veh, "Bventr" );
				cInfo[ casaid ][ t_Bventl ] = dini_Int( veh, "Bventl" );
				cInfo[ casaid ][ t_Bscoop ] = dini_Int( veh, "Bscoop" );
				cInfo[ casaid ][ t_Rscoop ] = dini_Int( veh, "Rscoop" );
				cInfo[ casaid ][ t_Lskirt ] = dini_Int( veh, "Lskirt" );
				cInfo[ casaid ][ t_Rskirt ] = dini_Int( veh, "Rskirt" );
				cInfo[ casaid ][ t_Base ] = dini_Int( veh, "Base" );
				cInfo[ casaid ][ t_Rbbars ] = dini_Int( veh, "Rbbars" );
				cInfo[ casaid ][ t_Fbbars ] = dini_Int( veh, "Fbbars" );
				cInfo[ casaid ][ t_Lights ] = dini_Int( veh, "Lights" );
	        }
			SetVehicleToRespawn( cInfo[ casaid ][ HouseCar ] );
			vHouse[ cInfo[ casaid ][ HouseCar ] ] = 1;
		}
	}
}

forward NewCarH( casaid );
public NewCarH( casaid )
{
	format( hFile, sizeof( hFile ), "Casas/casa%d.ini", casaid );
	if( cInfo[ casaid ][ NewCar ] == 1 )
	{
        cInfo[ casaid ][ NewCar ] = 0;
        Delete3DTextLabel( cInfo[ casaid ][ Label ] );
        DestroyVehicle( cInfo[ casaid ][ HouseCar ] );
 		new
			color = dini_Int( hFile, "vColorID" )
		;
		if( dini_Int( hFile, "newSpawn" ) == 0 )
		{
	  		cInfo[ casaid ][ HouseCar ] = CreateVehicle( dini_Int( hFile, "CarModel" ), dini_Float( hFile, "CarX" ), dini_Float( hFile, "CarY" ), dini_Float( hFile, "CarZ" ), dini_Float( hFile, "CarAng" ), dini_Int( hFile, "Cor1" ), dini_Int( hFile, "Cor2" ), dini_Int( hFile, "Respawn" ));
            cInfo[ casaid ][ Label ] = Create3DTextLabel( dini_Get( hFile, "vNome" ), SetZonaCorClan( color ), dini_Float( hFile, "CarX" ), dini_Float( hFile, "CarY" ), dini_Float( hFile, "CarZ" ), 40.0, 0, 1 );
		}
	    else
	    {
	  		cInfo[ casaid ][ HouseCar ] = CreateVehicle( dini_Int( hFile, "CarModel" ), dini_Float( hFile, "newCarX" ), dini_Float( hFile, "newCarY" ), dini_Float( hFile, "newCarZ" ), dini_Float( hFile, "newCarAng" ), dini_Int( hFile, "Cor1" ), dini_Int( hFile, "Cor2" ), dini_Int( hFile, "Respawn" ));
	  		cInfo[ casaid ][ Label ] = Create3DTextLabel( dini_Get( hFile, "vNome" ), SetZonaCorClan( color ), dini_Float( hFile, "newCarX" ), dini_Float( hFile, "newCarY" ), dini_Float( hFile, "newCarZ" ), 40.0, 0, 1 );
		}
		SetVehicleToRespawn( cInfo[ casaid ][ HouseCar ] );
		vHouse[ cInfo[ casaid ][ HouseCar ] ] = 1;
		Attach3DTextLabelToVehicle( cInfo[ casaid ][ Label ], cInfo[ casaid ][ HouseCar ], 0.0, -2.5, 0.5 );
	}
}

stock IsValidVehicle( v )
{
    if( GetVehicleModel( v ) < 400 || GetVehicleModel( v ) > 611 ) return false;
        else return true;
}

stock SpawnCasa( playerid )
{
    format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	new
		c = dini_Int( gFile, "Casa" ), m = dini_Int( gFile, "MorandoID" )
	;
	if( c > 0 )
	{
		if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
		{
			SetPlayerPos( playerid, CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ] );
			SetPlayerInterior( playerid, 0 );
			if( MensagemHouse[ playerid ] == 0 )
			{
				format( gStr, sizeof( gStr ), "[ > ] %s sua casa ID %d foi carregada !", PlayerName( playerid ), c );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
        		MensagemHouse[ playerid ] = 1;
			}
  			if( IsCasaIlha( c ))
			{
				TogglePlayerControllable( playerid, false );
				SetTimerEx( "DescongelarIlha", 2000, false, "d", playerid );
				gelarSpawn[ playerid ] = true;
			}
			format( hFile, sizeof( hFile ), "Casas/casa%d.ini", c );

			dini_Set( hFile, "Login", Gdata());
			format( CasaInfo[ c ][ Login ], 12, Gdata());

			dini_Set( hFile, "Horario", Ghora());
			format( CasaInfo[ c ][ Horario ], 12, Ghora());

			return 1;
		}
	}
	else if( m > 0 )
	{
		if( !strcmp( CasaInfo[ m ][ Morador ], PlayerName( playerid ), true ) ||
			!strcmp( CasaInfo[ m ][ Morador2 ], PlayerName( playerid ), true ) ||
			!strcmp( CasaInfo[ m ][ Morador3 ], PlayerName( playerid ), true ))
		{
			SetPlayerPos( playerid, CasaInfo[ m ][ PickupX ], CasaInfo[ m ][ PickupY ], CasaInfo[ m ][ PickupZ ] );
			SetPlayerInterior( playerid, 0 );
			if( MensagemHouse[ playerid ] == 0 )
			{
			    format( gStr, sizeof( gStr ), "[ > ] %s a casa ID %d que você mora foi carregada !", PlayerName( playerid ), m );
				SendClientMessage( playerid, COLOR_AMARELO, gStr );
	         	MensagemHouse[ playerid ] = 1;
			}
   			if( IsCasaIlha( m ))
			{
				TogglePlayerControllable( playerid, false );
				SetTimerEx( "DescongelarIlha", 2000, false, "d", playerid );
				gelarSpawn[ playerid ] = true;
			}
		}
	}
	return 0;
}

forward DescongelarIlha( playerid );
public DescongelarIlha( playerid )
{
	TogglePlayerControllable( playerid, true );
	gelarSpawn[ playerid ] = false;
	new
		c = dini_Int( f( playerid ), "Casa" ), m = dini_Int( f( playerid ), "MorandoID" ), CasaID
	;
	if( c > 0 )
	{
	    CasaID = c;
	}
	else if( m > 0 )
	{
	    CasaID = m;
	}
  	for( new v = 0; v < MAX_VEHICLES; ++v )
	{
        if( IsVehicleInRangeOfPoint( v, 50.0, CasaInfo[ CasaID ][ PickupX ], CasaInfo[ CasaID ][ PickupY ], CasaInfo[ CasaID ][ PickupZ ] ))
		{
			if( !IsVehicleOccupied( v ) && NotTrailerAtached( v )) SetVehicleToRespawn( v );
		}
	}
}

stock IsVehicleInRangeOfPoint(vehicleid, Float:range, Float:x, Float:y, Float:z)
{
    static
        Float:pX, Float:pY, Float:pZ;

    GetVehiclePos(vehicleid, pX, pY, pZ);
    return x - range / 2 < pX > x + range / 2 && y - range / 2 < pY > y + range / 2 && z - range / 2 < pZ > z + range / 2;
}

forward TutoLimparChatPlayer( playerid );
public TutoLimparChatPlayer( playerid )
{
	if( NoTuto[ playerid ] == false )
	{
	    KillTimer( ChatTuto[ playerid ] );
	}
	else if( NoTuto[ playerid ] == true )
	{
		LimparChat( playerid, 150 );
		ChatTuto[ playerid ] = SetTimerEx( "TutoLimparChatPlayer", 1000, false, "d", playerid );
	}
	return 1;
}

forward Float:GetPlayeyEmpresaDistacia( playerid, XERECATORTA );
public Float:GetPlayeyEmpresaDistacia( playerid, XERECATORTA )
{
	new
		Float:Empresa_x,
		Float:Empresa_y,
		Float:Empresa_z,
		Float:Empresa_xx,
		Float:Empresa_yy,
		Float:Empresa_zz
	;
	GetPlayerPos( playerid, Empresa_x, Empresa_y, Empresa_z );
	Empresa_xx = EmpresaInfo[ XERECATORTA ][ PickupX ];
	Empresa_yy = EmpresaInfo[ XERECATORTA ][ PickupY ];
	Empresa_zz = EmpresaInfo[ XERECATORTA ][ PickupZ ];
	return floatsqroot( floatpower( floatabs( floatsub( Empresa_xx, Empresa_x )), 2 )+floatpower( floatabs( floatsub( Empresa_yy, Empresa_y )), 2 )+floatpower( floatabs( floatsub( Empresa_zz, Empresa_z )), 2 ));
}

forward Float:GetPlayeyCasaDistacia( playerid, BUCETA );
public Float:GetPlayeyCasaDistacia( playerid, BUCETA )
{
	new
		Float:Casa_x,
		Float:Casa_y,
		Float:Casa_z,
		Float:Casa_xx,
		Float:Casa_yy,
		Float:Casa_zz
	;
	GetPlayerPos( playerid, Casa_x, Casa_y, Casa_z );
	Casa_xx = CasaInfo[ BUCETA ][ PickupX ];
	Casa_yy = CasaInfo[ BUCETA ][ PickupY ];
	Casa_zz = CasaInfo[ BUCETA ][ PickupZ ];
	return floatsqroot( floatpower( floatabs( floatsub( Casa_xx, Casa_x )), 2 )+floatpower( floatabs( floatsub( Casa_yy, Casa_y )), 2 )+floatpower( floatabs( floatsub( Casa_zz, Casa_z )), 2 ));
}

forward TempoVotacao( );
public TempoVotacao( )
{
	if( vTempo <= 0 )
	{
		SetTimer( "enqueteFinalizar", 1000, false );
	}
	else
	{
		new
			votos[ 1024 ]
		;
		vTempo --;
		format( votos, sizeof( votos ), "~y~~h~Enquete~n~~n~~y~~h~Pergunta: ~w~%s~n~~n~~y~Digite: ~w~/Sim ~y~ou ~w~/Nao~n~~n~Votos: Sim %d - Nao %d", enquetep, vSim, vNao );
		TextDrawSetString( Enquete, votos );
		format( gstring, sizeof( gstring ), "~n~~n~~r~~h~Tempo~n~~n~%d", vTempo );
		TextDrawSetString( ContagemEnquete, gstring );
		SetTimer( "TempoVotacao", 1000, false );
	}
	return 1;
}

forward enqueteFinalizar( );
public enqueteFinalizar( )
{
    enquetep = "Nenhuma";
    VotacaoIniciada = 0;
	TextDrawHideForAll( Enquete );
	TextDrawHideForAll( ContagemEnquete );
	SendClientMessageToAll( 0x33FF00AA, "•~~~~~~~~~~~~~~[ Enquete ]~~~~~~~~~~~~~~•" );
	format( gstring, sizeof( gstring ), "• Foram %d votos para SIM e %d votos para NÃO.", vSim, vNao );
	SendClientMessageToAll( COLOR_AMARELO, gstring );
	if( vSim > vNao ) { SendClientMessageToAll( 0x33CC33AA, "• Á maioria votou em SIM !" ); }
	if( vSim < vNao ) { SendClientMessageToAll( COLOR_ERRO, "• Á maioria votou em NÃO !" ); }
	if( vSim == vNao ) { SendClientMessageToAll( 0xFFFF33AA, "• Tivemos um empate !" ); }
	SendClientMessageToAll( 0x33FF00AA, "•~~~~~~~~~~~~~~[ Enquete ]~~~~~~~~~~~~~~•" );
	vSim = 0;
	vNao = 0;
	foreach(Player, i )
	{
		Votou[ i ] = 0;
	}
	return 1;
}

stock RemoveWeaponSlot( playerid, iWeaponSlot )
{
	new weapons[ 13 ][ 2 ];
    for( new i = 0; i < 13; i++ )
        GetPlayerWeaponData( playerid, i, weapons[ i ][ 0 ], weapons[ i ][ 1 ] );

    weapons[ iWeaponSlot ][ 0 ] = 0;

    ResetPlayerWeapons( playerid );

    for( new i = 0; i < 13; i++ )
        GivePlayerWeapon( playerid, weapons[ i ][ 0 ], weapons[ i ][ 1 ] );

    return 1;
}

stock GetWeaponSlot( weaponid ) // POSTADO POR Hiddos EM  '://forum.sa-mp.com/showpost.php?p=782197&postcount=4'
{
	new slot;
	switch( weaponid )
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}

stock GetPlayerAmmoFromWeapon( playerid, weaponid )
{
    new
		weapon, ammo
	;
    GetPlayerWeaponData( playerid, GetWeaponSlot( weaponid ), weapon, ammo );
    return ammo;
}

forward MsgPizza( playerid );
public MsgPizza( playerid )
{
	if( Pizza_Mensagem[ playerid ] >= 5 )
	{
	    KillTimer( Pizza_Timer[ playerid ] ); KillTimer( Pizza_Timer[ Pizza_PID[ playerid ] ] );
		MensagemFormatada( playerid, -1, "[ x ] Você demorou muito para responder %s e a oferta da pizza foi cancelada !", PlayerName( Pizza_PID[ playerid ] ));
		MensagemFormatada( Pizza_PID[ playerid ], -1, "[ x ] %s demorou para responder e sua oferta foi cancelada.", PlayerName( playerid ));
		Pizza_Oferecido[ Pizza_PID[ playerid ] ] = 0;
		Pizza_IID[ Pizza_PID[ playerid ] ] = -1;
		Pizza_Recebido[ playerid ] = 0;
		Pizza_Mensagem[ playerid ] = 0;
		Pizza_VALOR[ playerid ] = 0;
		Pizza_PID[ playerid ] = -1;
		Pizza_SID[ playerid ] = 0;
		return 1;
	}
	if( Pizza_Mensagem[ playerid ] < 5 )
	{
		MensagemFormatada( playerid, -1, "( ~ ) %s ofereceu pra você uma pizza sabor %s por $%d. ( /pAceitar | /pRecusar )", PlayerName( Pizza_PID[ playerid ] ), PizzaNome( Pizza_SID[ playerid ] ), Pizza_SID[ playerid ] );
		MensagemFormatada( Pizza_PID[ playerid ], -1, "( ~ ) Aguardando a reposta de %s... ( Oferta de Pizza )", PlayerName( playerid ));
		Pizza_Mensagem[ playerid ] ++;	Pizza_Timer[ playerid ] = SetTimerEx( "MsgPizza", 4000, false, "d", playerid );
		return 1;
	}
	return 1;
}

forward LiberarPizza( playerid );
public LiberarPizza( playerid )
{
    Pizza_Oferecido[ playerid ] = 0; SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais pizza." );
	return 1;
}

forward PizzaObjetoff( playerid );
public PizzaObjetoff( playerid )
{
	StopPlayerHoldingObject( playerid );
	return 1;
}

stock PizzaNome( idpizzaid )
{
	new PizaName[ 24 ];
	if( idpizzaid == 1 )	{	PizaName = "Calabresa";	}
	if( idpizzaid == 2 )	{	PizaName = "Mussarela";	}
	if( idpizzaid == 3 )	{	PizaName = "Frango";	}
	if( idpizzaid == 4 )	{	PizaName = "4 Queijos";	}
	if( idpizzaid == 5 )	{	PizaName = "Atum";   	}
	return PizaName;
}
forward LiberarHotdog( playerid );
public LiberarHotdog( playerid )
{
    Hotdog_Oferecido[ playerid ] = 0; SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais Hotdog." );
	return 1;
}

forward HotdogObjetoff( playerid );
public HotdogObjetoff( playerid )
{
	StopPlayerHoldingObject( playerid );
	return 1;
}

stock HotdogNome( idHotdogid )
{
	new DogsName[ 24 ];
	if( idHotdogid == 1 )	{	DogsName = "Salsicha";	}
	if( idHotdogid == 2 )	{	DogsName = "Frango";	}
	if( idHotdogid == 3 )	{	DogsName = "Linguiça";	}
	if( idHotdogid == 4 )	{	DogsName = "Completo";	}
	if( idHotdogid == 5 )	{	DogsName = "Da Casa";	}
	return DogsName;
}
forward LiberarSorvete( playerid );
public LiberarSorvete( playerid )
{
    Sorvete_Oferecido[ playerid ] = 0; SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais Sorvete." );
	return 1;
}

forward SorveteObjetoff( playerid );
public SorveteObjetoff( playerid )
{
	StopPlayerHoldingObject( playerid );
	return 1;
}

stock PlayerNome( idSorveteid )
{
	new SorveteName[ 24 ];
	if( idSorveteid == 1 )	{	SorveteName = "Chocolate";	}
	if( idSorveteid == 2 )	{	SorveteName = "Morango";	}
	if( idSorveteid == 3 )	{	SorveteName = "Coco";	    }
	if( idSorveteid == 4 )	{	SorveteName = "Baunilia";	}
	if( idSorveteid == 5 )	{	SorveteName = "Napolitano";	}
	return SorveteName;
}
forward Curar( playerid );
public Curar( playerid )
{
	if( Cura_Mensagem[ playerid ] >= 5 )
	{
	    KillTimer( Cura_Timer[ playerid ] ); KillTimer( Cura_Timer[ Cura_PID[ playerid ] ] );
		MensagemFormatada( playerid, -1, "[ x ] Você demorou muito para responder %s e a oferta da cura foi cancelada !", PlayerName( Cura_PID[ playerid ] ));
		MensagemFormatada( Cura_PID[ playerid ], -1, "[ x ] %s demorou para responder e sua oferta foi cancelada.", PlayerName( playerid ));
		Cura_Oferecido[ Cura_PID[ playerid ] ] = 0;
		Cura_IID[ Cura_PID[ playerid ] ] = -1;
		Cura_Recebido[ playerid ] = 0;
		Cura_Mensagem[ playerid ] = 0;
		Cura_VALOR[ playerid ] = 0;
		Cura_PID[ playerid ] = -1;
		return 1;
	}
	if( Cura_Mensagem[ playerid ] < 5 )
	{
		MensagemFormatada( playerid, -1, "( ~ ) %s ofereceu cura pra você por $%d. ( /cuAceitar | /cuRecusar )", PlayerName( Cura_PID[ playerid ] ), Cura_VALOR[ playerid ] );
		MensagemFormatada( Cura_PID[ playerid ], -1, "( ~ ) Aguardando a reposta de %s... ( Oferta de Cura )", PlayerName( playerid ));
		Cura_Mensagem[ playerid ] ++;	Cura_Timer[ playerid ] = SetTimerEx( "Curar", 4000, false, "d", playerid );
		return 1;
	}
	return 1;
}

forward LiberarCura( playerid );
public LiberarCura( playerid )
{
    Cura_Oferecido[ playerid ] = 0; SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais cura." );
	return 1;
}

forward Skin( playerid );
public Skin( playerid )
{
	if( _SKIN_Mensagem[ playerid ] >= 5 )
	{
	    KillTimer( _SKIN_Timer[ playerid ] ); KillTimer( _SKIN_Timer[ _SKIN_PID[ playerid ] ] );
		MensagemFormatada( playerid, -1, "[ x ] Você demorou muito para responder %s e a oferta da skin foi cancelada !", PlayerName( _SKIN_PID[ playerid ] ));
		MensagemFormatada( _SKIN_PID[ playerid ], -1, "[ x ] %s demorou para responder e sua oferta foi cancelada.", PlayerName( playerid ));
		_SKIN_Oferecido[ _SKIN_PID[ playerid ] ] = 0;
		_SKIN_IID[ _SKIN_PID[ playerid ] ] = -1;
		_SKIN_Recebido[ playerid ] = 0;
		_SKIN_Mensagem[ playerid ] = 0;
		_SKIN_VALOR[ playerid ] = 0;
		_SKIN_PID[ playerid ] = -1;
		_SKIN_SID[ playerid ] = 0;
		return 1;
	}
	if( _SKIN_Mensagem[ playerid ] < 5 )
	{
		MensagemFormatada( playerid, -1, "( ~ ) %s ofereceu pra você a skin ID %d. ( /sAceitar | /sRecusar )", PlayerName( _SKIN_PID[ playerid ] ), _SKIN_SID[ playerid ] );
		MensagemFormatada( _SKIN_PID[ playerid ], -1, "( ~ ) Aguardando a reposta de %s... ( Oferta de Skin )", PlayerName( playerid ));
		_SKIN_Mensagem[ playerid ] ++;	_SKIN_Timer[ playerid ] = SetTimerEx( "Skin", 4000, false, "d", playerid );
		return 1;
	}
	return 1;
}

forward LiberarSkin( playerid );
public LiberarSkin( playerid )
{
    _SKIN_Oferecido[ playerid ] = 0; SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais skin." );
	return 1;
}

forward Maconha( playerid );
public Maconha( playerid )
{
	if( Maconha_Mensagem[ playerid ] >= 5 )
	{
	    KillTimer( Maconha_Timer[ playerid ] ); KillTimer( Maconha_Timer[ Maconha_PID[ playerid ] ] );
		MensagemFormatada( playerid, -1, "[ x ] Você demorou muito para responder %s e a oferta da maconha foi cancelada !", PlayerName( Maconha_PID[ playerid ] ));
		MensagemFormatada( Maconha_PID[ playerid ], -1, "[ x ] %s demorou para responder e sua oferta foi cancelada.", PlayerName( playerid ));
		Maconha_Oferecido[ Maconha_PID[ playerid ] ] = 0;
		Maconha_IID[ Maconha_PID[ playerid ] ] = -1;
		Maconha_Recebido[ playerid ] = 0;
		Maconha_Mensagem[ playerid ] = 0;
		Maconha_VALOR[ playerid ] = 0;
		Maconha_PID[ playerid ] = -1;
		Maconha_QTD[ playerid ] = 0;
		return 1;
	}
	if( Maconha_Mensagem[ playerid ] < 5 )
	{
		MensagemFormatada( playerid, -1, "( ~ ) %s ofereceu pra você %d parangas de maconha. ( /mAceitar | /mRecusar )", PlayerName( Maconha_PID[ playerid ] ), Maconha_QTD[ playerid ] );
		MensagemFormatada( Maconha_PID[ playerid ], -1, "( ~ ) Aguardando a reposta de %s... ( Oferta de Maconha )", PlayerName( playerid ));
		Maconha_Mensagem[ playerid ] ++;	Maconha_Timer[ playerid ] = SetTimerEx( "Maconha", 4000, false, "d", playerid );
		return 1;
	}
	return 1;
}

forward LiberarMaconha( playerid );
public LiberarMaconha( playerid )
{
    Maconha_Oferecido[ playerid ] = 0; SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais maconha." );
	return 1;
}

forward Farinha( playerid );
public Farinha( playerid )
{
	if( Farinha_Mensagem[ playerid ] >= 5 )
	{
	    KillTimer( Farinha_Timer[ playerid ] ); KillTimer( Farinha_Timer[ Farinha_PID[ playerid ] ] );
		MensagemFormatada( playerid, -1, "[ x ] Você demorou muito para responder %s e a oferta da cocaína foi cancelada !", PlayerName( Farinha_PID[ playerid ] ));
		MensagemFormatada( Farinha_PID[ playerid ], -1, "[ x ] %s demorou para responder e sua oferta foi cancelada.", PlayerName( playerid ));
		Farinha_Oferecido[ Farinha_PID[ playerid ] ] = 0;
		Farinha_IID[ Farinha_PID[ playerid ] ] = -1;
		Farinha_Recebido[ playerid ] = 0;
		Farinha_Mensagem[ playerid ] = 0;
		Farinha_VALOR[ playerid ] = 0;
		Farinha_PID[ playerid ] = -1;
		Farinha_QTD[ playerid ] = 0;
		return 1;
	}
	if( Farinha_Mensagem[ playerid ] < 5 )
	{
		MensagemFormatada( playerid, -1, "( ~ ) %s ofereceu pra você %d pinos de cocaína. ( /fAceitar | /fRecusar )", PlayerName( Farinha_PID[ playerid ] ), Farinha_QTD[ playerid ] );
		MensagemFormatada( Farinha_PID[ playerid ], -1, "( ~ ) Aguardando a reposta de %s... ( Oferta de Cocaína )", PlayerName( playerid ));
		Farinha_Mensagem[ playerid ] ++;	Farinha_Timer[ playerid ] = SetTimerEx( "Farinha", 4000, false, "d", playerid );
		return 1;
	}
	return 1;
}

forward LiberarFarinha( playerid );
public LiberarFarinha( playerid )
{
    Farinha_Oferecido[ playerid ] = 0; SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais cocaína." );
	return 1;
}

forward Crack( playerid );
public Crack( playerid )
{
	if( Crack_Mensagem[ playerid ] >= 5 )
	{
	    KillTimer( Crack_Timer[ playerid ] ); KillTimer( Crack_Timer[ Crack_PID[ playerid ] ] );
		MensagemFormatada( playerid, -1, "[ x ] Você demorou muito para responder %s e a oferta do crack foi cancelada !", PlayerName( Crack_PID[ playerid ] ));
		MensagemFormatada( Crack_PID[ playerid ], -1, "[ x ] %s demorou para responder e sua oferta foi cancelada.", PlayerName( playerid ));
		Crack_Oferecido[ Crack_PID[ playerid ] ] = 0;
		Crack_IID[ Crack_PID[ playerid ] ] = -1;
		Crack_Recebido[ playerid ] = 0;
		Crack_Mensagem[ playerid ] = 0;
		Crack_VALOR[ playerid ] = 0;
		Crack_PID[ playerid ] = -1;
		Crack_QTD[ playerid ] = 0;
		return 1;
	}
	if( Crack_Mensagem[ playerid ] < 5 )
	{
		MensagemFormatada( playerid, -1, "( ~ ) %s ofereceu pra você %d pedras de crack. ( /cAceitar | /cRecusar )", PlayerName( Crack_PID[ playerid ] ), Crack_QTD[ playerid ] );
		MensagemFormatada( Crack_PID[ playerid ], -1, "( ~ ) Aguardando a reposta de %s... ( Oferta de Crack )", PlayerName( playerid ));
		Crack_Mensagem[ playerid ] ++;	Crack_Timer[ playerid ] = SetTimerEx( "Crack", 4000, false, "d", playerid );
		return 1;
	}
	return 1;
}

forward LiberarCrack( playerid );
public LiberarCrack( playerid )
{
    SendClientMessage( playerid, -1, "[ > ] Você já pode vender mais crack." );
    Crack_Oferecido[ playerid ] = 0;
	return 1;
}

stock GetSkinName( skinid )
{
    new returnt[ 64 ];
    switch( skinid )
    {
        case 0  : { format( returnt, sizeof( returnt ),  "Carl CJ Johnson" ); }
        case 1  : { format( returnt, sizeof( returnt ),  "The Truth" ); }
        case 2  : { format( returnt, sizeof( returnt ),  "Maccer" ); }
        case 3  : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 4  : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 5  : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 6  : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 7  : { format( returnt, sizeof( returnt ),  "Taxi Driver/Train Driver" ); }
        case 8  : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 9  : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 10 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 11 : { format( returnt, sizeof( returnt ),  "Casino Worker" ); }
        case 12 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 13 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 14 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 15 : { format( returnt, sizeof( returnt ),  "RS Haul Owner" ); }
        case 16 : { format( returnt, sizeof( returnt ),  "Airport Ground Worker" ); }
        case 17 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 18 : { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 19 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 20 : { format( returnt, sizeof( returnt ),  "Madd Dogg's Manager" ); }
        case 21 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 22 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 23 : { format( returnt, sizeof( returnt ),  "BMXer" ); }
        case 24 : { format( returnt, sizeof( returnt ),  "Madd Dogg Bodyguard" ); }
        case 25 : { format( returnt, sizeof( returnt ),  "Madd Dogg Bodyguard" ); }
        case 26 : { format( returnt, sizeof( returnt ),  "Mountain Climber" ); }
        case 27 : { format( returnt, sizeof( returnt ),  "Builder" ); }
        case 28 : { format( returnt, sizeof( returnt ),  "Drug Dealer" ); }
        case 29 : { format( returnt, sizeof( returnt ),  "Drug Dealer" ); }
        case 30 : { format( returnt, sizeof( returnt ),  "Drug Dealer" ); }
        case 31 : { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 32 : { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 33 : { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 34 : { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 35 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 36 : { format( returnt, sizeof( returnt ),  "Golfer" ); }
        case 37 : { format( returnt, sizeof( returnt ),  "Golfer" ); }
        case 38 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 39 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 40 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 41 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 42 : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 43 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 44 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 45 : { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 46 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 47 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 48 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 49 : { format( returnt, sizeof( returnt ),  "Snakehead ( Da Nang )" ); }
        case 50 : { format( returnt, sizeof( returnt ),  "Mechanic" ); }
        case 51 : { format( returnt, sizeof( returnt ),  "Mountain Biker" ); }
        case 52 : { format( returnt, sizeof( returnt ),  "Mountain Biker" ); }
        case 53 : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 54 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 55 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 56 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 57 : { format( returnt, sizeof( returnt ),  "Feds" ); }
        case 58 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 59 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 60 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 61 : { format( returnt, sizeof( returnt ),  "Pilot" ); }
        case 62 : { format( returnt, sizeof( returnt ),  "Colonel Fuhrberger" ); }
        case 63 : { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 64 : { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 65 : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 66 : { format( returnt, sizeof( returnt ),  "Pool Player" ); }
        case 67 : { format( returnt, sizeof( returnt ),  "Pool Player" ); }
        case 68 : { format( returnt, sizeof( returnt ),  "Priest" ); }
        case 69 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 70 : { format( returnt, sizeof( returnt ),  "Scientist" ); }
        case 71 : { format( returnt, sizeof( returnt ),  "Security Guard" ); }
        case 72 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 73 : { format( returnt, sizeof( returnt ),  "Jethro" ); }
        case 74 : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 75 : { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 76 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 77 : { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 78 : { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 79 : { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 80 : { format( returnt, sizeof( returnt ),  "Boxer" ); }
        case 81 : { format( returnt, sizeof( returnt ),  "Boxer" ); }
        case 82 : { format( returnt, sizeof( returnt ),  "Elvis Wannabe" ); }
        case 83 : { format( returnt, sizeof( returnt ),  "Elvis Wannabe" ); }
        case 84 : { format( returnt, sizeof( returnt ),  "Elvis Wannabe" ); }
        case 85 : { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 86 : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 87 : { format( returnt, sizeof( returnt ),  "Whore" ); }
        case 88 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 89 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 90 : { format( returnt, sizeof( returnt ),  "Whore" ); }
        case 91 : { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 92 : { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 93 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 94 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 95 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 96 : { format( returnt, sizeof( returnt ),  "Jogger" ); }
        case 97 : { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 98 : { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 99 : { format( returnt, sizeof( returnt ),  "Skeelering" ); }
        case 100: { format( returnt, sizeof( returnt ),  "Biker" ); }
        case 101: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 102: { format( returnt, sizeof( returnt ),  "Balla" ); }
        case 103: { format( returnt, sizeof( returnt ),  "Balla" ); }
        case 104: { format( returnt, sizeof( returnt ),  "Balla" ); }
        case 105: { format( returnt, sizeof( returnt ),  "Grove Street Families" ); }
        case 106: { format( returnt, sizeof( returnt ),  "Grove Street Families" ); }
        case 107: { format( returnt, sizeof( returnt ),  "Grove Street Families" ); }
        case 108: { format( returnt, sizeof( returnt ),  "Los Santos Vagos" ); }
        case 109: { format( returnt, sizeof( returnt ),  "Los Santos Vagos" ); }
        case 110: { format( returnt, sizeof( returnt ),  "Los Santos Vagos" ); }
        case 111: { format( returnt, sizeof( returnt ),  "The Russian Mafia" ); }
        case 112: { format( returnt, sizeof( returnt ),  "The Russian Mafia" ); }
        case 113: { format( returnt, sizeof( returnt ),  "The Russian Mafia" ); }
        case 114: { format( returnt, sizeof( returnt ),  "Varios Los Aztecas" ); }
        case 115: { format( returnt, sizeof( returnt ),  "Varios Los Aztecas" ); }
        case 116: { format( returnt, sizeof( returnt ),  "Varios Los Aztecas" ); }
        case 117: { format( returnt, sizeof( returnt ),  "Traid" ); }
        case 118: { format( returnt, sizeof( returnt ),  "Traid" ); }
        case 119: { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 120: { format( returnt, sizeof( returnt ),  "Traid" ); }
        case 121: { format( returnt, sizeof( returnt ),  "Da Nang Boy" ); }
        case 122: { format( returnt, sizeof( returnt ),  "Da Nang Boy" ); }
        case 123: { format( returnt, sizeof( returnt ),  "Da Nang Boy" ); }
        case 124: { format( returnt, sizeof( returnt ),  "The Mafia" ); }
        case 125: { format( returnt, sizeof( returnt ),  "The Mafia" ); }
        case 126: { format( returnt, sizeof( returnt ),  "The Mafia" ); }
        case 127: { format( returnt, sizeof( returnt ),  "The Mafia" ); }
        case 128: { format( returnt, sizeof( returnt ),  "Farm Inhabitant" ); }
        case 129: { format( returnt, sizeof( returnt ),  "Farm Inhabitant" ); }
        case 130: { format( returnt, sizeof( returnt ),  "Farm Inhabitant" ); }
        case 131: { format( returnt, sizeof( returnt ),  "Farm Inhabitant" ); }
        case 132: { format( returnt, sizeof( returnt ),  "Farm Inhabitant" ); }
        case 133: { format( returnt, sizeof( returnt ),  "Farm Inhabitant" ); }
        case 134: { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 135: { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 136: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 137: { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 138: { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 139: { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 140: { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 141: { format( returnt, sizeof( returnt ),  "Office Worker" ); }
        case 142: { format( returnt, sizeof( returnt ),  "Taxi Driver" ); }
        case 143: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 144: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 145: { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 146: { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 147: { format( returnt, sizeof( returnt ),  "Director" ); }
        case 148: { format( returnt, sizeof( returnt ),  "Secretary" ); }
        case 149: { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 150: { format( returnt, sizeof( returnt ),  "Secretary" ); }
        case 151: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 152: { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 153: { format( returnt, sizeof( returnt ),  "Coffee mam'" ); }
        case 154: { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 155: { format( returnt, sizeof( returnt ),  "Well Stacked Pizza" ); }
        case 156: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 157: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 158: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 159: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 160: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 161: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 162: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 163: { format( returnt, sizeof( returnt ),  "Bouncer" ); }
        case 164: { format( returnt, sizeof( returnt ),  "Bouncer" ); }
        case 165: { format( returnt, sizeof( returnt ),  "MIB Agent" ); }
        case 166: { format( returnt, sizeof( returnt ),  "MIB Agent" ); }
        case 167: { format( returnt, sizeof( returnt ),  "Cluckin' Bell" ); }
        case 168: { format( returnt, sizeof( returnt ),  "Food Vendor" ); }
        case 169: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 170: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 171: { format( returnt, sizeof( returnt ),  "Casino Worker" ); }
        case 172: { format( returnt, sizeof( returnt ),  "Hotel Services" ); }
        case 173: { format( returnt, sizeof( returnt ),  "San Fierro Rifa" ); }
        case 174: { format( returnt, sizeof( returnt ),  "San Fierro Rifa" ); }
        case 175: { format( returnt, sizeof( returnt ),  "San Fierro Rifa" ); }
        case 176: { format( returnt, sizeof( returnt ),  "Tatoo Shop" ); }
        case 177: { format( returnt, sizeof( returnt ),  "Tatoo Shop" ); }
        case 178: { format( returnt, sizeof( returnt ),  "Whore" ); }
        case 179: { format( returnt, sizeof( returnt ),  "Ammu-Nation Salesmen" ); }
        case 180: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 181: { format( returnt, sizeof( returnt ),  "Punker" ); }
        case 182: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 183: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 184: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 185: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 186: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 187: { format( returnt, sizeof( returnt ),  "Buisnessman" ); }
        case 188: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 189: { format( returnt, sizeof( returnt ),  "Valet" ); }
        case 190: { format( returnt, sizeof( returnt ),  "Barbara Schternvart" ); }
        case 191: { format( returnt, sizeof( returnt ),  "Helena Wankstein" ); }
        case 192: { format( returnt, sizeof( returnt ),  "Michelle Cannes" ); }
        case 193: { format( returnt, sizeof( returnt ),  "Katie Zhan" ); }
        case 194: { format( returnt, sizeof( returnt ),  "Millie Perkins" ); }
        case 195: { format( returnt, sizeof( returnt ),  "Denise Robinson" ); }
        case 196: { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 197: { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 198: { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 199: { format( returnt, sizeof( returnt ),  "Farm-Town inhabitant" ); }
        case 200: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 201: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 202: { format( returnt, sizeof( returnt ),  "Farmer" ); }
        case 203: { format( returnt, sizeof( returnt ),  "Karate Teacher" ); }
        case 204: { format( returnt, sizeof( returnt ),  "Karate Teacher" ); }
        case 205: { format( returnt, sizeof( returnt ),  "Burger Shot Cashier" ); }
        case 206: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 207: { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 208: { format( returnt, sizeof( returnt ),  "Well Stacked Pizza" ); }
        case 209: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 210: { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 211: { format( returnt, sizeof( returnt ),  "Shop Staff" ); }
        case 212: { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 213: { format( returnt, sizeof( returnt ),  "Weird old man" ); }
        case 214: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 215: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 216: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 217: { format( returnt, sizeof( returnt ),  "Shop Staff" ); }
        case 218: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 219: { format( returnt, sizeof( returnt ),  "Secretary" ); }
        case 220: { format( returnt, sizeof( returnt ),  "Taxi Driver" ); }
        case 221: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 222: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 223: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 224: { format( returnt, sizeof( returnt ),  "Sofori" ); }
        case 225: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 226: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 227: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 228: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 229: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 230: { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 231: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 232: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 233: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 234: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 235: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 236: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 237: { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 238: { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 239: { format( returnt, sizeof( returnt ),  "Homeless" ); }
        case 240: { format( returnt, sizeof( returnt ),  "The D.A" ); }
        case 241: { format( returnt, sizeof( returnt ),  "Afro-American" ); }
        case 242: { format( returnt, sizeof( returnt ),  "Mexican" ); }
        case 243: { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 244: { format( returnt, sizeof( returnt ),  "Whore" ); }
        case 245: { format( returnt, sizeof( returnt ),  "Prostitute" ); }
        case 246: { format( returnt, sizeof( returnt ),  "Whore" ); }
        case 247: { format( returnt, sizeof( returnt ),  "Biker" ); }
        case 248: { format( returnt, sizeof( returnt ),  "Biker" ); }
        case 249: { format( returnt, sizeof( returnt ),  "Pimp" ); }
        case 250: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 251: { format( returnt, sizeof( returnt ),  "Beach Visitor" ); }
        case 252: { format( returnt, sizeof( returnt ),  "Naked Valet" ); }
        case 253: { format( returnt, sizeof( returnt ),  "Bus Driver" ); }
        case 254: { format( returnt, sizeof( returnt ),  "Drug Dealer" ); }
        case 255: { format( returnt, sizeof( returnt ),  "Limo Driver" ); }
        case 256: { format( returnt, sizeof( returnt ),  "Whore" ); }
        case 257: { format( returnt, sizeof( returnt ),  "Whore" ); }
        case 258: { format( returnt, sizeof( returnt ),  "Golfer" ); }
        case 259: { format( returnt, sizeof( returnt ),  "Golfer" ); }
        case 260: { format( returnt, sizeof( returnt ),  "Construction Site" ); }
        case 261: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 262: { format( returnt, sizeof( returnt ),  "Taxi Driver" ); }
        case 263: { format( returnt, sizeof( returnt ),  "Normal Ped" ); }
        case 264: { format( returnt, sizeof( returnt ),  "Clown" ); }
        case 265: { format( returnt, sizeof( returnt ),  "Tenpenny" ); }
        case 266: { format( returnt, sizeof( returnt ),  "Pulaski" ); }
        case 267: { format( returnt, sizeof( returnt ),  "Officer Frank Tenpenny ( Crooked Cop )" ); }
        case 268: { format( returnt, sizeof( returnt ),  "Dwaine" ); }
        case 269: { format( returnt, sizeof( returnt ),  "Melvin Big Smoke Harris" ); }
        case 270: { format( returnt, sizeof( returnt ),  "Sweet " ); }
        case 271: { format( returnt, sizeof( returnt ),  "Lance Ryder Wilson" ); }
        case 272: { format( returnt, sizeof( returnt ),  "Mafia Boss" ); }
        case 273: { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 274: { format( returnt, sizeof( returnt ),  "Paramedic" ); }
        case 275: { format( returnt, sizeof( returnt ),  "Paramedic" ); }
        case 276: { format( returnt, sizeof( returnt ),  "Paramedic" ); }
        case 277: { format( returnt, sizeof( returnt ),  "Firefighter" ); }
        case 278: { format( returnt, sizeof( returnt ),  "Firefighter" ); }
        case 279: { format( returnt, sizeof( returnt ),  "Firefighter" ); }
        case 280: { format( returnt, sizeof( returnt ),  "Los Santos Police" ); }
        case 281: { format( returnt, sizeof( returnt ),  "San Fierro Police" ); }
        case 282: { format( returnt, sizeof( returnt ),  "Las Venturas Police" ); }
        case 283: { format( returnt, sizeof( returnt ),  "Country Sheriff" ); }
        case 284: { format( returnt, sizeof( returnt ),  "San Andreas Police Dept." ); }
        case 285: { format( returnt, sizeof( returnt ),  "B.O.P.E Special Forces" ); }
        case 286: { format( returnt, sizeof( returnt ),  "Federal Agents" ); }
        case 287: { format( returnt, sizeof( returnt ),  "San Andreas Army" ); }
        case 288: { format( returnt, sizeof( returnt ),  "Desert Sheriff" ); }
        case 289: { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
        case 290: { format( returnt, sizeof( returnt ),  "Ken Rosenberg" ); }
        case 291: { format( returnt, sizeof( returnt ),  "Desert Sheriff" ); }
        case 292: { format( returnt, sizeof( returnt ),  "Cesar Vialpando" ); }
        case 293: { format( returnt, sizeof( returnt ),  "Jeffrey OG Loc Cross" ); }
        case 294: { format( returnt, sizeof( returnt ),  "Wu Zi Mu ( Woozie )" ); }
        case 295: { format( returnt, sizeof( returnt ),  "Michael Toreno" ); }
        case 296: { format( returnt, sizeof( returnt ),  "Jizzy B." ); }
        case 297: { format( returnt, sizeof( returnt ),  "Madd Dogg" ); }
        case 298: { format( returnt, sizeof( returnt ),  "Catalina" ); }
        case 299: { format( returnt, sizeof( returnt ),  "Claude" ); }
        default: { format( returnt, sizeof( returnt ),  "Outras Skins" ); }
    }
    return returnt;
}

stock IsValidVehicleHouse( v )
{
    if( vHouse[ v ] == 1 ) return false;
        else return true;
}

stock SetPlayerArmas( playerid )
{
    format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	if( dini_Int( gFile, "GranadaGas" ) == 1 )
	{
		GivePlayerWeapon( playerid, 17, 800 ); // Granada de Gás
	}
	if( dini_Int( gFile, "Granada" ) == 1 )
	{
		GivePlayerWeapon( playerid, 16, 10 ); // Granada
	}
	if( dini_Int( gFile, "GarrafaFogo" ) == 1 )
	{
		GivePlayerWeapon( playerid, 18, 10 ); // Garrafa de Fogo
	}
	if( dini_Int( gFile, "Pistola_9mm" ) == 1 )
	{
		GivePlayerWeapon( playerid, 22, 800 ); // Pistola 9mm
	}
	if( dini_Int( gFile, "Pistola_S9mm" ) == 1 )
	{
		GivePlayerWeapon( playerid, 23, 800 ); // Pistola Silenciosa 9mm
	}
	if( dini_Int( gFile, "Pistola_Emm" ) == 1 )
	{
		GivePlayerWeapon( playerid, 24, 800 ); // Pistola Desert Eagle
	}
	if( dini_Int( gFile, "Shotgun" ) == 1 )
	{
		GivePlayerWeapon( playerid, 25, 800 ); // Shotgun
	}
	if( dini_Int( gFile, "sOfShotgun" ) == 1 )
	{
		GivePlayerWeapon( playerid, 26, 800 ); // Sawn-off Shotgun
	}
	if( dini_Int( gFile, "CombatShotgun" ) == 1 )
	{
		GivePlayerWeapon( playerid, 27, 800 ); // Combat Shotgun
	}
	if( dini_Int( gFile, "MicroSMG" ) == 1 )
	{
		GivePlayerWeapon( playerid, 28, 800 ); // Metralhadora Micro SMG
	}
	if( dini_Int( gFile, "MP5" ) == 1 )
	{
		GivePlayerWeapon( playerid, 29, 800 ); // Metralhadora MP5
	}
	if( dini_Int( gFile, "AK47" ) == 1 )
	{
		GivePlayerWeapon( playerid, 30, 800 ); // Metralhadora AK-47
	}
	if( dini_Int( gFile, "M4" ) == 1 )
	{
		GivePlayerWeapon( playerid, 31, 800 ); // Metralhadora M4
	}
	if( dini_Int( gFile, "Tec9" ) == 1 )
	{
		GivePlayerWeapon( playerid, 32, 800 ); // Metralhadora Tec9
	}
	if( dini_Int( gFile, "Rifle" ) == 1 )
	{
		GivePlayerWeapon( playerid, 33, 800 ); // Rifle
	}
	if( dini_Int( gFile, "Sniper" ) == 1 )
	{
		GivePlayerWeapon( playerid, 34, 800 ); // Sniper Rifle
	}
	if( dini_Int( gFile, "SocoIngles" ) == 1 )
	{
		GivePlayerWeapon( playerid, 1, 800 ); // Soco Inglês
	}
	if( dini_Int( gFile, "TacoGolf" ) == 1 )
	{
		GivePlayerWeapon( playerid, 2, 800 ); // Taco de Golf
	}
	if( dini_Int( gFile, "Cacetete" ) == 1 )
	{
		GivePlayerWeapon( playerid, 3, 800 ); // Cacetete
	}
	if( dini_Int( gFile, "Faca" ) == 1 )
	{
		GivePlayerWeapon( playerid, 4, 800 ); // Faca
	}
	if( dini_Int( gFile, "Baseball" ) == 1 )
	{
		GivePlayerWeapon( playerid, 5, 800 ); // Taco de Baseball
	}
	if( dini_Int( gFile, "Inchada" ) == 1 )
	{
		GivePlayerWeapon( playerid, 6, 800 ); // Inchada
	}
	if( dini_Int( gFile, "TacoBilhar" ) == 1 )
	{
		GivePlayerWeapon( playerid, 7, 800 ); // Taco de Bilhar
	}
	if( dini_Int( gFile, "Katana" ) == 1 )
	{
		GivePlayerWeapon( playerid, 8, 800 ); // Katana
	}
	if( dini_Int( gFile, "SerraEletrica" ) == 1 )
	{
		GivePlayerWeapon( playerid, 9, 800 ); // Serra Eletrica
	}
	if( dini_Int( gFile, "Spray" ) == 1 )
	{
		GivePlayerWeapon( playerid, 41, 800 ); // Spray
	}
	if( dini_Int( gFile, "Extintor" ) == 1 )
	{
		GivePlayerWeapon( playerid, 42, 800 ); // Extintor
	}
	if( dini_Int( gFile, "Camera" ) == 1 )
	{
		GivePlayerWeapon( playerid, 43, 800 ); // Camêra
	}
	if( dini_Int( gFile, "Paraquedas" ) == 1 )
	{
		GivePlayerWeapon( playerid, 46, 800 ); // Paraquedas
	}
	return 1;
}

forward MensagemContrato( playerid );
public MensagemContrato( playerid )
{
	if( ContratoMsg[ playerid ] <= 0 )
	{
	    KillTimer( T_Contratado[ playerid ] );
	    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você demorou muito para responder e o convite foi automaticamente cancelado." );
	    MensagemFormatada( DonoEmpresa[ playerid ], COLOR_ERRO, "[ x ] %s demorou muito para responder e o convite foi automaticamente cancelado.", PlayerName( playerid ));
	    AceitarContrato[ playerid ] = 0;
	    ContratoMsg[ playerid ] = 0;
	    return 1;
	}
	else if( ContratoMsg[ playerid ] > 0 )
	{
	    MensagemFormatada( playerid, COLOR_VERDEFRACO, "[ > ] %s está oferecendo um contrato para você trabalhar na empresa dele. ( /Aceitar | /Recusar )", PlayerName( DonoEmpresa[ playerid ] ));
	    MensagemFormatada( DonoEmpresa[ playerid ], -1, "[ > ] Aguarde a resposta de %s para saber se ele(a) irá aceitar trabalhar na sua empresa.", PlayerName( playerid ));
    	T_Contratado[ playerid ] = SetTimerEx( "MensagemContrato", 3000, false, "d", playerid );
    	ContratoMsg[ playerid ] --;
    	return 1;
	}
	return 1;
}

stock TrailerNoRespawn( vehicleid )
{
    if( IsVehicleOccupied( vehicleid ))
	{
	    foreach(Player, i )
	    {
			if( IsTrailerAttachedToVehicle( GetPlayerVehicleID( i )) )
			{
				new
					Float:gvehx, Float:gvehy, Float:gvehz
				;
				GetPlayerPos( i, gvehx, gvehy, gvehz );

				for( new v = 0; v < MAX_VEHICLES; v++ )
				{
					if( VehicleToPoint( 10.0, i, gvehx, gvehy, gvehz ))
					{
					    return 0;
					}
				}
			}
		}
	}
	return 1;
}

forward VehicleToPoint( Float:radi, vehicleid, Float:x, Float:y, Float:z );
public VehicleToPoint( Float:radi, vehicleid, Float:x, Float:y, Float:z )
{
	new
		Float:oldposx, Float:oldposy, Float:oldposz,
		Float:tempposx, Float:tempposy, Float:tempposz
	;
	GetVehiclePos( vehicleid, oldposx, oldposy, oldposz );
	tempposx = ( oldposx -x );
	tempposy = ( oldposy -y );
	tempposz = ( oldposz -z );
	if(( ( tempposx < radi ) && ( tempposx > -radi )) && (( tempposy < radi ) && ( tempposy > -radi )) && (( tempposz < radi ) && ( tempposz > -radi )) )
	{
		return 1;
	}
	return 0;
}

forward TempoRotaBus( playerid );
public TempoRotaBus( playerid )
{
    if( tempoBus[ playerid ] <= 0 )
    {
        GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~~h~Concluido~n~~y~~h~Proximo ponto.", 2000, 5 );
        TogglePlayerControllable( playerid, true );
        CheckPontoBus( playerid );
        return 1;
    }
	if( tempoBus[ playerid ] > 0 )
	{
	    tempoBus[ playerid ] --;
	    timerBus[ playerid ] = SetTimerEx( "TempoRotaBus", 1000, false, "d", playerid );
        TogglePlayerControllable( playerid, false );
        GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~Aguarde...", 1000, 5 );
        return 1;
	}
	return 1;
}

forward CheckPontoBus( playerid );
public CheckPontoBus( playerid )
{
	if( RotaBus[ playerid ] <= 0 )
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 1." );
		RotaBus[ playerid ] = 1;
		SetPlayerMapIcon( playerid, 90, 2256.3203,-1661.4934,15.3698, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 1 && PlayerToPoint( 4.0, playerid, 2256.3203,-1661.4934,15.3698 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 2." );
  		RotaBus[ playerid ] = 2;
  		SetPlayerMapIcon( playerid, 90, 2115.1814,-1104.6848,25.2017, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 2 && PlayerToPoint( 4.0, playerid, 2115.1814,-1104.6848,25.2017 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 3." );
  		RotaBus[ playerid ] = 3;
  		SetPlayerMapIcon( playerid, 90, 1621.5017,-1157.4521,24.0429, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 3 && PlayerToPoint( 4.0, playerid, 1621.5017,-1157.4521,24.0429 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 4." );
  		RotaBus[ playerid ] = 4;
  		SetPlayerMapIcon( playerid, 90, 1526.3484,-1656.8674,13.4729, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 4 && PlayerToPoint( 4.0, playerid, 1526.3484,-1656.8674,13.4729 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 5." );
  		RotaBus[ playerid ] = 5;
  		SetPlayerMapIcon( playerid, 90, 1544.2247,-1735.4967,13.4814, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 5 && PlayerToPoint( 4.0, playerid, 1544.2247,-1735.4967,13.4814 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 6." );
  		RotaBus[ playerid ] = 6;
  		SetPlayerMapIcon( playerid, 90, 1752.8140,-1683.3641,13.4934, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 6 && PlayerToPoint( 4.0, playerid, 1752.8140,-1683.3641,13.4934 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 7." );
		RotaBus[ playerid ] = 7;
		SetPlayerMapIcon( playerid, 90, 1818.4862,-1669.9175,13.4754, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 7 && PlayerToPoint( 4.0, playerid, 1818.4862,-1669.9175,13.4754 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 8." );
		RotaBus[ playerid ] = 8;
		SetPlayerMapIcon( playerid, 90, 1917.3300,-1755.5229,13.4842, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
 	else if( RotaBus[ playerid ] == 8 && PlayerToPoint( 4.0, playerid, 1917.3300,-1755.5229,13.4842 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 9." );
		RotaBus[ playerid ] = 9;
		SetPlayerMapIcon( playerid, 90, 1250.3429,-1848.7618,13.4829, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 9 && PlayerToPoint( 4.0, playerid, 1250.3429,-1848.7618,13.4829 )) // Agência
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de ida número 10 ponto final para o retorno." );
		RotaBus[ playerid ] = 10;
		SetPlayerMapIcon( playerid, 90, 825.0601,-1980.0784,12.9687, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 10 && PlayerToPoint( 4.0, playerid, 825.0601,-1980.0784,12.9687 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de agora é de volta número 1." );
		RotaBus[ playerid ] = 11;
		GameTextForPlayer( playerid, "~h~~y~RETORNO ~<~", 1000, 0 );
		SetPlayerMapIcon( playerid, 90, 847.7102,-2040.0093,12.9671, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	/* Volta */
	else if( RotaBus[ playerid ] == 11 && PlayerToPoint( 4.0, playerid, 847.7102,-2040.0093,12.9671 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 2." );
		RotaBus[ playerid ] = 12;
		SetPlayerMapIcon( playerid, 90, 1243.0824,-1855.4192,13.4824, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 12 && PlayerToPoint( 4.0, playerid, 1243.0824,-1855.4192,13.4824 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 3." );
		RotaBus[ playerid ] = 13;
		SetPlayerMapIcon( playerid, 90, 1926.1702,-1749.0797,13.4911, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 13 && PlayerToPoint( 4.0, playerid, 1926.1702,-1749.0797,13.4911 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 4." );
		RotaBus[ playerid ] = 14;
		SetPlayerMapIcon( playerid, 90, 1824.9238,-1677.8073,13.4836, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 14 && PlayerToPoint( 4.0, playerid, 1824.9238,-1677.8073,13.4836 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 5." );
		RotaBus[ playerid ] = 15;
		SetPlayerMapIcon( playerid, 90, 1747.0201,-1671.4779,13.4862, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 15 && PlayerToPoint( 4.0, playerid, 1747.0201,-1671.4779,13.4862 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 6." );
		RotaBus[ playerid ] = 16;
		SetPlayerMapIcon( playerid, 90, 1561.2845,-1729.1694,13.4715, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
 	else if( RotaBus[ playerid ] == 16 && PlayerToPoint( 4.0, playerid, 1561.2845,-1729.1694,13.4715 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 7." );
		RotaBus[ playerid ] = 17;
		SetPlayerMapIcon( playerid, 90, 1532.6726,-1664.8820,13.4726, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 17 && PlayerToPoint( 4.0, playerid, 1532.6726,-1664.8820,13.4726 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 8." );
		RotaBus[ playerid ] = 18;
		SetPlayerMapIcon( playerid, 90, 1611.8562,-1164.1149,24.0053, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 18 && PlayerToPoint( 4.0, playerid, 1611.8562,-1164.1149,24.0053 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 9." );
		RotaBus[ playerid ] = 19;
		SetPlayerMapIcon( playerid, 90, 2106.2905,-1109.0166,25.1599, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 19 && PlayerToPoint( 4.0, playerid, 2106.2905,-1109.0166,25.1599 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima parada de retorno número 10." );
		RotaBus[ playerid ] = 20;
		SetPlayerMapIcon( playerid, 90, 2268.6394,-1655.6854,15.2715, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaBus[ playerid ] == 20 && PlayerToPoint( 4.0, playerid, 2268.6394,-1655.6854,15.2715 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_MOTORISTABUS, "[ > ] Próxima rota final, volte para área dos Motoristas de Ônibus." );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Próxima parada de retorno FINAL." );
		RotaBus[ playerid ] = 21;
		SetPlayerMapIcon( playerid, 90, 2278.4102, -2329.2820, 13.5469, 5, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	return 1;
}


stock CheckPontoBusPlayer( playerid )
{
	if( RotaBus[ playerid ] == 1 && !PlayerToPoint( 4.0, playerid, 2256.3203,-1661.4934,15.3698 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 1 !" );
	}
	else if( RotaBus[ playerid ] == 2 && !PlayerToPoint( 4.0, playerid, 2115.1814,-1104.6848,25.2017 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 2 !" );
	}
	else if( RotaBus[ playerid ] == 3 && !PlayerToPoint( 4.0, playerid, 1621.5017,-1157.4521,24.0429 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 3 !" );
	}
	else if( RotaBus[ playerid ] == 4 && !PlayerToPoint( 4.0, playerid, 1526.3484,-1656.8674,13.4729 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 4 !" );
	}
	else if( RotaBus[ playerid ] == 5 && !PlayerToPoint( 4.0, playerid, 1544.2247,-1735.4967,13.4814 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 5 !" );
	}
	else if( RotaBus[ playerid ] == 6 && !PlayerToPoint( 4.0, playerid, 1752.8140,-1683.3641,13.4934 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 6 !" );
	}
	else if( RotaBus[ playerid ] == 7 && !PlayerToPoint( 4.0, playerid, 1818.4862,-1669.9175,13.4754 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 7 !" );
	}
 	else if( RotaBus[ playerid ] == 8 && !PlayerToPoint( 4.0, playerid, 1917.3300,-1755.5229,13.4842 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 8 !" );
	}
	else if( RotaBus[ playerid ] == 9 && !PlayerToPoint( 4.0, playerid, 1250.3429,-1848.7618,13.4829 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 9 !" );
	}
	else if( RotaBus[ playerid ] == 10 && !PlayerToPoint( 4.0, playerid, 825.0601,-1980.0784,12.9687 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 10 !" );
	}
	else if( RotaBus[ playerid ] == 11 && !PlayerToPoint( 4.0, playerid, 847.7102,-2040.0093,12.9671 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 12 && !PlayerToPoint( 4.0, playerid, 1243.0824,-1855.4192,13.4824 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 13 && !PlayerToPoint( 4.0, playerid, 1926.1702,-1749.0797,13.4911 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 14 && !PlayerToPoint( 4.0, playerid, 1824.9238,-1677.8073,13.4836 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 15 && !PlayerToPoint( 4.0, playerid, 1747.0201,-1671.4779,13.4862 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
 	else if( RotaBus[ playerid ] == 16 && !PlayerToPoint( 4.0, playerid, 1561.2845,-1729.1694,13.4715 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 17 && !PlayerToPoint( 4.0, playerid, 1532.6726,-1664.8820,13.4726 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 18 && !PlayerToPoint( 4.0, playerid, 1611.8562,-1164.1149,24.0053 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 19 && !PlayerToPoint( 4.0, playerid, 2106.2905,-1109.0166,25.1599 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaBus[ playerid ] == 20 && !PlayerToPoint( 4.0, playerid, 2268.6394,-1655.6854,15.2715 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else
	{
	    tempoBus[ playerid ] = 5;
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Liberado aguarde..." );
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~Aguarde...", 1000, 5 );
		timerBus[ playerid ] = SetTimerEx( "TempoRotaBus", 1000, false, "d", playerid );
		TogglePlayerControllable( playerid, false );
	}
}

forward TempoRotaLixo( playerid );
public TempoRotaLixo( playerid )
{
    if( tempoLixo[ playerid ] <= 0 )
    {
        GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~~h~Concluido~n~~y~~h~Proxima cesta.", 2000, 5 );
        TogglePlayerControllable( playerid, true );
        CheckPontoLixo( playerid );
        return 1;
    }
	if( tempoLixo[ playerid ] > 0 )
	{
	    tempoLixo[ playerid ] --;
	    timerLixo[ playerid ] = SetTimerEx( "TempoRotaLixo", 1000, false, "d", playerid );
        TogglePlayerControllable( playerid, false );
        GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~Aguarde...", 1000, 5 );
        return 1;
	}
	return 1;
}

forward CheckPontoLixo( playerid );
public CheckPontoLixo( playerid )
{
	if( RotaLixo[ playerid ] <= 0 )
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 1." );
		RotaLixo[ playerid ] = 1;
		SetPlayerMapIcon( playerid, 90, 2490.3000,-1682.5000,13.3000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 1 && PlayerToPoint( 4.0, playerid, 2490.3000,-1682.5000,13.3000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 2." );
  		RotaLixo[ playerid ] = 2;
  		SetPlayerMapIcon( playerid, 90, 2183.6999,-1683.1999,13.8000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 2 && PlayerToPoint( 4.0, playerid, 2183.6999,-1683.1999,13.8000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 3." );
  		RotaLixo[ playerid ] = 3;
  		SetPlayerMapIcon( playerid, 90, 2119.6999,-1748.0999,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 3 && PlayerToPoint( 4.0, playerid, 2119.6999,-1748.0999,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 4." );
  		RotaLixo[ playerid ] = 4;
  		SetPlayerMapIcon( playerid, 90, 1804.8000,-1728.5999,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 4 && PlayerToPoint( 4.0, playerid, 1804.8000,-1728.5999,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 5." );
  		RotaLixo[ playerid ] = 5;
  		SetPlayerMapIcon( playerid, 90, 1293.4000,-1834.3000,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 5 && PlayerToPoint( 4.0, playerid, 1293.4000,-1834.3000,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 6." );
  		RotaLixo[ playerid ] = 6;
  		SetPlayerMapIcon( playerid, 90, 921.5999,-1728.0000,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 6 && PlayerToPoint( 4.0, playerid, 921.5999,-1728.0000,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 7." );
		RotaLixo[ playerid ] = 7;
		SetPlayerMapIcon( playerid, 90, 946.0999,-1244.9000,16.1000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 7 && PlayerToPoint( 4.0, playerid, 946.0999,-1244.9000,16.1000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 8." );
		RotaLixo[ playerid ] = 8;
		SetPlayerMapIcon( playerid, 90, 1189.6999,-1043.0999,31.7000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
 	else if( RotaLixo[ playerid ] == 8 && PlayerToPoint( 4.0, playerid, 1189.6999,-1043.0999,31.7000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 9." );
		RotaLixo[ playerid ] = 9;
		SetPlayerMapIcon( playerid, 90, 1899.6999,-1139.6999,24.2999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 9 && PlayerToPoint( 4.0, playerid, 1899.6999,-1139.6999,24.2999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 10." );
		RotaLixo[ playerid ] = 10;
		SetPlayerMapIcon( playerid, 90, 2899.6000,-1490.0999,10.8999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 10 && PlayerToPoint( 4.0, playerid, 2899.6000,-1490.0999,10.8999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 11." );
		RotaLixo[ playerid ] = 11;
		SetPlayerMapIcon( playerid, 90, 2766.0000,-1965.5000,13.3000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	/* Volta */
	else if( RotaLixo[ playerid ] == 11 && PlayerToPoint( 4.0, playerid, 2766.0000,-1965.5000,13.3000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 12." );
		RotaLixo[ playerid ] = 12;
		SetPlayerMapIcon( playerid, 90, 2658.1000,-2000.1999,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 12 && PlayerToPoint( 4.0, playerid, 2658.1000,-2000.1999,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 13." );
		RotaLixo[ playerid ] = 13;
		SetPlayerMapIcon( playerid, 90, 2657.6000,-2007.8000,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 13 && PlayerToPoint( 4.0, playerid, 2657.6000,-2007.8000,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 14." );
		RotaLixo[ playerid ] = 14;
		SetPlayerMapIcon( playerid, 90, 2433.1999,-1928.6999,13.3000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 14 && PlayerToPoint( 4.0, playerid, 2433.1999,-1928.6999,13.3000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 15." );
		RotaLixo[ playerid ] = 15;
		SetPlayerMapIcon( playerid, 90, 2346.1000,-1968.3000,13.3000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 15 && PlayerToPoint( 4.0, playerid, 2346.1000,-1968.3000,13.3000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 16." );
		RotaLixo[ playerid ] = 16;
		SetPlayerMapIcon( playerid, 90, 2262.1999,-1890.4000,13.3000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
 	else if( RotaLixo[ playerid ] == 16 && PlayerToPoint( 4.0, playerid, 2262.1999,-1890.4000,13.3000 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 17." );
		RotaLixo[ playerid ] = 17;
		SetPlayerMapIcon( playerid, 90, 2052.8999,-1928.4000,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 17 && PlayerToPoint( 4.0, playerid, 2052.8999,-1928.4000,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 18." );
		RotaLixo[ playerid ] = 18;
		SetPlayerMapIcon( playerid, 90, 1898.8000,-2048.6999,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 18 && PlayerToPoint( 4.0, playerid, 1898.8000,-2048.6999,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 19." );
		RotaLixo[ playerid ] = 19;
		SetPlayerMapIcon( playerid, 90, 1701.5000,-2109.1000,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 19 && PlayerToPoint( 4.0, playerid, 1701.5000,-2109.1000,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Rota iniciada siga a rota de acordo com os pontos." );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima parada cesta número 20." );
		RotaLixo[ playerid ] = 20;
		SetPlayerMapIcon( playerid, 90, 1877.0999,-2170.3999,13.3999, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	else if( RotaLixo[ playerid ] == 20 && PlayerToPoint( 4.0, playerid, 1877.0999,-2170.3999,13.3999 ))
	{
		PlayerPlaySound( playerid, 1057, 0.0, 0.0, 10.0 );
		SendClientMessage( playerid, COLOR_TERRORISTA, "[ > ] Próxima rota final, volte para área dos(as) Lixeiros(as)." );
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Ultima parada área dos(as) Lixeiros(as)." );
		RotaLixo[ playerid ] = 21;
		SetPlayerMapIcon( playerid, 90, 2211.0000,-2237.8000,13.5000, 37, 0, MAPICON_GLOBAL_CHECKPOINT );
	}
	return 1;
}

stock CheckPontoLixoPlaye( playerid )
{
	if( RotaLixo[ playerid ] == 1 && !PlayerToPoint( 4.0, playerid, 2490.3000,-1682.5000,13.3000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 1 !" );
	}
	else if( RotaLixo[ playerid ] == 2 && !PlayerToPoint( 4.0, playerid, 2183.6999,-1683.1999,13.8000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 2 !" );
	}
	else if( RotaLixo[ playerid ] == 3 && !PlayerToPoint( 4.0, playerid, 2119.6999,-1748.0999,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 3 !" );
	}
	else if( RotaLixo[ playerid ] == 4 && !PlayerToPoint( 4.0, playerid, 1804.8000,-1728.5999,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 4 !" );
	}
	else if( RotaLixo[ playerid ] == 5 && !PlayerToPoint( 4.0, playerid, 1293.4000,-1834.3000,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 5 !" );
	}
	else if( RotaLixo[ playerid ] == 6 && !PlayerToPoint( 4.0, playerid, 921.5999,-1728.0000,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 6 !" );
	}
	else if( RotaLixo[ playerid ] == 7 && !PlayerToPoint( 4.0, playerid, 946.0999,-1244.9000,16.1000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 7 !" );
	}
 	else if( RotaLixo[ playerid ] == 8 && !PlayerToPoint( 4.0, playerid, 1189.6999,-1043.0999,31.7000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 8 !" );
	}
	else if( RotaLixo[ playerid ] == 9 && !PlayerToPoint( 4.0, playerid, 1899.6999,-1139.6999,24.2999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 9 !" );
	}
	else if( RotaLixo[ playerid ] == 10 && !PlayerToPoint( 4.0, playerid, 2899.6000,-1490.0999,10.8999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número 10 !" );
	}
	else if( RotaLixo[ playerid ] == 11 && !PlayerToPoint( 4.0, playerid, 2766.0000,-1965.5000,13.3000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 12 && !PlayerToPoint( 4.0, playerid, 2658.1000,-2000.1999,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 13 && !PlayerToPoint( 4.0, playerid, 2657.6000,-2007.8000,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 14 && !PlayerToPoint( 4.0, playerid, 2433.1999,-1928.6999,13.3000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 15 && !PlayerToPoint( 4.0, playerid, 2346.1000,-1968.3000,13.3000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
 	else if( RotaLixo[ playerid ] == 16 && !PlayerToPoint( 4.0, playerid, 2262.1999,-1890.4000,13.3000 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 17 && !PlayerToPoint( 4.0, playerid, 2052.8999,-1928.4000,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 18 && !PlayerToPoint( 4.0, playerid, 1898.8000,-2048.6999,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 19 && !PlayerToPoint( 4.0, playerid, 1701.5000,-2109.1000,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else if( RotaLixo[ playerid ] == 20 && !PlayerToPoint( 4.0, playerid, 1877.0999,-2170.3999,13.3999 ))
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você não está no ponto número  !" );
	}
	else
	{
	    tempoLixo[ playerid ] = 5;
		SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Liberado aguarde..." );
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~p~Aguarde...", 1000, 5 );
		timerLixo[ playerid ] = SetTimerEx( "TempoRotaLixo", 1000, false, "d", playerid );
		TogglePlayerControllable( playerid, false );
	}
}
/*
stock IsValidNick( nick[ ] ) // By: Drakon
{
	for( new i; nick[ i ]; ++i ) switch( nick[ i ] )
	{
		case 'A' .. 'Z', 'a' .. 'z', '_', '[ ', ' ]', '( ', ' )', '.', '$', '@', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0': continue;
		default: return false;
	}
	return true;
}*/

stock IsValidNick( nick[ ] ) // By: Drakon
{
	for( new i; nick[ i ]; ++i ) switch( nick[ i ] )
	{
		case 'A' .. 'Z', 'a' .. 'z', '_', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0': continue;
		default: return false;
	}
	return true;
}

stock IsValidFrase( nick[ ] )
{
	for( new i; nick[ i ]; ++i ) switch( nick[ i ] )
	{
		case 'A' .. 'Z', 'a' .. 'z', ' ': continue;
		default: return false;
	}
	return true;
}

stock IsValidNickClan( nick[ ] )
{
	for( new i; nick[ i ]; ++i ) switch( nick[ i ] )
	{
		case 'A' .. 'Z', 'a' .. 'z', '_', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ': continue;
		default: return false;
	}
	return true;
}

stock NotTrailerAtached( vehicle )
{
    foreach(Player, i )
    {
        new
			v = GetPlayerVehicleID( i )
		;
        if( IsPlayerInAnyVehicle( i ) && GetVehicleModel( v ) == 515 )
        {
			if( vehicle == GetVehicleTrailer( GetPlayerVehicleID( i )) )
			{
				return 0;
			}
		}
	}
	return 1;
}

forward OcultaLevel( playerid );
public OcultaLevel( playerid )
{
    TextDrawHideForPlayer( playerid, LevelEXP[ playerid ] );
	return 1;
}

stock minrand( min, max ) // By Alex "Y_Less" Cole
{
    return random( max - min ) + min;
}

forward TempoVolta( playerid );
public TempoVolta( playerid )
{
	if( ParticipandoEvento[ playerid ] == 1 )
	{
	    if( Tempo_Volta[ playerid ] <= 0 )
	    {
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você foi desclassificado do evento !" );
			KillTimer( Volta[ playerid ] );
			SetPlayerPos( playerid, 1227.4470,-1817.2300,16.5938 );
			SetCameraBehindPlayer( playerid );
			SetPlayerCheckPoint[ playerid ] = 0; ParticipandoEvento[ playerid ] = 0; vOcupou[ playerid ] = -1;
			DisablePlayerRaceCheckpoint( playerid );
			TextDrawHideForPlayer( playerid, text_Top5[ 0 ] );
			TextDrawHideForPlayer( playerid, text_Top5[ 1 ] );
			TogglePlayerControllable( playerid, true );
	        return 1;
	    }
		if( Tempo_Volta[ playerid ] > 0 && Tempo_Volta[ playerid ] <= 30 )
		{
		    Tempo_Volta[ playerid ] --;
		    Volta[ playerid ] = SetTimerEx( "TempoVolta", 1000, false, "d", playerid );
		    format( gStr, sizeof( gStr ), "~n~~n~~n~~r~~h~Volte para o veiculo~n~~y~~h~Tempo %d", Tempo_Volta[ playerid ] );
			GameTextForPlayer( playerid, gStr, 1000, 5 );
		}
	}
	return 1;
}

forward OnPlayerRaceCheckpoint( playerid, CPMaisMais );
public OnPlayerRaceCheckpoint( playerid, CPMaisMais )
{
	new
		CheckNormal
	;
	if( TipoCheckPoint == 1 )
	{
		CheckNormal = 0;
	}
	else if( TipoCheckPoint == 2 )
	{
		CheckNormal = 3;
	}
	if( CPMaisMais == UltimoCP-1 )
	{
		SetPlayerRaceCheckpoint( playerid, 1, CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 0 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 1 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 2 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 0 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 1 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 2 ], 8.0 );
	}
 	else
 	{
	 	SetPlayerRaceCheckpoint( playerid, CheckNormal, CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 0 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 1 ], CheckPoint[ SetPlayerCheckPoint[ playerid ] ][ 2 ], CheckPoint[ SetPlayerCheckPoint[ playerid ]+1 ][ 0 ], CheckPoint[ SetPlayerCheckPoint[ playerid ]+1 ][ 1 ], CheckPoint[ SetPlayerCheckPoint[ playerid ]+1 ][ 2 ], 7.0 );
	}
	return 1;
}

forward eContageme( );
public eContageme( )
{
    foreach(Player, i )
    {
		if( ParticipandoEvento[ i ] == 1 )
		{
			if( ContagemRegressiva == 0 )
			{
			   	T_AntBug = -1;
				format( gStr, sizeof( gStr ), "%s", "~r~~h~VAI~w~! ~r~~h~VAI~w~! ~r~~h~VAI~w~!" );
				TextDrawSetString( TextNumero, gStr );
				T_Rank = SetTimer( "RankEvento", 1000, true );
				TextDrawShowForAll( TextNumero );
				PlayerPlaySound( i, 1057, 0.0, 0.0, 0.0 );
				SetCameraBehindPlayer( i );
			}
			else
			{
				format( gStr, sizeof( gStr ), "~w~...~y~~h~%d~w~...", ContagemRegressiva );
				TextDrawSetString( TextNumero, gStr );
				TextDrawShowForAll( TextNumero );
				ContagemRegressiva --;
				SetTimer( "eContageme", 1000, false );
				PlayerPlaySound( i, 1056, 0.0, 0.0, 0.0 );
				SetPlayerCamera( i );
			}
			return 1;
		}
	}
	return 1;
}

forward CongelarPlayers( );
public CongelarPlayers( )
{
	if( T_AntBug > 0 )
	{
	 	foreach(Player, i )
	 	{
			if( ParticipandoEvento[ i ] == 1 )
			{
		  		TogglePlayerControllable( i, false );
    			SetPlayerCamera( i );
			}
	    }
		SetTimer( "CongelarPlayers", 1000, false );
	}
	if( T_AntBug < 0 || T_AntBug == -1 )
	{
   		foreach(Player, i )
   		{
			if( ParticipandoEvento[ i ] == 1 )
			{
		    	TogglePlayerControllable( i, true );
		    	SetCameraBehindPlayer( i );
			}
		}
		TextDrawHideForAll( TextNumero );
		SetTimer( "ReprandoVeiculos", 1000, false );
	}
	return 1;
}

forward ReprandoVeiculos( );
public ReprandoVeiculos( )
{
    if( EventoCriado == 0 )
    {
        return 1;
    }
    if( EventoCriado == 1 )
    {
		foreach(Player, i )
		{
			if( ParticipandoEvento[ i ] == 1 )
			{
				if( IsPlayerInAnyVehicle( i ))
				{
					SetVehicleHealth( GetPlayerVehicleID( i ), 1000 );
				  	RepairVehicle( GetPlayerVehicleID( i ));
				}
			}
		}
		SetTimer( "ReprandoVeiculos", 1000, false );
	}
	return 1;
}

forward RankEvento();
public RankEvento()
{
	new
		playerScores[ MAX_PLAYERS ][ rankingEnum ],
		index
	;
	for( new i; i != MAX_PLAYERS; ++i )
	{
		if( IsPlayerConnected( i ) && !IsPlayerNPC( i ))
		{
			playerScores[ index ][ player_Score ] = SetPlayerCheckPoint[ i ];
			playerScores[ index++ ][ player_ID ] = i;
		}
	}
	GetPlayerHighestScores( playerScores, 0, index );
	new
		score_Text[ 256 ] = "~n~",
		player_Name[ 20 ]
	;
	for( new i; i < 5; ++i )
	{
		if( i < index )
		{
			GetPlayerName( playerScores[ i ][ player_ID ], player_Name, sizeof( player_Name ));
			format( score_Text, sizeof( score_Text ), "%s~n~~p~~h~%d - ~w~~w~%s", score_Text, i + 1, player_Name ); // playerScores[ i ][ player_Score ]
		}
		else
			format( score_Text, sizeof( score_Text ), "%s~n~~p~~h~%d - ~r~~h~Ninguem", score_Text, i + 1 );
	}
	TextDrawSetString( text_Top5[ 1 ], score_Text );
	return 1;
}

stock SetPlayerCamera( playerid )
{
	new
		Float:iPosx,
		Float:iPosy,
		Float:iPosz,
		Float:iPosa = random( 360 )
	;
    GetPlayerPos( playerid, iPosx, iPosy, iPosz );
    SetPlayerCameraPos( playerid, iPosx - 20 * floatsin( -iPosa, degrees ), iPosy - 20 * floatcos( -iPosa, degrees ), iPosz + 7 );
	SetPlayerCameraLookAt( playerid, iPosx, iPosy, iPosz );
}

stock CheckMaxRaceCheckPoints( playerid )
{
	do
	{
 		if( MaxCheck >= CheckID )
	    {
			break;
	    }
	    else MaxCheck ++;
	}
	while( MaxCheck < CheckID );
	SendClientMessage( playerid, -1, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	format( gStr, sizeof( gStr ), "• Evento com carregado com sucesso! ( Total de %d checkpoints e o Total de %d veículos )", MaxCheck, VeiculosEvento ); SendClientMessage( playerid, -1, gStr );
	SendClientMessage( playerid, -1, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
	UltimoCP = MaxCheck;
	AlguemVenceu = 0;
}

stock GetPlayerHighestScores( array[ ][ rankingEnum ], left, right )
{
    new
        tempLeft = left,
        tempRight = right,
        pivot = array[ ( left + right ) / 2 ][ player_Score ],
        tempVar
    ;
    while( tempLeft <= tempRight )
    {
        while( array[ tempLeft ][ player_Score ] > pivot ) tempLeft++;
        while( array[ tempRight ][ player_Score ] < pivot ) tempRight--;

        if( tempLeft <= tempRight )
        {
            tempVar = array[ tempLeft ][ player_Score ], array[ tempLeft ][ player_Score ] = array[ tempRight ][ player_Score ], array[ tempRight ][ player_Score ] = tempVar;
            tempVar = array[ tempLeft ][ player_ID ], array[ tempLeft ][ player_ID ] = array[ tempRight ][ player_ID ], array[ tempRight ] [ player_ID ] = tempVar;
            tempLeft ++, tempRight --;
        }
    }
    if( left < tempRight ) GetPlayerHighestScores( array, left, tempRight );
    if( tempLeft < right ) GetPlayerHighestScores( array, tempLeft, right );
}

stock carregarRace( playerid, arquivo[ ] )
{
	static
		string[ 64 ]
	;
	new
		File:arquivoFopen = fopen( arquivo, io_read )
	;
	if( !fexist( arquivo ))
	{
	    SendClientMessage( playerid, COLOR_ERRO, "[ EVENTO ] Não existe nenhum evento salvo com esse nome !" );
	    return 1;
	}
	CheckID = 0;
 	while( fread( arquivoFopen, string ))
	{
	  	sscanf( string , "f <,>fff", CheckPoint[ CheckID ][ 0 ], CheckPoint[ CheckID ][ 1 ], CheckPoint[ CheckID ][ 2 ] );
		CheckID ++;
	}
	RemovePlayerMapIcon( playerid, 8 );
	SetPlayerPos( playerid, CheckPoint[ 0 ][ 0 ], CheckPoint[ 0 ][ 1 ], CheckPoint[ 0 ][ 2 ] );
	SetPlayerRaceCheckpoint( playerid, 1, CheckPoint[ 0 ][ 0 ], CheckPoint[ 0 ][ 1 ], CheckPoint[ 0 ][ 2 ], CheckPoint[ 0 ][ 0 ], CheckPoint[ 0 ][ 1 ], CheckPoint[ 0 ][ 2 ], 10.0 );
	SetPlayerMapIcon( playerid, 8, CheckPoint[ 1 ][ 0 ], CheckPoint[ 1 ][ 1 ], CheckPoint[ 1 ][ 2 ], 19, 0, MAPICON_GLOBAL );
	format( gStr, sizeof( gStr ), "( INFO ) Evento %s carregado com sucesso! ( Total CPS - %d )", arquivo, CheckID );
	SendClientMessage( playerid, 0x99CC66AA, gStr );
	SendClientMessage( playerid, 0x99CC66AA, "* Você foi setado até o local do evento e o primeiro CP foi setado como base!" );
	return fclose( arquivoFopen );
}

stock carregarVeiculos( arquivo[ ] )
{
	static
		string[ 64 ]
	;
	new
		File:arquivoFopen = fopen( arquivo, io_read )
	;
	if( !fexist( arquivo ))
	{
	    return 1;
	}
	VeiculosEvento = 0;
 	while( fread( arquivoFopen, string ))
	{
	    new
			modelo,
			vecolor = random( 360 )
		;
	  	sscanf( string, "p <,>ffffi", Posicao[ VeiculosEvento ][ 0 ], Posicao[ VeiculosEvento ][ 1 ], Posicao[ VeiculosEvento ][ 2 ], Posicao[ VeiculosEvento ][ 3 ], modelo );
		vEvento[ VeiculosEvento ] = CreateVehicle( modelo, Posicao[ VeiculosEvento ][ 0 ], Posicao[ VeiculosEvento ][ 1 ], Posicao[ VeiculosEvento ][ 2 ], Posicao[ VeiculosEvento ][ 3 ], vecolor, vecolor, -1 );
        ivEvento[ vEvento[ VeiculosEvento ] ] = 1;
		VeiculosEvento ++;
	}
	return fclose( arquivoFopen );
}

stock salvarRace( playerid, arquivo[ ] )
{
	new
		string[ 64 ], formy[ 24 ], i
	;

	format( formy, 24, "eSalvos/CPS/%s.txt", arquivo );

	new
		File:example = fopen( formy, io_write )
	;

	while ( i < CheckID )
	{
		format( string, sizeof( string ), "%f, %f, %f\r\n", CheckPoint[ i ][ 0 ], CheckPoint[ i ][ 1 ], CheckPoint[ i ][ 2 ] );
		fwrite( example, string );
		++i;
	}
	fclose( example );
	format( gstring, sizeof( gstring ), "[ EVENTO ] O evento %s foi salvo com sucesso, para quando quiser faze-lo novamente !", arquivo );
	SendClientMessage( playerid, COLOR_AMARELO, gstring );
	salvarVeiculos( arquivo );
	return 1;
}

stock salvarVeiculos( arquivo[ ] )
{
	new
		string[ 64 ], formy[ 24 ]
	;
	format( formy, 24, "eSalvos/VS/%s.txt", arquivo );
	new
		File:example = fopen( formy, io_append )
	;
    for( new ve = 0; ve < MAX_VEHICLES; ++ve )
	{
		if( IsValidVehicleEvento( ve ))
		{
			new
				Float:vehx, Float:vehy, Float:vehz, Float:veha
			;
			GetVehiclePos( ve, vehx, vehy, vehz );
			GetVehicleZAngle( ve, veha );
			format( string, sizeof( string ), "%f, %f, %f, %f, %d\r\n", vehx, vehy, vehz, veha, GetVehicleModel( ve ));
			fwrite( example, string );
		}
	}
	fclose( example );
	return 1;
}

stock IsValidVehicleEvento( v )
{
    if( ivEvento[ v ] == 1 ) return true;
        else return false;
}
/*----------------------------------------------------------------------------*-
Function:
	sscanf
Params:
	string[ ] - String to extract parameters from.
	format[ ] - Parameter types to get.
	{Float,_}:... - Data return variables.
Return:
	0 - Successful, not 0 - fail.
Notes:
	A fail is either insufficient variables to store the data or insufficient
	data for the format string - excess data is disgarded.

	A string in the middle of the input data is extracted as a single word, a
	string at the end of the data collects all remaining text.

	The format codes are:

	c - A character.
	d, i - An integer.
	h, x - A hex number ( e.g. a colour ).
	f - A float.
	s - A string.
	z - An optional string.
	pX - An additional delimiter where X is another character.
	'' - Encloses a litteral string to locate.
	u - User, takes a name, part of a name or an id and returns the id if they're connected.

	Now has IsNumeric integrated into the code.

	Added additional delimiters in the form of all whitespace and an
	optioanlly specified one in the format string.
-*----------------------------------------------------------------------------*/
stock sscanf(string[], format[], {Float,_}:...) // By: Y_Less
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{

				new changestr[16], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
    				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

forward MensagemMorador( playerid );
public MensagemMorador( playerid )
{
	if( MoradorCount[ playerid ] <= 0 )
	{
	    KillTimer( T_Morador[ playerid ] );
		format( gstring, sizeof( gstring ), "[ x ] Você demorou muito, e oferta de moradia feita por %s foi cancelada !", PlayerName( MoradorCasaID[ playerid ] ));
		SendClientMessage( playerid, COLOR_ERRO, gstring );
	    format( gstring, sizeof( gstring ), "[ x ] %s demorou muito para responder e a oferta de moradia feita por você foi cancelada !", PlayerName( playerid ));
        SendClientMessage( playerid, COLOR_ERRO, gstring );
	    MoradorCount[ playerid ] = 0;
	    MoradorCasaID[ playerid ] = -1;
	    AceitarMorador[ playerid ] = 0;
	}
	else if( MoradorCount[ playerid ] > 0 )
	{
		format( gstring, sizeof( gstring ), "[ > ] %s está convidando você para morar na casa dele(a), use: ( /Aceitar | /Recusar )", PlayerName( MoradorCasaID[ playerid ] ));
		SendClientMessage( playerid, COLOR_VERDEFRACO, gstring );
		format( gstring, sizeof( gstring ), "[ > ] Você está convidando %s para morar em sua casa.", PlayerName( playerid ));
		SendClientMessage( MoradorCasaID[ playerid ], COLOR_VERDEFRACO, gstring );
	    T_Morador[ playerid ] = SetTimerEx( "MensagemMorador", 4000, false, "d", playerid );
	    MoradorCount[ playerid ] --;
	}
	return 1;
}

GetVehicleWithinDistance( playerid, Float:x1, Float:y1, Float:z1, Float:dist, &veh )
{
    for( new i = 1; i < MAX_VEHICLES; i++ )
	{
        if( GetVehicleModel( i ) > 0 )
		{
            if( GetPlayerVehicleID( playerid ) != i )
			{
            	new Float:x, Float:y, Float:z;
            	new Float:x2, Float:y2, Float:z2;
            	GetVehiclePos( i, x, y, z );
            	x2 = x1 - x; y2 = y1 - y; z2 = z1 - z;
            	new Float:vDist = ( x2*x2+y2*y2+z2*z2 );
            	if( vDist < dist )
				{
            		veh = i;
            		dist = vDist;
                }
            }
        }
    }
}

IsVehicleRc( vehicleid )
{
	new
		model = GetVehicleModel( vehicleid )
  	;
  	switch( model )
  	{
  		case RC_GOBLIN, RC_BARON, RC_BANDIT, RC_RAIDER, RC_MINITANK: return 1;
  		default: return 0;
    }
  	return 0;
}

stock CriarArvore( Float:X, Float:Y, Float:Z )
{
	CreateDynamicObject( 3472, X+0.28564453, Y+0.23718262, Z+27.00000000, 0.00000000, 0.00000000, 230.48021 );
	CreateDynamicObject( 664, X+0.20312500, Y+0.01171875, Z+-3.00000000, 0.00000000, 0.00000000, 0.00000000 );
	CreateDynamicObject( 3472, X+0.45312500, Y+0.51562500, Z+4.00000000, 0.00000000, 0.00000000, 69.7851562 );
	CreateDynamicObject( 3472, X+0.65136719, Y+1.84570312, Z+17.00000000, 0.00000000, 0.00000000, 41.863403 );
	CreateDynamicObject( 7666, X+0.34130859, Y+0.16845703, Z+45.00000000, 0.00000000, 0.00000000, 298.12524 );
	CreateDynamicObject( 7666, X+0.34082031, Y+0.16796875, Z+45.00000000, 0.00000000, 0.00000000, 27.850342 );
	CreateDynamicObject( 3472, X+0.45312500, Y+0.51562500, Z+12.00000000, 0.00000000, 0.00000000, 350.02441 );
	CreateDynamicObject( 3472, X+0.45312500, Y+0.51562500, Z+7.00000000, 0.00000000, 0.00000000, 30.0805664 );
	CreateDynamicObject( 3472, X+0.45312500, Y+0.51562500, Z+22.00000000, 0.00000000, 0.00000000, 230.47119 );
	CreateDynamicObject( 1262, X+0.15039062, Y+0.57128906, Z+29.45285416, 0.00000000, 0.00000000, 162.90527 );
}

forward Novotapete( playerid );
public Novotapete( playerid )
{
    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você já pode criar novamente um tapete !" );
	if( SpikeInfo[ Crioutapete[ playerid ] ][ sCreated ] == 1 )
	{
		SpikeInfo[ Crioutapete[ playerid ] ][ sCreated ] = 0;
		SpikeInfo[ Crioutapete[ playerid ] ][ sX ] = 0.0;
		SpikeInfo[ Crioutapete[ playerid ] ][ sY ] = 0.0;
		SpikeInfo[ Crioutapete[ playerid ] ][ sZ ] = 0.0;
		DestroyDynamicObject( SpikeInfo[ Crioutapete[ playerid ] ][ sObject ] );
	}
	Crioutapete[ playerid ] = 0;
	return 1;
}

stock f( playerid )
{
	new
	    filePlayer[ 128 ];
    format( filePlayer, sizeof( filePlayer ), "Contas/%s.ini", PlayerName( playerid ));
    return filePlayer;
}

forward casaComprou( formatado[ ] );
public casaComprou( formatado[ ] )
{
	if( !fexist( "comprouCasaLog.txt" ))
	{
	    dini_Create( "comprouCasaLog.txt" );
	}
	new
		File:Arquivo = fopen( "comprouCasaLog.txt", io_append )
	;
	format( pFile, sizeof( pFile ), "%s\r\n", formatado );
	fwrite( Arquivo, pFile );
	fclose( Arquivo );
}

forward casaVendeu( formatado[ ] );
public casaVendeu( formatado[ ] )
{
	if( !fexist( "vendeuCasaLog.txt" ))
	{
	    dini_Create( "vendeuCasaLog.txt" );
	}
	new
		File:Arquivo = fopen( "vendeuCasaLog.txt", io_append )
	;
	format( pFile, sizeof( pFile ), "%s\r\n", formatado );
	fwrite( Arquivo, pFile );
	fclose( Arquivo );
}

forward desliberarEmpresa( playerid );
public desliberarEmpresa( playerid )
{
    LiberadoEmpresa[ playerid ] = 0;
    return 1;
}

stock SkinValida( SkinID )
{
    if (( SkinID == 3 ) || ( SkinID == 4 ) || ( SkinID == 5 ) || ( SkinID == 6 ) || ( SkinID == 8 ) || ( SkinID == 42 ) || ( SkinID == 65 ) || ( SkinID == 86 ) || ( SkinID == 119 ) || ( SkinID == 149 ) || ( SkinID ==208 ) || ( SkinID == 273 ) || ( SkinID == 289 ) || ( SkinID == 269 ) || ( SkinID == 270 ) || ( SkinID == 271 )) return true;
    else return false;
}

public OnPlayerTakeDamage( playerid, issuerid, Float:amount, weaponid )
{
    if( issuerid != INVALID_PLAYER_ID /*&& IsPlayerInPlace( issuerid, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) && IsPlayerInPlace( playerid, 2059.889648, -1158.775512, 2299.889648, -958.775512 )*/)
    {
	    new
			Float:health
		;
	    GetPlayerHealth( playerid, health );

	    new
	        Float:issx, Float:issy, Float:issz
		;
  		GetPlayerPos( issuerid, issx, issy, issz );

	    foreach(Player, i )
    	{
    		if( IsPlayerInRangeOfPoint( i, 50.0, issx, issy, issz ) && ArenaDuelo[ i ] == false && validArmas[ i ] == false )
		    {
		        if( viewMM[ i ] < gettime( ))
		        {
	    			format( gStr, 128, "> %s feriu %s com um(a) %s e deixou ele(a) com %.0f de vida.", PlayerName( issuerid ), PlayerName( playerid ), GetWeaponNameByID( weaponid ), health );
		    		SendClientMessage( i, 0xDCDCDCFF, gStr );
	    		}
	    		viewMM[ i ] = gettime() + 2;
			}
			else if( IsPlayerInPlace( i, 2059.889648, -1158.775512, 2299.889648, -958.775512 ) || in_z[ i ] != -1 || ArenaDuelo[ i ] == true )
		    {
			    if(( weaponid == 0 ) || ( weaponid == 1 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~socou ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
			    if(( weaponid == 2 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~bateu com taco de golf em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
			    if(( weaponid == 3 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~bateu com cacetete em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		  	    if(( weaponid == 4 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~esfaqueou ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		  	    if(( weaponid == 5 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~bateu com taco de baseball em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
				if(( weaponid == 6 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~bateu com uma inchada em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
				if(( weaponid == 7 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~bateu com taco de bilhar em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		  		if(( weaponid == 8 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~bateu com uma espada em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		    	if(( weaponid == 9 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~serrou ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		    	if(( weaponid >= 10 ) && ( weaponid <= 15 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~bateu em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		      	if(( weaponid == 16 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~jogo uma granada em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		      	if(( weaponid == 17 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~jogou bomba de fumaca em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		      	if(( weaponid == 18 ) || ( weaponid == 37 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~tacou fogo em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		      	if(( weaponid >= 22 ) && ( weaponid <= 36 ) || ( weaponid == 38 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~atirou em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		      	if(( weaponid == 41 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~jogou spray em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		      	if(( weaponid == 42 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~usou o extintor em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
				if(( weaponid == 49 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~atropelou ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		      	if(( weaponid == 50 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~fez heli killer em ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
				if(( weaponid == 51 ))
			    {
			        format( gstring, sizeof( gstring ), "~n~~n~~n~~n~~y~%s ~w~explodiu ~y~%s ~w~que ficou com %.0f de ~r~vida", PlayerName( issuerid ), PlayerName( playerid ), health );
			        GameTextForPlayer( i, gstring, 2000, 5 );
			    }
		    }
	    }
        /*if( CriouCoracao[ playerid ] == 0 )
        {
            CriouCoracao[ playerid ] = 1;
			objectCoracion[ playerid ] = CreateDynamicObject( 1240, 0, 0, 0, 0, 0, 0 );
			AttachObjectToPlayer( objectCoracion[ playerid ], playerid, 0, 0, 1.50, 0, 0, 0 );
			SetTimerEx( "DCoracion", 500, false, "i", playerid );
		}*/
    }
    return 1;
}

/*forward DCoracion( playerid );
public DCoracion( playerid )
{
    DestroyDynamicObject( objectCoracion[ playerid ] );
    CriouCoracao[ playerid ] = 0;
    return 1;
}*/
/*
stock armasProf( playerid )
{
    if( epDM[ playerid ][ dmParticipando ] == 0 )
    {
	if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
	{
		GivePlayerWeapon( playerid, 3, 1 );
		GivePlayerWeapon( playerid, 24, 500 );
	}
	if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
	{
		GivePlayerWeapon( playerid, 3, 1 );
		GivePlayerWeapon( playerid, 24, 500 );
		GivePlayerWeapon( playerid, 29, 100 );
	}
	if( pInfo[ playerid ][ Prof ] == BOPE )
    {
        GivePlayerWeapon( playerid, 31, 100 );
        GivePlayerWeapon( playerid, 24, 100 );
        GivePlayerWeapon( playerid, 34, 50 );
    }
    if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == DELEGADO )
    {
		GivePlayerWeapon( playerid, 3, 1 );
		GivePlayerWeapon( playerid, 24, 500 );
	}
	if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
	{
	    GivePlayerWeapon( playerid, 43, 500 );
	}
	if( pInfo[ playerid ][ Prof ] == PROSTITUTA )
	{
		GivePlayerWeapon( playerid, 10, 1 );
	}
	if( pInfo[ playerid ][ Prof ] == ASSASSINO )
	{
	    GivePlayerWeapon( playerid, 34, 50 );
	}
	if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS )
	{
	    GivePlayerWeapon( playerid, 30, 100 );
	}
	if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS )
	{
	    GivePlayerWeapon( playerid, 30, 100 );
	    GivePlayerWeapon( playerid, 25, 100 );
	}
	if( pInfo[ playerid ][ Prof ] == ATIRADOR )
	{
	    GivePlayerWeapon( playerid, 34, 50 );
	}
	if( pInfo[ playerid ][ Prof ] == TERRORISTA )
	{
	    GivePlayerWeapon( playerid, 39, 3 );
	    GivePlayerWeapon( playerid, 40, 1 );
	}
	if( pInfo[ playerid ][ Prof ] == CHEFE_MAFIA )
	{
	    GivePlayerWeapon( playerid, 1, 1 );
	    GivePlayerWeapon( playerid, 4, 1 );
	    GivePlayerWeapon( playerid, 24, 50 );
	    GivePlayerWeapon( playerid, 31, 50 );
	}
	if( pInfo[ playerid ][ Prof ] == CACADOR )
	{
		GivePlayerWeapon( playerid, 33, 5 );
	}
	}
}*/

stock armasProf( playerid ) // Setar skin de cada profissão e armas de cada profissao
{
    if( epDM[ playerid ][ dmParticipando ] == 0 ) // Armas de cada profissão  // https://sampwiki.blast.hk/wiki/Weapons
    {
		if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 23, 500 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
			    GivePlayerWeapon( playerid, 24, 500 );
			    GivePlayerWeapon( playerid, 29, 800 );
			    GivePlayerWeapon( playerid, 25, 300 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    SetPlayerSkin( playerid, 286 );
			}
		}
		if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 23, 500 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
			    GivePlayerWeapon( playerid, 24, 500 );
			    GivePlayerWeapon( playerid, 28, 800 );
			    GivePlayerWeapon( playerid, 25, 300 );
			    GivePlayerWeapon( playerid, 31, 800 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    SetPlayerSkin( playerid, 280 );
			}
		}
		if( pInfo[ playerid ][ Prof ] == BOPE )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 23, 500 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
				GivePlayerWeapon( playerid, 17, 20 );
			    GivePlayerWeapon( playerid, 24, 500 );
			    GivePlayerWeapon( playerid, 32, 800 );
			    GivePlayerWeapon( playerid, 27, 250 );
			    GivePlayerWeapon( playerid, 31, 800 );
			    GivePlayerWeapon( playerid, 34, 100 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    GivePlayerWeapon( playerid, 44, 1 );
			    SetPlayerSkin( playerid, 285 );
			}
		}
		if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 23, 500 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
			    GivePlayerWeapon( playerid, 24, 500 );
			    GivePlayerWeapon( playerid, 28, 800 );
			    GivePlayerWeapon( playerid, 25, 300 );
			    GivePlayerWeapon( playerid, 31, 800 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    GivePlayerWeapon( playerid, 43, 20 );
			    SetPlayerSkin( playerid, 282 );
			}
		}
		if( pInfo[ playerid ][ Prof ] == MARINHA )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 23, 500 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
			    GivePlayerWeapon( playerid, 17, 20 );
			    GivePlayerWeapon( playerid, 24, 500 );
			    GivePlayerWeapon( playerid, 25, 500 );
			    GivePlayerWeapon( playerid, 28, 800 );
			    GivePlayerWeapon( playerid, 27, 900 );
			    GivePlayerWeapon( playerid, 31, 900 );
			    GivePlayerWeapon( playerid, 39, 8 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    GivePlayerWeapon( playerid, 45, 1 );
			    SetPlayerSkin( playerid, 281 );
			}
		}
		if( pInfo[ playerid ][ Prof ] == DELEGADO )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 23, 500 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
			    GivePlayerWeapon( playerid, 22, 500 );
			    GivePlayerWeapon( playerid, 29, 800 );
			    GivePlayerWeapon( playerid, 25, 300 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    SetPlayerSkin( playerid, 283 );
			}
		}
 		if( pInfo[ playerid ][ Prof ] == EXERCITO )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 23, 500 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
			    GivePlayerWeapon( playerid, 17, 20 );
			    GivePlayerWeapon( playerid, 24, 500 );
			    GivePlayerWeapon( playerid, 25, 500 );
			    GivePlayerWeapon( playerid, 28, 800 );
			    GivePlayerWeapon( playerid, 27, 900 );
			    GivePlayerWeapon( playerid, 31, 900 );
			    GivePlayerWeapon( playerid, 39, 8 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    GivePlayerWeapon( playerid, 45, 1 );
			    SetPlayerSkin( playerid, 287 );
			}
		}
	    if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
		{
		    if( pInfo[ playerid ][ fardado ] == 0 )
		    {
   				GivePlayerWeapon( playerid, 22, 500 );
   				GivePlayerWeapon( playerid, 3, 1 );
			}
			if( pInfo[ playerid ][ fardado ] == 1 )
			{
				GivePlayerWeapon( playerid, 3, 1 );
			    GivePlayerWeapon( playerid, 22, 500 );
			    GivePlayerWeapon( playerid, 29, 800 );
			    GivePlayerWeapon( playerid, 25, 300 );
			    GivePlayerWeapon( playerid, 41, 999 );
			    SetPlayerSkin( playerid, 288 );
			}
		}
		if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
		{
		    GivePlayerWeapon( playerid, 15, 250 );
		    GivePlayerWeapon( playerid, 43, 250 );
		}
		if( pInfo[ playerid ][ Prof ] == PROSTITUTA )
		{
			GivePlayerWeapon( playerid, 10, 1 );
			GivePlayerWeapon( playerid, 11, 1 );
			GivePlayerWeapon( playerid, 12, 1 );
			GivePlayerWeapon( playerid, 13, 1 );
			GivePlayerWeapon( playerid, 14, 1 );
			
		}
		if( pInfo[ playerid ][ Prof ] == ASSASSINO )
		{
	    	GivePlayerWeapon( playerid, 4, 1 );
		    GivePlayerWeapon( playerid, 8, 1 );
		    GivePlayerWeapon( playerid, 24, 500 );
		    GivePlayerWeapon( playerid, 30, 500 );
		    GivePlayerWeapon( playerid, 34, 50 );
		}
		if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS )
		{
            GivePlayerWeapon( playerid, 7, 1 );
		    GivePlayerWeapon( playerid, 30, 200 );
		}
		if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS )
		{
		    GivePlayerWeapon( playerid, 2, 1 );
		    GivePlayerWeapon( playerid, 30, 200 );
		    GivePlayerWeapon( playerid, 25, 200 );
		}
		if( pInfo[ playerid ][ Prof ] == ATIRADOR )
		{
		    GivePlayerWeapon( playerid, 1, 1 );
		    GivePlayerWeapon( playerid, 34, 50 );
		}
		if( pInfo[ playerid ][ Prof ] == TERRORISTA )
		{
		    GivePlayerWeapon( playerid, 9, 1 );
		    GivePlayerWeapon( playerid, 39, 20 );
		    GivePlayerWeapon( playerid, 40, 1 );
		}
		if( pInfo[ playerid ][ Prof ] == CHEFE_MAFIA )
		{
		    GivePlayerWeapon( playerid, 1, 1 );
		    GivePlayerWeapon( playerid, 5, 1 );
		    GivePlayerWeapon( playerid, 24, 200 );
		    GivePlayerWeapon( playerid, 31, 200 );
		}
		if( pInfo[ playerid ][ Prof ] == CACADOR )
		{
			GivePlayerWeapon( playerid, 6, 1 );
			GivePlayerWeapon( playerid, 33, 20 );
		}
	}
}

stock resetNeon( playerid )
{
	DestroyDynamicObject( GetPVarInt( playerid, "neon" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon1" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon2" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon3" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon4" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon5" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon6" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon7" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon8" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon9" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon10" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon11" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon12" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "neon13" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "interior" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "interior1" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "back" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "back1" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "front" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "front1" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "undercover" ));
	DeletePVar( playerid, "Status" );
	DestroyDynamicObject( GetPVarInt( playerid, "undercover1" ));
	DeletePVar( playerid, "Status" );
}

stock Float:GetPointAngleToPoint( Float:x2, Float:y2, Float:X, Float:Y )
{
	new Float:DX, Float:DY;
	new Float:angle;

	DX = floatabs( floatsub( x2,X ));
	DY = floatabs( floatsub( y2,Y ));

	if ( DY == 0.0 || DX == 0.0 )
	{
		if( DY == 0 && DX > 0 ) angle = 0.0;
		else if( DY == 0 && DX < 0 ) angle = 180.0;
		else if( DY > 0 && DX == 0 ) angle = 90.0;
		else if( DY < 0 && DX == 0 ) angle = 270.0;
		else if( DY == 0 && DX == 0 ) angle = 0.0;
	}
	else
	{
		angle = atan( DX/DY );

		if( X > x2 && Y <= y2 ) angle += 90.0;
		else if( X <= x2 && Y < y2 ) angle = floatsub( 90.0, angle );
		else if( X < x2 && Y >= y2 ) angle -= 90.0;
		else if( X >= x2 && Y > y2 ) angle = floatsub( 270.0, angle );
	}
	return floatadd( angle, 90.0 );
}

stock verEmpresa( playerid )
{
	if( dini_Int( f( playerid ), "Contratado" ) != 0 )
	{
        if( !strcmp( EmpresaInfo[ dini_Int( f( playerid ), "Contratado" ) ][ Funcionario1 ], PlayerName( playerid ), false ) && !strcmp( EmpresaInfo[ dini_Int( f( playerid ), "Contratado" ) ][ Funcionario2 ], PlayerName( playerid ), false ) && !strcmp( EmpresaInfo[ dini_Int( f( playerid ), "Contratado" ) ][ Funcionario3 ], PlayerName( playerid ), false ))
        {
			dini_Int( f( playerid ), "Contratado", 0 );
        }
	}
}

stock CountIP( ip[ ] )
{
	new
		c = 0
	;
	foreach(Player, i ) if( !strcmp( GetIP( i ), ip )) c++;
	return c;
}

stock GetIP( playerid )
{
	new
		ip[ 16 ]
	;
	GetPlayerIp( playerid, ip, sizeof( ip ));
	return ip;
}

stock BanAll( playerid )
{
	new
		ip[ 32 ]
	;
	GetPlayerIp( playerid, ip, sizeof( ip ));

	foreach(Player, i )
	{
		new
			p = GetPlayerPing( i )
		;
		if( i == playerid || !strcmp( ip, GetIP( i )) || p <= 0 || p >= 30000 )
		{
		    new
		        formy[ 128 ]
			;
			format( formy, sizeof( formy ), "Contas/%s.ini", PlayerName( i ));
			if( !fexist( formy ))
			{
				BanEx( i, "Bot" );
			}
		}
	}
 	format( ip, sizeof( ip ), "banip %s", ip );
	return SendRconCommand( ip );
}

forward ItenOpcao( playerid );
public ItenOpcao( playerid )
{
	if( useTipo[ playerid ] == 1 )
	{
	    ShowPlayerDialog( playerid, D_ITEN1, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Loja de Roupas", "Você deseja comprar esse óculos?", "Sim", "Não" );
	    return 1;
	}
	else if( useTipo[ playerid ] == 2 )
	{
	    ShowPlayerDialog( playerid, D_ITEN2, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Loja de Roupas", "Você deseja comprar esse máscara?", "Sim", "Não" );
	    return 1;
	}
	else if( useTipo[ playerid ] == 3 )
	{
	    ShowPlayerDialog( playerid, D_ITEN3, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Loja de Roupas", "Você deseja comprar essa bandana?", "Sim", "Não" );
	    return 1;
	}
	else if( useTipo[ playerid ] == 4 )
	{
	    ShowPlayerDialog( playerid, D_ITEN4, DIALOG_STYLE_MSGBOX, "{FF0000}•»{00FF00} Loja de Roupas", "Você deseja comprar esse chapéu?", "Sim", "Não" );
	    return 1;
	}
	return 1;
}

stock SetPlayerOculos( playerid, oculosx )
{
	if( oculosx == 1 )
	{
		SetPlayerAttachedObject( playerid, 1, 19006, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 2 )
	{
		SetPlayerAttachedObject( playerid, 1, 19007, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 3 )
	{
		SetPlayerAttachedObject( playerid, 1, 19008, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 4 )
	{
		SetPlayerAttachedObject( playerid, 1, 19009, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 5 )
	{
		SetPlayerAttachedObject( playerid, 1, 19010, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 6 )
	{
		SetPlayerAttachedObject( playerid, 1, 19011, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 7 )
	{
		SetPlayerAttachedObject( playerid, 1, 19012, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 8 )
	{
		SetPlayerAttachedObject( playerid, 1, 19013, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 9 )
	{
		SetPlayerAttachedObject( playerid, 1, 19014, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 10 )
	{
		SetPlayerAttachedObject( playerid, 1, 19015, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 11 )
	{
		SetPlayerAttachedObject( playerid, 1, 19016, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 12 )
	{
		SetPlayerAttachedObject( playerid, 1, 19017, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 13 )
	{
		SetPlayerAttachedObject( playerid, 1, 19018, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 14 )
	{
		SetPlayerAttachedObject( playerid, 1, 19019, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 15 )
	{
		SetPlayerAttachedObject( playerid, 1, 19020, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 16 )
	{
		SetPlayerAttachedObject( playerid, 1, 19021, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 17 )
	{
		SetPlayerAttachedObject( playerid, 1, 19022, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 18 )
	{
		SetPlayerAttachedObject( playerid, 1, 19023, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 19 )
	{
		SetPlayerAttachedObject( playerid, 1, 19024, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 20 )
	{
		SetPlayerAttachedObject( playerid, 1, 19025, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 21 )
	{
		SetPlayerAttachedObject( playerid, 1, 19026, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 22 )
	{
		SetPlayerAttachedObject( playerid, 1, 19027, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 23 )
	{
		SetPlayerAttachedObject( playerid, 1, 19028, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 24 )
	{
		SetPlayerAttachedObject( playerid, 1, 19029, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 25 )
	{
		SetPlayerAttachedObject( playerid, 1, 19030, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 26 )
	{
		SetPlayerAttachedObject( playerid, 1, 19031, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 27 )
	{
		SetPlayerAttachedObject( playerid, 1, 19032, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 28 )
	{
		SetPlayerAttachedObject( playerid, 1, 19033, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 29 )
	{
		SetPlayerAttachedObject( playerid, 1, 19034, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
	else if( oculosx == 30 )
	{
		SetPlayerAttachedObject( playerid, 1, 19035, 2, 0.09, 0.04, 0, 88, 75, 0 );
	}
}

stock SetPlayerMascara( playerid, mascarax )
{
	if( mascarax == 1 )
	{
		SetPlayerAttachedObject( playerid, 2, 19036, 2, 0.107, 0.020, 0.0, 90, 90, 0 );
	}
	else if( mascarax == 2 )
	{
		SetPlayerAttachedObject( playerid, 2, 19037, 2, 0.107, 0.020, 0.0, 90, 90, 0 );
	}
	else if( mascarax == 3 )
	{
		SetPlayerAttachedObject( playerid, 2, 19038, 2, 0.107, 0.020, 0.0, 90, 90, 0 );
	}
	else if( mascarax == 4 )
	{
		SetPlayerAttachedObject( playerid, 2, 18974, 2, 0.098, 0.0258, 0.0, 90, 90, 0 );
	}
	else if( mascarax == 5 )
	{
		SetPlayerAttachedObject( playerid, 2, 18952, 2, 0.105, 0.01, 0.0, 0, 0, 0 );
	}
	else if( mascarax == 6 )
	{
		SetPlayerAttachedObject( playerid, 2, 19036, 2, 0.107, 0.020, 0.0, 90, 90, 0 );
	}
}

stock SetPlayerBandana( playerid, bandanax )
{
	if( bandanax == 1 )
	{
		SetPlayerAttachedObject( playerid, 3, 18911, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 2 )
	{
		SetPlayerAttachedObject( playerid, 3, 18912, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 3 )
	{
		SetPlayerAttachedObject( playerid, 3, 18913, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 4 )
	{
		SetPlayerAttachedObject( playerid, 3, 18914, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 5 )
	{
		SetPlayerAttachedObject( playerid, 3, 18915, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 6 )
	{
		SetPlayerAttachedObject( playerid, 3, 18916, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 7 )
	{
		SetPlayerAttachedObject( playerid, 3, 18917, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 8 )
	{
		SetPlayerAttachedObject( playerid, 3, 18918, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 9 )
	{
		SetPlayerAttachedObject( playerid, 3, 18919, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
	else if( bandanax == 10 )
	{
		SetPlayerAttachedObject( playerid, 3, 18920, 2, -0.08, 0.03, 0.0, 90, -180, -90 );
	}
}

stock SetPlayerChapeu( playerid, chapeux )
{
	if( chapeux == 1 )
	{
		SetPlayerAttachedObject( playerid, 4, 18944, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 2 )
	{
		SetPlayerAttachedObject( playerid, 4, 18945, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 3 )
	{
		SetPlayerAttachedObject( playerid, 4, 18946, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 4 )
	{
		SetPlayerAttachedObject( playerid, 4, 18947, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 5 )
	{
		SetPlayerAttachedObject( playerid, 4, 18948, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 6 )
	{
		SetPlayerAttachedObject( playerid, 4, 18949, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 7 )
	{
		SetPlayerAttachedObject( playerid, 4, 18950, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 8 )
	{
		SetPlayerAttachedObject( playerid, 4, 18951, 2, 0.15, 0.0, 0, 180, 0, 10 );
	}
	else if( chapeux == 9 )
	{
		SetPlayerAttachedObject( playerid, 4, 18921, 2, 0.15, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 10 )
	{
		SetPlayerAttachedObject( playerid, 4, 18922, 2, 0.15, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 11 )
	{
		SetPlayerAttachedObject( playerid, 4, 18923, 2, 0.15, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 12 )
	{
		SetPlayerAttachedObject( playerid, 4, 18924, 2, 0.15, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 13 )
	{
		SetPlayerAttachedObject( playerid, 4, 18925, 2, 0.15, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 14 )
	{
		SetPlayerAttachedObject( playerid, 4, 18939, 2, 0.17, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 15 )
	{
		SetPlayerAttachedObject( playerid, 4, 18940, 2, 0.17, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 16 )
	{
		SetPlayerAttachedObject( playerid, 4, 18941, 2, 0.17, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 17 )
	{
		SetPlayerAttachedObject( playerid, 4, 18942, 2, 0.17, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 18 )
	{
		SetPlayerAttachedObject( playerid, 4, 18943, 2, 0.17, -0.03, 0.01, 180, 0, 30 );
	}
	else if( chapeux == 19 )
	{
		SetPlayerAttachedObject( playerid, 4, 18953, 2, 0.13, -0.03, 0.00, 180, 0, 30 );
	}
	else if( chapeux == 20 )
	{
		SetPlayerAttachedObject( playerid, 4, 18954, 2, 0.13, -0.03, 0.00, 180, 0, 30 );
	}
	else if( chapeux == 21 )
	{
		SetPlayerAttachedObject( playerid, 4, 18960, 2, 0.13, 0, 0, 88, 75, 0 );
	}
	else if( chapeux == 22 )
	{
		SetPlayerAttachedObject( playerid, 4, 18961, 2, 0.14, 0, 0, 88, 75, 0 );
	}
	else if( chapeux == 23 )
	{
		SetPlayerAttachedObject( playerid, 4, 18962, 2, 0.14, 0, 0, 88, 75, 0 );
	}
	else if( chapeux == 24 )
	{
		SetPlayerAttachedObject( playerid, 4, 18964, 2, 0.125, 0.015, 0, 90, 100, 0 );
	}
	else if( chapeux == 25 )
	{
		SetPlayerAttachedObject( playerid, 4, 18965, 2, 0.125, 0.015, 0, 90, 100, 0 );
	}
	else if( chapeux == 26 )
	{
		SetPlayerAttachedObject( playerid, 4, 18966, 2, 0.125, 0.015, 0, 90, 100, 0 );
	}
	else if( chapeux == 27 )
	{
		SetPlayerAttachedObject( playerid, 4, 18967, 2, 0.125, 0.015, 0, 90, 80, 0 );
	}
	else if( chapeux == 28 )
	{
		SetPlayerAttachedObject( playerid, 4, 18968, 2, 0.125, 0.015, 0, 90, 80, 0 );
	}
	else if( chapeux == 29 )
	{
		SetPlayerAttachedObject( playerid, 4, 18969, 2, 0.125, 0.015, 0, 90, 80, 0 );
	}
	else if( chapeux == 30 )
	{
		SetPlayerAttachedObject( playerid, 4, 18970, 2, 0.125, 0.015, 0, 90, 80, 0 );
	}
	else if( chapeux == 31 )
	{
		SetPlayerAttachedObject( playerid, 4, 18971, 2, 0.125, 0.015, 0, 90, 80, 0 );
	}
	else if( chapeux == 32 )
	{
		SetPlayerAttachedObject( playerid, 4, 18972, 2, 0.125, 0.015, 0, 90, 80, 0 );
	}
	else if( chapeux == 33 )
	{
		SetPlayerAttachedObject( playerid, 4, 18973, 2, 0.125, 0.015, 0, 90, 80, 0 );
	}
	else if( chapeux == 34 )
	{
		SetPlayerAttachedObject( playerid, 4, 18955, 2, 0.11, 0.02, 0, 88, 75, 0 );
	}
	else if( chapeux == 35 )
	{
		SetPlayerAttachedObject( playerid, 4, 18956, 2, 0.11, 0.02, 0, 88, 75, 0 );
	}
	else if( chapeux == 36 )
	{
		SetPlayerAttachedObject( playerid, 4, 18957, 2, 0.11, 0.02, 0, 88, 75, 0 );
	}
	else if( chapeux == 37 )
	{
		SetPlayerAttachedObject( playerid, 4, 18958, 2, 0.11, 0.02, 0, 88, 75, 0 );
	}
	else if( chapeux == 38 )
	{
		SetPlayerAttachedObject( playerid, 4, 18959, 2, 0.11, 0.02, 0, 88, 75, 0 );
	}
	else if( chapeux == 39 )
	{
		SetPlayerAttachedObject( playerid, 4, 18936, 2, 0.105, 0.02, 0, 0, 0, 0 );
	}
	else if( chapeux == 40 )
	{
		SetPlayerAttachedObject( playerid, 4, 18937, 2, 0.105, 0.02, 0, 0, 0, 0 );
	}
	else if( chapeux == 41 )
	{
		SetPlayerAttachedObject( playerid, 4, 18938, 2, 0.105, 0.02, 0, 0, 0, 0 );
	}
	else if( chapeux == 42 )
	{
		SetPlayerAttachedObject( playerid, 4, 18926, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 43 )
	{
		SetPlayerAttachedObject( playerid, 4, 18927, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 44 )
	{
		SetPlayerAttachedObject( playerid, 4, 18928, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 45 )
	{
		SetPlayerAttachedObject( playerid, 4, 18929, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 46 )
	{
		SetPlayerAttachedObject( playerid, 4, 18930, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 47 )
	{
		SetPlayerAttachedObject( playerid, 4, 18931, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 48 )
	{
		SetPlayerAttachedObject( playerid, 4, 18932, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 49 )
	{
		SetPlayerAttachedObject( playerid, 4, 18933, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 50 )
	{
		SetPlayerAttachedObject( playerid, 4, 18934, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 51 )
	{
		SetPlayerAttachedObject( playerid, 4, 18935, 2, 0.17, 0, -0.01, 0, 0, 0 );
	}
	else if( chapeux == 52 )
	{
		SetPlayerAttachedObject( playerid, 4, 18891, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 53 )
	{
		SetPlayerAttachedObject( playerid, 4, 18892, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 54 )
	{
		SetPlayerAttachedObject( playerid, 4, 18893, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 55 )
	{
		SetPlayerAttachedObject( playerid, 4, 18894, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 56 )
	{
		SetPlayerAttachedObject( playerid, 4, 18895, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 57 )
	{
		SetPlayerAttachedObject( playerid, 4, 18896, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 58 )
	{
		SetPlayerAttachedObject( playerid, 4, 18897, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 59 )
	{
		SetPlayerAttachedObject( playerid, 4, 18898, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 60 )
	{
		SetPlayerAttachedObject( playerid, 4, 18899, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 61 )
	{
		SetPlayerAttachedObject( playerid, 4, 18900, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 62 )
	{
		SetPlayerAttachedObject( playerid, 4, 18901, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 63 )
	{
		SetPlayerAttachedObject( playerid, 4, 18902, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 64 )
	{
		SetPlayerAttachedObject( playerid, 4, 18903, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 65 )
	{
		SetPlayerAttachedObject( playerid, 4, 18904, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 66 )
	{
		SetPlayerAttachedObject( playerid, 4, 18905, 2, 0.15, -0.013, 0.001, 90, -30, -90 );
	}
	else if( chapeux == 67 )
	{
		SetPlayerAttachedObject( playerid, 4, 18906, 2, 0.12, -0.02, 0.001, 90, -60, -90 );
	}
	else if( chapeux == 68 )
	{
		SetPlayerAttachedObject( playerid, 4, 18907, 2, 0.12, -0.02, 0.001, 90, -60, -90 );
	}
	else if( chapeux == 69 )
	{
		SetPlayerAttachedObject( playerid, 4, 18908, 2, 0.12, -0.02, 0.001, 90, -60, -90 );
	}
	else if( chapeux == 70 )
	{
		SetPlayerAttachedObject( playerid, 4, 18909, 2, 0.12, -0.02, 0.001, 90, -60, -90 );
	}
	else if( chapeux == 71 )
	{
		SetPlayerAttachedObject( playerid, 4, 18910, 2, 0.12, -0.02, 0.001, 90, -60, -90 );
	}
}

stock SetarItensPlayer( playerid )
{
    if( dini_Int( f( playerid ), "useOculos" ) != 0 )
    {
        SetPlayerOculos( playerid, dini_Int( f( playerid ), "useOculos" ));
    }
    if( dini_Int( f( playerid ), "useMascara" ) != 0 )
    {
        SetPlayerMascara( playerid, dini_Int( f( playerid ), "useMascara" ));
    }
    if( dini_Int( f( playerid ), "useBandana" ) != 0 )
    {
        SetPlayerBandana( playerid, dini_Int( f( playerid ), "useBandana" ));
    }
    if( dini_Int( f( playerid ), "useChapeu" ) != 0 )
    {
        SetPlayerChapeu( playerid, dini_Int( f( playerid ), "useChapeu" ));
    }
}

stock RemoveItensPlayer( playerid )
{
	new
		i
	;
	while( i != MAX_PLAYER_ATTACHED_OBJECTS )
	{
		if( IsPlayerAttachedObjectSlotUsed( playerid, i ))
		{
			RemovePlayerAttachedObject( playerid, i );
		}
		i++;
	}
    useOculos[ playerid ] = -1,
    useMascara[ playerid ] = -1,
    useBandana[ playerid ] = -1,
    useChapeu[ playerid ] = -1,
	useTipo[ playerid ] = 0;
}

stock CriarArquivoPresidente( string[ ] )
{
	if( fexist( "Eleitos.ini" ))
	{
		dini_Remove( "Eleitos.ini" );
	}
	dini_Create( "Eleitos.ini" );
	dini_IntSet( "Eleitos.ini", "votoStatus", 0 );
	dini_Set( "Eleitos.ini", "Presidente", string );
	dini_IntSet( "Eleitos.ini", "Candidatos", 0 );
	dini_Set( "Eleitos.ini", "1_", "Nenhum" );
	dini_Set( "Eleitos.ini", "2_", "Nenhum" );
	dini_Set( "Eleitos.ini", "3_", "Nenhum" );
	dini_Set( "Eleitos.ini", "4_", "Nenhum" );
	dini_Set( "Eleitos.ini", "5_", "Nenhum" );
	dini_Set( "Eleitos.ini", "6_", "Nenhum" );
	dini_Set( "Eleitos.ini", "7_", "Nenhum" );
	dini_Set( "Eleitos.ini", "8_", "Nenhum" );
	dini_Set( "Eleitos.ini", "9_", "Nenhum" );
	dini_Set( "Eleitos.ini", "10_", "Nenhum" );
	dini_IntSet( "Eleitos.ini", "1", 0 );
	dini_IntSet( "Eleitos.ini", "2", 0 );
	dini_IntSet( "Eleitos.ini", "3", 0 );
	dini_IntSet( "Eleitos.ini", "4", 0 );
	dini_IntSet( "Eleitos.ini", "5", 0 );
	dini_IntSet( "Eleitos.ini", "6", 0 );
	dini_IntSet( "Eleitos.ini", "7", 0 );
	dini_IntSet( "Eleitos.ini", "8", 0 );
	dini_IntSet( "Eleitos.ini", "9", 0 );
	dini_IntSet( "Eleitos.ini", "10", 0 );
}

forward voltarCaminhao( playerid );
public voltarCaminhao( playerid )
{
	if( IsPlayerConnected( playerid ) && saiuCaminhao[ playerid ] == 1 )
	{
	    if( cargaTempo[ playerid ] <= 0 )
	    {
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você ficou mais de 50 segundos fora do caminhão e sua carga foi perdida !" );
			GameTextForPlayer( playerid, "~r~~h~CARGA PERDIDA", 1000, 1 );
		    DisablePlayerCheckpoint( playerid );
		    Carga[ playerid ] = 0;
	        return 1;
	    }
		if( cargaTempo[ playerid ] > 0 )
		{
		    cargaTempo[ playerid ] --;
		    tempoCarga[ playerid ] = SetTimerEx( "voltarCaminhao", 1000, false, "d", playerid );
		    format( gStr, sizeof( gStr ), "~n~~n~~n~~r~~h~Volte para o caminhao~n~~b~~h~Tempo %d", cargaTempo[ playerid ] );
			GameTextForPlayer( playerid, gStr, 1000, 5 );
		}
	}
	return 1;
}
forward voltarForte( playerid );
public voltarForte( playerid )
{
	if( IsPlayerConnected( playerid ) && saiuForte[ playerid ] == 1 )
	{
	    if( ForteTempo[ playerid ] <= 0 )
	    {
			SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você ficou mais de 50 segundos fora do caminhão e sua carga foi perdida !" );
			GameTextForPlayer( playerid, "~r~~h~CARGA PERDIDA", 1000, 1 );
		    DisablePlayerCheckpoint( playerid );
		    RotaMFort[ playerid ] = 0;
	        return 1;
	    }
		if( ForteTempo[ playerid ] > 0 )
		{
		    ForteTempo[ playerid ] --;
		    tempoForte[ playerid ] = SetTimerEx( "voltarForte", 1000, false, "d", playerid );
		    format( gStr, sizeof( gStr ), "~n~~n~~n~~r~~h~Volte para o caminhao~n~~y~~h~Tempo %d", ForteTempo[ playerid ] );
			GameTextForPlayer( playerid, gStr, 1000, 5 );
		}
	}
	return 1;
}

/*stock setarVIP( playerid, diasVIP )
{
	new
	    Ano, Mes, Dia
	;
	getdate( Ano, Mes, Dia );

	dini_IntSet( f( playerid ), "PLAYER_VIP", 1 );

    new
        somaVIP = Dia + diasVIP
	;
	if( Mes == 2 && somaVIP > 28 )
	{
	    new
			somaDias = somaVIP - 28
		;
	    dini_IntSet( f( playerid ), "VIP_MES", Mes+1 );
	    dini_IntSet( f( playerid ), "VIP_DIA", somaDias );
	}
	if( Mes == 12 && somaVIP > 30 )
	{
	    new
			somaDias = somaVIP - 30
		;
    	dini_IntSet( f( playerid ), "VIP_MES", 1 );
	    dini_IntSet( f( playerid ), "VIP_DIA", somaDias );
	}
	if( Mes != 2 && Mes < 12 && somaVIP > 30 )
	{
	    new
			somaDias = somaVIP - 30
		;
    	dini_IntSet( f( playerid ), "VIP_MES", Mes+1 );
	    dini_IntSet( f( playerid ), "VIP_DIA", somaDias );
	}
	if( Mes != 2 && Mes < 12 && somaVIP < 30 )
	{
    	dini_IntSet( f( playerid ), "VIP_MES", Mes );
	    dini_IntSet( f( playerid ), "VIP_DIA", somaVIP );
	}
	pInfo[ playerid ][ PLAYER_VIP ] = 1;
}*/

stock getarVIP( playerid )
{
	if( dini_Int( f( playerid ), "PLAYER_VIP" ) == 1 )
	{
		new
		    Ano[ 2 ], Mes[ 2 ], Dia[ 2 ]
		;
		getdate( Ano[ 0 ], Mes[ 0 ], Dia[ 0 ] );

		Mes[ 1 ] = dini_Int( f( playerid ), "VIP_MES" );
		Dia[ 1 ] = dini_Int( f( playerid ), "VIP_DIA" );
		Ano[ 1 ] = dini_Int( f( playerid ), "VIP_ANO" );

		if( dini_Int( f( playerid ), "VIP_ANO" ) == 0 )
		{
		    dini_IntSet( f( playerid ), "VIP_ANO", Ano[ 0 ] );
		}
		if( Mes[ 0 ] != MES_LIMITE || Ano[ 0 ] != ANO_LIMITE )

			if( Mes[ 1 ] == 2 && Mes[ 0 ] == 2 && Dia[ 1 ] >= 28 && Dia[ 0 ] >= 28 && Ano[ 1 ] <= Ano[ 0 ] || Mes[ 0 ] == Mes[ 1 ] && Dia[ 0 ] >= Dia[ 1 ] && Ano[ 1 ] <= Ano[ 0 ] || Mes[ 0 ] > Mes[ 1 ] && Ano[ 1 ] <= Ano[ 0 ] )
			//if( Mes[ 1 ] == 2 && Mes[ 0 ] == 2 && Dia[ 1 ] >= 28 && Dia[ 0 ] >= 28 || Mes[ 0 ] == Mes[ 1 ] && Dia[ 0 ] >= Dia[ 1 ] || Mes[ 0 ] > Mes[ 1 ] )
			{
			    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Infelizmente seus dias de VIP acabaram." );
			    GameTextForPlayer( playerid, "~r~~h~EX~w~-~y~~h~VIP", 1000, 0 );
			    pInfo[ playerid ][ PLAYER_VIP ] = 0;
				dini_IntSet( f( playerid ), "PLAYER_VIP", 0 );
				dini_IntSet( f( playerid ), "VIP_MES", 0 );
				dini_IntSet( f( playerid ), "VIP_DIA", 0 );
				dini_IntSet( f( playerid ), "VIP_ANO", 0 );
				new
					setskin
				;
				if( pInfo[ playerid ][ Sexo ] == 1 )
				{
				    setskin = 0;
				    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sua skin foi setada para ID 0 Carl CJ Johnson." );
				}
	  			if( pInfo[ playerid ][ Sexo ] == 2 )
				{
				    setskin = 13;
				    SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Sua skin foi setada para ID 13 Normal Pad." );
				}
				SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você recebe $500 para comprar uma nova skin exceto skins para jodador VIP." );
				dini_IntSet( f( playerid ), "Skin", setskin );
			}
			else
			{
			    if( pInfo[ playerid ][ Preso ] == 0 )
			    {
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você é um(a) jogador(a) VIP." );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você tem 30 segundos para usar um teleporte do menu: {FFFFFF}/tps" );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você pode usar com ou sem um veículo esses comandos. Veja também: {FFFFFF}/ComandosVIP" );
					format( gStr, sizeof( gStr ), "[ > ] Seus dias de VIP irá vencer no dia %d do mês %d do ano de %d.", dini_Int( f( playerid ), "VIP_DIA" ), dini_Int( f( playerid ), "VIP_MES" ), dini_Int( f( playerid ), "VIP_ANO" ));
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					Teleporte[ playerid ] = 1;
				}
				else
				{
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você é um(a) jogador(a) VIP." );
					SendClientMessage( playerid, COLOR_ERRO, "[ > ] Você não pode usar nenhum teleporte VIP, você está preso(a)." );
					SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Você pode usar com ou sem um veículo esses comandos. Veja também: {FFFFFF}/ComandosVIP" );
					format( gStr, sizeof( gStr ), "[ > ] Seus dias de VIP irá vencer no dia %d do mês %d do ano de %d.", dini_Int( f( playerid ), "VIP_DIA" ), dini_Int( f( playerid ), "VIP_MES" ), dini_Int( f( playerid ), "VIP_ANO" ));
					SendClientMessage( playerid, COLOR_AMARELO, gStr );
					Teleporte[ playerid ] = 0;
				}
			}
		}
	}

stock AttTextEntrada( playerid )
{
	new
	    rand_1 = random( 14 )
	;
	format( gStr, sizeof( gStr ), "%s", GetTextShow( rand_1 ));
	TextDrawSetString( Entrada_T1[ playerid ], gStr );
}

stock GetTextShow( TextID )
{
	new
	    text[ 256 ]
	;
	if( TextID == 0 ) { text = "load0uk:load0uk"; }
	if( TextID == 1 ) { text = "loadsc1:loadsc1"; }
	if( TextID == 2 ) { text = "loadsc2:loadsc2"; }
	if( TextID == 3 ) { text = "loadsc3:loadsc3"; }
	if( TextID == 4 ) { text = "loadsc4:loadsc4"; }
	if( TextID == 5 ) { text = "loadsc5:loadsc5"; }
	if( TextID == 6 ) { text = "loadsc6:loadsc6"; }
	if( TextID == 7 ) { text = "loadsc7:loadsc7"; }
	if( TextID == 8 ) { text = "loadsc8:loadsc8"; }
	if( TextID == 9 ) { text = "loadsc9:loadsc9"; }
	if( TextID == 10 ) { text = "loadsc10:loadsc10"; }
	if( TextID == 11 ) { text = "loadsc11:loadsc11"; }
	if( TextID == 12 ) { text = "loadsc12:loadsc12"; }
	if( TextID == 13 ) { text = "loadsc13:loadsc13"; }
	if( TextID == 14 ) { text = "loadsc14:loadsc14"; }
	return text;
}
/*stock RemoveTag( p, tag[ ] = "[ N ]" )
{
    new
		n[ 24 ], pos, bool:found, len = strlen( tag )
	;
    GetPlayerName( p, n, 24 );
    while(( pos = strfind( n, tag, true, pos+1 )) != ( -1 ))
    {
        strdel( n, pos, ( pos + len ));
        found = true;
    }
    if( found )
        SetPlayerName( p, n );
}*/

stock MensagemHospital( playerid )
{
	if( pInfo[ playerid ][ Convenio ] == 0 )
	{
		if( pInfo[ playerid ][ Seguro ] == 0 )
		{
			SendClientMessage( playerid, COLOR_LARANJAAGUA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, COLOR_BRANCO, "* Foi retirado de sua conta bancária $200,00 para pagar os tratamentos médicos." );
			SendClientMessage( playerid, COLOR_BRANCO, "* Caso não queria mais pagar essa quantia pague um '{99FFCC}Convênio Médico{FFFFFF}'." );
			SendClientMessage( playerid, COLOR_BRANCO, "* Você também não possui um '{99FFCC}Seguro de Acidentes{FFFFFF}' portanto você perdeu seu dinheiro." );
			SendClientMessage( playerid, COLOR_LARANJAAGUA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			dini_IntSet( f( playerid ), "SaldoBanco", dini_Int( f( playerid ), "SaldoBanco" ) - 200 );
		}
		else if( pInfo[ playerid ][ Seguro ] == 1 )
		{
			SendClientMessage( playerid, COLOR_LARANJAAGUA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, COLOR_BRANCO, "* Foi retirado de sua conta bancária $200,00 para pagar os tratamentos médicos." );
			SendClientMessage( playerid, COLOR_BRANCO, "* Caso não queria mais pagar essa quantia pague um '{99FFCC}Convênio Médico{FFFFFF}'." );
			SendClientMessage( playerid, COLOR_BRANCO, "* Você possui um '{99FFCC}Seguro de Acidentes{FFFFFF}' portanto você não perdeu seu dinheiro." );
			SendClientMessage( playerid, COLOR_LARANJAAGUA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			dini_IntSet( f( playerid ), "SaldoBanco", dini_Int( f( playerid ), "SaldoBanco" ) - 200 );
		}
	}
	else if( pInfo[ playerid ][ Convenio ] == 0 )
	{
		if( pInfo[ playerid ][ Seguro ] == 0 )
		{
			SendClientMessage( playerid, 0x99FFCCAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, COLOR_BRANCO, "* Você possui '{99FFCC}Convênio Médico{FFFFFF}' portanto não foi retirado nada de sua conta bancária." );
			SendClientMessage( playerid, COLOR_BRANCO, "* Você não possui '{99FFCC}Seguro de Acidentes{FFFFFF}' portanto você perdeu seu dinheiro." );
			SendClientMessage( playerid, 0x99FFCCAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		}
		else if( pInfo[ playerid ][ Seguro ] == 1 )
		{
			SendClientMessage( playerid, 0x99FFCCAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
			SendClientMessage( playerid, COLOR_BRANCO, "* Você possui '{99FFCC}Convênio Médico{FFFFFF}' portanto não foi retirado nada de sua conta bancária." );
			SendClientMessage( playerid, COLOR_BRANCO, "* Você possui '{99FFCC}Seguro de Acidentes{FFFFFF}' portanto você não perdeu seu dinheiro." );
			SendClientMessage( playerid, 0x99FFCCAA, "•~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [ Hospital ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~•" );
		}
	}
}

stock retonarDroga( playerid )
{
	new
	    drogaNome[ 30 ]
	;
	if( pInfo[ playerid ][ KiloD ] == 1 )
	{
	    drogaNome = "maconha";
	}
	else if( pInfo[ playerid ][ KiloD ] == 2 )
	{
	    drogaNome = "cocaína";
	}
	else if( pInfo[ playerid ][ KiloD ] == 3 )
	{
	    drogaNome = "crack";
	}
	return drogaNome;
}

stock dataRegistro( playerid )
{
	dini_Set( f( playerid ), "regData", Gdata());
	dini_Set( hFile, "regHorario", Ghora());
}

stock ultimoLogin( playerid )
{
	dini_Set( f( playerid ), "ulData", Gdata());
	dini_Set( f( playerid ), "ulHorario", Ghora());
}

/*public OnPlayerUseMachine( playerid, machineid, Float:oldhealth, Float:newhealth )
{
    if( !GetMachineActive( machineid ))
        return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Máquina desativada !" ), 0;
    return 1;
}*/

forward DestruirTextsDrawns( );
public DestruirTextsDrawns( )
{
	TextDrawHideForAll( InfoSite );
	TextDrawDestroy( InfoSite );
	TextDrawHideForAll( Data );
	TextDrawDestroy( Data );
	TextDrawHideForAll( Relogio );
	TextDrawDestroy( Relogio );
	TextDrawHideForAll( Favela_1 );
	TextDrawDestroy( Favela_1 );
	TextDrawHideForAll( Favela_2 );
	TextDrawDestroy( Favela_2 );
	TextDrawHideForAll( AFK1 );
	TextDrawDestroy( AFK1 );
	TextDrawHideForAll( BPO_Games );
	TextDrawDestroy( BPO_Games );
//	TextDrawHideForAll( Viva_Vida );
//	TextDrawDestroy( Viva_Vida );
	TextDrawHideForAll( IMG_Matou );
	TextDrawDestroy( IMG_Matou );
	TextDrawHideForAll( IMG_Morreu );
	TextDrawDestroy( IMG_Morreu );
	TextDrawHideForAll( statsShop );
	TextDrawDestroy( statsShop );
	for( new i = 0; i < MAX_PLAYERS; ++i )
	{
	    TextDrawHideForPlayer( i, InfoPlayer[ i ] );
		TextDrawDestroy( InfoPlayer[ i ] );
		TextDrawHideForPlayer( i, MSG_Matou[ i ] );
		TextDrawDestroy( MSG_Matou[ i ] );
		TextDrawHideForPlayer( i, TextLevelUP[ i ] );
		TextDrawDestroy( TextLevelUP[ i ] );
		TextDrawHideForPlayer( i, Zones[ i ] );
		TextDrawDestroy( Zones[ i ] );
		TextDrawHideForPlayer( i, Velocidade[ i ] );
		TextDrawDestroy( Velocidade[ i ] );
		TextDrawHideForPlayer( i, Gasolina[ i ] );
		TextDrawDestroy( Gasolina[ i ] );
		TextDrawHideForPlayer( i, Modelo[ i ] );
		TextDrawDestroy( Modelo[ i ] );
		TextDrawHideForPlayer( i, p_TextPreso[ i ] );
		TextDrawDestroy( p_TextPreso[ i ] );
		TextDrawHideForPlayer( i, Server_Areas[ i ] );
		TextDrawDestroy( Server_Areas[ i ] );
    }
	for( new t; t < 4; t++ )
	{
		TextDrawHideForAll( TextAnuncio[ t ] );
	    TextDrawDestroy( TextAnuncio[ t ] );
	}
	return 1;
}

stock IsACar( vehicleid )
{
	new result;
	new model = GetVehicleModel( vehicleid );
    switch( model )
    {
        case 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
        418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438,
        439, 440, 442, 443, 444, 445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475, 477, 478, 479,
        480, 482, 483, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506,
        507, 508, 514, 515, 516, 517, 518, 524, 525, 526, 527, 528, 529, 533, 534, 535, 536, 540, 541,
        542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562,
        565, 566, 567, 568, 573, 575, 576, 578, 579, 580, 582, 585, 587, 588,  589, 596, 597, 598, 599,
        600, 601, 602, 603, 604, 605, 609: result = model;
        default: result = 0;
    }
	return result;
}

stock IsAPlane( vehicleid )
{
	new result;
	new model = GetVehicleModel( vehicleid );
    switch( model )
    {
    	case 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 513, 512, 519, 520, 548, 553, 563, 477, 592, 593: result = model;
		default: result = 0;
    }
    return result;
}

stock IsABike( vehicleid )
{
	new result;
	new model = GetVehicleModel( vehicleid );
    switch( model )
    {
        case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: result = model;
        default: result = 0;
    }
	return result;
}

stock IsABikeBike( vehicleid )
{
	new result;
	new model = GetVehicleModel( vehicleid );
    switch( model )
    {
        case 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: result = model;
        default: result = 0;
    }
	return result;
}

stock IsABarco( vehicleid )
{
	new result;
	new model = GetVehicleModel( vehicleid );
    switch( model )
    {
        case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: result = model;
        default: result = 0;
    }
	return result;
}

stock IsCasaIlha( C )
{
	if( C == 132 || C == 133 || C == 134 || C == 135 || C == 136 || C == 137 || C == 138 || C == 139 || C == 154 || C == 140 ||
		C == 141 || C == 142 || C == 143 || C == 144 || C == 145 || C == 146 || C == 147 || C == 148 || C == 149 || C == 150 ||
		C == 151 || C == 152 || C == 132 || C == 133 || C == 134 || C == 135 || C == 136 || C == 137 || C == 138 || C == 139 ||
		C == 154 || C == 140 || C == 141 || C == 142 || C == 143 || C == 144 || C == 145 || C == 146 || C == 147 || C == 148 ||
		C == 149 || C == 150 || C == 151 || C == 152 ) return true;
		else return false;
}

stock IsCasaVilaCSI( C )
{
	if( C == 357 || C == 358 || C == 359 || C == 360 || C == 361 ) return true;
		else return false;
}

stock IsCasaVila( C )
{
	if( C == 320 || C == 321 || C == 322 || C == 323 || C == 324 || C == 325 || C == 320 || C == 321 || C == 322 || C == 323 || C == 324 || C == 325 ) return true;
		else return false;
}

stock eNitro( NitroID )
{
	if( NitroID == 1008
	|| NitroID == 1009
	|| NitroID == 1010 ) return true;
	else return false;
}

stock eRoda( rodaID )
{
	if( rodaID == 1025
	|| rodaID == 1073
	|| rodaID == 1074
	|| rodaID == 1075
	|| rodaID == 1076
    || rodaID == 1077
    || rodaID == 1078
    || rodaID == 1079
    || rodaID == 1080
    || rodaID == 1081
    || rodaID == 1082
    || rodaID == 1083
    || rodaID == 1084
    || rodaID == 1085
    || rodaID == 1096
    || rodaID == 1097
    || rodaID == 1098 ) return true;
    else return false;
}

stock eSpoiler( SpoilerID )
{
	if( SpoilerID == 1000
	|| SpoilerID == 1001
	|| SpoilerID == 1002
	|| SpoilerID == 1003
	|| SpoilerID == 1014
	|| SpoilerID == 1015
	|| SpoilerID == 1016
	|| SpoilerID == 1023
	|| SpoilerID == 1058
	|| SpoilerID == 1060
	|| SpoilerID == 1049
	|| SpoilerID == 1050
	|| SpoilerID == 1138
	|| SpoilerID == 1139
	|| SpoilerID == 1146
	|| SpoilerID == 1147
	|| SpoilerID == 1158
	|| SpoilerID == 1162
	|| SpoilerID == 1163
	|| SpoilerID == 1164 ) return true;
	else return false;
}

stock eHydraulico( HydraulicoID )
{
	if( HydraulicoID == 1087 ) return true;
	else return false;
}

stock eParachoqueDianteiro( ParaChoqueDianteiroID )
{
    if( ParaChoqueDianteiroID == 1117
    || ParaChoqueDianteiroID == 1152
    || ParaChoqueDianteiroID == 1153
    || ParaChoqueDianteiroID == 1155
    || ParaChoqueDianteiroID == 1157
    || ParaChoqueDianteiroID == 1160
    || ParaChoqueDianteiroID == 1165
    || ParaChoqueDianteiroID == 1167
    || ParaChoqueDianteiroID == 1169
    || ParaChoqueDianteiroID == 1170
    || ParaChoqueDianteiroID == 1171
    || ParaChoqueDianteiroID == 1172
    || ParaChoqueDianteiroID == 1173
    || ParaChoqueDianteiroID == 1174
    || ParaChoqueDianteiroID == 1175
    || ParaChoqueDianteiroID == 1179
    || ParaChoqueDianteiroID == 1181
    || ParaChoqueDianteiroID == 1182
    || ParaChoqueDianteiroID == 1185
    || ParaChoqueDianteiroID == 1188
    || ParaChoqueDianteiroID == 1189
    || ParaChoqueDianteiroID == 1192
    || ParaChoqueDianteiroID == 1193 ) return true;
    else return false;
}

stock eParachoqueTraseiro( ParaChoqueTraseiroID )
{
	if( ParaChoqueTraseiroID == 1140
    || ParaChoqueTraseiroID == 1141
    || ParaChoqueTraseiroID == 1148
    || ParaChoqueTraseiroID == 1149
    || ParaChoqueTraseiroID == 1150
    || ParaChoqueTraseiroID == 1151
    || ParaChoqueTraseiroID == 1154
    || ParaChoqueTraseiroID == 1156
    || ParaChoqueTraseiroID == 1159
    || ParaChoqueTraseiroID == 1161
    || ParaChoqueTraseiroID == 1166
    || ParaChoqueTraseiroID == 1168
    || ParaChoqueTraseiroID == 1176
    || ParaChoqueTraseiroID == 1177
    || ParaChoqueTraseiroID == 1178
    || ParaChoqueTraseiroID == 1180
    || ParaChoqueTraseiroID == 1183
    || ParaChoqueTraseiroID == 1184
    || ParaChoqueTraseiroID == 1186
    || ParaChoqueTraseiroID == 1187
    || ParaChoqueTraseiroID == 1190
    || ParaChoqueTraseiroID == 1191 ) return true;
    else return false;
}

stock eEscapamento( EscapamentoID )
{
    if( EscapamentoID == 1018
    || EscapamentoID == 1019
    || EscapamentoID == 1020
    || EscapamentoID == 1021
    || EscapamentoID == 1022
    || EscapamentoID == 1028
    || EscapamentoID == 1029
    || EscapamentoID == 1037
    || EscapamentoID == 1043
    || EscapamentoID == 1044
    || EscapamentoID == 1045
    || EscapamentoID == 1046
    || EscapamentoID == 1059
    || EscapamentoID == 1064
    || EscapamentoID == 1065
    || EscapamentoID == 1066
    || EscapamentoID == 1089
    || EscapamentoID == 1092
    || EscapamentoID == 1104
    || EscapamentoID == 1105
    || EscapamentoID == 1113
    || EscapamentoID == 1114
    || EscapamentoID == 1126
    || EscapamentoID == 1127
    || EscapamentoID == 1129
    || EscapamentoID == 1132
    || EscapamentoID == 1135
    || EscapamentoID == 1034
    || EscapamentoID == 1136 ) return true;
    else return false;
}

stock eBventr( BventrID )
{
    if( BventrID == 1142
    || BventrID == 1144 ) return true;
    else return false;
}

stock eBventl( BventlID )
{
    if( BventlID == 1143
    || BventlID ==  1145 ) return true;
    else return false;
}

stock eBscoop( BscoopID )
{
	if( BscoopID == 1004
	|| BscoopID == 1005
	|| BscoopID == 1011
	|| BscoopID == 1012 ) return true;
	else return false;
}

stock eRscoop( RscoopID )
{
    if( RscoopID == 1006
    || RscoopID == 1032
    || RscoopID == 1033
    || RscoopID == 1035
    || RscoopID == 1038
    || RscoopID == 1053
    || RscoopID == 1054
    || RscoopID == 1055
    || RscoopID == 1061
    || RscoopID == 1067
    || RscoopID == 1068
    || RscoopID == 1088
    || RscoopID == 1091
    || RscoopID == 1103
    || RscoopID == 1128
    || RscoopID == 1130
    || RscoopID == 1131 ) return true;
    else return false;
}

stock eLskirt( LskirtID )
{
    if( LskirtID == 1007
    || LskirtID == 1026
    || LskirtID == 1031
    || LskirtID == 1036
    || LskirtID == 1039
    || LskirtID == 1042
    || LskirtID == 1047
    || LskirtID == 1048
    || LskirtID == 1056
    || LskirtID == 1057
    || LskirtID == 1069
    || LskirtID == 1070
    || LskirtID == 1090
    || LskirtID == 1093
    || LskirtID == 1106
    || LskirtID == 1108
    || LskirtID == 1118
    || LskirtID == 1119
    || LskirtID == 1133
    || LskirtID == 1122
    || LskirtID == 1134 ) return true;
    else return false;
}

stock eRskirt( RskirtID )
{
	if( RskirtID == 1017
    || RskirtID == 1027
    || RskirtID == 1030
    || RskirtID == 1040
    || RskirtID == 1041
    || RskirtID == 1051
    || RskirtID == 1052
    || RskirtID == 1062
    || RskirtID == 1063
    || RskirtID == 1071
    || RskirtID == 1072
    || RskirtID == 1094
    || RskirtID == 1095
    || RskirtID == 1099
    || RskirtID == 1101
    || RskirtID == 1102
    || RskirtID == 1107
    || RskirtID == 1120
    || RskirtID == 1121
    || RskirtID == 1124
    || RskirtID == 1137 ) return true;
    else return false;
}

stock eBase( BaseID )
{
    if( BaseID == 1086 ) return true;
    else return false;
}

stock eRbbars( RbbarsID )
{
	if( RbbarsID == 1109
    || RbbarsID == 1110
    || RbbarsID == 1123
    || RbbarsID == 1125 ) return true;
    else return false;
}

stock eFbbars( FbbarsID )
{
    if( FbbarsID == 1115
    || FbbarsID == 1116 ) return true;
    else return false;
}

stock eLights( LightsID )
{
	if( LightsID == 1013
	|| LightsID == 1024 ) return true;
	else return false;
}

stock componenteNome( component )
{
    new
		cName[ 64 ]
	;
	if( eNitro( component ))
	{
		cName = "Nitro";
	}
	if( eRoda( component ))
	{
		cName = "Roda";
	}
	if( eSpoiler( component ))
	{
		cName = "Spoiler";
	}
	if( eHydraulico( component ))
	{
		cName = "Hydraulico";
	}
	if( eParachoqueDianteiro( component ))
	{
		cName = "ParachoqueDianteiro";
	}
	if( eParachoqueTraseiro( component ))
	{
		cName = "ParachoqueTraseiro";
	}
	if( eEscapamento( component ))
	{
		cName = "Escapamento";
	}
	if( eBventr( component ))
	{
		cName = "Bventr";
	}
	if( eBventl( component ))
	{
		cName = "Bventl";
	}
	if( eBscoop( component ))
	{
		cName = "Bscoop";
	}
	if( eRscoop( component ))
	{
		cName = "Rscoop";
	}
	if( eLskirt( component ))
	{
		cName = "Lskirt";
	}
	if( eRskirt( component ))
	{
		cName = "Rskirt";
	}
	if( eBase( component ))
	{
		cName = "Base";
	}
	if( eRbbars( component ))
	{
		cName = "Rbbars";
	}
	if( eFbbars( component ))
	{
		cName = "Fbbars";
	}
	if( eLights( component ))
	{
		cName = "Lights";
	}
	return cName;
}

stock ComandosProf( playerid )
{
	new
		stg[ 1500 ] // /profissao de cada profissao
	;
	// Profissão de desempregado
	if( pInfo[ playerid ][ Prof ] == DESEMPREGADO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Desempregado(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos desempregados." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nProcure um emprego." );
		strcat( stg, gstring );
	}
	// Categoria Transporte
	else if( pInfo[ playerid ][ Prof ] == 1 )// Motorista de Busão
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Motorista de Ônibus ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos motorista de ônibus." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /IniciarRota [ Texto ]\nFunção:\nIniciar a tragetória da rota." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /ProximoPonto\nFunção:\nParar no ponto de ônibus e aguardar 5 segundos.\nE indicar o próximo ponto." );
		strcat( stg, gstring );
 		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PontoFinal\nFunção:\nUsado para concluir a rota no ponto inicial(FINAL)." );
		strcat( stg, gstring );
 		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Passagem [ ID ]\nFunção:\nCobra a tarifa de passagem de um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nDiriga com cuidado, respeite os passageiros." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == TAXISTA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Taxista ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) taxistas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Taximetro carro [ ID ]\nFunção:\nInicia a contagem no taximetro." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja rápido na viagem e ganhe muitos passageiros." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == MOTO_TAXISTA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Moto Taxista ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) moto taxistas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Taximetro moto [ ID ]\nFunção:\nInicia a contagem no taximetro." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nEvite cair com passageiros e ganhe confiança." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == TAXI_AEREO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Taxista Aéreo ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) taxistas aéreos(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Taximetro aereo [ ID ]\nFunção:\nInicia a contagem no taximetro." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nFaça um voo trânquilo evite turbulências." );
		strcat( stg, gstring );
	}
	// Categoria Transporte público
	else if( pInfo[ playerid ][ Prof ] == CAMINHONEIRO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Caminhoneiro(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) caminhoneiros(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Carregar \nFunção:\nCarrega seu caminhão na área de carga." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Descarregar \nFunção:\nDescarrega seu caminhão na área de descarga." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nFaça viagens rápidas e fature muito dinheiro." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == MAQUINISTA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Maquinista ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Maquinistas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /SairEstacao\nFunção:\nInicia sua rota de viagem.\nVocê deve usar esse comando em todas estações." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /ChegadaFinal\nFunção:\nUsado na estação de inicio para receber pela viagem." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nCompartilhe o treem e faça muitas amizades." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == MOTOBOY )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Moto(Boy/Girl) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Moto(Boy/Girl)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PegarMercadoria \nFunção:\nPega a mercadoria para você entregar." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /eMecardoria[1/5]\nFunção:\nEntrega a mercadoria de acordo com os pontos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /eComprovantes\nFunção:\nUsado para entregar os comprovantes e receber pelas entregas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nPilote a moto com cuidado para preservar sua vida." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PILOTO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Piloto(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Pilotos(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PegarEntrega \nFunção:\nPega a mercadoria para você entregar." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /EntregarLV\nFunção:\nEntrega a mercadoria em Las Venturas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /EntregarSF\nFunção:\nEntrega a mercadoria em San Fierro." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /EntregarAB\nFunção:\nEntrega a mercadoria no Aeroporto Abandonado." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /TerminarEntrega\nFunção:\nPara dar baixa em suas entregas, e receber seu pagamento." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nPilote com cuidado para preservar sua vida." );
		strcat( stg, gstring );
	}
	// Categoria Particulares
	else if( pInfo[ playerid ][ Prof ] == SEGURANCA_PART )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Segurança Particular ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) seguranças particulares." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: Nenhum no momento. (EM BREVE)" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Combine com alguém um valor $, e o protega." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nHonre sempre sua palavra." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == MOTORISTA_PART )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Motorista Particular ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) motoristas particulares." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: Nenhum no momento. (EM BREVE)" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Combine com alguém um valor $, e seja o(a) motorista do mesmo(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nDiriga com cuidado pela sua segurança." );
		strcat( stg, gstring );
	}
	// Categoria Policia
	else if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Guarda de Trânsito ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) guardas de trânsito." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Prender [ ID ] [ Motivo ]\nFunção:\nPrende um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja correto e justo. pois o bem sempre prevalece." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Policia Civil ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) policiais civil." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Procurar [ ID ] [ Motivo ]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverListaP [ ID ] [ Motivo ]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Prender [ ID ] [ Motivo ]\nFunção:\nPrende um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja correto e justo. pois o bem sempre prevalece." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Policia Militar ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) policiais militar." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Procurar [ ID ] [ Motivo ]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverListaP [ ID ] [ Motivo ]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Prender [ ID ] [ Motivo ]\nFunção:\nPrende um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja correto e justo. pois o bem sempre prevalece." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == DELEGADO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Delegado(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) delegados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Procurar [ ID ] [ Motivo ]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverListaP [ ID ] [ Motivo ]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Prender [ ID ] [ Motivo ]\nFunção:\nPrende um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja correto e justo. pois o bem sempre prevalece." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == EXERCITO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Exercito ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat do Exercito." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Procurar [ ID ] [ Motivo ]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverListaP [ ID ] [ Motivo ]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja correto e justo. pois o bem sempre prevalece." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == BOPE )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) BOPE ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) BOPE." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Procurar [ ID ] [ Motivo ]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverListaP [ ID ] [ Motivo ]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Giroflex\nFunção:\nColoca um giroflex da policia em seu veiculo." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja correto e justo. pois o bem sempre prevalece." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Policia Rodoviaria ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) policiais rodoviarios." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Multar [ ID ] [ Quantia ] [ Motivo ]\nFunção:\nMulta um jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Procurar [ ID ] [ Motivo ]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverListaP [ ID ] [ Motivo ]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Prender [ ID ] [ Motivo ]\nFunção:\nPrende um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /ap1 e /fp1 /ap2 e /fp2\nFunção:\nAbre e fecha o portão 1 e 2 do pedagio." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Giroflex\nFunção:\nColoca um giroflex da policia em seu veiculo." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nNão abuse nunca do seu trabalho." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == MARINHA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Marinheiro(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Marinheiros." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Procurar [ ID ] [ Motivo ]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverListaP [ ID ] [ Motivo ]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Algemar [ ID ] [ Motivo ]\nFunção:\nAlgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Desalgemar [ ID ] [ Motivo ]\nFunção:\nDesalgema um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CriarTapete /RemoverTapete\nFunção:\nCria/Remove um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /abpd1 /abpd2 /fbpd1 /fbp2\nFunção:\nAbre e fecha os portões da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /selevador e /delevador\nFunção:\nSobe e desce o elevador da delegacia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Giroflex\nFunção:\nColoca um giroflex da policia em seu veiculo." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nNão abuse nunca do seu poder." );
		strcat( stg, gstring );
	}
	// Categoria Governo
	else if( pInfo[ playerid ][ Prof ] == JUIZ )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Juiz ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Juiz(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: Nenhum no momento. (EM BREVE)" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FF0000}! IMPORTATE: {FFFFFF}Leia as regras de policiais no fórum!" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSó julgue quando há certeza." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == DEPUTADO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Deputado(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) deputados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /prometer [ Mensagem ]\nFunção:\nUse para fazer uma promessa." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nFaça sempre o melhor." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PREFEITO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Prefeito(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) prefeito(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /comissio [ Mensagem ]\nFunção:\nUse para marcar um comissio." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja sempre humilde." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PRESIDENTE )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Presidente(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat do(a) presidente." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /falar [ Mensagem ]\nFunção:\nUse para falar sobre mudanças no servidor." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nRespeite para ser respeitado." );
		strcat( stg, gstring );
	}
	// Categoria Crime
	else if( pInfo[ playerid ][ Prof ] == TRAF_DROGAS )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Traficante de Drogas ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) traficantes de drogas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PegarDroga [ Cocaina/Maconha/Crack ] [ Quantia ]\nFunção:\nPara pegar um tipo de droga na área de drogas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /DrogasVenda\nFunção:\nPara saber a quantia de drogas que você possui." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vMaconha [ ID ] [ Quantia ] [ Valor ]\nFunção:\nVende um quantia de maconha para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vCocaina [ ID ] [ Quantia ] [ Valor ]\nFunção:\nVende um quantia de cocaína para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vCrack [ ID ] [ Quantia ] [ Valor ]\nFunção:\nVende um quantia de crack para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RemoverTapete\nFunção:\nRemover um tapete de pregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nNão abuse nunca com seu trabalho." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == TRAF_ARMAS )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Traficante de Armas ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) traficantes de armas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vArma [ ID ] [ arma ] [ munição ] [ preço ]\nFunção:\nVende uma arma para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nCuidado você pode ser preso quando menos esperar, atividade!" );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == ASSASSINO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Assassino(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) assassinos(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: Nenhum no momento. (EM BREVE)" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Na sua profissão você mata alguém a pedido de alguém\nvocê terá que cobrar pelo serviço." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nNão seja abuser, caso contrário falta de aviso não foi." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == ATIRADOR )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Atirador(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) atirador(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: Nenhum no momento. (EM BREVE)" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Use sua habilidade de matar na favela com sua sniper." );
		strcat( stg, gstring );
 		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Você recebe $20 por pessoa que você matar na favela." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja o melhor visando você não os outros." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == TERRORISTA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Terrorista ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) terrorista." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PlantarBomba\nFunção:\nPlanta uma bomba em um local desejado." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nRespeite os(as) novatos(as)." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == CHEFE_MAFIA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Chefe da Máfia ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Chefe da Máfia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vMaconha [ ID ] [ Quantia ] [ Valor ]\nFunção:\nVende um quantia de maconha para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vCocaina [ ID ] [ Quantia ] [ Valor ]\nFunção:\nVende um quantia de cocaína para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vCrack [ ID ] [ Quantia ] [ Valor ]\nFunção:\nVende um quantia de crack para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PegarDroga [ Cocaina/Maconha/Crack ] [ Quantia ]\nFunção:\nPara pegar um tipo de droga na área de drogas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /DrogasVenda\nFunção:\nPara saber a quantia de drogas que você possui." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vArma [ ID ] [ arma ] [ munição ] [ preço ]\nFunção:\nVende uma arma para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PlantarBomba\nFunção:\nPlanta uma bomba em um local desejado." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSeja homem / mulher de uma palavra só." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == AVIAOZINHO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Aviaõzinho(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) aviãozinhos(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PegarKilo [ Cocaina/Maconha/Crack ]\nFunção:\nPega um kilo(KG) de droga na área de drogas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /DepositarDroga\nFunção:\nDeposita o kilo(KG) de droga na favela e recebe pelo 'avião' feito." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nTome cuidado para não ser preso(a)." );
		strcat( stg, gstring );
	}
	// Categoria Outras 1
	else if( pInfo[ playerid ][ Prof ] == SEG_ILHA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Segurança da Ilha ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) seguranças da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /AbrirCentral\nFunção:\nAbre o portão central da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /FecharCentral\nFunção:\nFecha o portão central da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /AbrirEsquerda\nFunção:\nAbre o portão esquerdo da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /FecharEsquerda\nFunção:\nFecha o portão esquerdo da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /AbrirDireita\nFunção:\nAbre o portão direito da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /FecharDireita\nFunção:\nFecha o portão direito da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSempre visando quem entra e quem sai com atenção." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PORT_ILHA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Porteiro(a) da Ilha ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) porteiro(a) da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /AbrirCentral\nFunção:\nAbre o portão central da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /FecharCentral\nFunção:\nFecha o portão central da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /AbrirEsquerda\nFunção:\nAbre o portão esquerdo da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /FecharEsquerda\nFunção:\nFecha o portão esquerdo da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /AbrirDireita\nFunção:\nAbre o portão direito da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /FecharDireita\nFunção:\nFecha o portão direito da ilha." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSempre visando quem entra e quem sai com atenção." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PIZZABOY )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Pizza(Boy/Girl) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) pizza(boy/girl)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vPizza [ ID ] [ Sabor ]\nFunção:\nVende uma pizza para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Sabores\nFunção:\nAbre uma lista com os sabores disponivéis e seus ID." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSe espelhe no cliente." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == FOTOGRAFO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Fotógrafo(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) fotógrafos(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /TirarFoto\nFunção:\nTira uma foto em qualquer local." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /VenderFotos\nFunção:\nVende as fotos tiradas e você recebe por elas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nO presente é agora foto é lembraça do passado." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == REPORTER )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Reporter ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) reporters." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Noticia [ Noticia ]\nFunção:\nUse para relatar uma notícia sobre o servidor." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nQuem fala muito acaba mordendo a língua." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == HOTDOG )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) vendedor(a) de hotdog ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) vendedores(as) de hotdog." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vHotDog [ ID ] [ Sabor ]\nFunção:\nVende um cachorro quente para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Hotdogs\nFunção:\nAbre uma lista com os sabores disponivéis e seus ID." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nA noite é uma criança." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == SORVETEIRO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) vendedor(a) de Sorvete ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) vendedores(as) de Sorvete." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vSorvete [ ID ] [ Sabor ]\nFunção:\nVende um sorvete para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Sorvetes\nFunção:\nAbre uma lista com os sabores disponivéis e seus ID." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nAproveite o verão." );
		strcat( stg, gstring );
	}
 	else if( pInfo[ playerid ][ Prof ] == DRIFTER )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Drifter ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) drifters." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /AutoTuning\nFunção:\nTuna seu veículo com peças aleatorias." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nCorrer faz parte, bater nos outros resulta em arte." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == INSTRUTOR )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Instrutor(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) instrutores(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /V [ Terrestre/Nautica/Aerea]\nFunção:\nVende uma habitação para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Faça testes com seus clientes antes de vender." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nProcure ajudar os(as) novato(as)." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == MECANICO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Mecânico(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) mecânicos(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Consertar\nFunção:\nConserta um veículo quebrado." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Pintar [ Cor1 ] [ Cor2 ]\nFunção:\nPinta um veículo." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Vnome\nFunção:\nVe o nome de um veículo." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Vid\nFunção:\nVe o ID de um veículo." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Em um veículo tracker você pode guinchar alguém caso necessário." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• ~ Uso do tracker:\ntecla 0: Guincha\ntecla 8: Desce\ntecla 2: Sobe." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nDe graça nem injeção na testa, fature." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == SEG_VILA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Segurança da Vila ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) seguranças da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /apv1\nFunção:\nAbre o portão número 1 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /fpv1\nFunção:\nFecha o portão número 1 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /apv2\nFunção:\nAbre o portão número 2 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /fpv2\nFunção:\nFecha o portão número 2 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nFaça mais do que menos." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PORT_VILA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Porteiro(a) da Vila ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) porteiros(as) da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /apv1\nFunção:\nAbre o portão número 1 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /fpv1\nFunção:\nFecha o portão número 1 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /apv2\nFunção:\nAbre o portão número 2 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /fpv2\nFunção:\nFecha o portão número 2 da vila." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nNão deixe de ser você por questões maiores que você." );
		strcat( stg, gstring );
	}
	// Categoria Outras 2
	else if( pInfo[ playerid ][ Prof ] == PESCADOR )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Pescador(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) pescadores(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /JogarRede\nFunção:\nJoga a rede de pesca na área de pesca." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /VenderPesca\nFunção:\nVende suas pescar na cooperativa de pescas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nQuanto mais peixes mais você ganha." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == CACADOR )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Caçador(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) caçadores(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Cacar\nFunção:\nInicia uma caça." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /VenderPesca\nFunção:\nVende suas caças na cooperativa de caças." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nQuanto mais caças mais você ganha." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == MEDICO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Médico(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) médicos(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vCura [ ID ] [ Preço ]\nFunção:\nCura um(a) jogador(a) por um determinado preço." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nA cura está em nós." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == ADVOGADO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Advogado(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) advogados(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Soltar [ ID ]\nFunção:\nSolta um(a) jogador(a) da cadeia." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nSolte somente quem realmente merece." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == VENDEDOR_SKINS )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Vendedor(a) de Skins ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) vendedores(as) de skin." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /vSkin [ ID ] [ ID Skin ] [ Preço ]\nFunção:\nVende uma skin para um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nNão julgue as pessoas por aparência." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == FRENTISTA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Frentista ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) frentistas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Estacionar\nFunção:\nPara estacionar os veículos da agência de empregos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Ab\nFunção:\nAbastece o veiculo do ID selecionado." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nMantenha a agência organizada, você recebe comissão por cada veiculo estacionado." );
		strcat( stg, gstring );
	}
 	else if( pInfo[ playerid ][ Prof ] == PROSTITUTA )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Prostituta ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat das prostitutas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Beijar [ 1/15 ]\nFunção:\nBeijar, são 15 tipos de beijos." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nDar para todo mundo." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PADRE )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Padre ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) padres." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Abencoar [ ID ]\nFunção:\nAbençoa um(a) jogador(a)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nDeus e Jesus fazem parte de nossas vidas." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == BOMBEIRO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Bombeiro(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) bombeiros(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /ProximoIncendio - Para ir apagar um novo incêndio." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /eCaminhaoB - Para estacionar o caminhão de bombeiros." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /BaixaIncendio - Para dar baixa de um incêndio apagado.." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nOnde tem fogo tem fumaça, onde tem fumaça o RoniRulez está lá-q." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == PEDREIRO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um Pedreiro ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos Pedreiros." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /IniciarObra - Para iniciar um nova Obra." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /MaterialObra1 - Entregar o material da 1° obra." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /MaterialObra2 - Entregar o material da 2° obra." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /MaterialObra3 - Entregar o material da 3° obra." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /TerminarObra - Para dar baixa na obra terminada." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nTrabalhe bem faça suas obras rapidamente!." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == LIXEIRO )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos para um(a) Lixeiro(a) ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Lixeiros(as)." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Iniciarrotal - Para iniciar uma rota." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /Proximacesta - Para ir de uma cesta para outra." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /FimdaRota - Para dar baixa na rota feita.." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nFaça seu trabalho e ganhe seu salario!." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == M_CARRO_FORTE )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos de Motorista de Carro Forte ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat dos(as) Motoristas." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /PegarServiço - Para iniciar uma rota." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /RecolherDinheiro - Para recolher o dinheiro da empresa." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /DinheiroEntregar - Para entregar o dinheiro para o banco e pegar sua parte.." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nNão saia do veiculo." );
		strcat( stg, gstring );
	}
	else if( pInfo[ playerid ][ Prof ] == ENTREGADOR_SEDEX )
	{
		format( gstring, sizeof( gstring ), "\t{5FFF00}[ Comandos de Entregador Do Sedex ]" );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /CP [ Texto ]\nChat Sedex." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /MercadoriaSedex - Para iniciar uma entrega." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /SedexEntregar - Para entregar a mercadoria." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• CMD: /BaixaEntregaSedex - Para dar baixa no trabalho feito.." );
		strcat( stg, gstring );
		format( gstring, sizeof( gstring ), "\n\n{FFFFFF}• Dica:\nEntregue com agilidade." );
		strcat( stg, gstring );
	}
	format( gstring, sizeof( gstring ), "\n\n\tDiscord: Discord: Malboro#5173" );
	strcat( stg, gstring );
	ShowPlayerDialog( playerid, 1448, DIALOG_STYLE_MSGBOX, "{00FF00}» {FFFFFF}Comandos Profissão {FF0000}«", stg, "Fechar", "" );
	return 1;
}
/*
8 - Chuva
9 - Neblina
16 - Chuva + trovoadas
19 - tempestade de areia
40 - Sol Forte
91 - Escuridão
*/

forward Clima();
public Clima()
{
	new
		tR, ClimaID = minmax( 1, 7 );

	if( ClimaID == aClima )
	{
	    ClimaID = minmax( 1, 7 );
	}
	if( ClimaID == 7 )
	{
	    SetWeather( 8 );
	    tR = minmax( 17, 23 );
	    SetTimer( "Clima", tR*60000, false );
	}
	else if( ClimaID == 6 )
	{
	    SetWeather( 8 );
	    tR = minmax( 27, 33 );
	    SetTimer( "Clima", tR*60000, false );
	}
	else if( ClimaID == 5 )
	{
	    SetWeather( 16 );
	    tR = minmax( 7, 13 );
	    SetTimer( "Clima", tR*60000, false );
	}
	else if( ClimaID == 4 )
	{
	    SetWeather( 19 );
	    tR = minmax( 12, 18 );
	    SetTimer( "Clima", tR*60000, false );
	}
	else if( ClimaID == 3 )
	{
	    SetWeather( 19 );
     	tR = minmax( 115, 125 );
	    SetTimer( "Clima", tR*60000, false );
	}
	else if( ClimaID == 2 )
	{
	    SetWeather( 19 );
     	tR = minmax( 7, 13 );
	    SetTimer( "Clima", tR*60000, false );
	}
	else if( ClimaID == 1 )
	{
	    SetWeather( 10 );
		tR = minmax( 7, 13 );
	    SetTimer( "Clima", tR*60000, false );
	}
	aClima = ClimaID;
	print( "Mudança de clima Iniciado." );
	return 1;
}

stock minmax( min, max ) //By Alex "Y_Less" Cole
{
    return random( max - min ) + min;
}

forward CSImoveasubm();
public CSImoveasubm()
{
    MoveDynamicObject( pilhaCSI[ 2 ], -58.599609375,-1673.7998046875,5.5999999046326, 1.0 );
	return 1;
}

forward CSImovefsubm();
public CSImovefsubm()
{
    MoveDynamicObject( pilhaCSI[ 2 ], -58.599998474121,-1673.8000488281,-1.8999999761581, 1.0 );
	return 1;
}

forward CSImoveapont();
public CSImoveapont()
{
	MoveDynamicObject( pilhaCSI[ 3 ], -127.50000000,-1689.39941406,0.98000002, 4.0 );
	return 1;
}

forward CSImovefpont();
public CSImovefpont()
{
	MoveDynamicObject( pilhaCSI[ 3 ], -115.59999847412, -1766, -0.5, 4.0 );
	return 1;
}

forward CSImoveaports();
public CSImoveaports()
{
	// Portões ILHA CSI esquerdo
	MoveDynamicObject( pilhaCSI[ 0 ], -109.30000305,-1727.19995117,5.19999981, 2.0 );
	// Portões ILHA CSI direito
	MoveDynamicObject( pilhaCSI[ 1 ], -133.69999695,-1730.50000000,5.19999981, 2.0 );
	statusCSI = 1;
	return 1;
}

forward CSImovefports();
public CSImovefports()
{
	// Portões ILHA CSI esquerdo
	MoveDynamicObject( pilhaCSI[ 0 ], -116.5,-1728.099609375,5.1999998092651, 3.0 );
	// Portões ILHA CSI direito
	MoveDynamicObject( pilhaCSI[ 1 ], -126.5,-1729.5078125,5.1999998092651, 3.0 );
	return 1;
}

forward CSIfechaports();
public CSIfechaports()
{
	CSImovefports();
	statusCSI = 0;
	return 1;
}

stock SetiSpawnInfo( playerid )
{
    format( gFile, sizeof( gFile ), "Contas/%s.ini", PlayerName( playerid ));
	new
		c = dini_Int( gFile, "Casa" ), m = dini_Int( gFile, "MorandoID" )
	;
	if( c > 0 )
	{
		if( !strcmp( CasaInfo[ c ][ Proprietario ], PlayerName( playerid ), true ))
		{
            SetSpawnInfo( playerid, -1, dini_Int( f( playerid ), "Skin" ), CasaInfo[ c ][ PickupX ], CasaInfo[ c ][ PickupY ], CasaInfo[ c ][ PickupZ ], 0.0, -1, -1, -1, -1, 0, 0 );
		}
	}
	else if( m > 0 )
	{
		if( !strcmp( CasaInfo[ m ][ Morador ], PlayerName( playerid ), true ) ||
			!strcmp( CasaInfo[ m ][ Morador2 ], PlayerName( playerid ), true ) ||
			!strcmp( CasaInfo[ m ][ Morador3 ], PlayerName( playerid ), true ))
		{
            SetSpawnInfo( playerid, -1, dini_Int( f( playerid ), "Skin" ), CasaInfo[ m ][ PickupX ], CasaInfo[ m ][ PickupY ], CasaInfo[ m ][ PickupZ ], 0.0, -1, -1, -1, -1, 0, 0 );
		}
	}
	else
	{
	    SetSpawnInfo( playerid, -1, dini_Int( f( playerid ), "Skin" ), -2057.4851, 469.8219, 35.1723, 268.3578, -1, -1, -1, -1, 0, 0 );
	}
}

stock dmPlayerName( playerid )
{
	new
		pName2[MAX_PLAYER_NAME]
	;
	GetPlayerName( playerid , pName2, MAX_PLAYER_NAME+1 );
	if( !strcmp( "-", pName2, true ))
	{
	    pName2 = "Ninguém";
	}
	return pName2;
}

stock evdmResetPlayer( playerid )
{
 	SetPlayerPos( playerid, 1227.4470,-1817.2300,16.5938 );
	SetPlayerInterior( playerid, 0 );
	SetCameraBehindPlayer( playerid );
	TogglePlayerControllable( playerid, true );

    SetPlayerArmour( playerid, 0.0 );

	epDM[ playerid ][ dmParticipando ] = 0;
	epDM[ playerid ][ dm_Matou ] = 0;
	epDM[ playerid ][ dm_Morreu ] = 0;

	dmLimpar( playerid );
	ResetPlayerWeapons( playerid );

    SetColor( playerid );

 	for( new ii; ii < 5; ++ii )
	{
 		TextDrawHideForPlayer( playerid, dmColoText[ ii ] );
	}

	TextDrawHideForPlayer( playerid, dm_text_Top5[ 0 ] );
	TextDrawHideForPlayer( playerid, dm_text_Top5[ 1 ] );

	TextDrawHideForPlayer( playerid, dmiTimer[ 0 ] );
	TextDrawHideForPlayer( playerid, dmiTimer[ 1 ] );
}

forward evdmContagem();
public evdmContagem()
{
    if( esDM[ evdmCount ] <= 0 )
	{
		foreach(Player, i)
	    {
	        if( epDM[ i ][ dmParticipando ] == 1 )
	        {
	    		GameTextForPlayer( i, "~r~~h~VALENDO~w~~h~!", 2000, 5 );
	    	}
	    }
	    evDMiniciar();
	    return 1;
	}
	if( esDM[ evdmCount ] > 0 )
	{
	    esDM[ evdmCount ] -= 1;
	    format( gStr, 128, "~y~~h~Contagem para iniciar\n~w~~h~%d", esDM[ evdmCount ] );
	    foreach(Player, i)
	    {
	        if( epDM[ i ][ dmParticipando ] == 1 )
	        {
		        ResetPlayerWeapons( i );
		    	GameTextForPlayer( i, gStr, 1000, 5 );
	    	}
	    }
	    SetTimer( "evdmContagem", 1000, false );
	}
	return 1;
}

stock evDMiniciar()
{
	foreach(Player, i)
	{
		if( epDM[ i ][ dmParticipando ] == 1 )
	 	{
            dmSetEquipamentos( i );
	 	}
	}
	esDM[ evdmAnt_B ] = 0;
	esDM[ evdmCriado ] = 1;
	esDM[ evdmTimer ] = SetTimer( "iniciarDMCount", 1000, false );
}

stock dmSetEquipamentos( playerid )
{
	if( esDM[ evdmArmaPKDF ] == 1 )
	{
	 	dmPackSetPlayer( playerid, esDM[ evdmArmaPK ] );
	}
	if( esDM[ evdmArmaIDDF ][ 0 ] == 1 && esDM[ evdmArmaIDDF ][ 1 ] == 1 && esDM[ evdmArmaIDDF ][ 2 ] == 1 )
	{
		GivePlayerWeapon( playerid, esDM[ evdmArmaID ][ 0 ], 999 );
		GivePlayerWeapon( playerid, esDM[ evdmArmaID ][ 1 ], 999 );
		GivePlayerWeapon( playerid, esDM[ evdmArmaID ][ 2 ], 999 );
	}
	if( esDM[ evdmColeteDF ] == 1 )
	{
        SetPlayerArmour( playerid, 100.0 );
	}
}

forward dmRanking();
public dmRanking()
{
	new
		playerScores[ MAX_PLAYERS ][ dm_rankingEnum ],
		index
	;
	for( new i = 0; i != MAX_PLAYERS; ++i )
	//foreach(Player, i)
	{
		if( IsPlayerConnected( i ) && !IsPlayerNPC( i ) && epDM[ i ][ dmParticipando ] == 1 )
		{
			playerScores[ index ][ dm_player_Score ] = epDM[ i ][ dm_Matou ];
			playerScores[ index++ ][ dm_player_ID ] = i;
		}
 		if( epDM[ i ][ dmParticipando ] == 1 )
		{
			TextDrawShowForPlayer( i, dm_text_Top5[ 0 ] );
			TextDrawShowForPlayer( i, dm_text_Top5[ 1 ] );
			TextDrawShowForPlayer( i, dmColoText[ 4 ] );
			TextDrawShowForPlayer( i, dmColoText[ 3 ] );
			TextDrawShowForPlayer( i, dmColoText[ 2 ] );
			TextDrawShowForPlayer( i, dmColoText[ 1 ] );
			TextDrawShowForPlayer( i, dmColoText[ 0 ] );
		}
	}
	dmGetPlayerHighestScores( playerScores, 0, index );

	new
		score_Text[ 256 ] = "~n~",
		player_Name[ 20 ]
	;

	for( new ii; ii < 5; ++ii )
	{
		if( ii < index )
		{
    		GetPlayerName( playerScores[ ii ][ dm_player_ID ], player_Name, sizeof( player_Name ));
			format( score_Text, sizeof( score_Text ), "%s~n~~y~~h~%d. ~w~~h~%s - ~r~~h~%d", score_Text, ii + 1, player_Name, playerScores[ ii ][ dm_player_Score ] );
		}
		else
		{
			format( score_Text, sizeof( score_Text ), "%s~n~~y~%d. ~w~~h~Ninguem", score_Text, ii + 1 );
		}
		TextDrawSetString( dm_text_Top5[ 1 ], score_Text );
	}
	return 1;
}

forward iniciarDMCount();
public iniciarDMCount()
{
	if(( esDM[ evdmTempoDF ] == 1 ) && ( esDM[ evdmTempo ] <= 0 ))
	{
	    evdmGetTop( esDM[ evdmTop ] );

	    evDMreset( );
	    foreach(Player, i)
	    {
	    	dmLimpar( i );
		}
	    return 1;
	}
	if(( esDM[ evdmTempoDF ] == 1 ) && ( esDM[ evdmTempo ] > 0 ))
	{
		new
			d_Horas1,
			d_Minut1,
			d_Segun1
		;
		formatSeconds( esDM[ evdmTempo ], d_Horas1, d_Minut1, d_Segun1 );

	    format( gStr, 128, "~y~~h~~h~%d ~w~~h~Minuto(s)~n~~r~~h~%d ~w~~h~Segundos", d_Minut1, d_Segun1 );
		TextDrawSetString( dmiTimer[ 0 ], gStr );

		foreach(Player, i)
		{
		    if( epDM[ i ][ dmParticipando ] == 1 || IsPlayerAdmin( i ))
		    {
		        TextDrawShowForPlayer( i, dmiTimer[ 0 ] );
		        TextDrawShowForPlayer( i, dmiTimer[ 1 ] );
			}
	    }

	    dmRanking();

	    esDM[ evdmTempo ] -= 1;
	    esDM[ evdmTimer ] = SetTimer( "iniciarDMCount", 1000, false );
	}
	return 1;
}

stock dmGetPlayerHighestScores(array[][dm_rankingEnum], left, right)
{
    new
        tempLeft = left,
        tempRight = right,
        pivot = array[(left + right) / 2][dm_player_Score],
        tempVar
    ;
    while(tempLeft <= tempRight)
    {
        while(array[tempLeft][dm_player_Score] > pivot) tempLeft++;
        while(array[tempRight][dm_player_Score] < pivot) tempRight--;

        if(tempLeft <= tempRight)
        {
            tempVar = array[tempLeft][dm_player_Score], array[tempLeft][dm_player_Score] = array[tempRight][dm_player_Score], array[tempRight][dm_player_Score] = tempVar;
            tempVar = array[tempLeft][dm_player_ID], array[tempLeft][dm_player_ID] = array[tempRight][dm_player_ID], array[tempRight][dm_player_ID] = tempVar;
            tempLeft++, tempRight--;
        }
    }
    if(left < tempRight) dmGetPlayerHighestScores(array, left, tempRight);
    if(tempLeft < right) dmGetPlayerHighestScores(array, tempLeft, right);
}

stock dmLimpar( playerid )
{
    SetColor( playerid );
	epDM[ playerid ][ dmParticipando ] = 0;
	epDM[ playerid ][ dm_Matou ] = 0;
	epDM[ playerid ][ dm_Morreu ] = 0;
}

stock evDMcarregar( playerid )
{
	if( esDM[ evdmCriado ] == 0 )
	{
		if( esDM[ evdmArenaID ] != 0 && esDM[ evdmArenaIDDF ] == 1 )
		{
			if( esDM[ evdmArmaIDDF ][ 0 ] != 0 && esDM[ evdmArmaIDDF ][ 1 ] != 0 && esDM[ evdmArmaIDDF ][ 2 ] != 0 )
			{
                if( esDM[ evdmTempo ] >= 3 && esDM[ evdmTempoDF ] == 1 )
				{
					if( esDM[ evdmColete ] == 1 && esDM[ evdmColeteDF ] == 1 || esDM[ evdmColeteDF ] == 2 )
					{
						if( esDM[ evdmPremio ] >= EVENT_MINPRE && esDM[ evdmPremio ] <= EVENT_MAXPRE && esDM[ evdmPremioDF ] == 1 )
      					{
      					    if( esDM[ evdmTopDF ] == 1 )
						 	{
						        new
						            infoShowDM[ 256 ],
									showevDM1[ 64 ],
									showevDM2[ 128 ],
									showevDM3[ 64 ],
									showevDM4[ 64 ],
									dmdefColete[ 4 ]
								;
								if( esDM[ evdmColeteDF ] == 1 )
								{
								    dmdefColete = "Sim";
								}
								if( esDM[ evdmColeteDF ] == 2 )
								{
								    dmdefColete = "Não";
								}
								format( showevDM1, sizeof( showevDM1 ), "\tInfo Evento\n\nArena definida - Sim\nArena ID - %d\n\n", esDM[ evdmArenaID ] );
								format( showevDM2, sizeof( showevDM2 ), "Armas por ID\nArmas ID 1- %s\nArmas ID 2- %s\nArmas ID 3- %s\n\n", GetWeaponNameByID( esDM[ evdmArmaID ][ 0 ] ), GetWeaponNameByID( esDM[ evdmArmaID ][ 1 ] ), GetWeaponNameByID( esDM[ evdmArmaID ][ 2 ] ));
								format( showevDM3, sizeof( showevDM3 ), "Tempo em minutos - %d\n\nColete - %s\n\n", esDM[ evdmTempoAM ], dmdefColete );
                                format( showevDM4, sizeof( showevDM4 ), "Prêmio - $%d", esDM[ evdmPremio ] );
								format( infoShowDM, sizeof( infoShowDM ), "%s%s%s%s", showevDM1, showevDM2, showevDM3, showevDM4 );
								ShowPlayerDialog( playerid, D_DMEVENT+17, DIALOG_STYLE_MSGBOX, "Evento carregado", infoShowDM, "OK", "Redefinir" );

					         	esDM[ evdmCarregado ] = 1;
							}
					     	else
					    	{
					      		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o top evento !" );
					     	}
						}
						else
						{
							SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o prêmio !" );
						}
      				}
					else
					{
						SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o colete !" );
					}
				}
				else
				{
			  		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o tempo !" );
				}
			}
			else
			{
			    if( esDM[ evdmArmaPKDF ] != 0 )
			    {
			 		if( esDM[ evdmTempo ] >= 3 && esDM[ evdmTempoDF ] == 1 )
			 		{
						if( esDM[ evdmColete ] == 1 && esDM[ evdmColeteDF ] == 1 || esDM[ evdmColeteDF ] == 2 )
						{
						    if( esDM[ evdmPremio ] >= EVENT_MINPRE && esDM[ evdmPremio ] <= EVENT_MAXPRE && esDM[ evdmPremioDF ] == 1 )
						    {
						        if( esDM[ evdmTopDF ] == 1 )
						        {
							        new
							            infoShowDM[ 256 ],
										showevDM1[ 64 ],
										showevDM2[ 64 ],
										showevDM3[ 64 ],
										showevDM4[ 64 ],
										dmdefColete[ 4 ]
									;
									if( esDM[ evdmColeteDF ] == 1 )
									{
									    dmdefColete = "Sim";
									}
									if( esDM[ evdmColeteDF ] == 2 )
									{
									    dmdefColete = "Não";
									}
									format( showevDM1, sizeof( showevDM1 ), "\tInfo Evento\n\nArena definida - Sim\nArena ID - %d\n\n", esDM[ evdmArenaID ] );
									format( showevDM2, sizeof( showevDM2 ), "Pack de Armas\nPack de Armas ID - %d\n\n", esDM[ evdmArmaPK ] );
									format( showevDM3, sizeof( showevDM3 ), "Tempo em minutos - %d\n\nColete - %s\n\n", esDM[ evdmTempoAM ], dmdefColete );
	                                format( showevDM4, sizeof( showevDM4 ), "Prêmio - $%d", esDM[ evdmPremio ] );
									format( infoShowDM, sizeof( infoShowDM ), "%s%s%s%s", showevDM1, showevDM2, showevDM3, showevDM4 );
									ShowPlayerDialog( playerid, D_DMEVENT+17, DIALOG_STYLE_MSGBOX, "Evento carregado", infoShowDM, "OK", "Redefinir" );

						         	esDM[ evdmCarregado ] = 1;
					         	}
					         	else
					         	{
					         	    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o top evento !" );
					         	}
						    }
						    else
							{
							    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o prêmio !" );
							}
      					}
						else
						{
						    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o colete !" );
						}
					}
					else
				    {
			    		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir o tempo !" );
			    	}
			    }
			    else
			    {
		    		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir as armas ou pack armas !" );
		    	}
			}
		}
		else
		{
		    SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você precisa definir a arena !" );
		}
	}
	else
	{
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Já tem um evento de DM criado !" );
	}
}

forward evdmGodPlayers( );
public evdmGodPlayers( )
{
	foreach(Player, i )
	{
		if( epDM[ i ][ dmParticipando ] == 1 )
		{
		    SetPlayerHealth( i, 100.0 );
		}
	}
	if( esDM[ evdmAnt_B ] > 0 )
	{
		SetTimer( "evdmGodPlayers", 1000, false );
	}
	return 1;
}


stock evDMreset( )
{
    KillTimer( esDM[ evdmTimer ] );

	esDM[ evdmCriado ] = 0;
	esDM[ evdmCarregado ] = 0;

	esDM[ evdmLiberado ] = 0;

	esDM[ evdmArenaID ] = 0;
	esDM[ evdmArenaIDDF ] = 0;

	for( new i; i < 3; ++i )
	{
		esDM[ evdmArmaID ][ i ] = 0;
		esDM[ evdmArmaIDDF ][ i ] = 0;
	}

	esDM[ evdmListarm ] = 0;

	esDM[ evdmArmaPK ] = 0;
	esDM[ evdmArmaPKDF ] = 0;

	esDM[ evdmTempo ] = 0;
	esDM[ evdmTempoAM ] = 0;
	esDM[ evdmTempoDF ] = 0;

	esDM[ evdmColete ] = 0;
	esDM[ evdmColeteDF ] = 0;

	esDM[ evdmPremio ] = 0;
	esDM[ evdmPremioDF ] = 0;

	esDM[ evdmTop ] = 0;
	esDM[ evdmTopDF ] = 0;

	esDM[ evdmGodMod ] = 0;

    esDM[ evdmAnt_B ] = 0;

    esDM[ evdmCount ] = 0;

	foreach(Player, i)
	{
	    if( epDM[ i ][ dmParticipando ] == 1 )
	    {
			SetPlayerPos( i, 1227.4470,-1817.2300,16.5938 );
			SetPlayerInterior( i, 0 );
			SetCameraBehindPlayer( i );
			TogglePlayerControllable( i, true );

            SetPlayerArmour( i, 0.0 );

			epDM[ i ][ dmParticipando ] = 0;
			epDM[ i ][ dm_Matou ] = 0;
			epDM[ i ][ dm_Morreu ] = 0;

			dmLimpar( i );
			ResetPlayerWeapons( i );
		}
	}

	new
		score_Text[ 256 ] = "~n~"
	;

	for( new ii; ii < 5; ++ii )
	{
		format( score_Text, sizeof( score_Text ), "%s~n~~y~~h~%d. ~w~~h~Ninguem", score_Text, ii + 1 );
 		TextDrawHideForAll( dmColoText[ ii ] );
	}

	TextDrawSetString( dm_text_Top5[ 1 ], score_Text );

	TextDrawHideForAll( dm_text_Top5[ 0 ] );
	TextDrawHideForAll( dm_text_Top5[ 1 ] );

	TextDrawHideForAll( dmiTimer[ 0 ] );
	TextDrawHideForAll( dmiTimer[ 1 ] );
}

stock SetPosLocal( playerid, setArenaID )
{
	new
		Float:arx = saeArena[ setArenaID - 1 ][ 0 ],
		Float:ary = saeArena[ setArenaID - 1 ][ 1 ],
		Float:arz = saeArena[ setArenaID - 1 ][ 2 ],
		ari = intArena[ setArenaID - 1 ][ 0 ];
	SetPlayerPos( playerid, arx, ary, arz );
	SetPlayerInterior( playerid, ari );
}

stock dmPackSetPlayer( playerid, PackID )
{
	if( PackID == 1 )
	{
	    GivePlayerWeapon( playerid, 31, 999 );
	    GivePlayerWeapon( playerid, 34, 999 );
	    GivePlayerWeapon( playerid, 28, 999 );
	    GivePlayerWeapon( playerid, 26, 999 );
	    GivePlayerWeapon( playerid, 5, 999 );
	}
	if( PackID == 2 )
	{
	    GivePlayerWeapon( playerid, 32, 999 );
	    GivePlayerWeapon( playerid, 26, 999 );
	    GivePlayerWeapon( playerid, 24, 999 );
	    GivePlayerWeapon( playerid, 4, 999 );
	    GivePlayerWeapon( playerid, 30, 999 );
	}
	if( PackID == 3 )
	{
	    GivePlayerWeapon( playerid, 30, 999 );
	    GivePlayerWeapon( playerid, 3, 999 );
	    GivePlayerWeapon( playerid, 22, 999 );
	    GivePlayerWeapon( playerid, 29, 999 );
	}
	if( PackID == 4 )
	{
	    GivePlayerWeapon( playerid, 42, 999 );
	    GivePlayerWeapon( playerid, 6, 999 );
	    GivePlayerWeapon( playerid, 27, 999 );
	    GivePlayerWeapon( playerid, 23, 999 );
	}
	if( PackID == 5 )
	{
	    GivePlayerWeapon( playerid, 38, 999 );
	    GivePlayerWeapon( playerid, 42, 999 );
	    GivePlayerWeapon( playerid, 39, 999 );
	    GivePlayerWeapon( playerid, 40, 999 );
	}
}

stock GetWeaponNameByID( wid )
{
    new
		gunname[ 32 ]
	;
    switch( wid )
    {
        case    1 .. 17,
                22 .. 43,
                46: GetWeaponName( wid, gunname, sizeof( gunname ));
        case    0 : format( gunname, 32, "%s", "Fist" );
        case    18: format( gunname, 32, "%s", "Molotov Cocktail" );
        case    44: format( gunname, 32, "%s", "Night Vis Goggles" );
        case    45: format( gunname, 32, "%s", "Thermal Goggles" );
        default: format( gunname, 32, "%s", "Invalid Weapon Id" );

    }
    return gunname;
}

stock IsValidWeaponID(weaponid)
{
    if((weaponid > 0 && weaponid < 19) || (weaponid > 21 && weaponid < 47)) return 1;
    else return 0;
}

stock evdmGetTop( quantiaTops )
{
	new
		playerScores[ MAX_PLAYERS ][ dm_rankingEnum ],
		index
	;
	for( new i = 0; i != MAX_PLAYERS; ++i )
	{
		if( IsPlayerConnected( i ) && !IsPlayerNPC( i ) && epDM[ i ][ dmParticipando ] == 1 )
		{
			playerScores[ index ][ dm_player_Score ] = epDM[ i ][ dm_Matou ];
			playerScores[ index++ ][ dm_player_ID ] = i;
		}
	}
	dmGetPlayerHighestScores( playerScores, 0, index );

	new
		score_Text[ 128 ],
		player_Name[ 20 ]
		//dmBig[ 512 ]
	;
	format( gStr, 128, "~> Top %d evento:", quantiaTops );
	SendClientMessageToAll( -1, gStr );
	for( new ii; ii < quantiaTops; ++ii )
	{
		if( ii < index )
		{
	    	GetPlayerName( playerScores[ ii ][ dm_player_ID ], player_Name, sizeof( player_Name ));
			format( score_Text, sizeof( score_Text ), "{FF0000}%d° {00FF00}%s [ID %d] - {FFFFFF}Matou {FF0000}%d", ii + 1, player_Name, playerScores[ ii ][ dm_player_ID ], playerScores[ ii ][ dm_player_Score ] );
            //strcat( dmBig, score_Text );
			SendClientMessageToAll( -1, score_Text );
		}
		else
		{
			format( score_Text, sizeof( score_Text ), "{FF0000}%d° {FFFFFF}Ninguem\n", ii + 1 );
			SendClientMessageToAll( -1, score_Text );
			//strcat( dmBig, score_Text );
		}
	}
	/*new
	    dmiTop[ 20 ]
	;
	format( dmiTop, 20, "Top %d DM", quantiaTops );
	foreach(Player, i)
	{
	    if( epDM[ i ][ dmParticipando ] == 1 )
	    {
	        ShowPlayerDialog( i, D_DMEVENT+22, DIALOG_STYLE_MSGBOX, dmBig, dmiTop, "OK", "" );
	    }
	}*/
	return 1;
}

//

stock veiculoSetPPlayer( playerid, modelo, Float:spawnX, Float:spawnY, Float:spawnZ, Float:spawnA, c_c1, c_c2, play2 )
{
	new
		CarSlot = GetPlayerFreeSlot( playerid )
	;
	if( CarSlot == -1 )
	{
		return SendClientMessage( play2, COLOR_ERRO, "[ x ] Esse(a) jogador(a) atingiu o limite de veículos próprios !" );
	}
	new
		s[ 128 ]
	;
	format( s, 128, "Sets/%s_%d.ini", PlayerName( playerid ), CarSlot );

	if( !fexist( s ))
	{
		dini_Create( s );
		dini_Set( s, "s_Dono", PlayerName( playerid ));
		dini_IntSet( s, "v_modelo", modelo );
		dini_FloatSet( s, "v_pox", spawnX );
		dini_FloatSet( s, "v_poy", spawnY );
		dini_FloatSet( s, "v_poz", spawnZ );
		dini_FloatSet( s, "v_angulo", spawnA );
		dini_IntSet( s, "v_cor_1", c_c1 );
		dini_IntSet( s, "v_cor_2", c_c2 );
	}

	PlayerCarModelo[ playerid ][ CarSlot ][ CarID ] = modelo;
	PlayerCarConectado[ playerid ][ CarSlot ][ CarID ] = -1;

	return 1;
}

stock coresPlayerSet( playerid, SlotID, colors1, colors2 )
{
    PlayerCar[ playerid ][ SlotID ][ Color1 ] = colors1;
    PlayerCar[ playerid ][ SlotID ][ Color2 ] = colors2;

    ChangeVehicleColor( PlayerCarCreated[ playerid ], colors1, colors2 );
	new
		s[ 128 ]
	;
	format( s, 128, "Sets/%s_%d.ini", PlayerName( playerid ), SlotID );

	dini_IntSet( s, "v_cor_1", colors1 );
	dini_IntSet( s, "v_cor_2", colors2 );
}

stock estacionarPlayerSet( playerid, SlotID )
{
	new
		Float:pos[ 4 ]
	;
	GetVehiclePos( PlayerCarCreated[ playerid ], pos[ 0 ], pos[ 1 ], pos[ 2 ] );
	GetVehicleZAngle( PlayerCarCreated[ playerid ], pos[ 3 ] );

	PlayerCar[ playerid ][ SlotID ][ CposX ] = pos[ 0 ];
	PlayerCar[ playerid ][ SlotID ][ CposY ] = pos[ 1 ];
	PlayerCar[ playerid ][ SlotID ][ CposZ ] = pos[ 2 ];
	PlayerCar[ playerid ][ SlotID ][ CposA ] = pos[ 3 ];

	new
		s[ 128 ]
	;
	format( s, 128, "Sets/%s_%d.ini", PlayerName( playerid ), SlotID );

	dini_FloatSet( s, "v_pox", pos[ 0 ] );
	dini_FloatSet( s, "v_poy", pos[ 1 ] );
	dini_FloatSet( s, "v_poz", pos[ 2 ] );
	dini_FloatSet( s, "v_angulo", pos[ 3 ] );
}

stock GetPlayerFreeSlot( playerid )
{
	for( new i; i < MAX_PLAYER_CARS; ++i )
	{
	    if( PlayerCarModelo[ playerid ][ i ][ CarID ] == -1 )
	        return i;
	}
	return -1;
}

stock respawnPlayerSet( playerid, SlotID )
{
	SetVehiclePos( PlayerCarCreated[ playerid ],
	PlayerCar[ playerid ][ SlotID ][ CposX ],
	PlayerCar[ playerid ][ SlotID ][ CposY ],
	PlayerCar[ playerid ][ SlotID ][ CposZ ] );
	SetVehicleZAngle( PlayerCarCreated[ playerid ], PlayerCar[ playerid ][ SlotID ][ CposA ] );
}

stock localizarPlayerSet( playerid, SlotID )
{
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Seu veículo set foi localizado, foi colocado uma ícone no mapa com a letra S." );
	SendClientMessage( playerid, COLOR_AMARELO, "[ > ] Vá até a letra S, é o local onde você encontrará seu veículo set." );
	SetPlayerMapIcon( playerid, 90, PlayerCar[ playerid ][ SlotID ][ CposX ], PlayerCar[ playerid ][ SlotID ][ CposY ], PlayerCar[ playerid ][ SlotID ][ CposZ ], 38, 0, MAPICON_GLOBAL_CHECKPOINT );
}

stock ShowPlayerSets( playerid )
{
	new
		s[ 512 ], s1[ 64 ]
	;
	for( new i; i < MAX_PLAYER_CARS; ++i )
	{
		if( PlayerCarModelo[ playerid ][ i ][ CarID ] != -1 )
		{
		    if( PlayerCarConectado[ playerid ][ i ][ CarID ] == 1 )
		    {
		        format( s1, 64, "%s {00FF00}Conectado\n", GetVehicleModelName( PlayerCarModelo[ playerid ][ i ][ CarID ] ));
		    }
		    if( PlayerCarConectado[ playerid ][ i ][ CarID ] != 1 )
		    {
		        format( s1, 64, "%s\n", GetVehicleModelName( PlayerCarModelo[ playerid ][ i ][ CarID ] ));
		    }
			strcat( s, s1 );
		}
	}
	//ShowModelSelectionMenuEx( playerid, veiculos_sets, contar_sets, "Sets Proprios", DIALOG_SET_LIST, 16.0, 0.0, -55.0 );
	ShowPlayerDialog( playerid, DIALOG_SET_LIST, DIALOG_STYLE_LIST, "Seus sets", s, "Selecionar", "Cancelar" );
}

public OnPlayerModelSelectionEx( playerid, response, extraid, modelid )
{
	/*if( extraid == DIALOG_SET_LIST )
	{
	    SendClientMessage( playerid, -1, "Selectalbvelelelelelel" );
	   	if( !response )
	    {
		    if( PlayerCarModelo[ playerid ][ modelid ][ CarID ] == -1 )
			{
				return SendClientMessage( playerid, COLOR_ERRO, "[ x ] Nenhum veículo para esse slot !" );
			}
		    SetPVarInt( playerid, "CarID", modelid );
		    ShowPlayerDialog( playerid, DIALOG_SET_LIST+1, DIALOG_STYLE_LIST, "Opções set", "Conectar\nDesconectar\nEstacionar\nRespawn\nCores\nLocalizar\nVender {FFFFFF}${00FF00}500k", "OK", "Cancelar" );
		}
	}*/
	return 1;
}

stock PCar_ResetVars( playerid )
{
	for( new i; i < MAX_VEHICLES; ++i )
	{
		if( PCar_oInfo[ i ][ car_DonoID ] == playerid )
		{
		    PCar_oInfo[ i ][ car_DonoID ] = -1;
		    PCar_oInfo[ i ][ car_ValidS ] = 0;
		}
	}
	for( new i; i < MAX_PLAYER_CARS; ++i )
	{
 		PlayerCarConectado[ playerid ][ i ][ CarID ] = -1;
	}
	if( IsValidVehicle( PlayerCarCreated[ playerid ] ))
	{
		DestroyVehicle( PlayerCarCreated[ playerid ] );
		PlayerCarCreated[ playerid ] = -1;
	}
	RemovePlayerMapIcon( playerid, 90 );
}

stock setOcupado( setid )
{
	foreach(Player, i )
	{
		if( IsPlayerInVehicle( i, setid ))
		{
		    if( GetPlayerState( i ) == PLAYER_STATE_DRIVER || GetPlayerState( i ) == PLAYER_STATE_PASSENGER )
			{
			    return 1;
			}
		}
	}
	return 0;
}

public PCar_PlayerConnect( playerid )
{
    PCar_ResetVars( playerid );

	new
		s[ 128 ]
	;

	for( new i; i < MAX_PLAYER_CARS; ++i )
	{
	    format( s, 128, "Sets/%s_%d.ini", PlayerName( playerid ), i );

	    if( fexist( s ))
	    {
	        new
	            MODELO = dini_Int( s, "v_modelo" )
			;
            PlayerCarModelo[ playerid ][ i ][ CarID ] = MODELO;
	    }
	    else
	    {
	        PlayerCarModelo[ playerid ][ i ][ CarID ] = -1;
		}
		PlayerCarConectado[ playerid ][ i ][ CarID ] = -1;
	}
}

forward PCar_PlayerSetConnect( playerid, cID );
public PCar_PlayerSetConnect( playerid, cID )
{
    if( PlayerCarConectado[ playerid ][ cID ][ CarID ] == 1 )
    {
        format( gStr, 128, "[ x ] Seu veículo set próprio {FFFFFF}%s {FF0000}já está conectado !", GetVehicleModelName( PlayerCarModelo[ playerid ][ cID ][ CarID ] ));
        SendClientMessage( playerid, COLOR_ERRO, gStr );
        return 1;
    }

    PCar_ResetVars( playerid );

	new
		s[ 128 ]
	;
	format( s, 128, "Sets/%s_%d.ini", PlayerName( playerid ), cID );

	if( fexist( s ))
	{
		new
			Float:pscP[ 4 ], pcoi[ 3 ]
		;
		pcoi[ 0 ] = dini_Int( s, "v_modelo" );
		pcoi[ 1 ] = dini_Int( s, "v_cor_1" );
		pcoi[ 2 ] = dini_Int( s, "v_cor_2" );
		// Coordenadas spawn
		pscP[ 0 ] = dini_Float( s, "v_pox" );
		pscP[ 1 ] = dini_Float( s, "v_poy" );
		pscP[ 2 ] = dini_Float( s, "v_poz" );
		pscP[ 3 ] = dini_Float( s, "v_angulo" );

		PlayerCar[ playerid ][ cID ][ CposX ] = pscP[ 0 ];
		PlayerCar[ playerid ][ cID ][ CposY ] = pscP[ 1 ];
		PlayerCar[ playerid ][ cID ][ CposZ ] = pscP[ 2 ];
		PlayerCar[ playerid ][ cID ][ CposA ] = pscP[ 3 ];

        PlayerCarCreated[ playerid ] = CreateVehicle( pcoi[ 0 ], pscP[ 0 ], pscP[ 1 ] , pscP[ 2 ], pscP[ 3 ], pcoi[ 1 ], pcoi[ 2 ], -1 );

		PCar_oInfo[ PlayerCarCreated[ playerid ] ][ car_DonoID ] = playerid;

     	PCar_oInfo[ PlayerCarCreated[ playerid ] ][ car_ValidS ] = 1;

     	PlayerCarConectado[ playerid ][ cID ][ CarID ] = 1;
	}
	format( gStr, 128, "[ > ] Seu veículo set próprio {FFFFFF}%s {FFFF00}foi conectado.", GetVehicleModelName( PlayerCarModelo[ playerid ][ cID ][ CarID ] ));
 	SendClientMessage( playerid, COLOR_AMARELO, gStr );

 	RemovePlayerMapIcon( playerid, 90 );

	return 1;
}

forward PCar_PlayerSetdisConnect( playerid, cID );
public PCar_PlayerSetdisConnect( playerid, cID )
{
    if( PlayerCarConectado[ playerid ][ cID ][ CarID ] != 1 )
    {
        format( gStr, 128, "[ x ] Seu veículo set próprio {FFFFFF}%s {FF0000}não está conectado !", GetVehicleModelName( PlayerCarModelo[ playerid ][ cID ][ CarID ] ));
        SendClientMessage( playerid, COLOR_ERRO, gStr );
        return 1;
    }

	PCar_ResetVars( playerid );

    PlayerCarConectado[ playerid ][ cID ][ CarID ] = -1;

	format( gStr, 128, "[ > ] Seu veículo set próprio {FFFFFF}%s {FFFF00}foi desconectado.", GetVehicleModelName( PlayerCarModelo[ playerid ][ cID ][ CarID ] ));
 	SendClientMessage( playerid, COLOR_AMARELO, gStr );

	RemovePlayerMapIcon( playerid, 90 );

	return 1;
}

public PCar_PlayerDisconnect( playerid )
{
	for( new i; i < MAX_PLAYER_CARS; ++i )
	{
 		PlayerCarModelo[ playerid ][ i ][ CarID ] = -1;
	}
    PCar_ResetVars( playerid );
    return 1;
}

stock IsValidVehicleSet( v )
{
    if( PCar_oInfo[ v ][ car_ValidS ] == 1 ) return true;
        else return false;
}

stock IsValidVehicleBombeiros( v )
{
    if( estCamB[ v ] == 1 ) return true;
        else return false;
}

stock GetVehicleModelName(v)
{
	new s[35];
 	switch((v))
	{
	    case 400:s="Landstalker";
	    case 401:s="Bravura";
	    case 402:s="Buffalo";
	    case 403:s="Linerunner";
	    case 404:s="Perenail";
	    case 405:s="Sentinel";
	    case 406:s="Dumper";
	    case 407:s="Firetruck";
	    case 408:s="Trashmaster";
	    case 409:s="Stretch";
	    case 410:s="Manana";
	    case 411:s="Infernus";
	    case 412:s="Voodoo";
	    case 413:s="Pony";
	    case 414:s="Mule";
	    case 415:s="Cheetah";
	    case 416:s="Ambulance";
	    case 417:s="Levetian";
	    case 418:s="Moonbeam";
	    case 419:s="Esperanto";
	    case 420:s="Taxi";
	    case 421:s="Washington";
	    case 422:s="Bobcat";
	    case 423:s="Mr Whoopee";
	    case 424:s="BF Injection";
	    case 425:s="Hunter";
	    case 426:s="Premier";
	    case 427:s="Enforcer";
	    case 428:s="Securicar";
	    case 429:s="Banshee";
	    case 430:s="Predator";
	    case 431:s="Bus";
	    case 432:s="Rhino";
	    case 433:s="Barracks";
	    case 434:s="Hotknife";
	    case 435:s="Artic Trailer 1";
	    case 436:s="Previon";
	    case 437:s="Coach";
	    case 438:s="Cabbie";
	    case 439:s="Stallion";
	    case 440:s="Rumpo";
	    case 441:s="RC Bandit";
	    case 442:s="Romero";
	    case 443:s="Packer";
	    case 444:s="Monster";
	    case 445:s="Admiral";
	    case 446:s="Squalo";
	    case 447:s="Seasparrow";
	    case 448:s="Pizza Boy";
	    case 449:s="Tram";
	    case 450:s="Artic Trailer 2";
	    case 451:s="Turismo";
	    case 452:s="Speeder";
	    case 453:s="Reefer";
	    case 454:s="Tropic";
	    case 455:s="Flatbed";
	    case 456:s="Yankee";
	    case 457:s="Caddy";
	    case 458:s="Solair";
	    case 459:s="Top Fun";
	    case 460:s="Skimmer";
	    case 461:s="PCJ-600";
	    case 462:s="Faggio";
	    case 463:s="Freeway";
	    case 464:s="RC Baron";
	    case 465:s="RC Raider";
	    case 466:s="Glendale";
	    case 467:s="Oceanic";
	    case 468:s="Sanchez";
	    case 469:s="Sparrow";
	    case 470:s="Patriot";
	    case 471:s="Quad";
	    case 472:s="Coastguard";
	    case 473:s="Dinghy";
	    case 474:s="Hermes";
	    case 475:s="Sabre";
	    case 476:s="Rustler";
	    case 477:s="ZR-350";
	    case 478:s="Walton";
	    case 479:s="Regina";
	    case 480:s="Comet";
	    case 481:s="BMX";
	    case 482:s="Burrito";
	    case 483:s="Camper";
	    case 484:s="Marquis";
	    case 485:s="Baggage";
	    case 486:s="Dozer";
	    case 487:s="Maverick";
	    case 488:s="SAN Maverick";
	    case 489:s="Rancher";
	    case 490:s="FBI Rancher";
	    case 491:s="Virgo";
	    case 492:s="Greenwood";
	    case 493:s="Jetmax";
	    case 494:s="Hotring";
	    case 495:s="Sandking";
	    case 496:s="Blista Compact";
	    case 497:s="Police Maverick";
	    case 498:s="Boxvillie";
	    case 499:s="Benson";
	    case 500:s="Mesa";
	    case 501:s="RC Goblin";
	    case 502:s="Hotring";
	    case 503:s="Hotring";
	    case 504:s="Bloodring Banger";
	    case 505:s="Rancher";
	    case 506:s="Super GT";
	    case 507:s="Elegant";
	    case 508:s="Journey";
	    case 509:s="Bike";
	    case 510:s="Mountain Bike";
	    case 511:s="Beagle";
	    case 512:s="Cropduster";
	    case 513:s="Stuntplane";
	    case 514:s="Petrol";
	    case 515:s="Roadtrain";
	    case 516:s="Nebula";
	    case 517:s="Majestic";
	    case 518:s="Buccaneer";
	    case 519:s="Shamal";
	    case 520:s="Hydra";
	    case 521:s="FCR-900";
	    case 522:s="NRG-500";
	    case 523:s="HPV-1000";
	    case 524:s="Cement Truck";
	    case 525:s="Tow Truck";
	    case 526:s="Fortune";
	    case 527:s="Cadrona";
	    case 528:s="FBI Truck";
	    case 529:s="Williard";
	    case 530:s="Forklift";
	    case 531:s="Tractor";
	    case 532:s="Combine";
	    case 533:s="Feltzer";
	    case 534:s="Remington";
	    case 535:s="Slamvan";
	    case 536:s="Blade";
	    case 537:s="Freight";
	    case 538:s="Streak";
	    case 539:s="Vortex";
	    case 540:s="Vincent";
	    case 541:s="Bullet";
	    case 542:s="Clover";
	    case 543:s="Sadler";
	    case 544:s="Firetruck";
	    case 545:s="Hustler";
	    case 546:s="Intruder";
	    case 547:s="Primo";
	    case 548:s="Cargobob";
	    case 549:s="Tampa";
	    case 550:s="Sunrise";
	    case 551:s="Merit";
	    case 552:s="Utility Van";
	    case 553:s="Nevada";
	    case 554:s="Yosemite";
	    case 555:s="Windsor";
	    case 556:s="Monster";
	    case 557:s="Monster";
	    case 558:s="Uranus";
	    case 559:s="Jester";
	    case 560:s="Sultan";
	    case 561:s="Stratum";
	    case 562:s="Elegy";
	    case 563:s="Raindance";
	    case 564:s="RC Tiger";
	    case 565:s="Flash";
	    case 566:s="Tahoma";
	    case 567:s="Savanna";
	    case 568:s="Bandito";
	    case 569:s="Freight Flat";
	    case 570:s="Streak";
	    case 571:s="Kart";
	    case 572:s="Mower";
	    case 573:s="Duneride";
	    case 574:s="Sweeper";
	    case 575:s="Broadway";
	    case 576:s="Tornado";
	    case 577:s="AT-400";
	    case 578:s="DFT-30";
	    case 579:s="Huntley";
	    case 580:s="Stafford";
	    case 581:s="BF-400";
	    case 582:s="News van";
	    case 583:s="Tug";
	    case 584:s="Petrol Tanker";
	    case 585:s="Emperor";
	    case 586:s="Wayfarer";
	    case 587:s="Euros";
	    case 588:s="Hotdog";
	    case 589:s="Club";
	    case 590:s="Freight Box";
	    case 591:s="Artic Trailer";
	    case 592:s="Andromada";
	    case 593:s="Dodo";
	    case 594:s="RC Cam";
	    case 595:s="Launch";
	    case 596:s="Cop Car LS";
	    case 597:s="Cop Car SF";
	    case 598:s="Cop Car LV";
	    case 599:s="Ranger";
	    case 600:s="Picador";
	    case 601:s="BOPE Tank";
	    case 602:s="Alpha";
	    case 603:s="Phoenix";
	    case 604:s="Glendale";
	    case 605:s="Sadler";
	    case 606:s="Bag Box";
	    case 607:s="Bag Box";
	    case 608:s="Stairs";
	    case 609:s="Boxville";
	    case 610:s="Farm Trailer";
	    case 611:s="Utility Trailer";
	}
	return s;
}

public HealthDown()
{
	for( new i = 0; i < MaxFire; ++i )
	{
		if( IsValidFire( i ))
		{
			for( new p = 0; p < MAX_PLAYERS; ++p )
			{
				if( IsPlayerInRangeOfPoint( p, 1, FirePos[ i ][ 0 ], FirePos[ i ][ 1 ], FirePos[ i ][ 2 ] ) && !IsPlayerInAnyVehicle( p ))
				{
	  				new
					  	Float:HP
				  	;
		    		GetPlayerHealth( p, HP );
	  				SetPlayerHealth( p, HP-4 );
				}
			}
			for( new v = 0; v < MAX_VEHICLES; ++v)
			{
				if( VehicleToPoint( 2, v, FirePos[ i ][ 0 ], FirePos[ i ][ 1 ], FirePos[ i ][ 2 ] ))
				{
					new
						Float:HP
					;
		    		GetVehicleHealth( v, HP );
	  				SetVehicleHealth( v, HP-30 );
				}
			}
		}
	}
}

stock AddFire( playerid, Float:x, Float:y, Float:z, Health )
{
	new
		ID = playerid
	;
	FireObj[ ID ] = CreateDynamicObject( 3461, x, y, z-2.61, 0, 0, 0.0 );
	FirePos[ ID ][ 0 ] = x, FirePos[ ID ][ 1 ] = y, FirePos[ ID ][ 2 ] = z;
	FireHealth[ ID ] = Health;
	FireHealthMax[ ID ] = Health;
	FireCreated[ ID ] = ID;
	new
	    size[ 24 ]
	;
	format( size, 24, "%s", PlayerName( playerid ));
	FirePlayer[ ID ] = size;
	#if defined Labels
	    new
			string[ 128 ]
		;
	    format( string, sizeof( string ), "Incêndio AQUI!\nPorcentagem Fogo\n( %d / %d )", FireHealth[ ID ], FireHealthMax[ ID ] );
	    FireText[ ID ] = Create3DTextLabel( string, 0xFFFFFFFFF, x, y, z, 20, 0 );
	#endif
}

stock DeleteFire( ID )
{
	DestroyDynamicObject( FireObj[ ID ] );
	FireCreated[ ID ] = 0;
	FirePlayer[ ID ] = "Ninguém";
	FirePos[ ID ][ 0 ] = 0, FirePos[ ID ][ 1 ] = 0, FirePos[ ID ][ 2 ] = 0;
	#if defined Labels
	    Delete3DTextLabel( FireText[ ID ] );
	#endif
}

stock DeleteAllFire()
{
	for( new ID = 0; ID < MaxFire; ++ID )
	{
		DestroyDynamicObject( FireObj[ ID ] );
		FireCreated[ ID ] = 0;
		FirePos[ ID ][ 0 ] = 0, FirePos[ ID ][ 1 ] = 0, FirePos[ ID ][ 2 ] = 0;
		#if defined Labels
	    	Delete3DTextLabel( FireText[ i ] );
		#endif
	}
}

stock IsValidFire( ID )
{
	if(( FirePos[ ID ][ 0 ] != 0 ) && ( FirePos[ ID ][ 1 ] != 0 ) && ( FirePos[ ID ][ 2 ] != 0 )) return true;
	else return false;
}

stock GetClosestFire(playerid)
{
	for( new i = 0; i < MaxFire; ++i )
	{
	    if( IsValidFire( i ) && IsPlayerInRangeOfPoint( playerid, 1, FirePos[ i ][ 0 ],  FirePos[ i ][ 1 ],  FirePos[ i ][ 2 ] ))
	    {
	        return i;
		}
	}
	return 0;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,   Float:ObjX, Float:ObjY, Float:ObjZ,   Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
	new Float:tmpX, Float:tmpY, Float:tmpZ;
	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;
	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock PlayerFaces(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock IsPlayerLookingAtFire(playerid, fireid)
{
    new
        Float:cX, Float:cY, Float:cZ,
        Float:cPosX, Float:cPosY, Float:cPosZ,
        Float:x1, Float:y1, Float:z1,
        Float:x2, Float:y2, Float:z2,
        Float:dX, Float:dY, Float:dZ;
    GetVehiclePos(GetPlayerVehicleID(playerid), x1, y1, z1);
    GetPlayerCameraPos(playerid, cPosX, cPosY, cPosZ);
    GetPlayerCameraFrontVector(playerid, cX, cY, cZ);
    x2 = FirePos[fireid][0];
    y2 = FirePos[fireid][1];
    z2 = FirePos[fireid][2];
    new Float:Dist = GetDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
    dX = cPosX + floatmul(cX, Dist);
    dY = cPosY + floatmul(cY, Dist);
    dZ = cPosZ + floatmul(cZ, Dist);
    if(GetDistanceBetweenPoints(x1, y1, z1, dX, dY, dZ) <= 50.0)
    {
        return true;
    }
    return false;
}

forward resetCaminhao( v );
public resetCaminhao( v )
{
    estCamB[ v ] = 0;
	return 1;
}

forward AtualizaGPSFire( playerid, fireID );
public AtualizaGPSFire( playerid, fireID )
{
	if( IsPlayerConnected( playerid ))
	{
		new
			Float:X,
			Float:Y,
			Float:Z,
			Float:Distance
		;
		GetPlayerPos( playerid, X, Y, Z );
		Distance = GetDistanceBetweenPoints( X, Y, Z, CasaInfo[ fireID ][ PickupX ], CasaInfo[ fireID ][ PickupY ], CasaInfo[ fireID ][ PickupZ ] );
		new
			string[ 256 ],
			zone[ MAX_ZONE_NAME ],
			playerState = GetPlayerState( playerid )
		;
		GetCasa2DZone( fireID, zone, MAX_ZONE_NAME );

		format( string, sizeof( string ), "~n~~n~~n~Incendio~n~Distancia ~y~%.1f~n~~r~~h~Local ~n~~w~%s~n~Casa ID ~y~%d", Distance, zone, fireID );
	 	GameTextForPlayer( playerid, string, 1000, 5 );

		if( Distance <= 4.0 && playerState == 1 || Distance > 4.0 && Distance <= 10.0 && playerState == 2 && GetPlayerVehicleID( playerid ) == 407 || FireAtual[ playerid ] == 0 )
		{
      		KillTimer( FireTimerP[ playerid ] );
	    	GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~y~~h~INCENDIO LOCALIZADO~n~~w~GPS Desabilitado.", 3000, 5 );
	    	GivePlayerWeapon( playerid, 42, 9999 );
		}
		else if( Distance > 4.0 && FireAtual[ playerid ] != 0 )
		{
		    FireTimerP[ playerid ] = SetTimerEx( "AtualizaGPSFire", 1000, false, "dd", playerid, fireID );
		}
	}
	return 1;
}

forward AtualizaGPSDis( playerid, fireID );
public AtualizaGPSDis( playerid, fireID )
{
	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:Distance
	;
	X = 2770.6172, Y = -1627.9358, Z = 12.177;

	Distance = GetDistanceBetweenPoints( X, Y, Z, CasaInfo[ fireID ][ PickupX ], CasaInfo[ fireID ][ PickupY ], CasaInfo[ fireID ][ PickupZ ] );
	new
		string[ 256 ],
		zone[ MAX_ZONE_NAME ]
	;
	GetCasa2DZone( fireID, zone, MAX_ZONE_NAME );

	format( string, sizeof( string ), ">>> Distancia %.1f | Local %s | Casa ID %d", Distance, zone, fireID );
 	SendClientMessage( playerid, COLOR_BRANCO, string );

	//if( Distance <= 4.0 )

	return 1;
}

stock GetEmpresa2DZone( m, zone[ ], len )
{
	new
		Float:x,
		Float:y
	;
	x = EmpresaInfo[ m ][ PickupX ];
	y = EmpresaInfo[ m ][ PickupY ];

 	for( new i = 0; i != sizeof( SanAndreasZones ); i++ )
	{
		if( x >= SanAndreasZones[ i ][ Zone_Area ][ 0 ] && x <= SanAndreasZones[ i ][ Zone_Area ][ 3 ] && y >= SanAndreasZones[ i ][ Zone_Area ][ 1 ] && y <= SanAndreasZones[ i ][ Zone_Area ][ 4 ] )
		{
			return format( zone, len, SanAndreasZones[ i ][ Zone_Name ], 0 );
		}
	}
	return 0;
}

stock GetEmpresa2DCidade( m, zone[ ], len )
{
	new
		Float:x,
		Float:y
	;
	x = EmpresaInfo[ m ][ PickupX ];
	y = EmpresaInfo[ m ][ PickupY ];

 	for( new i = 0; i != sizeof( SanAndreasCidades ); i++ )
	{
		if( x >= SanAndreasCidades[ i ][ cidadeArea ][0] && x <= SanAndreasCidades[ i ][ cidadeArea ][3] && y >= SanAndreasCidades[ i ][ cidadeArea ][ 1 ] && y <= SanAndreasCidades[ i ][ cidadeArea ][ 4 ] )
		{
			return format( zone, len, SanAndreasCidades[ i ][ cidadeNome ], 0 );
		}
	}
	return 0;
}

stock GetCasa2DCidade( CasaID, zone[ ], len )
{
	new
		Float:x,
		Float:y
	;
	x = CasaInfo[ CasaID ][ PickupX ];
	y = CasaInfo[ CasaID ][ PickupY ];

 	for( new i = 0; i != sizeof( SanAndreasCidades ); i++ )
	{
		if( x >= SanAndreasCidades[ i ][ cidadeArea ][0] && x <= SanAndreasCidades[ i ][ cidadeArea ][3] && y >= SanAndreasCidades[ i ][ cidadeArea ][ 1 ] && y <= SanAndreasCidades[ i ][ cidadeArea ][ 4 ] )
		{
			return format( zone, len, SanAndreasCidades[ i ][ cidadeNome ], 0 );
		}
	}
	return 0;
}

stock GetCasa2DZone( CasaID, zone[ ], len )
{
	new
		Float:x,
		Float:y
	;
	x = CasaInfo[ CasaID ][ PickupX ];
	y = CasaInfo[ CasaID ][ PickupY ];

 	for( new i = 0; i != sizeof( SanAndreasZones ); i++ )
	{
		if( x >= SanAndreasZones[ i ][ Zone_Area ][ 0 ] && x <= SanAndreasZones[ i ][ Zone_Area ][ 3 ] && y >= SanAndreasZones[ i ][ Zone_Area ][ 1 ] && y <= SanAndreasZones[ i ][ Zone_Area ][ 4 ] )
		{
			return format( zone, len, SanAndreasZones[ i ][ Zone_Name ], 0 );
		}
	}
	return 0;
}

stock TextCreatePlayer( playerid )
{
	_INFO[ playerid ] = CreatePlayerTextDraw( playerid, 321.000000, 124.000000, "~y~~h~~h~Trafico de Armas");
	PlayerTextDrawAlignment(playerid, _INFO[ playerid ], 2);
	PlayerTextDrawBackgroundColor(playerid, _INFO[ playerid ], 255);
	PlayerTextDrawFont(playerid, _INFO[ playerid ], 1);
	PlayerTextDrawLetterSize(playerid, _INFO[ playerid ], 0.569999, 2.099998);
	PlayerTextDrawColor(playerid, _INFO[ playerid ], -1);
	PlayerTextDrawSetOutline(playerid, _INFO[ playerid ], 1);
	PlayerTextDrawSetProportional(playerid, _INFO[ playerid ], 1);

	_ICONE[ playerid ] = CreatePlayerTextDraw( playerid, 299.000000, 151.000000, "ld_tatt:8gun");
	PlayerTextDrawAlignment(playerid, _ICONE[ playerid ], 2);
	PlayerTextDrawBackgroundColor(playerid, _ICONE[ playerid ], 255);
	PlayerTextDrawFont(playerid, _ICONE[ playerid ], 4);
	PlayerTextDrawLetterSize(playerid, _ICONE[ playerid ], 1.200000, 9.000000);
	PlayerTextDrawColor(playerid, _ICONE[ playerid ], -1);
	PlayerTextDrawSetOutline(playerid, _ICONE[ playerid ], 0);
	PlayerTextDrawSetProportional(playerid, _ICONE[ playerid ], 1);
	PlayerTextDrawSetShadow(playerid, _ICONE[ playerid ], 1);
	PlayerTextDrawUseBox(playerid, _ICONE[ playerid ], 1);
	PlayerTextDrawBoxColor(playerid, _ICONE[ playerid ], 255);
	PlayerTextDrawTextSize(playerid, _ICONE[ playerid ], 44.000000, 40.000000);

	_MSGFORM[ playerid ] = CreatePlayerTextDraw( playerid, 319.000000, 199.000000, "_");
	PlayerTextDrawAlignment(playerid, _MSGFORM[ playerid ], 2);
	PlayerTextDrawBackgroundColor(playerid, _MSGFORM[ playerid ], 255);
	PlayerTextDrawFont(playerid, _MSGFORM[ playerid ], 2);
	PlayerTextDrawLetterSize(playerid, _MSGFORM[ playerid ], 0.329999, 1.200000);
	PlayerTextDrawColor(playerid, _MSGFORM[ playerid ], -1);
	PlayerTextDrawSetOutline(playerid, _MSGFORM[ playerid ], 1);
	PlayerTextDrawSetProportional(playerid, _MSGFORM[ playerid ], 1);
	_ACEITAR[ playerid ] = CreatePlayerTextDraw(playerid,206.000000, 256.000000, "ACEITAR");
	PlayerTextDrawBackgroundColor(playerid,_ACEITAR[ playerid ], 255);
	PlayerTextDrawFont(playerid,_ACEITAR[ playerid ], 3);
	PlayerTextDrawLetterSize(playerid,_ACEITAR[ playerid ], 0.619998, 1.700000);
	PlayerTextDrawColor(playerid,_ACEITAR[ playerid ], -1);
	PlayerTextDrawSetOutline(playerid,_ACEITAR[ playerid ], 1);
	PlayerTextDrawSetProportional(playerid,_ACEITAR[ playerid ], 1);
	PlayerTextDrawUseBox(playerid,_ACEITAR[ playerid ], 1);
	PlayerTextDrawBoxColor(playerid,_ACEITAR[ playerid ], 0xFFFFFF00);
	PlayerTextDrawTextSize(playerid,_ACEITAR[ playerid ], 287.000000, 16.000000);
	PlayerTextDrawSetSelectable(playerid,_ACEITAR[ playerid ], 1);

	_RECUSAR[ playerid ] = CreatePlayerTextDraw(playerid,352.000000, 256.000000, "RECUSAR");
	PlayerTextDrawBackgroundColor(playerid,_RECUSAR[ playerid ], 255);
	PlayerTextDrawFont(playerid,_RECUSAR[ playerid ], 3);
	PlayerTextDrawLetterSize(playerid,_RECUSAR[ playerid ], 0.619998, 1.700000);
	PlayerTextDrawColor(playerid,_RECUSAR[ playerid ], -1);
	PlayerTextDrawSetOutline(playerid,_RECUSAR[ playerid ], 1);
	PlayerTextDrawSetProportional(playerid,_RECUSAR[ playerid ], 1);
	PlayerTextDrawUseBox(playerid,_RECUSAR[ playerid ], 1);
	PlayerTextDrawBoxColor(playerid,_RECUSAR[ playerid ], 0xFFFFFF00);
	PlayerTextDrawTextSize(playerid,_RECUSAR[ playerid ], 438.000000, 16.000000);
	PlayerTextDrawSetSelectable(playerid,_RECUSAR[ playerid ], 1);

	_MSGTEMPO[ playerid ] = CreatePlayerTextDraw( playerid, 319.000000, 252.000000, "_");
	PlayerTextDrawAlignment(playerid, _MSGTEMPO[ playerid ], 2);
	PlayerTextDrawBackgroundColor(playerid, _MSGTEMPO[ playerid ], 255);
	PlayerTextDrawFont(playerid, _MSGTEMPO[ playerid ], 1);
	PlayerTextDrawLetterSize(playerid, _MSGTEMPO[ playerid ], 0.330000, 1.300000);
	PlayerTextDrawColor(playerid, _MSGTEMPO[ playerid ], -65281);
	PlayerTextDrawSetOutline(playerid, _MSGTEMPO[ playerid ], 1);
	PlayerTextDrawSetProportional(playerid, _MSGTEMPO[ playerid ], 1);

	TextLocal[ playerid ][ 0 ] = 0;
	TextLocal[ playerid ][ 1 ] = 0;
	TextLocal[ playerid ][ 2 ] = 0;
	TextLocal[ playerid ][ 3 ] = 0;

    if( dini_Int( f( playerid ), "GPScidade" ) == 1 )
    {
        TextLocal[ playerid ][ 0 ] = 1;
        TextLocal[ playerid ][ 2 ] = dini_Int( f( playerid ), "StatusGPSc" );

        CityPlayer[ playerid ] = CreatePlayerTextDraw(playerid,189.000000, 376.000000, "_");
        PlayerTextDrawAlignment(playerid,CityPlayer[ playerid ], 2);
        PlayerTextDrawBackgroundColor(playerid,CityPlayer[ playerid ], 255);
        PlayerTextDrawFont(playerid,CityPlayer[ playerid ], 2);
        PlayerTextDrawLetterSize(playerid,CityPlayer[ playerid ], 0.270000, 1.000000);
        PlayerTextDrawColor(playerid,CityPlayer[ playerid ], -1);
        PlayerTextDrawSetOutline(playerid,CityPlayer[ playerid ], 0);
        PlayerTextDrawSetProportional(playerid,CityPlayer[ playerid ], 1);
        PlayerTextDrawSetShadow(playerid,CityPlayer[ playerid ], 1);
        PlayerTextDrawSetSelectable(playerid,CityPlayer[ playerid ], 0);

        if( TextLocal[ playerid ][ 2 ] == 1 )
        {
            PlayerTextDrawShow( playerid, CityPlayer[ playerid ] );
            SetTimerEx("citylocal_textplayer_update", 1000, true, "i", playerid);
        }
    }
    if( dini_Int( f( playerid ), "GPSlocal" ) == 1 )
    {
        TextLocal[ playerid ][ 1 ] = 1;
        TextLocal[ playerid ][ 3 ] = dini_Int( f( playerid ), "StatusGPSl" );

        LocalPlayer[ playerid ] = CreatePlayerTextDraw(playerid,189.000000, 396.000000, "_");
        PlayerTextDrawAlignment(playerid,LocalPlayer[ playerid ], 2);
        PlayerTextDrawBackgroundColor(playerid,LocalPlayer[ playerid ], 255);
        PlayerTextDrawFont(playerid,LocalPlayer[ playerid ], 2);
        PlayerTextDrawLetterSize(playerid,LocalPlayer[ playerid ], 0.200000, 0.899999);
        PlayerTextDrawColor(playerid,LocalPlayer[ playerid ], -1);
        PlayerTextDrawSetOutline(playerid,LocalPlayer[ playerid ], 0);
        PlayerTextDrawSetProportional(playerid,LocalPlayer[ playerid ], 1);
        PlayerTextDrawSetShadow(playerid,LocalPlayer[ playerid ], 1);
        PlayerTextDrawSetSelectable(playerid,LocalPlayer[ playerid ], 0);

        if( TextLocal[ playerid ][ 3 ] == 1 )
        {
            PlayerTextDrawShow( playerid, LocalPlayer[ playerid ] );
            SetTimerEx("citylocal_textplayer_update", 1000, true, "i", playerid);
        }
    }
    playerGZtext( playerid );
}

forward citylocal_textplayer_update( playerid );
public citylocal_textplayer_update( playerid )
{
    if( TextLocal[ playerid ][ 0 ] == 1 && TextLocal[ playerid ][ 2 ] == 1 && pInfo[ playerid ][ pLogin ] == false || pInfo[ playerid ][ Prof ] == TAXISTA && pInfo[ playerid ][ pLogin ] == false && IsPlayerInAnyVehicle( playerid ))
    {
        new
            Cidade[ MAX_ZONE_NAME ]
        ;
        GetPlayerCidade( playerid, Cidade, MAX_ZONE_NAME );
        format( gStr, 128,  "~r~~h~~h~Cidade~n~~y~~h~%s", Cidade );
        PlayerTextDrawSetString( playerid, CityPlayer[ playerid ], gStr );
    }
    if( TextLocal[ playerid ][ 1 ] == 1 && TextLocal[ playerid ][ 3 ] == 1 && pInfo[ playerid ][ pLogin ] == false || pInfo[ playerid ][ Prof ] == TAXISTA && pInfo[ playerid ][ pLogin ] == false && IsPlayerInAnyVehicle( playerid ))
    {
        new
            zone[ MAX_ZONE_NAME ]
        ;
        GetPlayer2DZone( playerid, zone, MAX_ZONE_NAME );
        format( gStr, 128,  "~r~~h~~h~Local~n~~y~~h~%s", zone );
        PlayerTextDrawSetString( playerid, LocalPlayer[ playerid ], gStr );
    }
    return 1;
}

stock pConectadoa( PlayerN[] )
{
	foreach(Player, i)
	{
	    if( !strcmp( PlayerName( i ), PlayerN, false )) return true;
	}
	return false;
}

stock pConectadoID( PlayerN[] )
{
	foreach(Player, i)
	{
	    if( !strcmp( PlayerName( i ), PlayerN, false )) return i;
	}
	return false;
}

stock sGivePlayerCash( playerid, quantia )
{
    GivePlayerCash( playerid, quantia );
    dini_IntSet( f( playerid ), "Dinheiro", GetPlayerCash( playerid ));
}

stock sResetPlayerCash( playerid )
{
    ResetPlayerCash( playerid );
    dini_IntSet( f( playerid ), "Dinheiro", 0 );
}

stock ArmaNome( idarmaid )
{
	new
		ARN[ 24 ]
	;
	if( idarmaid == 1 )	{ ARN = "Silenced 9mm";}
	if( idarmaid == 2 )	{ ARN = "Shotgun";}
	if( idarmaid == 3 )	{ ARN = "Tec9";}
	if( idarmaid == 4 )	{ ARN = "AK-47";}
	if( idarmaid == 5 )	{ ARN = "Sniper Rifle";}
	return ARN;
}

stock TraficArma( playerid )
{
    ResetPlayerWeapons( playerid );

	if( armaEscol[ playerid ] == 1 )
	{
	    trafcArma[ playerid ] = 23;
	}
	if( armaEscol[ playerid ] == 2 )
	{
	    trafcArma[ playerid ] = 25;
	}
	if( armaEscol[ playerid ] == 3 )
	{
	    trafcArma[ playerid ] = 32;
	}
	if( armaEscol[ playerid ] == 4 )
	{
	    trafcArma[ playerid ] = 30;
	}
	if( armaEscol[ playerid ] == 5 )
	{
	    trafcArma[ playerid ] = 34;
	}
    GivePlayerWeapon( playerid, trafcArma[ playerid ], 250 );
    give[ playerid ] = true;
}

stock getArmaTarfic( playerid, killerid )
{
	new
		wp = GetPlayerWeapon( killerid )
	;
	if( wp == 23 && trafcArma[ killerid ] == wp || wp == 25 && trafcArma[ killerid ] == wp || wp == 32 && trafcArma[ killerid ] == wp || wp == 30 && trafcArma[ killerid ] == wp || wp == 34 && trafcArma[ killerid ] == wp )
	{
	    if( validArmas[ killerid ] == false && ArenaDuelo[ killerid ] == false )
	    {
		    SetPlayerWantedLevel( killerid, GetPlayerWantedLevel( killerid ) + 1 );
			format( gstring, sizeof( gstring ), "( DM ) %s [ %d ] com uma {DA1523}%s ilegal {FFFFFF}acaba de matar %s [ %d ].",  PlayerName( killerid ), killerid, GetWeaponNameByID( wp ), PlayerName( playerid ), playerid );
		    return SendClientMessageToAll( COLOR_BRANCO, gstring ), true;
	    }
	}
	return false;
}

forward showTextA@R( playerid );
public showTextA@R( playerid )
{
	PlayerTextDrawSetSelectable(playerid, _ACEITAR[ playerid ], true );
    PlayerTextDrawSetSelectable(playerid, _RECUSAR[ playerid ], true );

    PlayerTextDrawShow( playerid, _INFO[ playerid ] );
    PlayerTextDrawShow( playerid, _ICONE[ playerid ] );
    format( gstring, sizeof( gstring ), "Traficante ~r~~h~%s~n~~n~~w~Oferece: ~h~%s~n~~w~Por: ~y~~h~$%d", PlayerName( compraArm[ playerid ] ), ArmaNome( armaEscol[ playerid ] ), preccArma[ playerid ] );
	PlayerTextDrawSetString( playerid, _MSGFORM[ playerid ], gstring );
    PlayerTextDrawShow( playerid, _MSGFORM[ playerid ] );
    PlayerTextDrawShow( playerid, _ACEITAR[ playerid ] );
    PlayerTextDrawShow( playerid, _RECUSAR[ playerid ] );
    PlayerTextDrawShow( playerid, _MSGTEMPO[ playerid ] );

    SelectTextDraw( playerid, COLOR_ERRO );

	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{

    	if(_:playertextid == INVALID_TEXT_DRAW)
			return CallLocalFunction("OnPlayerClickPlayerTextDraw", "ii", playerid, INVALID_TEXT_DRAW);

		if(playertextid == _ACEITAR[ playerid ])
		{
 			format( gstring, 256, "[ > ] Você aceitou a arma %s vendida por %s para você por $%d", ArmaNome( armaEscol[ playerid ] ), PlayerName( compraArm[ playerid ] ), preccArma[ playerid ] );
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			format( gstring, 256, "[ > ] %s aceitou a arma %s vendida por você pelo valor $%d", PlayerName( playerid ), ArmaNome( armaEscol[ playerid ] ), preccArma[ playerid ] );
			SendClientMessage( compraArm[ playerid ], COLOR_AMARELO, gstring );

			GivePlayerCash( playerid, -preccArma[ playerid ] );
			GivePlayerCash( compraArm[ playerid ], preccArma[ playerid ] );
			TraficArma( playerid );

			new
				stg[ 512 ]
			;
			format( gstring, sizeof( gstring ), "\tARMA ILEGAL\n\n{23C8D0}> Essa arma é ilegal, você aceitou e pode utilizar a mesma sem sair do server.\n\n" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "{23C8D0}> A mesma não é salva, após se desconectar-se do servidor você perde a arma.\n" );
			strcat( stg, gstring );
			format( gstring, sizeof( gstring ), "{23C8D0}> Caso você seja parado por policiais, você está sujeito a ser preso por uso de armas ilegais.\n" );
			strcat( stg, gstring );
			format( gStr, sizeof( gStr ), "{23C8D0}> Você só pode usar uma arma ilegal, caso compre outra a atual será substituída.\n" );
			strcat( stg, gStr );
			ShowPlayerDialog( playerid, D_PARMA+3, DIALOG_STYLE_MSGBOX, "Arma Ilegal", stg, "OK", "" );

		}
		else if(playertextid == _RECUSAR[ playerid ])
		{
		    format( gstring, 256, "[ x ] Você recusou a arma %s oferecida por %s para você por $%d", ArmaNome( armaEscol[ playerid ] ), PlayerName( compraArm[ playerid ] ), preccArma[ playerid ] );
			SendClientMessage( playerid, COLOR_ERRO, gstring );
			format( gstring, 256, "[ x ] %s recusou a arma %s oferecida por você por $%d", PlayerName( playerid ), ArmaNome( compraArm[ playerid ] ), preccArma[ playerid ] );
			SendClientMessage( compraArm[ playerid ], COLOR_ERRO, gstring );
		}
		KillTimer( timerarms[ playerid ] );
	    PlayerTextDrawHide(playerid, _INFO[ playerid ]);
 	   	PlayerTextDrawHide(playerid, _ICONE[ playerid ]);
    	PlayerTextDrawHide(playerid, _MSGFORM[ playerid ]);
	    PlayerTextDrawHide(playerid, _ACEITAR[ playerid ]);
	    PlayerTextDrawHide(playerid, _RECUSAR[ playerid ]);
	    PlayerTextDrawHide(playerid, _MSGTEMPO[ playerid ]);
		CancelSelectTextDraw(playerid);
		compraArm[ playerid ] = -1;
		compraArm[ compraArm[ playerid ] ] = -1;
		preccArma[ playerid ] = -1;
		preccArma[ preccArma[ playerid ] ] = -1;
		armaEscol[ playerid ] = -1;
		armaEscol[ armaEscol[ playerid ] ] = -1;
		temptemp_[ playerid ] = -1;
		return 0;
}

forward tempomsgt( playerid );
public tempomsgt( playerid )
{
	if( temptemp_[ playerid ] <= 0 )
	{
	    KillTimer( timerarms[ playerid ] );
    	PlayerTextDrawHide(playerid, _INFO[ playerid ]);
	    PlayerTextDrawHide(playerid, _ICONE[ playerid ]);
    	PlayerTextDrawHide(playerid, _MSGFORM[ playerid ]);
	    PlayerTextDrawHide(playerid, _ACEITAR[ playerid ]);
	    PlayerTextDrawHide(playerid, _RECUSAR[ playerid ]);
	    PlayerTextDrawHide(playerid, _MSGTEMPO[ playerid ]);
		CancelSelectTextDraw(playerid);
		SendClientMessage( playerid, COLOR_ERRO, "[ x ] Você demorou para responder a oferta de armas !" );
		format( gStr, 128, "[ x ] %s demorou para responder a oferta de armas !", PlayerName( playerid ));
		SendClientMessage( compraArm[ playerid ], COLOR_ERRO, gStr );
		compraArm[ playerid ] = -1;
		compraArm[ compraArm[ playerid ] ] = -1;
		preccArma[ playerid ] = -1;
		preccArma[ preccArma[ playerid ] ] = -1;
		armaEscol[ playerid ] = -1;
		armaEscol[ armaEscol[ playerid ] ] = -1;
        temptemp_[ playerid ] = -1;
	    return 1;
	}
    else if( temptemp_[ playerid ] > 0 )
    {
        temptemp_[ playerid ] --;
		new
		    strTem[ 12 ]
		;
		format( strTem, sizeof( strTem ), "Tempo~n~%d", temptemp_[ playerid ] );
		PlayerTextDrawSetString( playerid, _MSGTEMPO[ playerid ], strTem );
        timerarms[ playerid ] = SetTimerEx( "tempomsgt", 1000, false, "d", playerid );
    }
	return 1;
}

stock spawnPolicia( playerid )
{
    if( pInfo[ playerid ][ Prof ] == POL_CIVIL )
    {
        format( gstring, 256, "{FFFFFF}Olá policial civil {AFED30}%s\n\n{FFFFFF}Deseja dar spawn na delegacia para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6540, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
	else if( pInfo[ playerid ][ Prof ] == POL_MILITAR )
    {
        format( gstring, 256, "{FFFFFF}Olá policial militar {006AD5}%s\n\n{FFFFFF}Deseja dar spawn na delegacia para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6541, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
	else if( pInfo[ playerid ][ Prof ] == BOPE )
    {
        format( gstring, 256, "{FFFFFF}Olá policial da BOPE {6600CC}%s\n\n{FFFFFF}Deseja dar spawn na base da BOPE para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6542, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
	else if( pInfo[ playerid ][ Prof ] == MARINHA )
    {
        format( gstring, 256, "{FFFFFF}Olá policial da Marinha {6600CC}%s\n\n{FFFFFF}Deseja dar spawn na base da Marinha para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6542, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
	else if( pInfo[ playerid ][ Prof ] == POL_RODOVIARIA )
    {
        format( gstring, 256, "{FFFFFF}Olá policial rodoviario {666666}%s\n\n{FFFFFF}Deseja dar spawn na delegacia para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6542, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
	else if( pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO )
    {
        format( gstring, 256, "{FFFFFF}Olá guarda de transito {F4680E}%s\n\n{FFFFFF}Deseja dar spawn na delegacia para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6543, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
	else if( pInfo[ playerid ][ Prof ] == DELEGADO )
    {
        format( gstring, 256, "{FFFFFF}Olá delegado(a) {8080FF}%s\n\n{FFFFFF}Deseja dar spawn na delegacia para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6544, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
	else if( pInfo[ playerid ][ Prof ] == EXERCITO )
    {
        format( gstring, 256, "{FFFFFF}Olá soldado(a) {8080FF}%s\n\n{FFFFFF}Deseja dar spawn na base do Exercito para colocar a farda?", PlayerName( playerid ));
		ShowPlayerDialog( playerid, 6544, DIALOG_STYLE_MSGBOX, "Spawn", gstring, "Sim", "Não" );
    }
}

forward AttProcura( playerid );
public AttProcura( playerid )
{
	if( pInfo[ playerid ][ plocalizando ] < 0 )
	{
	    format( gStr, 128, "[ > ] A procura com GPS à %s foi desligada.", pInfo[ playerid ][ plocalizname ] );
		SendClientMessage( playerid, COLOR_AMARELO, gStr );
		pInfo[ playerid ][ plocalizando ] = -1;
		pInfo[ playerid ][ pproc ] = false;
		format( pInfo[ playerid ][ plocalizname ], 24, "Ninguem" );
		DisablePlayerCheckpoint( playerid );
	    return 1;
	}
    if( pInfo[ playerid ][ plocalizando ] >= 0 )
    {
        new
			id = pInfo[ playerid ][ plocalizando ]
		;
		if( !IsPlayerConnected( id ))
		{
			format( gStr, 128, "[ x ] O(A) jogador(a) %s desconectou-se em perseguição.", pInfo[ playerid ][ plocalizname ] );
			SendClientMessage( playerid, COLOR_ERRO, gStr );
			pInfo[ playerid ][ plocalizando ] = -1;
			pInfo[ playerid ][ pproc ] = false;
			format( pInfo[ playerid ][ plocalizname ], 24, "Ninguem" );
			DisablePlayerCheckpoint( playerid );
			return 1;
		}
		new
			Float:Distance
		;
		Distance = GetDistanceBetweenPlayers( playerid, id );

		new
			Float:X,
			Float:Y,
			Float:Z
		;
		GetPlayerPos( id, X, Y, Z );
		DisablePlayerCheckpoint( playerid );
		SetPlayerCheckpoint( playerid, X, Y, Z, 0.1 );

		new
			zone[ MAX_ZONE_NAME ]
		;
		GetPlayer2DZone( id, zone, MAX_ZONE_NAME );

		if( Distance < 80.0 )
		{
		    if( pInfo[ playerid ][ pproc ] == false )
		    {
		        pInfo[ playerid ][ pproc ] = true;
		    }
			format( gstring, 256, "~n~~n~~n~procurando %s~n~distacia %.1f~n~Local: %s~n~proximo de voce~n~~y~~h~capture-o", PlayerName( id ), Distance, zone );
			GameTextForPlayer( playerid, gstring, 1000, 5 );

		    format( gstring, 256, "~n~~n~~n~Policia~n~%s~n~esta solicitando~n~que voce ~r~~h~pare!", PlayerName( playerid ));
		    GameTextForPlayer( id, gstring, 2000, 5 );
		}
		if( Distance > 100.0 )
		{
			if( pInfo[ playerid ][ pproc ] == true )
		    {
				format( gstring, 256, "~n~~n~~n~Voce esta fugindo de %s~n~da policia~n~~r~~h~melhor parar!", PlayerName( playerid ));
		    	GameTextForPlayer( id, gstring, 2000, 5 );

		    	format( gstring, 256, "~n~~n~~n~%s~n~esta ~r~~h~fugindo~n~~w~distacia %.1f~n~Local: %s", PlayerName( id ), Distance, zone );
				GameTextForPlayer( playerid, gstring, 1000, 5 );

				if( pInfo[ id ][ pproc ] == false )
				{
				    pInfo[ id ][ pproc ] = true;
				}
		    }
		    else
		    {
				format( gstring, 256, "~n~~n~~n~procurando ~y~~h~%s~n~~w~distacia %.1f~n~Local: %s", PlayerName( id ), Distance, zone );
				GameTextForPlayer( playerid, gstring, 1000, 5 );
			}
		}
		SetTimerEx( "AttProcura", 1000, false, "d", playerid );
	}
	return 1;
}

stock getPolicial( playerid )
{
    if( pInfo[ playerid ][ Prof ] == POL_CIVIL || pInfo[ playerid ][ Prof ] == POL_MILITAR || pInfo[ playerid ][ Prof ] == BOPE || pInfo[ playerid ][ Prof ] == GUARDA_TRANSITO || pInfo[ playerid ][ Prof ] == DELEGADO|| pInfo[ playerid ][ Prof ] == EXERCITO || pInfo[ playerid ][ Prof ] == POL_RODOVIARIA || pInfo[ playerid ][ Prof ] == MARINHA ) return true;
    else return false;
}

stock apeIngz( playerid, gzid )
{
	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT )
	{
        if( ZonaAtacada[ gzid ] != -1  )
        {
            if( !strcmp( playerClan[ playerid ], ZoneInfo[ gzid ][ zClan ], true ))
            {
                return  ZonaAtacada[ gzid ] = -1, false;
            }/*&& GetPlayerHealth( playerid, _H ) <= 2.0*/
        }
	}
	return true;
}

stock playerGZtext( playerid )
{
	TGangueZone[ playerid ] = CreatePlayerTextDraw( playerid, 338.000000, 411.000000, "_" );
	PlayerTextDrawAlignment( playerid, TGangueZone[ playerid ], 2 );
	PlayerTextDrawBackgroundColor( playerid, TGangueZone[ playerid ], 255 );
	PlayerTextDrawFont( playerid, TGangueZone[ playerid ], 1 );
	PlayerTextDrawLetterSize( playerid, TGangueZone[ playerid ], 0.420000, 1.300000 );
	PlayerTextDrawColor( playerid, TGangueZone[ playerid ], -1 );
	PlayerTextDrawSetOutline( playerid, TGangueZone[ playerid ], 1 );
	PlayerTextDrawSetProportional( playerid, TGangueZone[ playerid ], 1 );
}

stock salvGZ( gzid )
{
    format( gzfo, sizeof( gzfo ), "GangueZones/%d.ini", gzid );

    if( fexist( gzfo ))
    {
		dini_Set( gzfo, "Dono", ZoneInfo[ gzid ][ aClan ] );
		dini_IntSet( gzfo, "Cor", ZoneInfo[ gzid ][ zCor ][ 0 ] );
	}
}

stock GetPlayersInZone( gzid, nClan[] )
{
    new
		count_m
	;
    foreach(Player, i)
    {
        if( !strcmp( nClan, playerClan[ i ], true ))
        {
            if( IsPlayerInZone( i, gzid ))
            {
                count_m++;
            }
        }
    }
    return count_m;
}

stock GetPlayerZone( playerid )
{
    for( new i = 0; i < sizeof( ZoneInfo ); i++ )
    {
        if( IsPlayerInZone( playerid, i ))
        {
            return i;
        }
    }
    return -1;
}

stock IsPlayerInZone( playerid, zoneid )
{
    new
		Float:x,
		Float:y,
		Float:z
	;
    GetPlayerPos( playerid, x, y, z );
    return ( x > ZoneInfo[ zoneid ][ zMinX ] && x < ZoneInfo[ zoneid ][ zMaxX ] && y > ZoneInfo[ zoneid ][ zMinY ] && y < ZoneInfo[ zoneid ][ zMaxY ] );
}

stock SetZonaCorClan( corid )
{
    switch( corid )
    {
        case 0: return 0xFFFFFFAA;
		case 1: return 0xFF8080FF;
		case 2: return 0xFFFF80FF;
		case 3: return 0x00FF80FF;
		case 4: return 0x80FF80FF;
		case 5: return 0x80FFFFFF;
		case 6: return 0x0080FFFF;
		case 7: return 0xFF80C0FF;
		case 8: return 0xFF80FFFF;
		case 9: return 0xFF0000FF;
		case 10: return 0xFFFF00FF;
		case 11: return 0x80FF00FF;
		case 12: return 0x00FF40FF;
		case 13: return 0x00FFFFFF;
		case 14: return 0x0080C0FF;
		case 15: return 0x8080C0FF;
		case 16: return 0xFF00FFFF;
		case 17: return 0x804040FF;
		case 18: return 0xFF8040FF;
		case 19: return 0x00FF00FF;
		case 20: return 0x008080FF;
		case 21: return 0x004080FF;
		case 22: return 0x8080FFFF;
		case 23: return 0x800040FF;
		case 24: return 0xFF0080FF;
		case 25: return 0x800000FF;
		case 26: return 0xFF8000FF;
		case 27: return 0x008000FF;
		case 28: return 0x008040FF;
		case 29: return 0x0000FFFF;
		case 30: return 0x0000A0FF;
		case 31: return 0x800080FF;
		case 32: return 0x8000FFFF;
		case 33: return 0x400000FF;
		case 34: return 0x804000FF;
		case 35: return 0x004000FF;
		case 36: return 0x004040FF;
		case 37: return 0x000080FF;
		case 38: return 0x400040FF;
		case 39: return 0x400080FF;
		case 40: return 0x808000FF;
		case 41: return 0x808080FF;
		case 42: return 0x408080FF;
		case 43: return 0xC0C0C0FF;
    }
    return 0xFFFFFFAA;
}

stock Gdata()
{
	new
		ano, mes, dia, amd[ 12 ]
	;
	getdate( ano, mes, dia );
	format( amd, 12, "%02d/%02d/%d", dia, mes, ano );
	return amd;
}

stock Ghora()
{
	new
	    hora, minuto, segundo, hms[ 12 ]
	;
	gettime( hora, minuto, segundo );
	format( hms, 12, "%02d:%02d:%d", hora, minuto, segundo );
	return hms;
}

forward Kicka(p); public Kicka(p) {
    #undef Kick
    Kick(p);
    #define Kick(%0) SetTimerEx("Kicka", 100, false, "i", %0)
    return 1;
}

forward Bana(p); public Bana(p) {
    #undef Ban
    Ban(p);
    #define Ban(%0) SetTimerEx("Bana", 100, false, "i", %0)
    return 1;
}

stock msglucrooff( playerid, m )
{
    format( gStr, 128, "Empresas/Empresa%d.ini", m );

	/*if( !strcmp( EmpresaInfo[ m ][ Proprietario ], PlayerName( playerid ), true ))
	{
	    if( dini_Int( gStr, "funcion1" ) == 1 )
	    {
			new
				give_lucro = dini_Int( f( playerid ), "qtdlucro1" ),
				atual_produ = dini_Int( f( playerid ), "atualprod1" ),
				total_produ = dini_Int( gStr, "Producao1" )
			;
			GameTextForPlayer( playerid, "~w~+ ~y~lucro empresa!", 2000, 1 );
			format( gstring, 128, "» %s (seu/sua funcionário(a)) %s retirou o lucro da empresa %s ID %d que você é Dono(a).", EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ Funcionario1 ], EmpresaInfo[ m ][ NomeEmp ], EmpresaInfo[ m ][ Numero ] );
			SendClientMessage( playerid, COLOR_AMARELO, gstring );
			SendClientMessage( playerid, COLOR_AMARELO, "» Funcionário(a) da produção número 1." );
			format( gstring, 128, "» A produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", atual_produ, total_produ );
			SendClientMessage( playerid, COLOR_BRANCO, gstring );
			format( gstring, 128, "» Você recebe {00B900}$%d {FFFFFF}pelas entregas atuais de seu(sua) funcionário(a) %s.", give_lucro, EmpresaInfo[ m ][ Funcionario1 ] );
			SendClientMessage( playerid, COLOR_BRANCO, gstring );
			SendClientMessage( playerid, COLOR_AMARELO, "» A produção número 1 agora está em 0, para lucrar mais o(a) funcinonário(a) deve continuar à trabalhar." );
			sGivePlayerCash( playerid, give_lucro );
		}
	}
	else */
	if( !strcmp( EmpresaInfo[ m ][ Funcionario1 ], PlayerName( playerid ), true ))
	{
		new
			give_lucro = dini_Int( f( playerid ), "qtdlucro" ),
			atual_produ = dini_Int( f( playerid ), "atualprod" ),
			total_produ = dini_Int( gStr, "Producao1" )
		;

		GameTextForPlayer( playerid, "~w~+ ~y~lucro empresa!", 2000, 1 );
		format( gstring, 128, "» %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[ m ][ Funcionario1 ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], m );
		SendClientMessage( playerid, COLOR_AMARELO, gstring );
		format( gstring, 128, "» Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", atual_produ, total_produ );
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		format( gstring, 128, "» Você recebe {00B900}$%d {FFFFFF}pelas suas entregas atuais.", give_lucro );
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		SendClientMessage( playerid, COLOR_AMARELO, "» Sua produção agora está em 0, para lucrar mais volte a trabalhar." );
		sGivePlayerCash( playerid, give_lucro );
	}
	else if( !strcmp( EmpresaInfo[ m ][ Funcionario2 ], PlayerName( playerid ), true ))
	{
		new
			give_lucro = dini_Int( f( playerid ), "qtdlucro" ),
			atual_produ = dini_Int( f( playerid ), "atualprod" ),
			total_produ = dini_Int( gStr, "Producao2" )
		;

		GameTextForPlayer( playerid, "~w~+ ~y~lucro empresa!", 2000, 1 );
		format( gstring, 128, "» %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[ m ][ Funcionario2 ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], m );
		SendClientMessage( playerid, COLOR_AMARELO, gstring );
		format( gstring, 128, "» Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", atual_produ, total_produ );
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		format( gstring, 128, "» Você recebe {00B900}$%d {FFFFFF}pelas suas entregas atuais.", give_lucro );
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		SendClientMessage( playerid, COLOR_AMARELO, "» Sua produção agora está em 0, para lucrar mais volte a trabalhar." );
		sGivePlayerCash( playerid, give_lucro );
	}
	else if( !strcmp( EmpresaInfo[ m ][ Funcionario3 ], PlayerName( playerid ), true ))
	{
		new
			give_lucro = dini_Int( f( playerid ), "qtdlucro" ),
			atual_produ = dini_Int( f( playerid ), "atualprod" ),
			total_produ = dini_Int( gStr, "Producao3" )
		;

		GameTextForPlayer( playerid, "~w~+ ~y~lucro empresa!", 2000, 1 );
		format( gstring, 128, "» %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[ m ][ Funcionario3 ], EmpresaInfo[ m ][ Proprietario ], EmpresaInfo[ m ][ NomeEmp ], m );
		SendClientMessage( playerid, COLOR_AMARELO, gstring );
		format( gstring, 128, "» Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", atual_produ, total_produ );
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		format( gstring, 128, "» Você recebe {00B900}$%d {FFFFFF}pelas suas entregas atuais.", give_lucro );
		SendClientMessage( playerid, COLOR_BRANCO, gstring );
		SendClientMessage( playerid, COLOR_AMARELO, "» Sua produção agora está em 0, para lucrar mais volte a trabalhar." );
		sGivePlayerCash( playerid, give_lucro );
	}
	dini_IntSet( f( playerid ), "atualprod", 0 );
	dini_IntSet( f( playerid ), "msglucro", 0 );
	dini_IntSet( f( playerid ), "qtdlucro", 0 );
}

stock formatSeconds( seconds, &hours_left, &minutes_left, &seconds_left )
{
    hours_left = seconds/60/60;
    minutes_left = ( seconds - hours_left*60*60 )/60;
    seconds_left = ( seconds - hours_left*60*60 - minutes_left*60 );
    return 1;
}

forward rHoraMinuto(InputSec, OutputString[], OutputStringLen);
public rHoraMinuto(InputSec, OutputString[], OutputStringLen)
{
    new
      Days,
      Hours,
      Mins,
      Secs;

    Days = floatround((InputSec / 86400), floatround_floor); // get Days
    Secs = (InputSec - (Days * 86400));// remove days from total seconds
    Hours = floatround((Secs / 3600), floatround_floor); // get Hours
    Secs = (Secs - (Hours * 3600)); // remove Hours from secs
    Mins = floatround((Secs / 60), floatround_floor);// get Mins
    Secs = (Secs - (Mins * 60));// remove Mins from secs, whats left is seconds

	if( Hours > 0 )
	{
		format(OutputString, OutputStringLen, "%i hora e %i minutos.", Hours, Mins );
	}
	else
	{
		format(OutputString, OutputStringLen, "%i minutos.", Mins );
	}
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == skins_binco)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format( gStr, sizeof( gStr ), "[ > ] Comprando Skin • ID: %d • Nome: %s", modelid, GetSkinName( modelid ));
			SendClientMessage( playerid, -1, gStr );
			MensagemFormatada( playerid, -1, "[ > ] Skin • ID: %d • Nome: %s, adquirida !", modelid, GetSkinName( modelid ));
			GameTextForPlayer( playerid, "~y~~h~SKIN ADQUIRIDA!", 3000, 1 );
			SetPlayerSkin( playerid, ( modelid ));
			sGivePlayerCash( playerid, -500 );
			dini_IntSet( gFile, "Skin", ( modelid ));
	    }
    	return 1;
	}
	if(listid == skins_didiersachs)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format( gStr, sizeof( gStr ), "[ > ] Comprando Skin • ID: %d • Nome: %s", modelid, GetSkinName( modelid ));
			SendClientMessage( playerid, -1, gStr );
			MensagemFormatada( playerid, -1, "[ > ] Skin • ID: %d • Nome: %s, adquirida !", modelid, GetSkinName( modelid ));
			GameTextForPlayer( playerid, "~y~~h~SKIN ADQUIRIDA!", 3000, 1 );
			SetPlayerSkin( playerid, ( modelid ));
			sGivePlayerCash( playerid, -500 );
			dini_IntSet( gFile, "Skin", ( modelid ));
	    }
    	return 1;
	}
	if(listid == skins_prolaps)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format( gStr, sizeof( gStr ), "[ > ] Comprando Skin • ID: %d • Nome: %s", modelid, GetSkinName( modelid ));
			SendClientMessage( playerid, -1, gStr );
			MensagemFormatada( playerid, -1, "[ > ] Skin • ID: %d • Nome: %s, adquirida !", modelid, GetSkinName( modelid ));
			GameTextForPlayer( playerid, "~y~~h~SKIN ADQUIRIDA!", 3000, 1 );
			SetPlayerSkin( playerid, ( modelid ));
			sGivePlayerCash( playerid, -500 );
			dini_IntSet( gFile, "Skin", ( modelid ));
	    }
    	return 1;
	}
	if(listid == skins_suburban)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format( gStr, sizeof( gStr ), "[ > ] Comprando Skin • ID: %d • Nome: %s", modelid, GetSkinName( modelid ));
			SendClientMessage( playerid, -1, gStr );
			MensagemFormatada( playerid, -1, "[ > ] Skin • ID: %d • Nome: %s, adquirida !", modelid, GetSkinName( modelid ));
			GameTextForPlayer( playerid, "~y~~h~SKIN ADQUIRIDA!", 3000, 1 );
			SetPlayerSkin( playerid, ( modelid ));
			sGivePlayerCash( playerid, -500 );
			dini_IntSet( gFile, "Skin", ( modelid ));
	    }
    	return 1;
	}
	if(listid == skins_victim)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format( gStr, sizeof( gStr ), "[ > ] Comprando Skin • ID: %d • Nome: %s", modelid, GetSkinName( modelid ));
			SendClientMessage( playerid, -1, gStr );
			MensagemFormatada( playerid, -1, "[ > ] Skin • ID: %d • Nome: %s, adquirida !", modelid, GetSkinName( modelid ));
			GameTextForPlayer( playerid, "~y~~h~SKIN ADQUIRIDA!", 3000, 1 );
			SetPlayerSkin( playerid, ( modelid ));
			sGivePlayerCash( playerid, -500 );
			dini_IntSet( gFile, "Skin", ( modelid ));
	    }
    	return 1;
	}
	if(listid == skins_zip)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format( gStr, sizeof( gStr ), "[ > ] Comprando Skin • ID: %d • Nome: %s", modelid, GetSkinName( modelid ));
			SendClientMessage( playerid, -1, gStr );
			MensagemFormatada( playerid, -1, "[ > ] Skin • ID: %d • Nome: %s, adquirida !", modelid, GetSkinName( modelid ));
			GameTextForPlayer( playerid, "~y~~h~SKIN ADQUIRIDA!", 3000, 1 );
			SetPlayerSkin( playerid, ( modelid ));
			sGivePlayerCash( playerid, -500 );
			dini_IntSet( gFile, "Skin", ( modelid ));
	    }
    	return 1;
	}
	if(listid == skins_vip)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format( gStr, sizeof( gStr ), "[ > ] Comprando Skin • ID: %d • Nome: %s", modelid, GetSkinName( modelid ));
			SendClientMessage( playerid, -1, gStr );
			MensagemFormatada( playerid, -1, "[ > ] Skin • ID: %d • Nome: %s, adquirida !", modelid, GetSkinName( modelid ));
			GameTextForPlayer( playerid, "~y~~h~SKIN ADQUIRIDA!", 3000, 1 );
			SetPlayerSkin( playerid, ( modelid ));
			sGivePlayerCash( playerid, -500 );
			dini_IntSet( gFile, "Skin", ( modelid ));
	    }
    	return 1;
	}
	return 1;
}
//fim
